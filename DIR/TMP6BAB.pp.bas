

#inclib "fbgfx"
#inclib "gdi32"
#inclib "winmm"
#inclib "user32"


namespace FB

 const as integer GFX_NULL = -1 , GFX_WINDOWED = &h000 , GFX_FULLSCREEN = &h01 , GFX_OPENGL = &h02 , GFX_NO_SWITCH = &h04 , GFX_NO_FRAME = &h08 , GFX_SHAPED_WINDOW = &h10 , GFX_ALWAYS_ON_TOP = &h20 , GFX_ALPHA_PRIMITIVES = &h40 , GFX_HIGH_PRIORITY = &h80
 const as integer GFX_STENCIL_BUFFER = &h10000 , GFX_ACCUMULATION_BUFFER = &h20000 , GFX_MULTISAMPLE = &h40000

 const as integer OGL_2D_NONE = 0, OGL_2D_MANUAL_SYNC = 1, OGL_2D_AUTO_SYNC = 2

 const as integer GET_WINDOW_POS = 0 , GET_WINDOW_TITLE = 1 , GET_WINDOW_HANDLE = 2 , GET_DESKTOP_SIZE = 3 , GET_SCREEN_SIZE = 4 , GET_SCREEN_DEPTH = 5 , GET_SCREEN_BPP = 6 , GET_SCREEN_PITCH = 7 , GET_SCREEN_REFRESH = 8 , GET_DRIVER_NAME = 9 , GET_TRANSPARENT_COLOR = 10 , GET_VIEWPORT = 11 , GET_PEN_POS = 12 , GET_COLOR = 13 , GET_ALPHA_PRIMITIVES = 14 , GET_GL_EXTENSIONS = 15 , GET_HIGH_PRIORITY = 16
 const as integer SET_WINDOW_POS = 100 , SET_WINDOW_TITLE = 101 , SET_PEN_POS = 102 , SET_DRIVER_NAME = 103 , SET_ALPHA_PRIMITIVES = 104 , SET_GL_COLOR_BITS = 105 , SET_GL_COLOR_RED_BITS = 106 , SET_GL_COLOR_GREEN_BITS = 107 , SET_GL_COLOR_BLUE_BITS = 108 , SET_GL_COLOR_ALPHA_BITS = 109 , SET_GL_DEPTH_BITS = 110 , SET_GL_STENCIL_BITS = 111 , SET_GL_ACCUM_BITS = 112 , SET_GL_ACCUM_RED_BITS = 113 , SET_GL_ACCUM_GREEN_BITS = 114 , SET_GL_ACCUM_BLUE_BITS = 115 , SET_GL_ACCUM_ALPHA_BITS = 116 , SET_GL_NUM_SAMPLES = 117 , SET_GL_2D_MODE = 150 , SET_GL_SCALE = 151
 const as integer POLL_EVENTS = 200


 const as integer MASK_COLOR_INDEX = 0, MASK_COLOR = &hFF00FF


 const as integer EVENT_KEY_PRESS = 1 , EVENT_KEY_RELEASE = 2 , EVENT_KEY_REPEAT = 3 , EVENT_MOUSE_MOVE = 4 , EVENT_MOUSE_BUTTON_PRESS = 5 , EVENT_MOUSE_BUTTON_RELEASE = 6 , EVENT_MOUSE_DOUBLE_CLICK = 7 , EVENT_MOUSE_WHEEL = 8 , EVENT_MOUSE_ENTER = 9 , EVENT_MOUSE_EXIT = 10 , EVENT_WINDOW_GOT_FOCUS = 11 , EVENT_WINDOW_LOST_FOCUS = 12 , EVENT_WINDOW_CLOSE = 13 , EVENT_MOUSE_HWHEEL = 14


 type EVENT field = 1
 type as long
 union
 type
 scancode as long
 ascii as long
 end type
 type
 x as long
 y as long
 dx as long
 dy as long
 end type
 button as long
 z as long
 w as long
 end union
 end type


 type _OLD_HEADER field = 1
 bpp : 3 as ushort
 width : 13 as ushort
 height as ushort
 end type


 type IMAGE field = 1
 union
 old as _OLD_HEADER
 type as ulong
 end union
 bpp as long
 width as ulong
 height as ulong
 pitch as ulong
 _reserved(1 to 12) as ubyte

 end type


 type PUT_HEADER as IMAGE


 const as integer PUT_HEADER_NEW = &h7


 const as integer BUTTON_LEFT = &h1 , BUTTON_RIGHT = &h2 , BUTTON_MIDDLE = &h4 , BUTTON_X1 = &h8 , BUTTON_X2 = &h10


 enum
 SC_ESCAPE = &h01
 SC_1
 SC_2
 SC_3
 SC_4
 SC_5
 SC_6
 SC_7
 SC_8
 SC_9
 SC_0
 SC_MINUS
 SC_EQUALS
 SC_BACKSPACE
 SC_TAB
 SC_Q
 SC_W
 SC_E
 SC_R
 SC_T
 SC_Y
 SC_U
 SC_I
 SC_O
 SC_P
 SC_LEFTBRACKET
 SC_RIGHTBRACKET
 SC_ENTER
 SC_CONTROL
 SC_A
 SC_S
 SC_D
 SC_F
 SC_G
 SC_H
 SC_J
 SC_K
 SC_L
 SC_SEMICOLON
 SC_QUOTE
 SC_TILDE
 SC_LSHIFT
 SC_BACKSLASH
 SC_Z
 SC_X
 SC_C
 SC_V
 SC_B
 SC_N
 SC_M
 SC_COMMA
 SC_PERIOD
 SC_SLASH
 SC_RSHIFT
 SC_MULTIPLY
 SC_ALT
 SC_SPACE
 SC_CAPSLOCK
 SC_F1
 SC_F2
 SC_F3
 SC_F4
 SC_F5
 SC_F6
 SC_F7
 SC_F8
 SC_F9
 SC_F10
 SC_NUMLOCK
 SC_SCROLLLOCK
 SC_HOME
 SC_UP
 SC_PAGEUP
 SC_LEFT = &h4B
 SC_CLEAR
 SC_RIGHT
 SC_PLUS
 SC_END
 SC_DOWN
 SC_PAGEDOWN
 SC_INSERT
 SC_DELETE
 SC_F11 = &h57
 SC_F12
 SC_LWIN = &h5B
 SC_RWIN
 SC_MENU
 SC_ALTGR = &h64
 end enum

end namespace


namespace dodifont
 declare Function Filter(Byref tim As Ulong Pointer,Byval rad As Single,Byval destroy As Long=1,Byval fade As Long=0) As Ulong Pointer
 declare Sub drawstring(Byval xpos As Long,Byval ypos As Long,Byref text As String,Byval co As Ulong,Byval size As Single,Byref im As Any Pointer=0)
 declare Function Colour(Byref im As Any Pointer,Byval newcol As Ulong,Byval tweak As Long,Byval fontsize As Single) As Any Pointer
 declare Sub _CreateFont(Byref myfont As Any Pointer,Byval fontsize As Single,Byval col As Ulong,Byval tweak As Long=0)
 Sub init Constructor
 drawstring(0,0,"",0,0)
 Screen 0
 End Sub
end namespace
using dodifont

dodicatfontmanagement:
 Function Filter(Byref tim As Ulong Pointer, Byval rad As Single, Byval destroy As Long=1, Byval fade As Long=0) As Ulong Pointer
 If fade<0 Then fade=0:If fade>100 Then fade=100
 Type p2 : As Long x,y : As Ulong col : End Type
 Dim As Single fd= ((0)-(1))*((fade)-(0))/((100)-(0))+(1) : Dim As Integer _x,_y : Imageinfo tim,_x,_y
 Dim As Ulong Pointer im=Imagecreate(_x,_y) : Dim As Integer pitch : Dim As Any Pointer row
 Dim As Ulong Pointer pixel : Dim As Ulong col : Imageinfo tim,,,,pitch,row : Dim As p2 NewPoints(_x-1,_y-1)
 For y As Long=0 To (_y)-1 : For x As Long=0 To (_x)-1 : pixel=row+pitch*(y)+(x)*4
 (col)=*pixel
 NewPoints(x,y)=Type<p2>(x,y,col) : Next x : Next y : Dim As Ulong averagecolour
 Dim As Long ar,ag,ab : Dim As Long xmin,xmax,ymin,ymax,inc : Imageinfo im,,,,pitch,row
 For y As Long=0 To _y-1 : For x As Long=0 To _x-1 : ar=0:ag=0:ab=0:inc=0 : xmin=x:If xmin>rad Then xmin=rad
 xmax=rad:If x>=(_x-1-rad) Then xmax=_x-1-x
 ymin=y:If ymin>rad Then ymin=rad
 ymax=rad:If y>=(_y-1-rad) Then ymax=_y-1-y
 For y1 As Long=-ymin To ymax : For x1 As Long=-xmin To xmax
 inc=inc+1 : ar=ar+(NewPoints(x+x1,y+y1).col Shr 16 And 255)
 ag=ag+(NewPoints(x+x1,y+y1).col Shr 8 And 255)
 ab=ab+(NewPoints(x+x1,y+y1).col And 255) : Next x1
 Next y1 : If fade=0 Then
 averagecolour= ((cuint(ar/(inc)) shl 16) or (cuint(ag/(inc)) shl 8) or cuint(ab/(inc)) or &hFF000000)
 Else
 averagecolour= ((cuint(fd*ar/(inc)) shl 16) or (cuint(fd*ag/(inc)) shl 8) or cuint(fd*ab/(inc)) or &hFF000000)
 End If : pixel=row+pitch*((NewPoints(x,y).y))+((NewPoints(x,y).x))*4 : *pixel=(averagecolour)
 Next x : Next y : If destroy Then Imagedestroy tim: tim = 0
 Function= im
 End Function
 Sub drawstring(Byval xpos As Long,Byval ypos As Long,Byref text As String,Byval co As Ulong,Byval size As Single,Byref im As Any Pointer=0)
 Type D2
 As Double x,y
 As Ulong col
 End Type
 size=Abs(size) : Static As d2 XY() : Static As Long runflag
 If runflag=0 Then
 Redim XY(128,127): Screen 8 : Width 640\8,200\16 : Dim As Ulong Pointer img
 Dim count As Long : For ch As Long=1 To 127 : img=Imagecreate(9,17) : Draw String img,(1,1),Chr(ch)
 For x As Long=1 To 8 : For y As Long=1 To 16 : If Point(x,y,img)<>0 Then
 count=count+1
 XY(count,ch)=Type<D2>(x,y)
 End If : Next y : Next x : count=0 : Imagedestroy img : Next ch
 runflag=1 : End If
 If size=0 Then Exit Sub
 Dim As D2 np,t
 Dim As D2 c=Type<D2>(xpos,ypos) : Dim As Long dx=xpos,dy=ypos,f
 If Abs(size)=1.5 Then f=3 Else f=2
 For z6 As Long=1 To Len(text)
 Var asci=text[z6-1] : For _x1 As Long=1 To 64*2
 t=Type<D2>(XY(_x1,asci).x+dx,XY(_x1,asci).y+dy,co)
 np.col=t.col
 np.x=size*(t.x-c.x)+c.x
 np.y=size*(t.y-c.y)+c.y
 If XY(_x1,asci).x<>0 Then
 If size>1 Then
 Line im,(np.x-size/f,np.y-size/f)-(np.x+size/f,np.y+size/f),np.col,bf
 Else
 Pset im,(np.x,np.y),np.col
 End If : End If : Next _x1
 dx=dx+8 : Next z6: End Sub
 Function Colour(Byref im As Any Pointer,Byval newcol As Ulong,Byval tweak As Long,Byval fontsize As Single) As Any Pointer
 Dim As Long grade : Select Case fontsize
 Case 1 To 1.5:grade=205
 Case 2 :grade=225
 Case 2.5:grade=222
 Case 3 To 3.5:grade=200
 Case 4 To 4.5:grade=190
 Case 5 To 5.5:grade=165
 Case Else: grade=160
 End Select
 Dim As Integer w,h : Dim As Integer pitch,pitch2,dpp,dpp2 : Dim As Any Pointer row,row2 : Dim As Ulong Pointer pixel,pixel2
 Dim As Ulong col : Imageinfo im,w,h,dpp,pitch,row : Dim As Any Pointer temp=Imagecreate(w,h)
 Imageinfo temp,,,dpp2,pitch2,row2 : For y As Long=0 To h-1
 For x As Long=0 To w-1 : pixel=row+pitch*(y)+(x)*dpp
 (col)=*pixel : Var v=.299*((col Shr 16)And 255)+.587*((col Shr 8)And 255)+.114*(col And 255)
 If v>(grade+tweak) Then
 pixel2=row2+pitch2*(y)+(x)*dpp2
 *pixel2=(newcol)
 Else
 pixel2=row2+pitch2*(y)+(x)*dpp2
 *pixel2=(((cuint(255) shl 16) or (cuint(0) shl 8) or cuint(255) or &hFF000000))
 End If : Next x : Next y : Return temp
 End Function
 Sub _CreateFont(Byref myfont As Any Pointer,Byval fontsize As Single,Byval col As Ulong,Byval tweak As Long=0)
 fontsize=Int(2*Abs(fontsize))/2 : If fontsize=0 Then fontsize=.5
 Dim As Ubyte Ptr p : Dim As Any Pointer temp
 Dim As Integer i : temp = Imagecreate(FontSize*768,FontSize*16) : myfont=Imagecreate(FontSize*768,FontSize*16)
 For i = 32 To 127 : drawstring ((i-32)*FontSize*8,1,Chr(i), ((cuint(255) shl 16) or (cuint(255) shl 8) or cuint(255) or &hFF000000),FontSize,temp)
 Next i : If fontsize>1.5 Then
 For n As Single=0 To fontsize-2:temp=filter(temp,1,1,0):Next
 End If : temp=Colour(temp,col,tweak,fontsize) : Put myfont,(0,0),temp,trans : Imageinfo( myfont,i,,,, p )
 p[0]=0:p[1]=32:p[2]=127 : For i = 32 To 127 : p[3+i-32]=FontSize*8 : Next i : Imagedestroy(temp)
 End Sub

? "dodicat's fonts inside..."

dim shared as fb.IMAGE ptr titlepic, biohazardpic, hangarPic, quitPic
dim shared as fb.IMAGE ptr biopic, biolitpic, pilotpic, labcrewpic, biodarkpic, fxm, dkl, cod, cpi, stw
dim shared as fb.IMAGE ptr lockedpanpic, modulepic, pickerpic, pickerbackpic, labsceneImg, lockeddoorpic
dim shared as any ptr starter, starter2, starter3, starter4

 ? "running Landeel's DPI awareness system..."



type va_list as any ptr





extern "C"

const MINGW_HAS_SECURE_API = 1
const __MINGW64_VERSION_MAJOR = 4
const __MINGW64_VERSION_MINOR = 0
const __MINGW64_VERSION_RC = 0
const __MINGW32_MAJOR_VERSION = 3
const __MINGW32_MINOR_VERSION = 11


const __MINGW_USE_UNDERSCORE_PREFIX = 1
const __MINGW_HAVE_ANSI_C99_PRINTF = 1
const __MINGW_HAVE_WIDE_C99_PRINTF = 1
const __MINGW_HAVE_ANSI_C99_SCANF = 1
const __MINGW_HAVE_WIDE_C99_SCANF = 1
type __LONG32 as long
const __USE_CRTIMP = 1
const USE___UUIDOF = 0
const __MSVCRT_VERSION__ = &h0700
 const _WIN32_WINNT = &h0502
 const WINVER = _WIN32_WINNT

type __int8 as byte
type __int16 as short
type __int32 as long
type __int64 as longint

const __STDC_SECURE_LIB__ = 200411
const __GOT_SECURE_LIB__ = __STDC_SECURE_LIB__
const __MINGW_HAS_DXSDK = 1
const MINGW_HAS_DDRAW_H = 1
const MINGW_DDRAW_VERSION = 7
const MINGW_HAS_DDK_H = 1
const _SECURECRT_FILL_BUFFER_PATTERN = &hFD
const _ARGMAX = 100
const _TRUNCATE = cuint(-1)
declare function __mingw_get_crt_info() as const zstring ptr

end extern


const WINAPI_PARTITION_DESKTOP = &h1
const WINAPI_PARTITION_APP = &h2
const WINAPI_FAMILY_APP = WINAPI_PARTITION_APP
const WINAPI_FAMILY_DESKTOP_APP = WINAPI_PARTITION_DESKTOP or WINAPI_PARTITION_APP
const WINAPI_FAMILY = WINAPI_FAMILY_DESKTOP_APP


extern "Windows"


type PULONG as ULONG ptr
type PUSHORT as USHORT ptr
type UCHAR as ubyte
type PUCHAR as UCHAR ptr
type PSZ as zstring ptr

const MAX_PATH = 260
 const NULL = 0
 const CTRUE = 1

type WINBOOL as long
type BOOL as long
type PBOOL as WINBOOL ptr
type LPBOOL as WINBOOL ptr
type WORD as ushort
type DWORD as ulong
type FLOAT as single
type PFLOAT as FLOAT ptr
type PBYTE as UBYTE ptr
type LPBYTE as UBYTE ptr
type PINT as long ptr
type LPINT as long ptr
type PWORD as WORD ptr
type LPWORD as WORD ptr
type LPLONG as long ptr
type PDWORD as DWORD ptr
type LPDWORD as DWORD ptr
type LPVOID as any ptr
type LPCVOID as const any ptr
type INT_ as long
type UINT as ulong
type PUINT as ulong ptr
type WPARAM as UINT_PTR
type LPARAM as LONG_PTR
type LRESULT as LONG_PTR


type SPHANDLE as HANDLE ptr
type LPHANDLE as HANDLE ptr
type HGLOBAL as HANDLE
type HLOCAL as HANDLE
type GLOBALHANDLE as HANDLE
type LOCALHANDLE as HANDLE

end extern






 type POINTER_64_INT as ulong


type INT8 as byte
type PINT8 as byte ptr
type INT16 as short
type PINT16 as short ptr
type INT32 as long
type PINT32 as long ptr
type INT64 as longint
type PINT64 as longint ptr
type UINT8 as ubyte
type PUINT8 as ubyte ptr
type UINT16 as ushort
type PUINT16 as ushort ptr
type UINT32 as ulong
type PUINT32 as ulong ptr
type UINT64 as ulongint
type PUINT64 as ulongint ptr
type LONG32 as long
type PLONG32 as long ptr
type ULONG32 as ulong
type PULONG32 as ulong ptr
type DWORD32 as ulong
type PDWORD32 as ulong ptr

 type INT_PTR as long
 type PINT_PTR as long ptr
 type UINT_PTR as ulong
 type PUINT_PTR as ulong ptr
 type LONG_PTR as long
 type PLONG_PTR as long ptr
 type ULONG_PTR as ulong
 type PULONG_PTR as ulong ptr
 type __int3264 as long
 const ADDRESS_TAG_BIT = &h80000000
 type UHALF_PTR as ushort
 type PUHALF_PTR as ushort ptr
 type HALF_PTR as short
 type PHALF_PTR as short ptr
 type SHANDLE_PTR as long
 type HANDLE_PTR as ulong


const MAXUINT_PTR = not cast(UINT_PTR, 0)
const MAXINT_PTR = cast(INT_PTR, MAXUINT_PTR shr 1)
const MININT_PTR = not MAXINT_PTR
const MAXULONG_PTR = not cast(ULONG_PTR, 0)
const MAXLONG_PTR = cast(LONG_PTR, MAXULONG_PTR shr 1)
const MINLONG_PTR = not MAXLONG_PTR
const MAXUHALF_PTR = cast(UHALF_PTR, not 0)
const MAXHALF_PTR = cast(HALF_PTR, MAXUHALF_PTR shr 1)
const MINHALF_PTR = not MAXHALF_PTR

type SIZE_T_ as ULONG_PTR
type PSIZE_T as ULONG_PTR ptr
type SSIZE_T_ as LONG_PTR
type PSSIZE_T as LONG_PTR ptr


type DWORD_PTR as ULONG_PTR
type PDWORD_PTR as ULONG_PTR ptr
type LONG64 as longint
type PLONG64 as longint ptr
type ULONG64 as ulongint
type PULONG64 as ulongint ptr
type DWORD64 as ulongint
type PDWORD64 as ulongint ptr
type KAFFINITY as ULONG_PTR
type PKAFFINITY as KAFFINITY ptr

extern "Windows"

 type FARPROC as function() as long
 type NEARPROC as function() as long
 type PROC as function() as long

type ATOM as WORD
type HFILE as long

type HINSTANCE__
 unused as long
end type

type HINSTANCE as HINSTANCE__ ptr

type HKEY__
 unused as long
end type

type HKEY as HKEY__ ptr
type PHKEY as HKEY ptr

type HKL__
 unused as long
end type

type HKL as HKL__ ptr

type HLSURF__
 unused as long
end type

type HLSURF as HLSURF__ ptr

type HMETAFILE__
 unused as long
end type

type HMETAFILE as HMETAFILE__ ptr
type HMODULE as HINSTANCE

type HRGN__
 unused as long
end type

type HRGN as HRGN__ ptr

type HRSRC__
 unused as long
end type

type HRSRC as HRSRC__ ptr

type HSPRITE__
 unused as long
end type

type HSPRITE as HSPRITE__ ptr

type HSTR__
 unused as long
end type

type HSTR as HSTR__ ptr

type HTASK__
 unused as long
end type

type HTASK as HTASK__ ptr

type HWINSTA__
 unused as long
end type

type HWINSTA as HWINSTA__ ptr

type _FILETIME
 dwLowDateTime as DWORD
 dwHighDateTime as DWORD
end type

type FILETIME as _FILETIME
type PFILETIME as _FILETIME ptr
type LPFILETIME as _FILETIME ptr

type HWND__
 unused as long
end type

type HWND as HWND__ ptr

type HHOOK__
 unused as long
end type

type HHOOK as HHOOK__ ptr
type HGDIOBJ as any ptr

type HACCEL__
 unused as long
end type

type HACCEL as HACCEL__ ptr

type HBITMAP__
 unused as long
end type

type HBITMAP as HBITMAP__ ptr

type HBRUSH__
 unused as long
end type

type HBRUSH as HBRUSH__ ptr

type HCOLORSPACE__
 unused as long
end type

type HCOLORSPACE as HCOLORSPACE__ ptr

type HDC__
 unused as long
end type

type HDC as HDC__ ptr

type HGLRC__
 unused as long
end type

type HGLRC as HGLRC__ ptr

type HDESK__
 unused as long
end type

type HDESK as HDESK__ ptr

type HENHMETAFILE__
 unused as long
end type

type HENHMETAFILE as HENHMETAFILE__ ptr

type HFONT__
 unused as long
end type

type HFONT as HFONT__ ptr

type HICON__
 unused as long
end type

type HICON as HICON__ ptr

type HMENU__
 unused as long
end type

type HMENU as HMENU__ ptr

type HPALETTE__
 unused as long
end type

type HPALETTE as HPALETTE__ ptr

type HPEN__
 unused as long
end type

type HPEN as HPEN__ ptr

type HMONITOR__
 unused as long
end type

type HMONITOR as HMONITOR__ ptr

type HWINEVENTHOOK__
 unused as long
end type

type HWINEVENTHOOK as HWINEVENTHOOK__ ptr
type HCURSOR as HICON
type COLORREF as DWORD

type HUMPD__
 unused as long
end type

type HUMPD as HUMPD__ ptr
type LPCOLORREF as DWORD ptr
const HFILE_ERROR = cast(HFILE, -1)

type tagRECT
 left as LONG
 top as LONG
 right as LONG
 bottom as LONG
end type

type RECT as tagRECT
type PRECT as tagRECT ptr
type NPRECT as tagRECT ptr
type LPRECT as tagRECT ptr
type LPCRECT as const RECT ptr

type _RECTL
 left as LONG
 top as LONG
 right as LONG
 bottom as LONG
end type

type RECTL as _RECTL
type PRECTL as _RECTL ptr
type LPRECTL as _RECTL ptr
type LPCRECTL as const RECTL ptr

type tagPOINT
 x as LONG
 y as LONG
end type

type POINT as tagPOINT
type PPOINT as tagPOINT ptr
type NPPOINT as tagPOINT ptr
type LPPOINT as tagPOINT ptr

type _POINTL
 x as LONG
 y as LONG
end type

type POINTL as _POINTL
type PPOINTL as _POINTL ptr

type tagSIZE
 cx as LONG
 cy as LONG
end type

type SIZE as tagSIZE
type PSIZE as tagSIZE ptr
type LPSIZE as tagSIZE ptr
type SIZEL as SIZE
type PSIZEL as SIZE ptr
type LPSIZEL as SIZE ptr

type tagPOINTS
 x as SHORT
 y as SHORT
end type

type POINTS as tagPOINTS
type PPOINTS as tagPOINTS ptr
type LPPOINTS as tagPOINTS ptr

const DM_UPDATE = 1
const DM_COPY = 2
const DM_PROMPT = 4
const DM_MODIFY = 8
const DC_FIELDS = 1
const DC_PAPERS = 2
const DC_PAPERSIZE = 3
const DC_MINEXTENT = 4
const DC_MAXEXTENT = 5
const DC_BINS = 6
const DC_DUPLEX = 7
const DC_SIZE = 8
const DC_EXTRA = 9
const DC_VERSION = 10
const DC_DRIVER = 11
const DC_BINNAMES = 12
const DC_ENUMRESOLUTIONS = 13
const DC_FILEDEPENDENCIES = 14
const DC_TRUETYPE = 15
const DC_PAPERNAMES = 16
const DC_ORIENTATION = 17
const DC_COPIES = 18

end extern





type ptrdiff_t as integer

 type size_t as uinteger
 type ssize_t as integer

 type wchar_t as ushort

type wint_t as wchar_t



extern "C"

declare function memchr (byval as const any ptr, byval as long, byval as size_t) as any ptr
declare function memcmp (byval as const any ptr, byval as const any ptr, byval as size_t) as long
declare function memcpy (byval as any ptr, byval as const any ptr, byval as size_t) as any ptr
declare function memmove (byval as any ptr, byval as const any ptr, byval as size_t) as any ptr
declare function memset (byval as any ptr, byval as long, byval as size_t) as any ptr

end extern


 const _INC_CRT_UNICODE_MACROS = 2




type wctype_t as wchar_t

extern "c"
declare function iswalnum (byval as wint_t) as long
declare function iswalpha (byval as wint_t) as long
declare function iswascii (byval as wint_t) as long
declare function iswcntrl (byval as wint_t) as long
declare function iswctype (byval as wint_t, byval as wctype_t) as long
declare function is_wctype (byval as wint_t, byval as wctype_t) as long
declare function iswdigit (byval as wint_t) as long
declare function iswgraph (byval as wint_t) as long
declare function iswlower (byval as wint_t) as long
declare function iswprint (byval as wint_t) as long
declare function iswpunct (byval as wint_t) as long
declare function iswspace (byval as wint_t) as long
declare function iswupper (byval as wint_t) as long
declare function iswxdigit (byval as wint_t) as long
declare function towlower (byval as wchar_t) as wchar_t
declare function towupper (byval as wchar_t) as wchar_t
declare function isleadbyte (byval as long) as long
declare function _isctype (byval as long, byval as long) as long
declare function _tolower (byval as long) as long
declare function _toupper (byval as long) as long
declare function __isascii (byval as long) as long
declare function __toascii (byval as long) as long
declare function __iscsymf (byval as long) as long
declare function __iscsym (byval as long) as long
end extern

extern import _ctype alias "_ctype" as ushort ptr ptr
extern import _pctype alias "_pctype" as ushort ptr ptr


extern "C"

declare function isalnum (byval as long) as long
declare function isalpha (byval as long) as long
declare function iscntrl (byval as long) as long
declare function isdigit (byval as long) as long
declare function isgraph (byval as long) as long
declare function islower (byval as long) as long
declare function isprint (byval as long) as long
declare function ispunct (byval as long) as long
declare function isspace (byval as long) as long
declare function isupper (byval as long) as long
declare function isxdigit (byval as long) as long
declare function tolower (byval as long) as long
declare function toupper (byval as long) as long
declare function isascii (byval as long) as long
declare function toascii (byval as long) as long

end extern




const API_SET_SCHEMA_VERSION = 2
const API_SET_LOAD_SCHEMA_ORDINAL = 1
const API_SET_LOOKUP_ORDINAL = 2
const API_SET_RELEASE_SCHEMA_ORDINAL = 3








enum
 __LC_CTYPE = 0
 __LC_NUMERIC = 1
 __LC_TIME = 2
 __LC_COLLATE = 3
 __LC_MONETARY = 4
 __LC_MESSAGES = 5
 __LC_ALL = 6
 __LC_PAPER = 7
 __LC_NAME = 8
 __LC_ADDRESS = 9
 __LC_TELEPHONE = 10
 __LC_MEASUREMENT = 11
 __LC_IDENTIFICATION = 12
end enum




type lconv

 decimal_point as zstring ptr
 thousands_sep as zstring ptr
 grouping as zstring ptr


 int_curr_symbol as zstring ptr
 currency_symbol as zstring ptr
 mon_decimal_point as zstring ptr
 mon_thousands_sep as zstring ptr
 mon_grouping as zstring ptr
 positive_sign as zstring ptr
 negative_sign as zstring ptr
 int_frac_digits as ubyte
 frac_digits as ubyte
 p_cs_precedes as ubyte
 p_sep_by_space as ubyte
 n_cs_precedes as ubyte
 n_sep_by_space as ubyte
 p_sign_posn as ubyte
 n_sign_posn as ubyte
 int_p_cs_precedes as ubyte
 int_p_sep_by_space as ubyte
 int_n_cs_precedes as ubyte
 int_n_sep_by_space as ubyte
 int_p_sign_posn as ubyte
 int_n_sign_posn as ubyte
end type

extern "C"

declare function setlocale (byval __category as long, byval __locale as const zstring ptr) as zstring ptr

declare function localeconv () as lconv ptr

end extern



type rsize_t as uinteger

type pthreadlocinfo as threadlocaleinfostruct ptr
type pthreadmbcinfo as threadmbcinfostruct ptr

type localeinfo_struct
 locinfo as pthreadlocinfo
 mbcinfo as pthreadmbcinfo
end type

type _locale_tstruct as localeinfo_struct
type _locale_t as localeinfo_struct ptr

type tagLC_ID
 wLanguage as ushort
 wCountry as ushort
 wCodePage as ushort
end type

type LC_ID as tagLC_ID
type LPLC_ID as tagLC_ID ptr

type threadlocaleinfostruct_lc_category
 locale as zstring ptr
 wlocale as wstring ptr
 refcount as long ptr
 wrefcount as long ptr
end type

type __lc_time_data as __lc_time_data_

type threadlocaleinfostruct
 refcount as long
 lc_codepage as ulong
 lc_collate_cp as ulong
 lc_handle(0 to 5) as ulong
 lc_id(0 to 5) as LC_ID
 lc_category(0 to 5) as threadlocaleinfostruct_lc_category
 lc_clike as long
 mb_cur_max as long
 lconv_intl_refcount as long ptr
 lconv_num_refcount as long ptr
 lconv_mon_refcount as long ptr
 lconv as lconv ptr
 ctype1_refcount as long ptr
 ctype1 as ushort ptr
 pctype as const ushort ptr
 pclmap as const ubyte ptr
 pcumap as const ubyte ptr
 lc_time_curr as __lc_time_data ptr
end type

type threadlocinfo as threadlocaleinfostruct



 type jmp_buf
 __opaque(0 to 16-1) as long
 end type


extern "C"

declare function setjmp alias "_setjmp" (byval as jmp_buf ptr) as long

declare sub longjmp (byval as jmp_buf ptr, byval as long)

end extern



 type clong as long
 type culong as ulong




extern "c"
extern import _argc alias "_argc" as long
extern import _argv alias "_argv" as byte ptr ptr
extern import __mbcur_max alias "__mbcur_max" as long ptr
extern import __sys_nerr alias "_sys_nerr" as long ptr
extern import sys_errlist alias "sys_errlist" as byte ptr ptr ptr
extern import _fmode alias "_fmode" as long ptr

type _onexit_t as function() as long

declare function __p___argc () as long ptr
declare function __p___argv () as byte ptr ptr ptr
declare function __p___wargv () as wchar_t ptr ptr ptr
declare function __doserrno () as culong ptr
declare function __p__environ () as byte ptr ptr ptr
declare function __p__wenviron () as wchar_t ptr ptr ptr
declare function __p__osver () as uinteger ptr
declare function __p__winver () as uinteger ptr
declare function __p__winmajor () as uinteger ptr
declare function __p__winminor () as uinteger ptr
declare function __p__pgmptr () as byte ptr ptr
declare function __p__wpgmptr () as wchar_t ptr ptr
declare function _wtoi (byval as wchar_t ptr) as long
declare function _wtol (byval as wchar_t ptr) as clong
declare sub _beep (byval as ulong, byval as ulong)
declare sub _seterrormode (byval as long)
declare sub _sleep (byval as culong)
declare sub _exit (byval as long)
declare function _onexit (byval as _onexit_t) as _onexit_t
declare function _putenv (byval as zstring ptr) as long
declare sub _searchenv (byval as zstring ptr, byval as zstring ptr, byval as zstring ptr)
declare function _ecvt (byval as double, byval as long, byval as long ptr, byval as long ptr) as zstring ptr
declare function _fcvt (byval as double, byval as long, byval as long ptr, byval as long ptr) as zstring ptr
declare function _gcvt (byval as double, byval as long, byval as zstring ptr) as zstring ptr
declare sub _makepath (byval as zstring ptr, byval as zstring ptr, byval as zstring ptr, byval as zstring ptr, byval as zstring ptr)
declare sub _splitpath (byval as zstring ptr, byval as zstring ptr, byval as zstring ptr, byval as zstring ptr, byval as zstring ptr)
declare function _fullpath (byval as zstring ptr, byval as zstring ptr, byval as size_t) as zstring ptr
declare function _itoa (byval as long, byval as zstring ptr, byval as long) as zstring ptr
declare function _ltoa (byval as clong, byval as zstring ptr, byval as long) as zstring ptr
declare function _ultoa (byval as culong, byval as zstring ptr, byval as long) as zstring ptr
declare function _itow (byval as long, byval as wchar_t ptr, byval as long) as wchar_t ptr
declare function _ltow (byval as clong, byval as wchar_t ptr, byval as long) as wchar_t ptr
declare function _ultow (byval as culong, byval as wchar_t ptr, byval as long) as wchar_t ptr
declare function _atoi64 (byval as zstring ptr) as longint
declare function _i64toa (byval as longint, byval as zstring ptr, byval as long) as zstring ptr
declare function _ui64toa (byval as ulongint, byval as zstring ptr, byval as long) as zstring ptr
declare function _wtoi64 (byval as wchar_t ptr) as longint
declare function _i64tow (byval as longint, byval as wchar_t ptr, byval as long) as wchar_t ptr
declare function _ui64tow (byval as ulongint, byval as wchar_t ptr, byval as long) as wchar_t ptr
declare function _wgetenv (byval as wchar_t ptr) as wchar_t ptr
declare function _wputenv (byval as wchar_t ptr) as long
declare sub _wsearchenv (byval as wchar_t ptr, byval as wchar_t ptr, byval as wchar_t ptr)
declare sub _wmakepath (byval as wchar_t ptr, byval as wchar_t ptr, byval as wchar_t ptr, byval as wchar_t ptr, byval as wchar_t ptr)
declare sub _wsplitpath (byval as wchar_t ptr, byval as wchar_t ptr, byval as wchar_t ptr, byval as wchar_t ptr, byval as wchar_t ptr)
declare function _wfullpath (byval as wchar_t ptr, byval as wchar_t ptr, byval as size_t) as wchar_t ptr
declare function _rotl (byval as ulong, byval as long) as ulong
declare function _rotr (byval as ulong, byval as long) as ulong
declare function _lrotl (byval as uinteger, byval as long) as uinteger
declare function _lrotr (byval as uinteger, byval as long) as uinteger
end extern


type div_t
 quot as long
 rem_ as long
end type

type ldiv_t
 quot as clong
 rem_ as clong
end type

type lldiv_t
 quot as longint
 rem_ as longint
end type

extern "c"
declare sub exit_ alias "exit" (byval as long)
declare function system_ alias "system" (byval as zstring ptr) as long
declare function abs_ alias "abs" (byval as long) as long
declare function atof (byval as zstring ptr) as double
declare function atoi (byval as zstring ptr) as long
declare function atol (byval as zstring ptr) as clong
declare function strtod (byval as zstring ptr, byval as byte ptr ptr) as double
declare function strtof (byval as zstring ptr, byval as byte ptr ptr) as single
declare function strtold (byval as zstring ptr, byval as byte ptr ptr) as double
declare function strtol (byval as zstring ptr, byval as byte ptr ptr, byval as long) as clong
declare function strtoul (byval as zstring ptr, byval as byte ptr ptr, byval as long) as culong
declare function wcstod (byval as wchar_t ptr, byval as wchar_t ptr ptr) as double
declare function wcstof (byval as wchar_t ptr, byval as wchar_t ptr ptr) as single
declare function wcstold (byval as wchar_t ptr, byval as wchar_t ptr ptr) as double
declare function wcstol (byval as wchar_t ptr, byval as wchar_t ptr ptr, byval as long) as clong
declare function wcstoul (byval as wchar_t ptr, byval as wchar_t ptr ptr, byval as long) as culong
declare function wcstombs (byval as zstring ptr, byval as wchar_t ptr, byval as size_t) as size_t
declare function wctomb (byval as zstring ptr, byval as wchar_t) as long
declare function mblen (byval as zstring ptr, byval as size_t) as long
declare function mbstowcs (byval as wchar_t ptr, byval as zstring ptr, byval as size_t) as size_t
declare function mbtowc (byval as wchar_t ptr, byval as zstring ptr, byval as size_t) as long
declare function rand () as long
declare sub srand (byval as ulong)
declare function calloc (byval as size_t, byval as size_t) as any ptr
declare function malloc (byval as size_t) as any ptr
declare function realloc (byval as any ptr, byval as size_t) as any ptr
declare sub free (byval as any ptr)
declare sub abort ()
declare function atexit (byval as sub cdecl()) as long
declare function getenv (byval as zstring ptr) as zstring ptr
declare function bsearch (byval as any ptr, byval as any ptr, byval as size_t, byval as size_t, byval as function(byval as any ptr, byval as any ptr) as long) as any ptr
declare sub qsort (byval as any ptr, byval as size_t, byval as size_t, byval as function(byval as any ptr, byval as any ptr) as long)
declare function labs (byval as clong) as clong
declare function div (byval as long, byval as long) as div_t
declare function ldiv (byval as clong, byval as clong) as ldiv_t
declare function lldiv (byval as longint, byval as longint) as lldiv_t
declare function llabs (byval as longint) as longint
declare function strtoll (byval as zstring ptr, byval as byte ptr ptr, byval as long) as longint
declare function strtoull (byval as zstring ptr, byval as byte ptr ptr, byval as long) as ulongint
declare function atoll (byval as zstring ptr) as longint
declare function wtoll (byval as wchar_t ptr) as longint
declare function lltoa (byval as longint, byval as zstring ptr, byval as long) as zstring ptr
declare function ulltoa (byval as ulongint, byval as zstring ptr, byval as long) as zstring ptr
declare function lltow (byval as longint, byval as wchar_t ptr, byval as long) as wchar_t ptr
declare function ulltow (byval as ulongint, byval as wchar_t ptr, byval as long) as wchar_t ptr
end extern



extern "C"

 declare function _errno() as long ptr

end extern



extern "C"



declare function _InterlockedIncrement16(byval Addend as short ptr) as short
declare function _InterlockedDecrement16(byval Addend as short ptr) as short
declare function _InterlockedCompareExchange16(byval Destination as short ptr, byval ExChange as short, byval Comperand as short) as short
declare function _InterlockedExchangeAdd(byval Addend as long ptr, byval Value as long) as long
declare function _InterlockedCompareExchange(byval Destination as long ptr, byval ExChange as long, byval Comperand as long) as long
declare function _InterlockedIncrement(byval Addend as long ptr) as long
declare function _InterlockedDecrement(byval Addend as long ptr) as long
declare function _InterlockedExchange(byval Target as long ptr, byval Value as long) as long
declare function _InterlockedCompareExchange64(byval Destination as longint ptr, byval ExChange as longint, byval Comperand as longint) as longint
declare function _InterlockedCompareExchangePointer(byval Destination as any ptr ptr, byval ExChange as any ptr, byval Comperand as any ptr) as any ptr
declare function _InterlockedExchangePointer(byval Target as any ptr ptr, byval Value as any ptr) as any ptr
declare sub __int2c()
declare sub __stosb(byval Dest as ubyte ptr, byval Data as ubyte, byval Count as uinteger)
declare sub __stosw(byval Dest as ushort ptr, byval Data as ushort, byval Count as uinteger)
declare sub __stosd(byval Dest as ulong ptr, byval Data as ulong, byval Count as uinteger)
declare function _interlockedbittestandset(byval Base as long ptr, byval Offset as long) as ubyte
declare function _interlockedbittestandreset(byval Base as long ptr, byval Offset as long) as ubyte
declare function _interlockedbittestandcomplement(byval Base as long ptr, byval Offset as long) as ubyte
declare function InterlockedBitTestAndSet(byval Base as long ptr, byval Offset as long) as ubyte
declare function InterlockedBitTestAndReset(byval Base as long ptr, byval Offset as long) as ubyte
declare function InterlockedBitTestAndComplement(byval Base as long ptr, byval Offset as long) as ubyte
declare function _BitScanForward(byval Index as ulong ptr, byval Mask as ulong) as ubyte
declare function _BitScanReverse(byval Index as ulong ptr, byval Mask as ulong) as ubyte
declare function _bittest(byval a as const long ptr, byval b as long) as ubyte
declare function _bittestandset(byval a as long ptr, byval b as long) as ubyte
declare function _bittestandreset(byval a as long ptr, byval b as long) as ubyte
declare function _bittestandcomplement(byval a as long ptr, byval b as long) as ubyte
declare sub __movsb(byval Destination as ubyte ptr, byval Source as const ubyte ptr, byval Count as uinteger)
declare sub __movsw(byval Dest as ushort ptr, byval Source as const ushort ptr, byval Count as uinteger)
declare sub __movsd(byval Dest as ulong ptr, byval Source as const ulong ptr, byval Count as uinteger)

 declare function __readfsbyte(byval Offset as ulong) as ubyte
 declare function __readfsword(byval Offset as ulong) as ushort
 declare function __readfsdword(byval Offset as ulong) as ulong
 declare sub __writefsbyte(byval Offset as ulong, byval Data as ubyte)
 declare sub __writefsword(byval Offset as ulong, byval Data as ushort)
 declare sub __writefsdword(byval Offset as ulong, byval Data as ulong)



declare function __inbyte(byval Port as ushort) as ubyte
declare function __inword(byval Port as ushort) as ushort
declare function __indword(byval Port as ushort) as ulong
declare sub __outbyte(byval Port as ushort, byval Data_ as ubyte)
declare sub __outword(byval Port as ushort, byval Data_ as ushort)
declare sub __outdword(byval Port as ushort, byval Data_ as ulong)
declare sub __inbytestring(byval Port as ushort, byval Buffer as ubyte ptr, byval Count as ulong)
declare sub __inwordstring(byval Port as ushort, byval Buffer as ushort ptr, byval Count as ulong)
declare sub __indwordstring(byval Port as ushort, byval Buffer as ulong ptr, byval Count as ulong)
declare sub __outbytestring(byval Port as ushort, byval Buffer as ubyte ptr, byval Count as ulong)
declare sub __outwordstring(byval Port as ushort, byval Buffer as ushort ptr, byval Count as ulong)
declare sub __outdwordstring(byval Port as ushort, byval Buffer as ulong ptr, byval Count as ulong)
declare sub __cpuid(byval CPUInfo as long ptr, byval InfoType as long)
declare function __readmsr(byval as ulong) as ulongint
declare sub __writemsr(byval as ulong, byval as ulongint)

 declare function __readcr0() as ulong
 declare function __readcr2() as ulong
 declare function __readcr3() as ulong
 declare function __readcr4() as ulong
 declare function __readcr8() as ulong
 declare sub __writecr0(byval as ulong)
 declare sub __writecr3(byval as ulong)
 declare sub __writecr4(byval as ulong)
 declare sub __writecr8(byval as ulong)


declare function __builtin_ia32_crc32qi(byval as ulong, byval as ubyte) as ulong
declare function __builtin_ia32_crc32hi(byval as ulong, byval as ushort) as ulong
declare function __builtin_ia32_crc32si(byval as ulong, byval as ulong) as ulong
declare sub _disable()
declare function __emul(byval as long, byval as long) as longint
declare function __emulu(byval as ulong, byval as ulong) as ulongint
declare sub _enable()

 declare function _InterlockedOr8(byval as zstring ptr, byval as byte) as byte
 declare function _InterlockedOr16(byval as short ptr, byval as short) as short
 declare function _InterlockedXor8(byval as zstring ptr, byval as byte) as byte
 declare function _InterlockedXor16(byval as short ptr, byval as short) as short
 declare function _InterlockedAnd8(byval as zstring ptr, byval as byte) as byte
 declare function _InterlockedAnd16(byval as short ptr, byval as short) as short
 declare function _InterlockedAddLargeStatistic(byval as longint ptr, byval as long) as long

declare function _inp(byval as ushort) as long
declare function inp_ alias "inp"(byval as ushort) as long
declare function _inpd(byval as ushort) as ulong
declare function inpd(byval as ushort) as ulong
declare function _inpw(byval as ushort) as ushort
declare function inpw(byval as ushort) as ushort
declare function __ll_lshift(byval as ulongint, byval as long) as ulongint
declare function __ll_rshift(byval as longint, byval as long) as longint
declare function _outp(byval as ushort, byval as long) as long
declare function outp(byval as ushort, byval as long) as long
declare function _outpd(byval as ushort, byval as ulong) as ulong
declare function outpd(byval as ushort, byval as ulong) as ulong
declare function _outpw(byval as ushort, byval as ushort) as ushort
declare function outpw(byval as ushort, byval as ushort) as ushort
declare function _ReturnAddress() as any ptr


declare function __ull_rshift(byval as ulongint, byval as long) as ulongint
declare function _AddressOfReturnAddress() as any ptr
declare sub __wbinvd()
declare sub __invlpg(byval as any ptr)

 declare function __getcallerseflags() as ulong

declare function __readpmc(byval a as ulong) as ulongint

 declare function __segmentlimit(byval a as ulong) as ulong
 declare function _rotr8(byval value as ubyte, byval shift as ubyte) as ubyte
 declare function _rotr16(byval value as ushort, byval shift as ubyte) as ushort
 declare function _rotl8(byval value as ubyte, byval shift as ubyte) as ubyte
 declare function _rotl16(byval value as ushort, byval shift as ubyte) as ushort

declare sub __nvreg_save_fence()
declare sub __nvreg_restore_fence()


end extern




type _GUID
 Data1 as ulong
 Data2 as ushort
 Data3 as ushort
 Data4(0 to 7) as ubyte
end type

type GUID as _GUID
type LPGUID as GUID ptr
type LPCGUID as const GUID ptr
type IID as GUID
type LPIID as IID ptr
type CLSID as GUID
type LPCLSID as CLSID ptr
type FMTID as GUID
type LPFMTID as FMTID ptr
type REFGUID as const GUID const ptr
type REFIID as const IID const ptr
type REFCLSID as const IID const ptr
type REFFMTID as const IID const ptr



extern "Windows"

const ANYSIZE_ARRAY = 1

 const MEMORY_ALLOCATION_ALIGNMENT = 8

const SYSTEM_CACHE_ALIGNMENT_SIZE = 64
const PRAGMA_DEPRECATED_DDK = 0
type PVOID as any ptr
type PVOID64 as any ptr
type VOID as any
type CHAR as byte
type INT_ as long
type WCHAR as wchar_t
type PWCHAR as WCHAR ptr
type LPWCH as WCHAR ptr
type PWCH as WCHAR ptr
type LPCWCH as const WCHAR ptr
type PCWCH as const WCHAR ptr
type NWPSTR as wstring ptr
type LPWSTR as wstring ptr
type PWSTR as wstring ptr
type PZPWSTR as PWSTR ptr
type PCZPWSTR as const PWSTR ptr
type LPUWSTR as wstring ptr
type PUWSTR as wstring ptr
type LPCWSTR as const wstring ptr
type PCWSTR as const wstring ptr
type PZPCWSTR as PCWSTR ptr
type LPCUWSTR as const wstring ptr
type PCUWSTR as const wstring ptr
type PZZWSTR as wstring ptr
type PCZZWSTR as const wstring ptr
type PUZZWSTR as wstring ptr
type PCUZZWSTR as const wstring ptr
type PNZWCH as WCHAR ptr
type PCNZWCH as const WCHAR ptr
type PUNZWCH as WCHAR ptr
type PCUNZWCH as const WCHAR ptr


type PCHAR as CHAR ptr
type LPCH as CHAR ptr
type PCH as CHAR ptr
type LPCCH as const CHAR ptr
type PCCH as const CHAR ptr
type NPSTR as zstring ptr
type LPSTR as zstring ptr
type PSTR as zstring ptr
type PZPSTR as PSTR ptr
type PCZPSTR as const PSTR ptr
type LPCSTR as const zstring ptr
type PCSTR as const zstring ptr
type PZPCSTR as PCSTR ptr
type PZZSTR as zstring ptr
type PCZZSTR as const zstring ptr
type PNZCH as CHAR ptr
type PCNZCH as const CHAR ptr

 type TCHAR as byte
 type PTCHAR as byte ptr
 type TBYTE as ubyte
 type PTBYTE as ubyte ptr
 type LPTCH as LPSTR
 type PTCH as LPSTR
 type LPCTCH as LPCCH
 type PCTCH as LPCCH
 type PTSTR as LPSTR
 type LPTSTR as LPSTR
 type PUTSTR as LPSTR
 type LPUTSTR as LPSTR
 type PCTSTR as LPCSTR
 type LPCTSTR as LPCSTR
 type PCUTSTR as LPCSTR
 type LPCUTSTR as LPCSTR
 type PZZTSTR as PZZSTR
 type PUZZTSTR as PZZSTR
 type PCZZTSTR as PCZZSTR
 type PCUZZTSTR as PCZZSTR
 type PZPTSTR as PZPSTR
 type PNZTCH as PNZCH
 type PUNZTCH as PNZCH
 type PCNZTCH as PCNZCH
 type PCUNZTCH as PCNZCH

type PSHORT as SHORT ptr
type PLONG as LONG ptr

type _GROUP_AFFINITY
 Mask as KAFFINITY
 Group as WORD
 Reserved(0 to 2) as WORD
end type

type GROUP_AFFINITY as _GROUP_AFFINITY
type PGROUP_AFFINITY as _GROUP_AFFINITY ptr
type HANDLE as any ptr
type PHANDLE as HANDLE ptr
type FCHAR as UBYTE
type FSHORT as WORD
type FLONG as DWORD
type HRESULT as LONG
type CCHAR as zstring
type LCID as DWORD
type PLCID as PDWORD
type LANGID as WORD

type COMPARTMENT_ID as long
enum
 UNSPECIFIED_COMPARTMENT_ID = 0
 DEFAULT_COMPARTMENT_ID
end enum

type PCOMPARTMENT_ID as COMPARTMENT_ID ptr
const APPLICATION_ERROR_MASK = &h20000000
const ERROR_SEVERITY_SUCCESS = &h000000000
const ERROR_SEVERITY_INFORMATIONAL = &h40000000
const ERROR_SEVERITY_WARNING = &h80000000
const ERROR_SEVERITY_ERROR = &hC0000000

type _FLOAT128
 LowPart as longint
 HighPart as longint
end type

type FLOAT128 as _FLOAT128
type PFLOAT128 as FLOAT128 ptr
type LONGLONG as longint
type ULONGLONG as ulongint
const MAXLONGLONG = &h7fffffffffffffff
type PLONGLONG as LONGLONG ptr
type PULONGLONG as ULONGLONG ptr
type USN as LONGLONG

type _LARGE_INTEGER_u
 LowPart as DWORD
 HighPart as LONG
end type

union _LARGE_INTEGER
 type
 LowPart as DWORD
 HighPart as LONG
 end type

 u as _LARGE_INTEGER_u
 QuadPart as LONGLONG
end union

type LARGE_INTEGER as _LARGE_INTEGER
type PLARGE_INTEGER as LARGE_INTEGER ptr

type _ULARGE_INTEGER_u
 LowPart as DWORD
 HighPart as DWORD
end type

union _ULARGE_INTEGER
 type
 LowPart as DWORD
 HighPart as DWORD
 end type

 u as _ULARGE_INTEGER_u
 QuadPart as ULONGLONG
end union

type ULARGE_INTEGER as _ULARGE_INTEGER
type PULARGE_INTEGER as ULARGE_INTEGER ptr

type _LUID
 LowPart as DWORD
 HighPart as LONG
end type

type LUID as _LUID
type PLUID as _LUID ptr
type DWORDLONG as ULONGLONG
type PDWORDLONG as DWORDLONG ptr


#undef _rotl
#undef _rotr
declare function _rotl cdecl(byval Value as ulong, byval Shift as long) as ulong
declare function _rotr cdecl(byval Value as ulong, byval Shift as long) as ulong
declare function _rotl64 cdecl(byval Value as ulongint, byval Shift as long) as ulongint
declare function _rotr64 cdecl(byval Value as ulongint, byval Shift as long) as ulongint
const ANSI_NULL = cast(CHAR, 0)
const UNICODE_NULL = cast(WCHAR, 0)
const UNICODE_STRING_MAX_BYTES = cast(WORD, 65534)
const UNICODE_STRING_MAX_CHARS = 32767
type WINBOOLEAN as UBYTE
type PBOOLEAN as WINBOOLEAN ptr

type _LIST_ENTRY
 Flink as _LIST_ENTRY ptr
 Blink as _LIST_ENTRY ptr
end type

type LIST_ENTRY as _LIST_ENTRY
type PLIST_ENTRY as _LIST_ENTRY ptr
type PRLIST_ENTRY as _LIST_ENTRY ptr

type _SINGLE_LIST_ENTRY
 Next as _SINGLE_LIST_ENTRY ptr
end type

type SINGLE_LIST_ENTRY as _SINGLE_LIST_ENTRY
type PSINGLE_LIST_ENTRY as _SINGLE_LIST_ENTRY ptr

type LIST_ENTRY32
 Flink as DWORD
 Blink as DWORD
end type

type PLIST_ENTRY32 as LIST_ENTRY32 ptr

type LIST_ENTRY64
 Flink as ULONGLONG
 Blink as ULONGLONG
end type

type PLIST_ENTRY64 as LIST_ENTRY64 ptr

type _OBJECTID
 Lineage as GUID
 Uniquifier as DWORD
end type

type OBJECTID as _OBJECTID
const MINCHAR = &h80
const MAXCHAR = &h7f
const MINSHORT = &h8000
const MAXSHORT = &h7fff
const MINLONG = &h80000000
const MAXLONG = &h7fffffff
const MAXBYTE = &hff
const MAXWORD = &hffff
const MAXDWORD = &hffffffff
type _EXCEPTION_RECORD as _EXCEPTION_RECORD_
type _CONTEXT as _CONTEXT_
type PEXCEPTION_ROUTINE as function(byval ExceptionRecord as _EXCEPTION_RECORD ptr, byval EstablisherFrame as PVOID, byval ContextRecord as _CONTEXT ptr, byval DispatcherContext as PVOID) as long
const VER_WORKSTATION_NT = &h40000000
const VER_SERVER_NT = &h80000000
const VER_SUITE_SMALLBUSINESS = &h00000001
const VER_SUITE_ENTERPRISE = &h00000002
const VER_SUITE_BACKOFFICE = &h00000004
const VER_SUITE_COMMUNICATIONS = &h00000008
const VER_SUITE_TERMINAL = &h00000010
const VER_SUITE_SMALLBUSINESS_RESTRICTED = &h00000020
const VER_SUITE_EMBEDDEDNT = &h00000040
const VER_SUITE_DATACENTER = &h00000080
const VER_SUITE_SINGLEUSERTS = &h00000100
const VER_SUITE_PERSONAL = &h00000200
const VER_SUITE_BLADE = &h00000400
const VER_SUITE_EMBEDDED_RESTRICTED = &h00000800
const VER_SUITE_SECURITY_APPLIANCE = &h00001000
const VER_SUITE_STORAGE_SERVER = &h00002000
const VER_SUITE_COMPUTE_SERVER = &h00004000
const VER_SUITE_WH_SERVER = &h00008000
const PRODUCT_UNDEFINED = &h00
const PRODUCT_ULTIMATE = &h1
const PRODUCT_HOME_BASIC = &h2
const PRODUCT_HOME_PREMIUM = &h3
const PRODUCT_ENTERPRISE = &h4
const PRODUCT_HOME_BASIC_N = &h5
const PRODUCT_BUSINESS = &h6
const PRODUCT_STANDARD_SERVER = &h7
const PRODUCT_DATACENTER_SERVER = &h8
const PRODUCT_SMALLBUSINESS_SERVER = &h9
const PRODUCT_ENTERPRISE_SERVER = &ha
const PRODUCT_STARTER = &hb
const PRODUCT_DATACENTER_SERVER_CORE = &hc
const PRODUCT_STANDARD_SERVER_CORE = &hd
const PRODUCT_ENTERPRISE_SERVER_CORE = &he
const PRODUCT_ENTERPRISE_SERVER_IA64 = &hf
const PRODUCT_BUSINESS_N = &h10
const PRODUCT_WEB_SERVER = &h11
const PRODUCT_CLUSTER_SERVER = &h12
const PRODUCT_HOME_SERVER = &h13
const PRODUCT_STORAGE_EXPRESS_SERVER = &h14
const PRODUCT_STORAGE_STANDARD_SERVER = &h15
const PRODUCT_STORAGE_WORKGROUP_SERVER = &h16
const PRODUCT_STORAGE_ENTERPRISE_SERVER = &h17
const PRODUCT_SERVER_FOR_SMALLBUSINESS = &h18
const PRODUCT_SMALLBUSINESS_SERVER_PREMIUM = &h19
const PRODUCT_HOME_PREMIUM_N = &h1a
const PRODUCT_ENTERPRISE_N = &h1b
const PRODUCT_ULTIMATE_N = &h1c
const PRODUCT_WEB_SERVER_CORE = &h1d
const PRODUCT_MEDIUMBUSINESS_SERVER_MANAGEMENT = &h1e
const PRODUCT_MEDIUMBUSINESS_SERVER_SECURITY = &h1f
const PRODUCT_MEDIUMBUSINESS_SERVER_MESSAGING = &h20
const PRODUCT_SERVER_FOUNDATION = &h21
const PRODUCT_HOME_PREMIUM_SERVER = &h22
const PRODUCT_SERVER_FOR_SMALLBUSINESS_V = &h23
const PRODUCT_STANDARD_SERVER_V = &h24
const PRODUCT_DATACENTER_SERVER_V = &h25
const PRODUCT_ENTERPRISE_SERVER_V = &h26
const PRODUCT_DATACENTER_SERVER_CORE_V = &h27
const PRODUCT_STANDARD_SERVER_CORE_V = &h28
const PRODUCT_ENTERPRISE_SERVER_CORE_V = &h29
const PRODUCT_HYPERV = &h2a
const PRODUCT_STORAGE_EXPRESS_SERVER_CORE = &h2b
const PRODUCT_STORAGE_STANDARD_SERVER_CORE = &h2c
const PRODUCT_STORAGE_WORKGROUP_SERVER_CORE = &h2d
const PRODUCT_STORAGE_ENTERPRISE_SERVER_CORE = &h2e
const PRODUCT_STARTER_N = &h2f
const PRODUCT_PROFESSIONAL = &h30
const PRODUCT_PROFESSIONAL_N = &h31
const PRODUCT_SB_SOLUTION_SERVER = &h32
const PRODUCT_SERVER_FOR_SB_SOLUTIONS = &h33
const PRODUCT_STANDARD_SERVER_SOLUTIONS = &h34
const PRODUCT_STANDARD_SERVER_SOLUTIONS_CORE = &h35
const PRODUCT_SB_SOLUTION_SERVER_EM = &h36
const PRODUCT_SERVER_FOR_SB_SOLUTIONS_EM = &h37
const PRODUCT_SOLUTION_EMBEDDEDSERVER = &h38
const PRODUCT_SOLUTION_EMBEDDEDSERVER_CORE = &h39
const PRODUCT_ESSENTIALBUSINESS_SERVER_MGMT = &h3B
const PRODUCT_ESSENTIALBUSINESS_SERVER_ADDL = &h3C
const PRODUCT_ESSENTIALBUSINESS_SERVER_MGMTSVC = &h3D
const PRODUCT_ESSENTIALBUSINESS_SERVER_ADDLSVC = &h3E
const PRODUCT_SMALLBUSINESS_SERVER_PREMIUM_CORE = &h3f
const PRODUCT_CLUSTER_SERVER_V = &h40
const PRODUCT_EMBEDDED = &h41
const PRODUCT_STARTER_E = &h42
const PRODUCT_HOME_BASIC_E = &h43
const PRODUCT_HOME_PREMIUM_E = &h44
const PRODUCT_PROFESSIONAL_E = &h45
const PRODUCT_ENTERPRISE_E = &h46
const PRODUCT_ULTIMATE_E = &h47
const PRODUCT_ENTERPRISE_EVALUATION = &h48
const PRODUCT_MULTIPOINT_STANDARD_SERVER = &h4C
const PRODUCT_MULTIPOINT_PREMIUM_SERVER = &h4D
const PRODUCT_STANDARD_EVALUATION_SERVER = &h4F
const PRODUCT_DATACENTER_EVALUATION_SERVER = &h50
const PRODUCT_ENTERPRISE_N_EVALUATION = &h54
const PRODUCT_EMBEDDED_AUTOMOTIVE = &h55
const PRODUCT_EMBEDDED_INDUSTRY_A = &h56
const PRODUCT_THINPC = &h57
const PRODUCT_EMBEDDED_A = &h58
const PRODUCT_EMBEDDED_INDUSTRY = &h59
const PRODUCT_EMBEDDED_E = &h5A
const PRODUCT_EMBEDDED_INDUSTRY_E = &h5B
const PRODUCT_EMBEDDED_INDUSTRY_A_E = &h5C
const PRODUCT_STORAGE_WORKGROUP_EVALUATION_SERVER = &h5F
const PRODUCT_STORAGE_STANDARD_EVALUATION_SERVER = &h60
const PRODUCT_CORE_ARM = &h61
const PRODUCT_CORE_N = &h62
const PRODUCT_CORE_COUNTRYSPECIFIC = &h63
const PRODUCT_CORE_SINGLELANGUAGE = &h64
const PRODUCT_CORE = &h65
const PRODUCT_PROFESSIONAL_WMC = &h67
const PRODUCT_MOBILE_CORE = &h68
const PRODUCT_UNLICENSED = &habcdabcd
const LANG_NEUTRAL = &h000
const LANG_INVARIANT = &h7f
const LANG_AFRIKAANS = &h36
const LANG_ALBANIAN = &h1c
const LANG_ALSATIAN = &h84
const LANG_AMHARIC = &h5e
const LANG_ARABIC = &h01
const LANG_ARMENIAN = &h2b
const LANG_ASSAMESE = &h4d
const LANG_AZERI = &h2c
const LANG_AZERBAIJANI = &h2c
const LANG_BANGLA = &h45
const LANG_BASHKIR = &h6d
const LANG_BASQUE = &h2d
const LANG_BELARUSIAN = &h23
const LANG_BENGALI = &h45
const LANG_BRETON = &h7e
const LANG_BOSNIAN = &h1a
const LANG_BOSNIAN_NEUTRAL = &h781a
const LANG_BULGARIAN = &h02
const LANG_CATALAN = &h03
const LANG_CENTRAL_KURDISH = &h92
const LANG_CHEROKEE = &h5c
const LANG_CHINESE = &h04
const LANG_CHINESE_SIMPLIFIED = &h04
const LANG_CHINESE_TRADITIONAL = &h7c04
const LANG_CORSICAN = &h83
const LANG_CROATIAN = &h1a
const LANG_CZECH = &h05
const LANG_DANISH = &h06
const LANG_DARI = &h8c
const LANG_DIVEHI = &h65
const LANG_DUTCH = &h13
const LANG_ENGLISH = &h09
const LANG_ESTONIAN = &h25
const LANG_FAEROESE = &h38
const LANG_FARSI = &h29
const LANG_FILIPINO = &h64
const LANG_FINNISH = &h0b
const LANG_FRENCH = &h0c
const LANG_FRISIAN = &h62
const LANG_FULAH = &h67
const LANG_GALICIAN = &h56
const LANG_GEORGIAN = &h37
const LANG_GERMAN = &h07
const LANG_GREEK = &h08
const LANG_GREENLANDIC = &h6f
const LANG_GUJARATI = &h47
const LANG_HAUSA = &h68
const LANG_HEBREW = &h0d
const LANG_HINDI = &h39
const LANG_HUNGARIAN = &h0e
const LANG_ICELANDIC = &h0f
const LANG_IGBO = &h70
const LANG_INDONESIAN = &h21
const LANG_INUKTITUT = &h5d
const LANG_IRISH = &h3c
const LANG_ITALIAN = &h10
const LANG_JAPANESE = &h11
const LANG_KANNADA = &h4b
const LANG_KASHMIRI = &h60
const LANG_KAZAK = &h3f
const LANG_KHMER = &h53
const LANG_KICHE = &h86
const LANG_KINYARWANDA = &h87
const LANG_KONKANI = &h57
const LANG_KOREAN = &h12
const LANG_KYRGYZ = &h40
const LANG_LAO = &h54
const LANG_LATVIAN = &h26
const LANG_LITHUANIAN = &h27
const LANG_LOWER_SORBIAN = &h2e
const LANG_LUXEMBOURGISH = &h6e
const LANG_MACEDONIAN = &h2f
const LANG_MALAY = &h3e
const LANG_MALAYALAM = &h4c
const LANG_MALTESE = &h3a
const LANG_MANIPURI = &h58
const LANG_MAORI = &h81
const LANG_MAPUDUNGUN = &h7a
const LANG_MARATHI = &h4e
const LANG_MOHAWK = &h7c
const LANG_MONGOLIAN = &h50
const LANG_NEPALI = &h61
const LANG_NORWEGIAN = &h14
const LANG_OCCITAN = &h82
const LANG_ODIA = &h48
const LANG_ORIYA = &h48
const LANG_PASHTO = &h63
const LANG_PERSIAN = &h29
const LANG_POLISH = &h15
const LANG_PORTUGUESE = &h16
const LANG_PULAR = &h67
const LANG_PUNJABI = &h46
const LANG_QUECHUA = &h6b
const LANG_ROMANIAN = &h18
const LANG_ROMANSH = &h17
const LANG_RUSSIAN = &h19
const LANG_SAKHA = &h85
const LANG_SAMI = &h3b
const LANG_SANSKRIT = &h4f
const LANG_SCOTTISH_GAELIC = &h91
const LANG_SERBIAN = &h1a
const LANG_SERBIAN_NEUTRAL = &h7c1a
const LANG_SINDHI = &h59
const LANG_SINHALESE = &h5b
const LANG_SLOVAK = &h1b
const LANG_SLOVENIAN = &h24
const LANG_SOTHO = &h6c
const LANG_SPANISH = &h0a
const LANG_SWAHILI = &h41
const LANG_SWEDISH = &h1d
const LANG_SYRIAC = &h5a
const LANG_TAJIK = &h28
const LANG_TAMAZIGHT = &h5f
const LANG_TAMIL = &h49
const LANG_TATAR = &h44
const LANG_TELUGU = &h4a
const LANG_THAI = &h1e
const LANG_TIBETAN = &h51
const LANG_TIGRIGNA = &h73
const LANG_TIGRINYA = &h73
const LANG_TSWANA = &h32
const LANG_TURKISH = &h1f
const LANG_TURKMEN = &h42
const LANG_UIGHUR = &h80
const LANG_UKRAINIAN = &h22
const LANG_UPPER_SORBIAN = &h2e
const LANG_URDU = &h20
const LANG_UZBEK = &h43
const LANG_VALENCIAN = &h03
const LANG_VIETNAMESE = &h2a
const LANG_WELSH = &h52
const LANG_WOLOF = &h88
const LANG_XHOSA = &h34
const LANG_YAKUT = &h85
const LANG_YI = &h78
const LANG_YORUBA = &h6a
const LANG_ZULU = &h35
const SUBLANG_NEUTRAL = &h000
const SUBLANG_DEFAULT = &h01
const SUBLANG_SYS_DEFAULT = &h02
const SUBLANG_CUSTOM_DEFAULT = &h03
const SUBLANG_CUSTOM_UNSPECIFIED = &h04
const SUBLANG_UI_CUSTOM_DEFAULT = &h05
const SUBLANG_AFRIKAANS_SOUTH_AFRICA = &h01
const SUBLANG_ALBANIAN_ALBANIA = &h01
const SUBLANG_ALSATIAN_FRANCE = &h01
const SUBLANG_AMHARIC_ETHIOPIA = &h01
const SUBLANG_ARABIC_SAUDI_ARABIA = &h01
const SUBLANG_ARABIC_IRAQ = &h02
const SUBLANG_ARABIC_EGYPT = &h03
const SUBLANG_ARABIC_LIBYA = &h04
const SUBLANG_ARABIC_ALGERIA = &h05
const SUBLANG_ARABIC_MOROCCO = &h06
const SUBLANG_ARABIC_TUNISIA = &h07
const SUBLANG_ARABIC_OMAN = &h08
const SUBLANG_ARABIC_YEMEN = &h09
const SUBLANG_ARABIC_SYRIA = &h0a
const SUBLANG_ARABIC_JORDAN = &h0b
const SUBLANG_ARABIC_LEBANON = &h0c
const SUBLANG_ARABIC_KUWAIT = &h0d
const SUBLANG_ARABIC_UAE = &h0e
const SUBLANG_ARABIC_BAHRAIN = &h0f
const SUBLANG_ARABIC_QATAR = &h10
const SUBLANG_ARMENIAN_ARMENIA = &h01
const SUBLANG_ASSAMESE_INDIA = &h01
const SUBLANG_AZERI_LATIN = &h01
const SUBLANG_AZERI_CYRILLIC = &h02
const SUBLANG_AZERBAIJANI_AZERBAIJAN_LATIN = &h01
const SUBLANG_AZERBAIJANI_AZERBAIJAN_CYRILLIC = &h02
const SUBLANG_BANGLA_INDIA = &h01
const SUBLANG_BANGLA_BANGLADESH = &h02
const SUBLANG_BASHKIR_RUSSIA = &h01
const SUBLANG_BASQUE_BASQUE = &h01
const SUBLANG_BELARUSIAN_BELARUS = &h01
const SUBLANG_BENGALI_INDIA = &h01
const SUBLANG_BENGALI_BANGLADESH = &h02
const SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_LATIN = &h05
const SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_CYRILLIC = &h08
const SUBLANG_BRETON_FRANCE = &h01
const SUBLANG_BULGARIAN_BULGARIA = &h01
const SUBLANG_CATALAN_CATALAN = &h01
const SUBLANG_CENTRAL_KURDISH_IRAQ = &h01
const SUBLANG_CHEROKEE_CHEROKEE = &h01
const SUBLANG_CHINESE_TRADITIONAL = &h01
const SUBLANG_CHINESE_SIMPLIFIED = &h02
const SUBLANG_CHINESE_HONGKONG = &h03
const SUBLANG_CHINESE_SINGAPORE = &h04
const SUBLANG_CHINESE_MACAU = &h05
const SUBLANG_CORSICAN_FRANCE = &h01
const SUBLANG_CZECH_CZECH_REPUBLIC = &h01
const SUBLANG_CROATIAN_CROATIA = &h01
const SUBLANG_CROATIAN_BOSNIA_HERZEGOVINA_LATIN = &h04
const SUBLANG_DANISH_DENMARK = &h01
const SUBLANG_DARI_AFGHANISTAN = &h01
const SUBLANG_DIVEHI_MALDIVES = &h01
const SUBLANG_DUTCH = &h01
const SUBLANG_DUTCH_BELGIAN = &h02
const SUBLANG_ENGLISH_US = &h01
const SUBLANG_ENGLISH_UK = &h02
const SUBLANG_ENGLISH_AUS = &h03
const SUBLANG_ENGLISH_CAN = &h04
const SUBLANG_ENGLISH_NZ = &h05
const SUBLANG_ENGLISH_IRELAND = &h06
const SUBLANG_ENGLISH_EIRE = &h06
const SUBLANG_ENGLISH_SOUTH_AFRICA = &h07
const SUBLANG_ENGLISH_JAMAICA = &h08
const SUBLANG_ENGLISH_CARIBBEAN = &h09
const SUBLANG_ENGLISH_BELIZE = &h0a
const SUBLANG_ENGLISH_TRINIDAD = &h0b
const SUBLANG_ENGLISH_ZIMBABWE = &h0c
const SUBLANG_ENGLISH_PHILIPPINES = &h0d
const SUBLANG_ENGLISH_INDIA = &h10
const SUBLANG_ENGLISH_MALAYSIA = &h11
const SUBLANG_ENGLISH_SINGAPORE = &h12
const SUBLANG_ESTONIAN_ESTONIA = &h01
const SUBLANG_FAEROESE_FAROE_ISLANDS = &h01
const SUBLANG_FILIPINO_PHILIPPINES = &h01
const SUBLANG_FINNISH_FINLAND = &h01
const SUBLANG_FRENCH = &h01
const SUBLANG_FRENCH_BELGIAN = &h02
const SUBLANG_FRENCH_CANADIAN = &h03
const SUBLANG_FRENCH_SWISS = &h04
const SUBLANG_FRENCH_LUXEMBOURG = &h05
const SUBLANG_FRENCH_MONACO = &h06
const SUBLANG_FRISIAN_NETHERLANDS = &h01
const SUBLANG_FULAH_SENEGAL = &h02
const SUBLANG_GALICIAN_GALICIAN = &h01
const SUBLANG_GEORGIAN_GEORGIA = &h01
const SUBLANG_GERMAN = &h01
const SUBLANG_GERMAN_SWISS = &h02
const SUBLANG_GERMAN_AUSTRIAN = &h03
const SUBLANG_GERMAN_LUXEMBOURG = &h04
const SUBLANG_GERMAN_LIECHTENSTEIN = &h05
const SUBLANG_GREEK_GREECE = &h01
const SUBLANG_GREENLANDIC_GREENLAND = &h01
const SUBLANG_GUJARATI_INDIA = &h01
const SUBLANG_HAUSA_NIGERIA_LATIN = &h01
const SUBLANG_HAUSA_NIGERIA = SUBLANG_HAUSA_NIGERIA_LATIN
const SUBLANG_HAWAIIAN_US = &h01
const SUBLANG_HEBREW_ISRAEL = &h01
const SUBLANG_HINDI_INDIA = &h01
const SUBLANG_HUNGARIAN_HUNGARY = &h01
const SUBLANG_ICELANDIC_ICELAND = &h01
const SUBLANG_IGBO_NIGERIA = &h01
const SUBLANG_INDONESIAN_INDONESIA = &h01
const SUBLANG_INUKTITUT_CANADA = &h01
const SUBLANG_INUKTITUT_CANADA_LATIN = &h02
const SUBLANG_IRISH_IRELAND = &h02
const SUBLANG_ITALIAN = &h01
const SUBLANG_ITALIAN_SWISS = &h02
const SUBLANG_JAPANESE_JAPAN = &h01
const SUBLANG_KANNADA_INDIA = &h01
const SUBLANG_KASHMIRI_INDIA = &h02
const SUBLANG_KASHMIRI_SASIA = &h02
const SUBLANG_KAZAK_KAZAKHSTAN = &h01
const SUBLANG_KHMER_CAMBODIA = &h01
const SUBLANG_KICHE_GUATEMALA = &h01
const SUBLANG_KINYARWANDA_RWANDA = &h01
const SUBLANG_KONKANI_INDIA = &h01
const SUBLANG_KOREAN = &h01
const SUBLANG_KYRGYZ_KYRGYZSTAN = &h01
const SUBLANG_LAO_LAO = &h01
const SUBLANG_LAO_LAO_PDR = SUBLANG_LAO_LAO
const SUBLANG_LATVIAN_LATVIA = &h01


const SUBLANG_LITHUANIAN = &h01
const SUBLANG_LOWER_SORBIAN_GERMANY = &h02
const SUBLANG_LUXEMBOURGISH_LUXEMBOURG = &h01
const SUBLANG_MACEDONIAN_MACEDONIA = &h01
const SUBLANG_MALAY_MALAYSIA = &h01
const SUBLANG_MALAY_BRUNEI_DARUSSALAM = &h02
const SUBLANG_MALAYALAM_INDIA = &h01
const SUBLANG_MALTESE_MALTA = &h01
const SUBLANG_MAORI_NEW_ZEALAND = &h01
const SUBLANG_MAPUDUNGUN_CHILE = &h01
const SUBLANG_MARATHI_INDIA = &h01
const SUBLANG_MOHAWK_MOHAWK = &h01
const SUBLANG_MONGOLIAN_CYRILLIC_MONGOLIA = &h01
const SUBLANG_MONGOLIAN_PRC = &h02
const SUBLANG_NEPALI_NEPAL = &h01
const SUBLANG_NEPALI_INDIA = &h02
const SUBLANG_NORWEGIAN_BOKMAL = &h01
const SUBLANG_NORWEGIAN_NYNORSK = &h02
const SUBLANG_OCCITAN_FRANCE = &h01
const SUBLANG_ORIYA_INDIA = &h01
const SUBLANG_PASHTO_AFGHANISTAN = &h01
const SUBLANG_PERSIAN_IRAN = &h01
const SUBLANG_POLISH_POLAND = &h01
const SUBLANG_PORTUGUESE_BRAZILIAN = &h01


const SUBLANG_PORTUGUESE = &h02
const SUBLANG_PULAR_SENEGAL = &h02
const SUBLANG_PUNJABI_INDIA = &h01
const SUBLANG_PUNJABI_PAKISTAN = &h02
const SUBLANG_QUECHUA_BOLIVIA = &h01
const SUBLANG_QUECHUA_ECUADOR = &h02
const SUBLANG_QUECHUA_PERU = &h03
const SUBLANG_ROMANIAN_ROMANIA = &h01
const SUBLANG_ROMANSH_SWITZERLAND = &h01
const SUBLANG_RUSSIAN_RUSSIA = &h01
const SUBLANG_SAKHA_RUSSIA = &h01
const SUBLANG_SAMI_NORTHERN_NORWAY = &h01
const SUBLANG_SAMI_NORTHERN_SWEDEN = &h02
const SUBLANG_SAMI_NORTHERN_FINLAND = &h03
const SUBLANG_SAMI_LULE_NORWAY = &h04
const SUBLANG_SAMI_LULE_SWEDEN = &h05
const SUBLANG_SAMI_SOUTHERN_NORWAY = &h06
const SUBLANG_SAMI_SOUTHERN_SWEDEN = &h07
const SUBLANG_SAMI_SKOLT_FINLAND = &h08
const SUBLANG_SAMI_INARI_FINLAND = &h09
const SUBLANG_SANSKRIT_INDIA = &h01
const SUBLANG_SCOTTISH_GAELIC = &h01
const SUBLANG_SERBIAN_LATIN = &h02
const SUBLANG_SERBIAN_CYRILLIC = &h03
const SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_LATIN = &h06
const SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_CYRILLIC = &h07
const SUBLANG_SERBIAN_MONTENEGRO_LATIN = &h0b
const SUBLANG_SERBIAN_MONTENEGRO_CYRILLIC = &h0c
const SUBLANG_SERBIAN_SERBIA_LATIN = &h09
const SUBLANG_SERBIAN_SERBIA_CYRILLIC = &h0a
const SUBLANG_SINDHI_INDIA = &h01
const SUBLANG_SINDHI_AFGHANISTAN = &h02
const SUBLANG_SINDHI_PAKISTAN = &h02
const SUBLANG_SINHALESE_SRI_LANKA = &h01
const SUBLANG_SOTHO_NORTHERN_SOUTH_AFRICA = &h01
const SUBLANG_SLOVAK_SLOVAKIA = &h01
const SUBLANG_SLOVENIAN_SLOVENIA = &h01
const SUBLANG_SPANISH = &h01
const SUBLANG_SPANISH_MEXICAN = &h02
const SUBLANG_SPANISH_MODERN = &h03
const SUBLANG_SPANISH_GUATEMALA = &h04
const SUBLANG_SPANISH_COSTA_RICA = &h05
const SUBLANG_SPANISH_PANAMA = &h06
const SUBLANG_SPANISH_DOMINICAN_REPUBLIC = &h07
const SUBLANG_SPANISH_VENEZUELA = &h08
const SUBLANG_SPANISH_COLOMBIA = &h09
const SUBLANG_SPANISH_PERU = &h0a
const SUBLANG_SPANISH_ARGENTINA = &h0b
const SUBLANG_SPANISH_ECUADOR = &h0c
const SUBLANG_SPANISH_CHILE = &h0d
const SUBLANG_SPANISH_URUGUAY = &h0e
const SUBLANG_SPANISH_PARAGUAY = &h0f
const SUBLANG_SPANISH_BOLIVIA = &h10
const SUBLANG_SPANISH_EL_SALVADOR = &h11
const SUBLANG_SPANISH_HONDURAS = &h12
const SUBLANG_SPANISH_NICARAGUA = &h13
const SUBLANG_SPANISH_PUERTO_RICO = &h14
const SUBLANG_SPANISH_US = &h15
const SUBLANG_SWAHILI_KENYA = &h01


const SUBLANG_SWEDISH = &h01
const SUBLANG_SWEDISH_FINLAND = &h02
const SUBLANG_SYRIAC = &h01
const SUBLANG_SYRIAC_SYRIA = SUBLANG_SYRIAC
const SUBLANG_TAJIK_TAJIKISTAN = &h01
const SUBLANG_TAMAZIGHT_ALGERIA_LATIN = &h02
const SUBLANG_TAMAZIGHT_MOROCCO_TIFINAGH = &h04
const SUBLANG_TAMIL_INDIA = &h01
const SUBLANG_TAMIL_SRI_LANKA = &h02
const SUBLANG_TATAR_RUSSIA = &h01
const SUBLANG_TELUGU_INDIA = &h01
const SUBLANG_THAI_THAILAND = &h01
const SUBLANG_TIBETAN_PRC = &h01
const SUBLANG_TIBETAN_BHUTAN = &h02
const SUBLANG_TIGRIGNA_ERITREA = &h02
const SUBLANG_TIGRINYA_ERITREA = &h02
const SUBLANG_TIGRINYA_ETHIOPIA = &h01
const SUBLANG_TSWANA_BOTSWANA = &h02
const SUBLANG_TSWANA_SOUTH_AFRICA = &h01
const SUBLANG_TURKISH_TURKEY = &h01
const SUBLANG_TURKMEN_TURKMENISTAN = &h01
const SUBLANG_UIGHUR_PRC = &h01
const SUBLANG_UKRAINIAN_UKRAINE = &h01
const SUBLANG_UPPER_SORBIAN_GERMANY = &h01
const SUBLANG_URDU_PAKISTAN = &h01
const SUBLANG_URDU_INDIA = &h02
const SUBLANG_UZBEK_LATIN = &h01
const SUBLANG_UZBEK_CYRILLIC = &h02
const SUBLANG_VALENCIAN_VALENCIA = &h02
const SUBLANG_VIETNAMESE_VIETNAM = &h01
const SUBLANG_WELSH_UNITED_KINGDOM = &h01
const SUBLANG_WOLOF_SENEGAL = &h01
const SUBLANG_YORUBA_NIGERIA = &h01
const SUBLANG_XHOSA_SOUTH_AFRICA = &h01
const SUBLANG_YAKUT_RUSSIA = &h01
const SUBLANG_YI_PRC = &h01
const SUBLANG_ZULU_SOUTH_AFRICA = &h01
const SORT_DEFAULT = &h00
const SORT_INVARIANT_MATH = &h1
const SORT_JAPANESE_XJIS = &h00
const SORT_JAPANESE_UNICODE = &h1
const SORT_JAPANESE_RADICALSTROKE = &h4
const SORT_CHINESE_BIG5 = &h00
const SORT_CHINESE_PRCP = &h00
const SORT_CHINESE_UNICODE = &h1
const SORT_CHINESE_PRC = &h2
const SORT_CHINESE_BOPOMOFO = &h3
const SORT_CHINESE_RADICALSTROKE = &h4
const SORT_KOREAN_KSC = &h00
const SORT_KOREAN_UNICODE = &h1
const SORT_GERMAN_PHONE_BOOK = &h1
const SORT_HUNGARIAN_DEFAULT = &h00
const SORT_HUNGARIAN_TECHNICAL = &h1
const SORT_GEORGIAN_TRADITIONAL = &h00
const SORT_GEORGIAN_MODERN = &h1
const NLS_VALID_LOCALE_MASK = &h000fffff
const LOCALE_NAME_MAX_LENGTH = 85
const STATUS_WAIT_0 = cast(DWORD, &h000000000)
const STATUS_ABANDONED_WAIT_0 = cast(DWORD, &h00000080)
const STATUS_USER_APC = cast(DWORD, &h000000C0)
const STATUS_TIMEOUT = cast(DWORD, &h00000102)
const STATUS_PENDING = cast(DWORD, &h00000103)
const DBG_EXCEPTION_HANDLED = cast(DWORD, &h00010001)
const DBG_CONTINUE = cast(DWORD, &h00010002)
const STATUS_SEGMENT_NOTIFICATION = cast(DWORD, &h40000005)
const STATUS_FATAL_APP_EXIT = cast(DWORD, &h40000015)
const DBG_TERMINATE_THREAD = cast(DWORD, &h40010003)
const DBG_TERMINATE_PROCESS = cast(DWORD, &h40010004)
const DBG_CONTROL_C = cast(DWORD, &h40010005)
const DBG_PRINTEXCEPTION_C = cast(DWORD, &h40010006)
const DBG_RIPEXCEPTION = cast(DWORD, &h40010007)
const DBG_CONTROL_BREAK = cast(DWORD, &h40010008)
const DBG_COMMAND_EXCEPTION = cast(DWORD, &h40010009)
const STATUS_GUARD_PAGE_VIOLATION = cast(DWORD, &h80000001)
const STATUS_DATATYPE_MISALIGNMENT = cast(DWORD, &h80000002)
const STATUS_BREAKPOINT = cast(DWORD, &h80000003)
const STATUS_SINGLE_STEP = cast(DWORD, &h80000004)
const STATUS_LONGJUMP = cast(DWORD, &h80000026)
const STATUS_UNWIND_CONSOLIDATE = cast(DWORD, &h80000029)
const DBG_EXCEPTION_NOT_HANDLED = cast(DWORD, &h80010001)
const STATUS_ACCESS_VIOLATION = cast(DWORD, &hC0000005)
const STATUS_IN_PAGE_ERROR = cast(DWORD, &hC0000006)
const STATUS_INVALID_HANDLE = cast(DWORD, &hC0000008)
const STATUS_INVALID_PARAMETER = cast(DWORD, &hC000000D)
const STATUS_NO_MEMORY = cast(DWORD, &hC0000017)
const STATUS_ILLEGAL_INSTRUCTION = cast(DWORD, &hC000001D)
const STATUS_NONCONTINUABLE_EXCEPTION = cast(DWORD, &hC0000025)
const STATUS_INVALID_DISPOSITION = cast(DWORD, &hC0000026)
const STATUS_ARRAY_BOUNDS_EXCEEDED = cast(DWORD, &hC000008C)
const STATUS_FLOAT_DENORMAL_OPERAND = cast(DWORD, &hC000008D)
const STATUS_FLOAT_DIVIDE_BY_ZERO = cast(DWORD, &hC000008E)
const STATUS_FLOAT_INEXACT_RESULT = cast(DWORD, &hC000008F)
const STATUS_FLOAT_INVALID_OPERATION = cast(DWORD, &hC0000090)
const STATUS_FLOAT_OVERFLOW = cast(DWORD, &hC0000091)
const STATUS_FLOAT_STACK_CHECK = cast(DWORD, &hC0000092)
const STATUS_FLOAT_UNDERFLOW = cast(DWORD, &hC0000093)
const STATUS_INTEGER_DIVIDE_BY_ZERO = cast(DWORD, &hC0000094)
const STATUS_INTEGER_OVERFLOW = cast(DWORD, &hC0000095)
const STATUS_PRIVILEGED_INSTRUCTION = cast(DWORD, &hC0000096)
const STATUS_STACK_OVERFLOW = cast(DWORD, &hC00000FD)
const STATUS_DLL_NOT_FOUND = cast(DWORD, &hC0000135)
const STATUS_ORDINAL_NOT_FOUND = cast(DWORD, &hC0000138)
const STATUS_ENTRYPOINT_NOT_FOUND = cast(DWORD, &hC0000139)
const STATUS_CONTROL_C_EXIT = cast(DWORD, &hC000013A)
const STATUS_DLL_INIT_FAILED = cast(DWORD, &hC0000142)
const STATUS_FLOAT_MULTIPLE_FAULTS = cast(DWORD, &hC00002B4)
const STATUS_FLOAT_MULTIPLE_TRAPS = cast(DWORD, &hC00002B5)
const STATUS_REG_NAT_CONSUMPTION = cast(DWORD, &hC00002C9)
const STATUS_STACK_BUFFER_OVERRUN = cast(DWORD, &hC0000409)
const STATUS_INVALID_CRUNTIME_PARAMETER = cast(DWORD, &hC0000417)
const STATUS_ASSERTION_FAILURE = cast(DWORD, &hC0000420)
const STATUS_SXS_EARLY_DEACTIVATION = cast(DWORD, &hC015000F)
const STATUS_SXS_INVALID_DEACTIVATION = cast(DWORD, &hC0150010)
const MAXIMUM_WAIT_OBJECTS = 64
const MAXIMUM_SUSPEND_COUNT = MAXCHAR
type KSPIN_LOCK as ULONG_PTR
type PKSPIN_LOCK as KSPIN_LOCK ptr

type _M128A
 Low as ULONGLONG
 High as LONGLONG
end type

type M128A as _M128A
type PM128A as _M128A ptr

type _XSAVE_FORMAT
 ControlWord as WORD
 StatusWord as WORD
 TagWord as UBYTE
 Reserved1 as UBYTE
 ErrorOpcode as WORD
 ErrorOffset as DWORD
 ErrorSelector as WORD
 Reserved2 as WORD
 DataOffset as DWORD
 DataSelector as WORD
 Reserved3 as WORD
 MxCsr as DWORD
 MxCsr_Mask as DWORD
 FloatRegisters(0 to 7) as M128A

 XmmRegisters(0 to 7) as M128A
 Reserved4(0 to 219) as UBYTE
 Cr0NpxState as DWORD
end type

type XSAVE_FORMAT as _XSAVE_FORMAT
type PXSAVE_FORMAT as _XSAVE_FORMAT ptr

type _XSAVE_AREA_HEADER
 Mask as DWORD64
 Reserved(0 to 6) as DWORD64
end type

type XSAVE_AREA_HEADER as _XSAVE_AREA_HEADER
type PXSAVE_AREA_HEADER as _XSAVE_AREA_HEADER ptr

type _XSAVE_AREA
 LegacyState as XSAVE_FORMAT
 Header as XSAVE_AREA_HEADER
end type

type XSAVE_AREA as _XSAVE_AREA
type PXSAVE_AREA as _XSAVE_AREA ptr

type _XSTATE_CONTEXT
 Mask as DWORD64
 Length as DWORD
 Reserved1 as DWORD
 Area as PXSAVE_AREA

 Reserved2 as DWORD

 Buffer as PVOID

 Reserved3 as DWORD
end type

type XSTATE_CONTEXT as _XSTATE_CONTEXT
type PXSTATE_CONTEXT as _XSTATE_CONTEXT ptr

type _SCOPE_TABLE_AMD64_ScopeRecord
 BeginAddress as DWORD
 EndAddress as DWORD
 HandlerAddress as DWORD
 JumpTarget as DWORD
end type

type _SCOPE_TABLE_AMD64
 Count as DWORD
 ScopeRecord(0 to 0) as _SCOPE_TABLE_AMD64_ScopeRecord
end type

type SCOPE_TABLE_AMD64 as _SCOPE_TABLE_AMD64
type PSCOPE_TABLE_AMD64 as _SCOPE_TABLE_AMD64 ptr





type _TEB as _TEB_

 const PcTeb = &h18


const EXCEPTION_READ_FAULT = 0
const EXCEPTION_WRITE_FAULT = 1
const EXCEPTION_EXECUTE_FAULT = 8

 const SIZE_OF_80387_REGISTERS = 80
 const CONTEXT_i386 = &h00010000
 const CONTEXT_i486 = &h00010000
 const CONTEXT_CONTROL = CONTEXT_i386 or &h00000001
 const CONTEXT_INTEGER = CONTEXT_i386 or &h00000002
 const CONTEXT_SEGMENTS = CONTEXT_i386 or &h00000004
 const CONTEXT_FLOATING_POINT = CONTEXT_i386 or &h00000008
 const CONTEXT_DEBUG_REGISTERS = CONTEXT_i386 or &h00000010
 const CONTEXT_EXTENDED_REGISTERS = CONTEXT_i386 or &h00000020
 const CONTEXT_FULL = (CONTEXT_CONTROL or CONTEXT_INTEGER) or CONTEXT_SEGMENTS
 const CONTEXT_ALL = ((((CONTEXT_CONTROL or CONTEXT_INTEGER) or CONTEXT_SEGMENTS) or CONTEXT_FLOATING_POINT) or CONTEXT_DEBUG_REGISTERS) or CONTEXT_EXTENDED_REGISTERS
 const MAXIMUM_SUPPORTED_EXTENSION = 512

 type _FLOATING_SAVE_AREA
 ControlWord as DWORD
 StatusWord as DWORD
 TagWord as DWORD
 ErrorOffset as DWORD
 ErrorSelector as DWORD
 DataOffset as DWORD
 DataSelector as DWORD
 RegisterArea(0 to 79) as UBYTE
 Cr0NpxState as DWORD
 end type

 type FLOATING_SAVE_AREA as _FLOATING_SAVE_AREA
 type PFLOATING_SAVE_AREA as FLOATING_SAVE_AREA ptr

type _CONTEXT_

 ContextFlags as DWORD

 Dr0 as DWORD
 Dr1 as DWORD
 Dr2 as DWORD
 Dr3 as DWORD
 Dr6 as DWORD
 Dr7 as DWORD
 FloatSave as FLOATING_SAVE_AREA
 SegGs as DWORD
 SegFs as DWORD
 SegEs as DWORD
 SegDs as DWORD
 Edi as DWORD
 Esi as DWORD
 Ebx as DWORD
 Edx as DWORD
 Ecx as DWORD
 Eax as DWORD
 Ebp as DWORD
 Eip as DWORD
 SegCs as DWORD

 EFlags as DWORD

 Esp as DWORD
 SegSs as DWORD
 ExtendedRegisters(0 to 511) as UBYTE
end type

type CONTEXT as _CONTEXT

 type PCONTEXT as CONTEXT ptr


type _LDT_ENTRY_HighWord_Bytes
 BaseMid as UBYTE
 Flags1 as UBYTE
 Flags2 as UBYTE
 BaseHi as UBYTE
end type

type _LDT_ENTRY_HighWord_Bits
 BaseMid : 8 as DWORD
 as DWORD Type : 5
 Dpl : 2 as DWORD
 Pres : 1 as DWORD
 LimitHi : 4 as DWORD
 Sys : 1 as DWORD
 Reserved_0 : 1 as DWORD
 Default_Big : 1 as DWORD
 Granularity : 1 as DWORD
 BaseHi : 8 as DWORD
end type

union _LDT_ENTRY_HighWord
 Bytes as _LDT_ENTRY_HighWord_Bytes
 Bits as _LDT_ENTRY_HighWord_Bits
end union

type _LDT_ENTRY
 LimitLow as WORD
 BaseLow as WORD
 HighWord as _LDT_ENTRY_HighWord
end type

type LDT_ENTRY as _LDT_ENTRY
type PLDT_ENTRY as _LDT_ENTRY ptr
const EXCEPTION_NONCONTINUABLE = &h1
const EXCEPTION_UNWINDING = &h2
const EXCEPTION_EXIT_UNWIND = &h4
const EXCEPTION_STACK_INVALID = &h8
const EXCEPTION_NESTED_CALL = &h10
const EXCEPTION_TARGET_UNWIND = &h20
const EXCEPTION_COLLIDED_UNWIND = &h40
const EXCEPTION_UNWIND = &h66
const EXCEPTION_MAXIMUM_PARAMETERS = 15

type _EXCEPTION_RECORD_
 ExceptionCode as DWORD
 ExceptionFlags as DWORD
 ExceptionRecord as _EXCEPTION_RECORD ptr
 ExceptionAddress as PVOID
 NumberParameters as DWORD
 ExceptionInformation(0 to 14) as ULONG_PTR
end type

type EXCEPTION_RECORD as _EXCEPTION_RECORD
type PEXCEPTION_RECORD as EXCEPTION_RECORD ptr

type _EXCEPTION_RECORD32
 ExceptionCode as DWORD
 ExceptionFlags as DWORD
 ExceptionRecord as DWORD
 ExceptionAddress as DWORD
 NumberParameters as DWORD
 ExceptionInformation(0 to 14) as DWORD
end type

type EXCEPTION_RECORD32 as _EXCEPTION_RECORD32
type PEXCEPTION_RECORD32 as _EXCEPTION_RECORD32 ptr

type _EXCEPTION_RECORD64
 ExceptionCode as DWORD
 ExceptionFlags as DWORD
 ExceptionRecord as DWORD64
 ExceptionAddress as DWORD64
 NumberParameters as DWORD
 __unusedAlignment as DWORD
 ExceptionInformation(0 to 14) as DWORD64
end type

type EXCEPTION_RECORD64 as _EXCEPTION_RECORD64
type PEXCEPTION_RECORD64 as _EXCEPTION_RECORD64 ptr

type _EXCEPTION_POINTERS
 ExceptionRecord as PEXCEPTION_RECORD
 ContextRecord as PCONTEXT
end type

type EXCEPTION_POINTERS as _EXCEPTION_POINTERS
type PEXCEPTION_POINTERS as _EXCEPTION_POINTERS ptr


type PACCESS_TOKEN as PVOID
type PSECURITY_DESCRIPTOR as PVOID
type PSID as PVOID
type PCLAIMS_BLOB as PVOID
type ACCESS_MASK as DWORD
type PACCESS_MASK as ACCESS_MASK ptr

const DELETE__ = &h00010000
const READ_CONTROL = &h00020000
const WRITE_DAC = &h00040000
const WRITE_OWNER = &h00080000
const SYNCHRONIZE = &h00100000
const STANDARD_RIGHTS_REQUIRED = &h000F0000
const STANDARD_RIGHTS_READ = READ_CONTROL
const STANDARD_RIGHTS_WRITE = READ_CONTROL
const STANDARD_RIGHTS_EXECUTE = READ_CONTROL
const STANDARD_RIGHTS_ALL = &h001F0000
const SPECIFIC_RIGHTS_ALL = &h0000FFFF
const ACCESS_SYSTEM_SECURITY = &h01000000
const MAXIMUM_ALLOWED = &h02000000
const GENERIC_READ = &h80000000
const GENERIC_WRITE = &h40000000
const GENERIC_EXECUTE = &h20000000
const GENERIC_ALL = &h10000000

type _GENERIC_MAPPING
 GenericRead as ACCESS_MASK
 GenericWrite as ACCESS_MASK
 GenericExecute as ACCESS_MASK
 GenericAll as ACCESS_MASK
end type

type GENERIC_MAPPING as _GENERIC_MAPPING
type PGENERIC_MAPPING as GENERIC_MAPPING ptr

type _LUID_AND_ATTRIBUTES field = 4
 Luid as LUID
 Attributes as DWORD
end type

type LUID_AND_ATTRIBUTES as _LUID_AND_ATTRIBUTES
type PLUID_AND_ATTRIBUTES as _LUID_AND_ATTRIBUTES ptr
type PLUID_AND_ATTRIBUTES_ARRAY as LUID_AND_ATTRIBUTES ptr

type _SID_IDENTIFIER_AUTHORITY
 Value(0 to 5) as UBYTE
end type

type SID_IDENTIFIER_AUTHORITY as _SID_IDENTIFIER_AUTHORITY
type PSID_IDENTIFIER_AUTHORITY as _SID_IDENTIFIER_AUTHORITY ptr

type _SID
 Revision as UBYTE
 SubAuthorityCount as UBYTE
 IdentifierAuthority as SID_IDENTIFIER_AUTHORITY
 SubAuthority(0 to 0) as DWORD
end type

type SID as _SID
type PISID as _SID ptr
const SID_REVISION = 1
const SID_MAX_SUB_AUTHORITIES = 15
const SID_RECOMMENDED_SUB_AUTHORITIES = 1
const SID_HASH_SIZE = 32

type _SID_NAME_USE as long
enum
 SidTypeUser = 1
 SidTypeGroup
 SidTypeDomain
 SidTypeAlias
 SidTypeWellKnownGroup
 SidTypeDeletedAccount
 SidTypeInvalid
 SidTypeUnknown
 SidTypeComputer
 SidTypeLabel
end enum

type SID_NAME_USE as _SID_NAME_USE
type PSID_NAME_USE as _SID_NAME_USE ptr

type _SID_AND_ATTRIBUTES
 Sid as PSID
 Attributes as DWORD
end type

type SID_AND_ATTRIBUTES as _SID_AND_ATTRIBUTES
type PSID_AND_ATTRIBUTES as _SID_AND_ATTRIBUTES ptr
type PSID_AND_ATTRIBUTES_ARRAY as SID_AND_ATTRIBUTES ptr
type SID_HASH_ENTRY as ULONG_PTR
type PSID_HASH_ENTRY as ULONG_PTR ptr

type _SID_AND_ATTRIBUTES_HASH
 SidCount as DWORD
 SidAttr as PSID_AND_ATTRIBUTES
 Hash(0 to 31) as SID_HASH_ENTRY
end type

type SID_AND_ATTRIBUTES_HASH as _SID_AND_ATTRIBUTES_HASH
type PSID_AND_ATTRIBUTES_HASH as _SID_AND_ATTRIBUTES_HASH ptr
const SECURITY_NULL_RID = &h000000000
const SECURITY_WORLD_RID = &h000000000
const SECURITY_LOCAL_RID = &h000000000
const SECURITY_LOCAL_LOGON_RID = &h00000001
const SECURITY_CREATOR_OWNER_RID = &h000000000
const SECURITY_CREATOR_GROUP_RID = &h00000001
const SECURITY_CREATOR_OWNER_SERVER_RID = &h00000002
const SECURITY_CREATOR_GROUP_SERVER_RID = &h00000003
const SECURITY_CREATOR_OWNER_RIGHTS_RID = &h00000004
const SECURITY_DIALUP_RID = &h00000001
const SECURITY_NETWORK_RID = &h00000002
const SECURITY_BATCH_RID = &h00000003
const SECURITY_INTERACTIVE_RID = &h00000004
const SECURITY_LOGON_IDS_RID = &h00000005
const SECURITY_LOGON_IDS_RID_COUNT = 3
const SECURITY_SERVICE_RID = &h00000006
const SECURITY_ANONYMOUS_LOGON_RID = &h00000007
const SECURITY_PROXY_RID = &h00000008
const SECURITY_ENTERPRISE_CONTROLLERS_RID = &h00000009
const SECURITY_SERVER_LOGON_RID = SECURITY_ENTERPRISE_CONTROLLERS_RID
const SECURITY_PRINCIPAL_SELF_RID = &h0000000A
const SECURITY_AUTHENTICATED_USER_RID = &h0000000B
const SECURITY_RESTRICTED_CODE_RID = &h0000000C
const SECURITY_TERMINAL_SERVER_RID = &h0000000D
const SECURITY_REMOTE_LOGON_RID = &h0000000E
const SECURITY_THIS_ORGANIZATION_RID = &h0000000F
const SECURITY_IUSER_RID = &h00000011
const SECURITY_LOCAL_SYSTEM_RID = &h00000012
const SECURITY_LOCAL_SERVICE_RID = &h00000013
const SECURITY_NETWORK_SERVICE_RID = &h00000014
const SECURITY_NT_NON_UNIQUE = &h00000015
const SECURITY_NT_NON_UNIQUE_SUB_AUTH_COUNT = 3
const SECURITY_ENTERPRISE_READONLY_CONTROLLERS_RID = &h00000016
const SECURITY_BUILTIN_DOMAIN_RID = &h00000020
const SECURITY_WRITE_RESTRICTED_CODE_RID = &h00000021
const SECURITY_PACKAGE_BASE_RID = &h00000040
const SECURITY_PACKAGE_RID_COUNT = 2
const SECURITY_PACKAGE_NTLM_RID = &h0000000A
const SECURITY_PACKAGE_SCHANNEL_RID = &h0000000E
const SECURITY_PACKAGE_DIGEST_RID = &h00000015
const SECURITY_CRED_TYPE_BASE_RID = &h00000041
const SECURITY_CRED_TYPE_RID_COUNT = 2
const SECURITY_CRED_TYPE_THIS_ORG_CERT_RID = &h00000001
const SECURITY_MIN_BASE_RID = &h00000050
const SECURITY_SERVICE_ID_BASE_RID = &h00000050
const SECURITY_SERVICE_ID_RID_COUNT = 6
const SECURITY_RESERVED_ID_BASE_RID = &h00000051
const SECURITY_APPPOOL_ID_BASE_RID = &h00000052
const SECURITY_APPPOOL_ID_RID_COUNT = 6
const SECURITY_VIRTUALSERVER_ID_BASE_RID = &h00000053
const SECURITY_VIRTUALSERVER_ID_RID_COUNT = 6
const SECURITY_USERMODEDRIVERHOST_ID_BASE_RID = &h00000054
const SECURITY_USERMODEDRIVERHOST_ID_RID_COUNT = 6
const SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_BASE_RID = &h00000055
const SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_RID_COUNT = 6
const SECURITY_WMIHOST_ID_BASE_RID = &h00000056
const SECURITY_WMIHOST_ID_RID_COUNT = 6
const SECURITY_TASK_ID_BASE_RID = &h00000057
const SECURITY_NFS_ID_BASE_RID = &h00000058
const SECURITY_COM_ID_BASE_RID = &h00000059
const SECURITY_WINDOW_MANAGER_BASE_RID = &h0000005a
const SECURITY_RDV_GFX_BASE_RID = &h0000005b
const SECURITY_DASHOST_ID_BASE_RID = &h0000005c
const SECURITY_DASHOST_ID_RID_COUNT = 6
const SECURITY_VIRTUALACCOUNT_ID_RID_COUNT = 6
const SECURITY_MAX_BASE_RID = &h0000006f
const SECURITY_MAX_ALWAYS_FILTERED = &h000003E7
const SECURITY_MIN_NEVER_FILTERED = &h000003E8
const SECURITY_OTHER_ORGANIZATION_RID = &h000003E8
const SECURITY_WINDOWSMOBILE_ID_BASE_RID = &h00000070
const DOMAIN_GROUP_RID_AUTHORIZATION_DATA_IS_COMPOUNDED = &h000001f0
const DOMAIN_GROUP_RID_AUTHORIZATION_DATA_CONTAINS_CLAIMS = &h000001f1
const DOMAIN_GROUP_RID_ENTERPRISE_READONLY_DOMAIN_CONTROLLERS = &h000001f2
const FOREST_USER_RID_MAX = &h000001F3
const DOMAIN_USER_RID_ADMIN = &h000001F4
const DOMAIN_USER_RID_GUEST = &h000001F5
const DOMAIN_USER_RID_KRBTGT = &h000001F6
const DOMAIN_USER_RID_MAX = &h000003E7
const DOMAIN_GROUP_RID_ADMINS = &h00000200
const DOMAIN_GROUP_RID_USERS = &h00000201
const DOMAIN_GROUP_RID_GUESTS = &h00000202
const DOMAIN_GROUP_RID_COMPUTERS = &h00000203
const DOMAIN_GROUP_RID_CONTROLLERS = &h00000204
const DOMAIN_GROUP_RID_CERT_ADMINS = &h00000205
const DOMAIN_GROUP_RID_SCHEMA_ADMINS = &h00000206
const DOMAIN_GROUP_RID_ENTERPRISE_ADMINS = &h00000207
const DOMAIN_GROUP_RID_POLICY_ADMINS = &h00000208
const DOMAIN_GROUP_RID_READONLY_CONTROLLERS = &h00000209
const DOMAIN_GROUP_RID_CLONEABLE_CONTROLLERS = &h0000020a
const DOMAIN_ALIAS_RID_ADMINS = &h00000220
const DOMAIN_ALIAS_RID_USERS = &h00000221
const DOMAIN_ALIAS_RID_GUESTS = &h00000222
const DOMAIN_ALIAS_RID_POWER_USERS = &h00000223
const DOMAIN_ALIAS_RID_ACCOUNT_OPS = &h00000224
const DOMAIN_ALIAS_RID_SYSTEM_OPS = &h00000225
const DOMAIN_ALIAS_RID_PRINT_OPS = &h00000226
const DOMAIN_ALIAS_RID_BACKUP_OPS = &h00000227
const DOMAIN_ALIAS_RID_REPLICATOR = &h00000228
const DOMAIN_ALIAS_RID_RAS_SERVERS = &h00000229
const DOMAIN_ALIAS_RID_PREW2KCOMPACCESS = &h0000022A
const DOMAIN_ALIAS_RID_REMOTE_DESKTOP_USERS = &h0000022B
const DOMAIN_ALIAS_RID_NETWORK_CONFIGURATION_OPS = &h0000022C
const DOMAIN_ALIAS_RID_INCOMING_FOREST_TRUST_BUILDERS = &h0000022D
const DOMAIN_ALIAS_RID_MONITORING_USERS = &h0000022E
const DOMAIN_ALIAS_RID_LOGGING_USERS = &h0000022F
const DOMAIN_ALIAS_RID_AUTHORIZATIONACCESS = &h00000230
const DOMAIN_ALIAS_RID_TS_LICENSE_SERVERS = &h00000231
const DOMAIN_ALIAS_RID_DCOM_USERS = &h00000232
const DOMAIN_ALIAS_RID_IUSERS = &h00000238
const DOMAIN_ALIAS_RID_CRYPTO_OPERATORS = &h00000239
const DOMAIN_ALIAS_RID_CACHEABLE_PRINCIPALS_GROUP = &h0000023B
const DOMAIN_ALIAS_RID_NON_CACHEABLE_PRINCIPALS_GROUP = &h0000023C
const DOMAIN_ALIAS_RID_EVENT_LOG_READERS_GROUP = &h0000023D
const DOMAIN_ALIAS_RID_CERTSVC_DCOM_ACCESS_GROUP = &h0000023e
const DOMAIN_ALIAS_RID_RDS_REMOTE_ACCESS_SERVERS = &h0000023f
const DOMAIN_ALIAS_RID_RDS_ENDPOINT_SERVERS = &h00000240
const DOMAIN_ALIAS_RID_RDS_MANAGEMENT_SERVERS = &h00000241
const DOMAIN_ALIAS_RID_HYPER_V_ADMINS = &h00000242
const DOMAIN_ALIAS_RID_ACCESS_CONTROL_ASSISTANCE_OPS = &h00000243
const DOMAIN_ALIAS_RID_REMOTE_MANAGEMENT_USERS = &h00000244
const SECURITY_APP_PACKAGE_BASE_RID = &h00000002
const SECURITY_BUILTIN_APP_PACKAGE_RID_COUNT = 2
const SECURITY_APP_PACKAGE_RID_COUNT = 8
const SECURITY_CAPABILITY_BASE_RID = &h00000003
const SECURITY_BUILTIN_CAPABILITY_RID_COUNT = 2
const SECURITY_CAPABILITY_RID_COUNT = 5
const SECURITY_BUILTIN_PACKAGE_ANY_PACKAGE = &h00000001
const SECURITY_CAPABILITY_INTERNET_CLIENT = &h00000001
const SECURITY_CAPABILITY_INTERNET_CLIENT_SERVER = &h00000002
const SECURITY_CAPABILITY_PRIVATE_NETWORK_CLIENT_SERVER = &h00000003
const SECURITY_CAPABILITY_PICTURES_LIBRARY = &h00000004
const SECURITY_CAPABILITY_VIDEOS_LIBRARY = &h00000005
const SECURITY_CAPABILITY_MUSIC_LIBRARY = &h00000006
const SECURITY_CAPABILITY_DOCUMENTS_LIBRARY = &h00000007
const SECURITY_CAPABILITY_ENTERPRISE_AUTHENTICATION = &h00000008
const SECURITY_CAPABILITY_SHARED_USER_CERTIFICATES = &h00000009
const SECURITY_CAPABILITY_REMOVABLE_STORAGE = &h0000000a
const SECURITY_CAPABILITY_INTERNET_EXPLORER = &h00001000
const SECURITY_MANDATORY_UNTRUSTED_RID = &h000000000
const SECURITY_MANDATORY_LOW_RID = &h00001000
const SECURITY_MANDATORY_MEDIUM_RID = &h00002000
const SECURITY_MANDATORY_HIGH_RID = &h00003000
const SECURITY_MANDATORY_SYSTEM_RID = &h00004000
const SECURITY_MANDATORY_PROTECTED_PROCESS_RID = &h00005000
const SECURITY_MANDATORY_MAXIMUM_USER_RID = SECURITY_MANDATORY_SYSTEM_RID
const SECURITY_AUTHENTICATION_AUTHORITY_RID_COUNT = 1
const SECURITY_AUTHENTICATION_AUTHORITY_ASSERTED_RID = &h00000001
const SECURITY_AUTHENTICATION_SERVICE_ASSERTED_RID = &h00000002
const SECURITY_TRUSTED_INSTALLER_RID1 = 956008885
const SECURITY_TRUSTED_INSTALLER_RID2 = 3418522649
const SECURITY_TRUSTED_INSTALLER_RID3 = 1831038044
const SECURITY_TRUSTED_INSTALLER_RID4 = 1853292631
const SECURITY_TRUSTED_INSTALLER_RID5 = 2271478464

type WELL_KNOWN_SID_TYPE as long
enum
 WinNullSid = 0
 WinWorldSid = 1
 WinLocalSid = 2
 WinCreatorOwnerSid = 3
 WinCreatorGroupSid = 4
 WinCreatorOwnerServerSid = 5
 WinCreatorGroupServerSid = 6
 WinNtAuthoritySid = 7
 WinDialupSid = 8
 WinNetworkSid = 9
 WinBatchSid = 10
 WinInteractiveSid = 11
 WinServiceSid = 12
 WinAnonymousSid = 13
 WinProxySid = 14
 WinEnterpriseControllersSid = 15
 WinSelfSid = 16
 WinAuthenticatedUserSid = 17
 WinRestrictedCodeSid = 18
 WinTerminalServerSid = 19
 WinRemoteLogonIdSid = 20
 WinLogonIdsSid = 21
 WinLocalSystemSid = 22
 WinLocalServiceSid = 23
 WinNetworkServiceSid = 24
 WinBuiltinDomainSid = 25
 WinBuiltinAdministratorsSid = 26
 WinBuiltinUsersSid = 27
 WinBuiltinGuestsSid = 28
 WinBuiltinPowerUsersSid = 29
 WinBuiltinAccountOperatorsSid = 30
 WinBuiltinSystemOperatorsSid = 31
 WinBuiltinPrintOperatorsSid = 32
 WinBuiltinBackupOperatorsSid = 33
 WinBuiltinReplicatorSid = 34
 WinBuiltinPreWindows2000CompatibleAccessSid = 35
 WinBuiltinRemoteDesktopUsersSid = 36
 WinBuiltinNetworkConfigurationOperatorsSid = 37
 WinAccountAdministratorSid = 38
 WinAccountGuestSid = 39
 WinAccountKrbtgtSid = 40
 WinAccountDomainAdminsSid = 41
 WinAccountDomainUsersSid = 42
 WinAccountDomainGuestsSid = 43
 WinAccountComputersSid = 44
 WinAccountControllersSid = 45
 WinAccountCertAdminsSid = 46
 WinAccountSchemaAdminsSid = 47
 WinAccountEnterpriseAdminsSid = 48
 WinAccountPolicyAdminsSid = 49
 WinAccountRasAndIasServersSid = 50
 WinNTLMAuthenticationSid = 51
 WinDigestAuthenticationSid = 52
 WinSChannelAuthenticationSid = 53
 WinThisOrganizationSid = 54
 WinOtherOrganizationSid = 55
 WinBuiltinIncomingForestTrustBuildersSid = 56
 WinBuiltinPerfMonitoringUsersSid = 57
 WinBuiltinPerfLoggingUsersSid = 58
 WinBuiltinAuthorizationAccessSid = 59
 WinBuiltinTerminalServerLicenseServersSid = 60
 WinBuiltinDCOMUsersSid = 61
 WinBuiltinIUsersSid = 62
 WinIUserSid = 63
 WinBuiltinCryptoOperatorsSid = 64
 WinUntrustedLabelSid = 65
 WinLowLabelSid = 66
 WinMediumLabelSid = 67
 WinHighLabelSid = 68
 WinSystemLabelSid = 69
 WinWriteRestrictedCodeSid = 70
 WinCreatorOwnerRightsSid = 71
 WinCacheablePrincipalsGroupSid = 72
 WinNonCacheablePrincipalsGroupSid = 73
 WinEnterpriseReadonlyControllersSid = 74
 WinAccountReadonlyControllersSid = 75
 WinBuiltinEventLogReadersGroup = 76
 WinNewEnterpriseReadonlyControllersSid = 77
 WinBuiltinCertSvcDComAccessGroup = 78
 WinMediumPlusLabelSid = 79
 WinLocalLogonSid = 80
 WinConsoleLogonSid = 81
 WinThisOrganizationCertificateSid = 82
 WinApplicationPackageAuthoritySid = 83
 WinBuiltinAnyPackageSid = 84
 WinCapabilityInternetClientSid = 85
 WinCapabilityInternetClientServerSid = 86
 WinCapabilityPrivateNetworkClientServerSid = 87
 WinCapabilityPicturesLibrarySid = 88
 WinCapabilityVideosLibrarySid = 89
 WinCapabilityMusicLibrarySid = 90
 WinCapabilityDocumentsLibrarySid = 91
 WinCapabilitySharedUserCertificatesSid = 92
 WinCapabilityEnterpriseAuthenticationSid = 93
 WinCapabilityRemovableStorageSid = 94
 WinBuiltinRDSRemoteAccessServersSid = 95
 WinBuiltinRDSEndpointServersSid = 96
 WinBuiltinRDSManagementServersSid = 97
 WinUserModeDriversSid = 98
 WinBuiltinHyperVAdminsSid = 99
 WinAccountCloneableControllersSid = 100
 WinBuiltinAccessControlAssistanceOperatorsSid = 101
 WinBuiltinRemoteManagementUsersSid = 102
 WinAuthenticationAuthorityAssertedSid = 103
 WinAuthenticationServiceAssertedSid = 104
end enum

const SE_GROUP_MANDATORY = &h00000001
const SE_GROUP_ENABLED_BY_DEFAULT = &h00000002
const SE_GROUP_ENABLED = &h00000004
const SE_GROUP_OWNER = &h00000008
const SE_GROUP_USE_FOR_DENY_ONLY = &h00000010
const SE_GROUP_INTEGRITY = &h00000020
const SE_GROUP_INTEGRITY_ENABLED = &h00000040
const SE_GROUP_LOGON_ID = &hC0000000
const SE_GROUP_RESOURCE = &h20000000
const SE_GROUP_VALID_ATTRIBUTES = (((((((SE_GROUP_MANDATORY or SE_GROUP_ENABLED_BY_DEFAULT) or SE_GROUP_ENABLED) or SE_GROUP_OWNER) or SE_GROUP_USE_FOR_DENY_ONLY) or SE_GROUP_LOGON_ID) or SE_GROUP_RESOURCE) or SE_GROUP_INTEGRITY) or SE_GROUP_INTEGRITY_ENABLED
const ACL_REVISION = 2
const ACL_REVISION_DS = 4
const ACL_REVISION1 = 1
const ACL_REVISION2 = 2
const MIN_ACL_REVISION = ACL_REVISION2
const ACL_REVISION3 = 3
const ACL_REVISION4 = 4
const MAX_ACL_REVISION = ACL_REVISION4

type _ACL
 AclRevision as UBYTE
 Sbz1 as UBYTE
 AclSize as WORD
 AceCount as WORD
 Sbz2 as WORD
end type

type ACL as _ACL
type PACL as ACL ptr

type _ACE_HEADER
 AceType as UBYTE
 AceFlags as UBYTE
 AceSize as WORD
end type

type ACE_HEADER as _ACE_HEADER
type PACE_HEADER as ACE_HEADER ptr
const ACCESS_MIN_MS_ACE_TYPE = &h00
const ACCESS_ALLOWED_ACE_TYPE = &h00
const ACCESS_DENIED_ACE_TYPE = &h1
const SYSTEM_AUDIT_ACE_TYPE = &h2
const SYSTEM_ALARM_ACE_TYPE = &h3
const ACCESS_MAX_MS_V2_ACE_TYPE = &h3
const ACCESS_ALLOWED_COMPOUND_ACE_TYPE = &h4
const ACCESS_MAX_MS_V3_ACE_TYPE = &h4
const ACCESS_MIN_MS_OBJECT_ACE_TYPE = &h5
const ACCESS_ALLOWED_OBJECT_ACE_TYPE = &h5
const ACCESS_DENIED_OBJECT_ACE_TYPE = &h6
const SYSTEM_AUDIT_OBJECT_ACE_TYPE = &h7
const SYSTEM_ALARM_OBJECT_ACE_TYPE = &h8
const ACCESS_MAX_MS_OBJECT_ACE_TYPE = &h8
const ACCESS_MAX_MS_V4_ACE_TYPE = &h8
const ACCESS_MAX_MS_ACE_TYPE = &h8
const ACCESS_ALLOWED_CALLBACK_ACE_TYPE = &h9
const ACCESS_DENIED_CALLBACK_ACE_TYPE = &hA
const ACCESS_ALLOWED_CALLBACK_OBJECT_ACE_TYPE = &hB
const ACCESS_DENIED_CALLBACK_OBJECT_ACE_TYPE = &hC
const SYSTEM_AUDIT_CALLBACK_ACE_TYPE = &hD
const SYSTEM_ALARM_CALLBACK_ACE_TYPE = &hE
const SYSTEM_AUDIT_CALLBACK_OBJECT_ACE_TYPE = &hF
const SYSTEM_ALARM_CALLBACK_OBJECT_ACE_TYPE = &h10
const SYSTEM_MANDATORY_LABEL_ACE_TYPE = &h11
const SYSTEM_RESOURCE_ATTRIBUTE_ACE_TYPE = &h12
const SYSTEM_SCOPED_POLICY_ID_ACE_TYPE = &h13
const ACCESS_MAX_MS_V5_ACE_TYPE = &h13
const OBJECT_INHERIT_ACE = &h1
const CONTAINER_INHERIT_ACE = &h2
const NO_PROPAGATE_INHERIT_ACE = &h4
const INHERIT_ONLY_ACE = &h8
const INHERITED_ACE = &h10
const VALID_INHERIT_FLAGS = &h1F
const SUCCESSFUL_ACCESS_ACE_FLAG = &h40
const FAILED_ACCESS_ACE_FLAG = &h80

type _ACCESS_ALLOWED_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 SidStart as DWORD
end type

type ACCESS_ALLOWED_ACE as _ACCESS_ALLOWED_ACE
type PACCESS_ALLOWED_ACE as ACCESS_ALLOWED_ACE ptr

type _ACCESS_DENIED_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 SidStart as DWORD
end type

type ACCESS_DENIED_ACE as _ACCESS_DENIED_ACE
type PACCESS_DENIED_ACE as ACCESS_DENIED_ACE ptr

type _SYSTEM_AUDIT_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 SidStart as DWORD
end type

type SYSTEM_AUDIT_ACE as _SYSTEM_AUDIT_ACE
type PSYSTEM_AUDIT_ACE as SYSTEM_AUDIT_ACE ptr

type _SYSTEM_ALARM_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 SidStart as DWORD
end type

type SYSTEM_ALARM_ACE as _SYSTEM_ALARM_ACE
type PSYSTEM_ALARM_ACE as SYSTEM_ALARM_ACE ptr

type _SYSTEM_RESOURCE_ATTRIBUTE_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 SidStart as DWORD
end type

type SYSTEM_RESOURCE_ATTRIBUTE_ACE as _SYSTEM_RESOURCE_ATTRIBUTE_ACE
type PSYSTEM_RESOURCE_ATTRIBUTE_ACE as _SYSTEM_RESOURCE_ATTRIBUTE_ACE ptr

type _SYSTEM_SCOPED_POLICY_ID_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 SidStart as DWORD
end type

type SYSTEM_SCOPED_POLICY_ID_ACE as _SYSTEM_SCOPED_POLICY_ID_ACE
type PSYSTEM_SCOPED_POLICY_ID_ACE as _SYSTEM_SCOPED_POLICY_ID_ACE ptr

type _SYSTEM_MANDATORY_LABEL_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 SidStart as DWORD
end type

type SYSTEM_MANDATORY_LABEL_ACE as _SYSTEM_MANDATORY_LABEL_ACE
type PSYSTEM_MANDATORY_LABEL_ACE as _SYSTEM_MANDATORY_LABEL_ACE ptr
const SYSTEM_MANDATORY_LABEL_NO_WRITE_UP = &h1
const SYSTEM_MANDATORY_LABEL_NO_READ_UP = &h2
const SYSTEM_MANDATORY_LABEL_NO_EXECUTE_UP = &h4
const SYSTEM_MANDATORY_LABEL_VALID_MASK = (SYSTEM_MANDATORY_LABEL_NO_WRITE_UP or SYSTEM_MANDATORY_LABEL_NO_READ_UP) or SYSTEM_MANDATORY_LABEL_NO_EXECUTE_UP

type _ACCESS_ALLOWED_OBJECT_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 Flags as DWORD
 ObjectType as GUID
 InheritedObjectType as GUID
 SidStart as DWORD
end type

type ACCESS_ALLOWED_OBJECT_ACE as _ACCESS_ALLOWED_OBJECT_ACE
type PACCESS_ALLOWED_OBJECT_ACE as _ACCESS_ALLOWED_OBJECT_ACE ptr

type _ACCESS_DENIED_OBJECT_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 Flags as DWORD
 ObjectType as GUID
 InheritedObjectType as GUID
 SidStart as DWORD
end type

type ACCESS_DENIED_OBJECT_ACE as _ACCESS_DENIED_OBJECT_ACE
type PACCESS_DENIED_OBJECT_ACE as _ACCESS_DENIED_OBJECT_ACE ptr

type _SYSTEM_AUDIT_OBJECT_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 Flags as DWORD
 ObjectType as GUID
 InheritedObjectType as GUID
 SidStart as DWORD
end type

type SYSTEM_AUDIT_OBJECT_ACE as _SYSTEM_AUDIT_OBJECT_ACE
type PSYSTEM_AUDIT_OBJECT_ACE as _SYSTEM_AUDIT_OBJECT_ACE ptr

type _SYSTEM_ALARM_OBJECT_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 Flags as DWORD
 ObjectType as GUID
 InheritedObjectType as GUID
 SidStart as DWORD
end type

type SYSTEM_ALARM_OBJECT_ACE as _SYSTEM_ALARM_OBJECT_ACE
type PSYSTEM_ALARM_OBJECT_ACE as _SYSTEM_ALARM_OBJECT_ACE ptr

type _ACCESS_ALLOWED_CALLBACK_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 SidStart as DWORD
end type

type ACCESS_ALLOWED_CALLBACK_ACE as _ACCESS_ALLOWED_CALLBACK_ACE
type PACCESS_ALLOWED_CALLBACK_ACE as _ACCESS_ALLOWED_CALLBACK_ACE ptr

type _ACCESS_DENIED_CALLBACK_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 SidStart as DWORD
end type

type ACCESS_DENIED_CALLBACK_ACE as _ACCESS_DENIED_CALLBACK_ACE
type PACCESS_DENIED_CALLBACK_ACE as _ACCESS_DENIED_CALLBACK_ACE ptr

type _SYSTEM_AUDIT_CALLBACK_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 SidStart as DWORD
end type

type SYSTEM_AUDIT_CALLBACK_ACE as _SYSTEM_AUDIT_CALLBACK_ACE
type PSYSTEM_AUDIT_CALLBACK_ACE as _SYSTEM_AUDIT_CALLBACK_ACE ptr

type _SYSTEM_ALARM_CALLBACK_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 SidStart as DWORD
end type

type SYSTEM_ALARM_CALLBACK_ACE as _SYSTEM_ALARM_CALLBACK_ACE
type PSYSTEM_ALARM_CALLBACK_ACE as _SYSTEM_ALARM_CALLBACK_ACE ptr

type _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 Flags as DWORD
 ObjectType as GUID
 InheritedObjectType as GUID
 SidStart as DWORD
end type

type ACCESS_ALLOWED_CALLBACK_OBJECT_ACE as _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE
type PACCESS_ALLOWED_CALLBACK_OBJECT_ACE as _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE ptr

type _ACCESS_DENIED_CALLBACK_OBJECT_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 Flags as DWORD
 ObjectType as GUID
 InheritedObjectType as GUID
 SidStart as DWORD
end type

type ACCESS_DENIED_CALLBACK_OBJECT_ACE as _ACCESS_DENIED_CALLBACK_OBJECT_ACE
type PACCESS_DENIED_CALLBACK_OBJECT_ACE as _ACCESS_DENIED_CALLBACK_OBJECT_ACE ptr

type _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 Flags as DWORD
 ObjectType as GUID
 InheritedObjectType as GUID
 SidStart as DWORD
end type

type SYSTEM_AUDIT_CALLBACK_OBJECT_ACE as _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE
type PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE as _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE ptr

type _SYSTEM_ALARM_CALLBACK_OBJECT_ACE
 Header as ACE_HEADER
 Mask as ACCESS_MASK
 Flags as DWORD
 ObjectType as GUID
 InheritedObjectType as GUID
 SidStart as DWORD
end type

type SYSTEM_ALARM_CALLBACK_OBJECT_ACE as _SYSTEM_ALARM_CALLBACK_OBJECT_ACE
type PSYSTEM_ALARM_CALLBACK_OBJECT_ACE as _SYSTEM_ALARM_CALLBACK_OBJECT_ACE ptr
const ACE_OBJECT_TYPE_PRESENT = &h1
const ACE_INHERITED_OBJECT_TYPE_PRESENT = &h2

type _ACL_INFORMATION_CLASS as long
enum
 AclRevisionInformation = 1
 AclSizeInformation
end enum

type ACL_INFORMATION_CLASS as _ACL_INFORMATION_CLASS

type _ACL_REVISION_INFORMATION
 AclRevision as DWORD
end type

type ACL_REVISION_INFORMATION as _ACL_REVISION_INFORMATION
type PACL_REVISION_INFORMATION as ACL_REVISION_INFORMATION ptr

type _ACL_SIZE_INFORMATION
 AceCount as DWORD
 AclBytesInUse as DWORD
 AclBytesFree as DWORD
end type

type ACL_SIZE_INFORMATION as _ACL_SIZE_INFORMATION
type PACL_SIZE_INFORMATION as ACL_SIZE_INFORMATION ptr
const SECURITY_DESCRIPTOR_REVISION = 1
const SECURITY_DESCRIPTOR_REVISION1 = 1
type SECURITY_DESCRIPTOR_CONTROL as WORD
type PSECURITY_DESCRIPTOR_CONTROL as WORD ptr
const SE_OWNER_DEFAULTED = &h0001
const SE_GROUP_DEFAULTED = &h0002
const SE_DACL_PRESENT = &h0004
const SE_DACL_DEFAULTED = &h0008
const SE_SACL_PRESENT = &h0010
const SE_SACL_DEFAULTED = &h0020
const SE_DACL_AUTO_INHERIT_REQ = &h0100
const SE_SACL_AUTO_INHERIT_REQ = &h0200
const SE_DACL_AUTO_INHERITED = &h0400
const SE_SACL_AUTO_INHERITED = &h0800
const SE_DACL_PROTECTED = &h1000
const SE_SACL_PROTECTED = &h2000
const SE_RM_CONTROL_VALID = &h4000
const SE_SELF_RELATIVE = &h8000

type _SECURITY_DESCRIPTOR_RELATIVE
 Revision as UBYTE
 Sbz1 as UBYTE
 Control as SECURITY_DESCRIPTOR_CONTROL
 Owner as DWORD
 Group as DWORD
 Sacl as DWORD
 Dacl as DWORD
end type

type SECURITY_DESCRIPTOR_RELATIVE as _SECURITY_DESCRIPTOR_RELATIVE
type PISECURITY_DESCRIPTOR_RELATIVE as _SECURITY_DESCRIPTOR_RELATIVE ptr

type _SECURITY_DESCRIPTOR
 Revision as UBYTE
 Sbz1 as UBYTE
 Control as SECURITY_DESCRIPTOR_CONTROL
 Owner as PSID
 Group as PSID
 Sacl as PACL
 Dacl as PACL
end type

type SECURITY_DESCRIPTOR as _SECURITY_DESCRIPTOR
type PISECURITY_DESCRIPTOR as _SECURITY_DESCRIPTOR ptr

type _OBJECT_TYPE_LIST
 Level as WORD
 Sbz as WORD
 ObjectType as GUID ptr
end type

type OBJECT_TYPE_LIST as _OBJECT_TYPE_LIST
type POBJECT_TYPE_LIST as _OBJECT_TYPE_LIST ptr
const ACCESS_OBJECT_GUID = 0
const ACCESS_PROPERTY_SET_GUID = 1
const ACCESS_PROPERTY_GUID = 2
const ACCESS_MAX_LEVEL = 4

type _AUDIT_EVENT_TYPE as long
enum
 AuditEventObjectAccess
 AuditEventDirectoryServiceAccess
end enum

type AUDIT_EVENT_TYPE as _AUDIT_EVENT_TYPE
type PAUDIT_EVENT_TYPE as _AUDIT_EVENT_TYPE ptr
const AUDIT_ALLOW_NO_PRIVILEGE = &h1
const SE_PRIVILEGE_ENABLED_BY_DEFAULT = &h00000001
const SE_PRIVILEGE_ENABLED = &h00000002
const SE_PRIVILEGE_REMOVED = &h00000004
const SE_PRIVILEGE_USED_FOR_ACCESS = &h80000000
const SE_PRIVILEGE_VALID_ATTRIBUTES = ((SE_PRIVILEGE_ENABLED_BY_DEFAULT or SE_PRIVILEGE_ENABLED) or SE_PRIVILEGE_REMOVED) or SE_PRIVILEGE_USED_FOR_ACCESS
const PRIVILEGE_SET_ALL_NECESSARY = 1

type _PRIVILEGE_SET
 PrivilegeCount as DWORD
 Control as DWORD
 Privilege(0 to 0) as LUID_AND_ATTRIBUTES
end type

type PRIVILEGE_SET as _PRIVILEGE_SET
type PPRIVILEGE_SET as _PRIVILEGE_SET ptr
const ACCESS_REASON_TYPE_MASK = &h00ff0000
const ACCESS_REASON_DATA_MASK = &h0000ffff
const ACCESS_REASON_STAGING_MASK = &h80000000
const ACCESS_REASON_EXDATA_MASK = &h7f000000

type _ACCESS_REASON_TYPE as long
enum
 AccessReasonNone = &h000000000
 AccessReasonAllowedAce = &h00010000
 AccessReasonDeniedAce = &h00020000
 AccessReasonAllowedParentAce = &h00030000
 AccessReasonDeniedParentAce = &h00040000
 AccessReasonNotGrantedByCape = &h00050000
 AccessReasonNotGrantedByParentCape = &h00060000
 AccessReasonNotGrantedToAppContainer = &h00070000
 AccessReasonMissingPrivilege = &h00100000
 AccessReasonFromPrivilege = &h00200000
 AccessReasonIntegrityLevel = &h00300000
 AccessReasonOwnership = &h00400000
 AccessReasonNullDacl = &h00500000
 AccessReasonEmptyDacl = &h00600000
 AccessReasonNoSD = &h00700000
 AccessReasonNoGrant = &h00800000
end enum

type ACCESS_REASON_TYPE as _ACCESS_REASON_TYPE
type ACCESS_REASON as DWORD

type _ACCESS_REASONS
 Data(0 to 31) as ACCESS_REASON
end type

type ACCESS_REASONS as _ACCESS_REASONS
type PACCESS_REASONS as _ACCESS_REASONS ptr
const SE_SECURITY_DESCRIPTOR_FLAG_NO_OWNER_ACE = &h00000001
const SE_SECURITY_DESCRIPTOR_FLAG_NO_LABEL_ACE = &h00000002
const SE_SECURITY_DESCRIPTOR_VALID_FLAGS = &h00000003

type _SE_SECURITY_DESCRIPTOR
 Size as DWORD
 Flags as DWORD
 SecurityDescriptor as PSECURITY_DESCRIPTOR
end type

type SE_SECURITY_DESCRIPTOR as _SE_SECURITY_DESCRIPTOR
type PSE_SECURITY_DESCRIPTOR as _SE_SECURITY_DESCRIPTOR ptr

type _SE_ACCESS_REQUEST
 Size as DWORD
 SeSecurityDescriptor as PSE_SECURITY_DESCRIPTOR
 DesiredAccess as ACCESS_MASK
 PreviouslyGrantedAccess as ACCESS_MASK
 PrincipalSelfSid as PSID
 GenericMapping as PGENERIC_MAPPING
 ObjectTypeListCount as DWORD
 ObjectTypeList as POBJECT_TYPE_LIST
end type

type SE_ACCESS_REQUEST as _SE_ACCESS_REQUEST
type PSE_ACCESS_REQUEST as _SE_ACCESS_REQUEST ptr

type _SE_ACCESS_REPLY
 Size as DWORD
 ResultListCount as DWORD
 GrantedAccess as PACCESS_MASK
 AccessStatus as PDWORD
 AccessReason as PACCESS_REASONS
 Privileges as PPRIVILEGE_SET ptr
end type

type SE_ACCESS_REPLY as _SE_ACCESS_REPLY
type PSE_ACCESS_REPLY as _SE_ACCESS_REPLY ptr

type _SECURITY_IMPERSONATION_LEVEL as long
enum
 SecurityAnonymous
 SecurityIdentification
 SecurityImpersonation
 SecurityDelegation
end enum

type SECURITY_IMPERSONATION_LEVEL as _SECURITY_IMPERSONATION_LEVEL
type PSECURITY_IMPERSONATION_LEVEL as _SECURITY_IMPERSONATION_LEVEL ptr
const SECURITY_MAX_IMPERSONATION_LEVEL = SecurityDelegation
const SECURITY_MIN_IMPERSONATION_LEVEL = SecurityAnonymous
const DEFAULT_IMPERSONATION_LEVEL = SecurityImpersonation
const TOKEN_ASSIGN_PRIMARY = &h0001
const TOKEN_DUPLICATE = &h0002
const TOKEN_IMPERSONATE = &h0004
const TOKEN_QUERY = &h0008
const TOKEN_QUERY_SOURCE = &h0010
const TOKEN_ADJUST_PRIVILEGES = &h0020
const TOKEN_ADJUST_GROUPS = &h0040
const TOKEN_ADJUST_DEFAULT = &h0080
const TOKEN_ADJUST_SESSIONID = &h0100
const TOKEN_ALL_ACCESS_P = (((((((STANDARD_RIGHTS_REQUIRED or TOKEN_ASSIGN_PRIMARY) or TOKEN_DUPLICATE) or TOKEN_IMPERSONATE) or TOKEN_QUERY) or TOKEN_QUERY_SOURCE) or TOKEN_ADJUST_PRIVILEGES) or TOKEN_ADJUST_GROUPS) or TOKEN_ADJUST_DEFAULT
const TOKEN_ALL_ACCESS = TOKEN_ALL_ACCESS_P or TOKEN_ADJUST_SESSIONID
const TOKEN_READ = STANDARD_RIGHTS_READ or TOKEN_QUERY
const TOKEN_WRITE = ((STANDARD_RIGHTS_WRITE or TOKEN_ADJUST_PRIVILEGES) or TOKEN_ADJUST_GROUPS) or TOKEN_ADJUST_DEFAULT
const TOKEN_EXECUTE = STANDARD_RIGHTS_EXECUTE

type _TOKEN_TYPE as long
enum
 TokenPrimary = 1
 TokenImpersonation
end enum

type TOKEN_TYPE as _TOKEN_TYPE
type PTOKEN_TYPE as TOKEN_TYPE ptr

type _TOKEN_ELEVATION_TYPE as long
enum
 TokenElevationTypeDefault = 1
 TokenElevationTypeFull
 TokenElevationTypeLimited
end enum

type TOKEN_ELEVATION_TYPE as _TOKEN_ELEVATION_TYPE
type PTOKEN_ELEVATION_TYPE as _TOKEN_ELEVATION_TYPE ptr

type _TOKEN_INFORMATION_CLASS as long
enum
 TokenUser = 1
 TokenGroups
 TokenPrivileges
 TokenOwner
 TokenPrimaryGroup
 TokenDefaultDacl
 TokenSource
 TokenType
 TokenImpersonationLevel
 TokenStatistics
 TokenRestrictedSids
 TokenSessionId
 TokenGroupsAndPrivileges
 TokenSessionReference
 TokenSandBoxInert
 TokenAuditPolicy
 TokenOrigin
 TokenElevationType
 TokenLinkedToken
 TokenElevation
 TokenHasRestrictions
 TokenAccessInformation
 TokenVirtualizationAllowed
 TokenVirtualizationEnabled
 TokenIntegrityLevel
 TokenUIAccess
 TokenMandatoryPolicy
 TokenLogonSid
 TokenIsAppContainer
 TokenCapabilities
 TokenAppContainerSid
 TokenAppContainerNumber
 TokenUserClaimAttributes
 TokenDeviceClaimAttributes
 TokenRestrictedUserClaimAttributes
 TokenRestrictedDeviceClaimAttributes
 TokenDeviceGroups
 TokenRestrictedDeviceGroups
 TokenSecurityAttributes
 TokenIsRestricted
 MaxTokenInfoClass
end enum

type TOKEN_INFORMATION_CLASS as _TOKEN_INFORMATION_CLASS
type PTOKEN_INFORMATION_CLASS as _TOKEN_INFORMATION_CLASS ptr

type _TOKEN_USER
 User as SID_AND_ATTRIBUTES
end type

type TOKEN_USER as _TOKEN_USER
type PTOKEN_USER as _TOKEN_USER ptr

type _TOKEN_GROUPS
 GroupCount as DWORD
 Groups(0 to 0) as SID_AND_ATTRIBUTES
end type

type TOKEN_GROUPS as _TOKEN_GROUPS
type PTOKEN_GROUPS as _TOKEN_GROUPS ptr

type _TOKEN_PRIVILEGES
 PrivilegeCount as DWORD
 Privileges(0 to 0) as LUID_AND_ATTRIBUTES
end type

type TOKEN_PRIVILEGES as _TOKEN_PRIVILEGES
type PTOKEN_PRIVILEGES as _TOKEN_PRIVILEGES ptr

type _TOKEN_OWNER
 Owner as PSID
end type

type TOKEN_OWNER as _TOKEN_OWNER
type PTOKEN_OWNER as _TOKEN_OWNER ptr

type _TOKEN_PRIMARY_GROUP
 PrimaryGroup as PSID
end type

type TOKEN_PRIMARY_GROUP as _TOKEN_PRIMARY_GROUP
type PTOKEN_PRIMARY_GROUP as _TOKEN_PRIMARY_GROUP ptr

type _TOKEN_DEFAULT_DACL
 DefaultDacl as PACL
end type

type TOKEN_DEFAULT_DACL as _TOKEN_DEFAULT_DACL
type PTOKEN_DEFAULT_DACL as _TOKEN_DEFAULT_DACL ptr

type _TOKEN_USER_CLAIMS
 UserClaims as PCLAIMS_BLOB
end type

type TOKEN_USER_CLAIMS as _TOKEN_USER_CLAIMS
type PTOKEN_USER_CLAIMS as _TOKEN_USER_CLAIMS ptr

type _TOKEN_DEVICE_CLAIMS
 DeviceClaims as PCLAIMS_BLOB
end type

type TOKEN_DEVICE_CLAIMS as _TOKEN_DEVICE_CLAIMS
type PTOKEN_DEVICE_CLAIMS as _TOKEN_DEVICE_CLAIMS ptr

type _TOKEN_GROUPS_AND_PRIVILEGES
 SidCount as DWORD
 SidLength as DWORD
 Sids as PSID_AND_ATTRIBUTES
 RestrictedSidCount as DWORD
 RestrictedSidLength as DWORD
 RestrictedSids as PSID_AND_ATTRIBUTES
 PrivilegeCount as DWORD
 PrivilegeLength as DWORD
 Privileges as PLUID_AND_ATTRIBUTES
 AuthenticationId as LUID
end type

type TOKEN_GROUPS_AND_PRIVILEGES as _TOKEN_GROUPS_AND_PRIVILEGES
type PTOKEN_GROUPS_AND_PRIVILEGES as _TOKEN_GROUPS_AND_PRIVILEGES ptr

type _TOKEN_LINKED_TOKEN
 LinkedToken as HANDLE
end type

type TOKEN_LINKED_TOKEN as _TOKEN_LINKED_TOKEN
type PTOKEN_LINKED_TOKEN as _TOKEN_LINKED_TOKEN ptr

type _TOKEN_ELEVATION
 TokenIsElevated as DWORD
end type

type TOKEN_ELEVATION as _TOKEN_ELEVATION
type PTOKEN_ELEVATION as _TOKEN_ELEVATION ptr

type _TOKEN_MANDATORY_LABEL
 Label as SID_AND_ATTRIBUTES
end type

type TOKEN_MANDATORY_LABEL as _TOKEN_MANDATORY_LABEL
type PTOKEN_MANDATORY_LABEL as _TOKEN_MANDATORY_LABEL ptr
const TOKEN_MANDATORY_POLICY_OFF = &h00
const TOKEN_MANDATORY_POLICY_NO_WRITE_UP = &h1
const TOKEN_MANDATORY_POLICY_NEW_PROCESS_MIN = &h2
const TOKEN_MANDATORY_POLICY_VALID_MASK = TOKEN_MANDATORY_POLICY_NO_WRITE_UP or TOKEN_MANDATORY_POLICY_NEW_PROCESS_MIN

type _TOKEN_MANDATORY_POLICY
 Policy as DWORD
end type

type TOKEN_MANDATORY_POLICY as _TOKEN_MANDATORY_POLICY
type PTOKEN_MANDATORY_POLICY as _TOKEN_MANDATORY_POLICY ptr

type _TOKEN_ACCESS_INFORMATION
 SidHash as PSID_AND_ATTRIBUTES_HASH
 RestrictedSidHash as PSID_AND_ATTRIBUTES_HASH
 Privileges as PTOKEN_PRIVILEGES
 AuthenticationId as LUID
 TokenType as TOKEN_TYPE
 ImpersonationLevel as SECURITY_IMPERSONATION_LEVEL
 MandatoryPolicy as TOKEN_MANDATORY_POLICY
 Flags as DWORD
 AppContainerNumber as DWORD
 PackageSid as PSID
 CapabilitiesHash as PSID_AND_ATTRIBUTES_HASH
end type

type TOKEN_ACCESS_INFORMATION as _TOKEN_ACCESS_INFORMATION
type PTOKEN_ACCESS_INFORMATION as _TOKEN_ACCESS_INFORMATION ptr
const POLICY_AUDIT_SUBCATEGORY_COUNT = 56

type _TOKEN_AUDIT_POLICY
 PerUserPolicy(0 to ((56 shr 1) + 1) - 1) as UCHAR
end type

type TOKEN_AUDIT_POLICY as _TOKEN_AUDIT_POLICY
type PTOKEN_AUDIT_POLICY as _TOKEN_AUDIT_POLICY ptr
const TOKEN_SOURCE_LENGTH = 8

type _TOKEN_SOURCE
 SourceName as zstring * 8
 SourceIdentifier as LUID
end type

type TOKEN_SOURCE as _TOKEN_SOURCE
type PTOKEN_SOURCE as _TOKEN_SOURCE ptr

type _TOKEN_STATISTICS
 TokenId as LUID
 AuthenticationId as LUID
 ExpirationTime as LARGE_INTEGER
 TokenType as TOKEN_TYPE
 ImpersonationLevel as SECURITY_IMPERSONATION_LEVEL
 DynamicCharged as DWORD
 DynamicAvailable as DWORD
 GroupCount as DWORD
 PrivilegeCount as DWORD
 ModifiedId as LUID
end type

type TOKEN_STATISTICS as _TOKEN_STATISTICS
type PTOKEN_STATISTICS as _TOKEN_STATISTICS ptr

type _TOKEN_CONTROL
 TokenId as LUID
 AuthenticationId as LUID
 ModifiedId as LUID
 TokenSource as TOKEN_SOURCE
end type

type TOKEN_CONTROL as _TOKEN_CONTROL
type PTOKEN_CONTROL as _TOKEN_CONTROL ptr

type _TOKEN_ORIGIN
 OriginatingLogonSession as LUID
end type

type TOKEN_ORIGIN as _TOKEN_ORIGIN
type PTOKEN_ORIGIN as _TOKEN_ORIGIN ptr

type _MANDATORY_LEVEL as long
enum
 MandatoryLevelUntrusted = 0
 MandatoryLevelLow
 MandatoryLevelMedium
 MandatoryLevelHigh
 MandatoryLevelSystem
 MandatoryLevelSecureProcess
 MandatoryLevelCount
end enum

type MANDATORY_LEVEL as _MANDATORY_LEVEL
type PMANDATORY_LEVEL as _MANDATORY_LEVEL ptr

type _TOKEN_APPCONTAINER_INFORMATION
 TokenAppContainer as PSID
end type

type TOKEN_APPCONTAINER_INFORMATION as _TOKEN_APPCONTAINER_INFORMATION
type PTOKEN_APPCONTAINER_INFORMATION as _TOKEN_APPCONTAINER_INFORMATION ptr
const CLAIM_SECURITY_ATTRIBUTE_TYPE_INVALID = &h000
const CLAIM_SECURITY_ATTRIBUTE_TYPE_INT64 = &h01
const CLAIM_SECURITY_ATTRIBUTE_TYPE_UINT64 = &h02
const CLAIM_SECURITY_ATTRIBUTE_TYPE_STRING = &h03
const CLAIM_SECURITY_ATTRIBUTE_TYPE_FQBN = &h04
const CLAIM_SECURITY_ATTRIBUTE_TYPE_SID = &h05
const CLAIM_SECURITY_ATTRIBUTE_TYPE_BOOLEAN = &h06

type _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE
 Version as DWORD64
 Name as PWSTR
end type

type CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE as _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE
type PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE as _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE ptr

type _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE
 pValue as PVOID
 ValueLength as DWORD
end type

type CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE as _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE
type PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE as _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE ptr
const CLAIM_SECURITY_ATTRIBUTE_TYPE_OCTET_STRING = &h10
const CLAIM_SECURITY_ATTRIBUTE_NON_INHERITABLE = &h0001
const CLAIM_SECURITY_ATTRIBUTE_VALUE_CASE_SENSITIVE = &h0002
const CLAIM_SECURITY_ATTRIBUTE_USE_FOR_DENY_ONLY = &h0004
const CLAIM_SECURITY_ATTRIBUTE_DISABLED_BY_DEFAULT = &h0008
const CLAIM_SECURITY_ATTRIBUTE_DISABLED = &h0010
const CLAIM_SECURITY_ATTRIBUTE_MANDATORY = &h0020
const CLAIM_SECURITY_ATTRIBUTE_VALID_FLAGS = ((((CLAIM_SECURITY_ATTRIBUTE_NON_INHERITABLE or CLAIM_SECURITY_ATTRIBUTE_VALUE_CASE_SENSITIVE) or CLAIM_SECURITY_ATTRIBUTE_USE_FOR_DENY_ONLY) or CLAIM_SECURITY_ATTRIBUTE_DISABLED_BY_DEFAULT) or CLAIM_SECURITY_ATTRIBUTE_DISABLED) or CLAIM_SECURITY_ATTRIBUTE_MANDATORY
const CLAIM_SECURITY_ATTRIBUTE_CUSTOM_FLAGS = &hffff0000

union _CLAIM_SECURITY_ATTRIBUTE_V1_Values
 pInt64 as PLONG64
 pUint64 as PDWORD64
 ppString as PWSTR ptr
 pFqbn as PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE
 pOctetString as PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE
end union

type _CLAIM_SECURITY_ATTRIBUTE_V1
 Name as PWSTR
 ValueType as WORD
 Reserved as WORD
 Flags as DWORD
 ValueCount as DWORD
 Values as _CLAIM_SECURITY_ATTRIBUTE_V1_Values
end type

type CLAIM_SECURITY_ATTRIBUTE_V1 as _CLAIM_SECURITY_ATTRIBUTE_V1
type PCLAIM_SECURITY_ATTRIBUTE_V1 as _CLAIM_SECURITY_ATTRIBUTE_V1 ptr

union _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1_Values
 pInt64(0 to 0) as DWORD
 pUint64(0 to 0) as DWORD
 ppString(0 to 0) as DWORD
 pFqbn(0 to 0) as DWORD
 pOctetString(0 to 0) as DWORD
end union

type _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1
 Name as DWORD
 ValueType as WORD
 Reserved as WORD
 Flags as DWORD
 ValueCount as DWORD
 Values as _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1_Values
end type

type CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 as _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1
type PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 as _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 ptr
const CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION_V1 = 1
const CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION = CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION_V1

union _CLAIM_SECURITY_ATTRIBUTES_INFORMATION_Attribute
 pAttributeV1 as PCLAIM_SECURITY_ATTRIBUTE_V1
end union

type _CLAIM_SECURITY_ATTRIBUTES_INFORMATION
 Version as WORD
 Reserved as WORD
 AttributeCount as DWORD
 Attribute as _CLAIM_SECURITY_ATTRIBUTES_INFORMATION_Attribute
end type

type CLAIM_SECURITY_ATTRIBUTES_INFORMATION as _CLAIM_SECURITY_ATTRIBUTES_INFORMATION
type PCLAIM_SECURITY_ATTRIBUTES_INFORMATION as _CLAIM_SECURITY_ATTRIBUTES_INFORMATION ptr
const SECURITY_DYNAMIC_TRACKING = CTRUE
const SECURITY_STATIC_TRACKING = FALSE
type SECURITY_CONTEXT_TRACKING_MODE as WINBOOLEAN
type PSECURITY_CONTEXT_TRACKING_MODE as WINBOOLEAN ptr

type _SECURITY_QUALITY_OF_SERVICE
 Length as DWORD
 ImpersonationLevel as SECURITY_IMPERSONATION_LEVEL
 ContextTrackingMode as SECURITY_CONTEXT_TRACKING_MODE
 EffectiveOnly as WINBOOLEAN
end type

type SECURITY_QUALITY_OF_SERVICE as _SECURITY_QUALITY_OF_SERVICE
type PSECURITY_QUALITY_OF_SERVICE as _SECURITY_QUALITY_OF_SERVICE ptr

type _SE_IMPERSONATION_STATE
 Token as PACCESS_TOKEN
 CopyOnOpen as WINBOOLEAN
 EffectiveOnly as WINBOOLEAN
 Level as SECURITY_IMPERSONATION_LEVEL
end type

type SE_IMPERSONATION_STATE as _SE_IMPERSONATION_STATE
type PSE_IMPERSONATION_STATE as _SE_IMPERSONATION_STATE ptr
const DISABLE_MAX_PRIVILEGE = &h1
const SANDBOX_INERT = &h2
const LUA_TOKEN = &h4
const WRITE_RESTRICTED = &h8
type SECURITY_INFORMATION as DWORD
type PSECURITY_INFORMATION as DWORD ptr
const OWNER_SECURITY_INFORMATION = &h00000001
const GROUP_SECURITY_INFORMATION = &h00000002
const DACL_SECURITY_INFORMATION = &h00000004
const SACL_SECURITY_INFORMATION = &h00000008
const LABEL_SECURITY_INFORMATION = &h00000010
const ATTRIBUTE_SECURITY_INFORMATION = &h00000020
const SCOPE_SECURITY_INFORMATION = &h00000040
const BACKUP_SECURITY_INFORMATION = &h00010000
const PROTECTED_DACL_SECURITY_INFORMATION = &h80000000
const PROTECTED_SACL_SECURITY_INFORMATION = &h40000000
const UNPROTECTED_DACL_SECURITY_INFORMATION = &h20000000
const UNPROTECTED_SACL_SECURITY_INFORMATION = &h10000000

type _SE_LEARNING_MODE_DATA_TYPE as long
enum
 SeLearningModeInvalidType = 0
 SeLearningModeSettings
 SeLearningModeMax
end enum

type SE_LEARNING_MODE_DATA_TYPE as _SE_LEARNING_MODE_DATA_TYPE
const SE_LEARNING_MODE_FLAG_PERMISSIVE = &h00000001

type _SECURITY_CAPABILITIES
 AppContainerSid as PSID
 Capabilities as PSID_AND_ATTRIBUTES
 CapabilityCount as DWORD
 Reserved as DWORD
end type

type SECURITY_CAPABILITIES as _SECURITY_CAPABILITIES
type PSECURITY_CAPABILITIES as _SECURITY_CAPABILITIES ptr
type LPSECURITY_CAPABILITIES as _SECURITY_CAPABILITIES ptr

const PROCESS_TERMINATE = &h0001
const PROCESS_CREATE_THREAD = &h0002
const PROCESS_SET_SESSIONID = &h0004
const PROCESS_VM_OPERATION = &h0008
const PROCESS_VM_READ = &h0010
const PROCESS_VM_WRITE = &h0020
const PROCESS_DUP_HANDLE = &h0040
const PROCESS_CREATE_PROCESS = &h0080
const PROCESS_SET_QUOTA = &h0100
const PROCESS_SET_INFORMATION = &h0200
const PROCESS_QUERY_INFORMATION = &h0400
const PROCESS_SUSPEND_RESUME = &h0800
const PROCESS_QUERY_LIMITED_INFORMATION = &h1000

 const PROCESS_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED or SYNCHRONIZE) or &hfff

 const MAXIMUM_PROC_PER_GROUP = 32

const MAXIMUM_PROCESSORS = MAXIMUM_PROC_PER_GROUP
const THREAD_TERMINATE = &h0001
const THREAD_SUSPEND_RESUME = &h0002
const THREAD_GET_CONTEXT = &h0008
const THREAD_SET_CONTEXT = &h0010
const THREAD_SET_INFORMATION = &h0020
const THREAD_QUERY_INFORMATION = &h0040
const THREAD_SET_THREAD_TOKEN = &h0080
const THREAD_IMPERSONATE = &h0100
const THREAD_DIRECT_IMPERSONATION = &h0200
const THREAD_SET_LIMITED_INFORMATION = &h0400
const THREAD_QUERY_LIMITED_INFORMATION = &h0800

 const THREAD_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED or SYNCHRONIZE) or &h3ff

const JOB_OBJECT_ASSIGN_PROCESS = &h0001
const JOB_OBJECT_SET_ATTRIBUTES = &h0002
const JOB_OBJECT_QUERY = &h0004
const JOB_OBJECT_TERMINATE = &h0008
const JOB_OBJECT_SET_SECURITY_ATTRIBUTES = &h0010
const JOB_OBJECT_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED or SYNCHRONIZE) or &h1F

type _JOB_SET_ARRAY
 JobHandle as HANDLE
 MemberLevel as DWORD
 Flags as DWORD
end type

type JOB_SET_ARRAY as _JOB_SET_ARRAY
type PJOB_SET_ARRAY as _JOB_SET_ARRAY ptr
const FLS_MAXIMUM_AVAILABLE = 128
const TLS_MINIMUM_AVAILABLE = 64

type _EXCEPTION_REGISTRATION_RECORD
 union
 Next as _EXCEPTION_REGISTRATION_RECORD ptr
 prev as _EXCEPTION_REGISTRATION_RECORD ptr
 end union

 union
 Handler as PEXCEPTION_ROUTINE
 end union
end type

type EXCEPTION_REGISTRATION_RECORD as _EXCEPTION_REGISTRATION_RECORD
type PEXCEPTION_REGISTRATION_RECORD as EXCEPTION_REGISTRATION_RECORD ptr
type EXCEPTION_REGISTRATION as EXCEPTION_REGISTRATION_RECORD
type PEXCEPTION_REGISTRATION as PEXCEPTION_REGISTRATION_RECORD

type _NT_TIB
 ExceptionList as _EXCEPTION_REGISTRATION_RECORD ptr
 StackBase as PVOID
 StackLimit as PVOID
 SubSystemTib as PVOID

 union
 FiberData as PVOID
 Version as DWORD
 end union

 ArbitraryUserPointer as PVOID
 Self as _NT_TIB ptr
end type

type NT_TIB as _NT_TIB
type PNT_TIB as NT_TIB ptr

type _NT_TIB32
 ExceptionList as DWORD
 StackBase as DWORD
 StackLimit as DWORD
 SubSystemTib as DWORD

 union
 FiberData as DWORD
 Version as DWORD
 end union

 ArbitraryUserPointer as DWORD
 Self as DWORD
end type

type NT_TIB32 as _NT_TIB32
type PNT_TIB32 as _NT_TIB32 ptr

type _NT_TIB64
 ExceptionList as DWORD64
 StackBase as DWORD64
 StackLimit as DWORD64
 SubSystemTib as DWORD64

 union
 FiberData as DWORD64
 Version as DWORD
 end union

 ArbitraryUserPointer as DWORD64
 Self as DWORD64
end type

type NT_TIB64 as _NT_TIB64
type PNT_TIB64 as _NT_TIB64 ptr
const THREAD_BASE_PRIORITY_LOWRT = 15
const THREAD_BASE_PRIORITY_MAX = 2
const THREAD_BASE_PRIORITY_MIN = -2
const THREAD_BASE_PRIORITY_IDLE = -15

type _UMS_CREATE_THREAD_ATTRIBUTES
 UmsVersion as DWORD
 UmsContext as PVOID
 UmsCompletionList as PVOID
end type

type UMS_CREATE_THREAD_ATTRIBUTES as _UMS_CREATE_THREAD_ATTRIBUTES
type PUMS_CREATE_THREAD_ATTRIBUTES as _UMS_CREATE_THREAD_ATTRIBUTES ptr

type _QUOTA_LIMITS
 PagedPoolLimit as SIZE_T_
 NonPagedPoolLimit as SIZE_T_
 MinimumWorkingSetSize as SIZE_T_
 MaximumWorkingSetSize as SIZE_T_
 PagefileLimit as SIZE_T_
 TimeLimit as LARGE_INTEGER
end type

type QUOTA_LIMITS as _QUOTA_LIMITS
type PQUOTA_LIMITS as _QUOTA_LIMITS ptr
const QUOTA_LIMITS_HARDWS_MIN_ENABLE = &h00000001
const QUOTA_LIMITS_HARDWS_MIN_DISABLE = &h00000002
const QUOTA_LIMITS_HARDWS_MAX_ENABLE = &h00000004
const QUOTA_LIMITS_HARDWS_MAX_DISABLE = &h00000008
const QUOTA_LIMITS_USE_DEFAULT_LIMITS = &h00000010

union _RATE_QUOTA_LIMIT
 RateData as DWORD

 type
 RatePercent : 7 as DWORD
 Reserved0 : 25 as DWORD
 end type
end union

type RATE_QUOTA_LIMIT as _RATE_QUOTA_LIMIT
type PRATE_QUOTA_LIMIT as _RATE_QUOTA_LIMIT ptr

type _QUOTA_LIMITS_EX
 PagedPoolLimit as SIZE_T_
 NonPagedPoolLimit as SIZE_T_
 MinimumWorkingSetSize as SIZE_T_
 MaximumWorkingSetSize as SIZE_T_
 PagefileLimit as SIZE_T_
 TimeLimit as LARGE_INTEGER
 WorkingSetLimit as SIZE_T_
 Reserved2 as SIZE_T_
 Reserved3 as SIZE_T_
 Reserved4 as SIZE_T_
 Flags as DWORD
 CpuRateLimit as RATE_QUOTA_LIMIT
end type

type QUOTA_LIMITS_EX as _QUOTA_LIMITS_EX
type PQUOTA_LIMITS_EX as _QUOTA_LIMITS_EX ptr

type _IO_COUNTERS
 ReadOperationCount as ULONGLONG
 WriteOperationCount as ULONGLONG
 OtherOperationCount as ULONGLONG
 ReadTransferCount as ULONGLONG
 WriteTransferCount as ULONGLONG
 OtherTransferCount as ULONGLONG
end type

type IO_COUNTERS as _IO_COUNTERS
type PIO_COUNTERS as IO_COUNTERS ptr
const MAX_HW_COUNTERS = 16
const THREAD_PROFILING_FLAG_DISPATCH = &h1

type _HARDWARE_COUNTER_TYPE as long
enum
 PMCCounter
 MaxHardwareCounterType
end enum

type HARDWARE_COUNTER_TYPE as _HARDWARE_COUNTER_TYPE
type PHARDWARE_COUNTER_TYPE as _HARDWARE_COUNTER_TYPE ptr

type _PROCESS_MITIGATION_POLICY as long
enum
 ProcessDEPPolicy
 ProcessASLRPolicy
 ProcessReserved1MitigationPolicy
 ProcessStrictHandleCheckPolicy
 ProcessSystemCallDisablePolicy
 ProcessMitigationOptionsMask
 ProcessExtensionPointDisablePolicy
 MaxProcessMitigationPolicy
end enum

type PROCESS_MITIGATION_POLICY as _PROCESS_MITIGATION_POLICY
type PPROCESS_MITIGATION_POLICY as _PROCESS_MITIGATION_POLICY ptr

type _PROCESS_MITIGATION_ASLR_POLICY
 union
 Flags as DWORD

 type
 EnableBottomUpRandomization : 1 as DWORD
 EnableForceRelocateImages : 1 as DWORD
 EnableHighEntropy : 1 as DWORD
 DisallowStrippedImages : 1 as DWORD
 ReservedFlags : 28 as DWORD
 end type
 end union
end type

type PROCESS_MITIGATION_ASLR_POLICY as _PROCESS_MITIGATION_ASLR_POLICY
type PPROCESS_MITIGATION_ASLR_POLICY as _PROCESS_MITIGATION_ASLR_POLICY ptr

type _PROCESS_MITIGATION_DEP_POLICY
 union
 Flags as DWORD

 type
 Enable : 1 as DWORD
 DisableAtlThunkEmulation : 1 as DWORD
 ReservedFlags : 30 as DWORD
 end type
 end union

 Permanent as WINBOOLEAN
end type

type PROCESS_MITIGATION_DEP_POLICY as _PROCESS_MITIGATION_DEP_POLICY
type PPROCESS_MITIGATION_DEP_POLICY as _PROCESS_MITIGATION_DEP_POLICY ptr

type _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY
 union
 Flags as DWORD

 type
 RaiseExceptionOnInvalidHandleReference : 1 as DWORD
 HandleExceptionsPermanentlyEnabled : 1 as DWORD
 ReservedFlags : 30 as DWORD
 end type
 end union
end type

type PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY as _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY
type PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY as _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY ptr

type _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY
 union
 Flags as DWORD

 type
 DisallowWin32kSystemCalls : 1 as DWORD
 ReservedFlags : 31 as DWORD
 end type
 end union
end type

type PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY as _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY
type PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY as _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY ptr

type _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY
 union
 Flags as DWORD

 type
 DisableExtensionPoints : 1 as DWORD
 ReservedFlags : 31 as DWORD
 end type
 end union
end type

type PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY as _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY
type PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY as _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY ptr

type _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION
 TotalUserTime as LARGE_INTEGER
 TotalKernelTime as LARGE_INTEGER
 ThisPeriodTotalUserTime as LARGE_INTEGER
 ThisPeriodTotalKernelTime as LARGE_INTEGER
 TotalPageFaultCount as DWORD
 TotalProcesses as DWORD
 ActiveProcesses as DWORD
 TotalTerminatedProcesses as DWORD
end type

type JOBOBJECT_BASIC_ACCOUNTING_INFORMATION as _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION
type PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION as _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION ptr

type _JOBOBJECT_BASIC_LIMIT_INFORMATION
 PerProcessUserTimeLimit as LARGE_INTEGER
 PerJobUserTimeLimit as LARGE_INTEGER
 LimitFlags as DWORD
 MinimumWorkingSetSize as SIZE_T_
 MaximumWorkingSetSize as SIZE_T_
 ActiveProcessLimit as DWORD
 Affinity as ULONG_PTR
 PriorityClass as DWORD
 SchedulingClass as DWORD
end type

type JOBOBJECT_BASIC_LIMIT_INFORMATION as _JOBOBJECT_BASIC_LIMIT_INFORMATION
type PJOBOBJECT_BASIC_LIMIT_INFORMATION as _JOBOBJECT_BASIC_LIMIT_INFORMATION ptr

type _JOBOBJECT_EXTENDED_LIMIT_INFORMATION
 BasicLimitInformation as JOBOBJECT_BASIC_LIMIT_INFORMATION
 IoInfo as IO_COUNTERS
 ProcessMemoryLimit as SIZE_T_
 JobMemoryLimit as SIZE_T_
 PeakProcessMemoryUsed as SIZE_T_
 PeakJobMemoryUsed as SIZE_T_
end type

type JOBOBJECT_EXTENDED_LIMIT_INFORMATION as _JOBOBJECT_EXTENDED_LIMIT_INFORMATION
type PJOBOBJECT_EXTENDED_LIMIT_INFORMATION as _JOBOBJECT_EXTENDED_LIMIT_INFORMATION ptr

type _JOBOBJECT_BASIC_PROCESS_ID_LIST
 NumberOfAssignedProcesses as DWORD
 NumberOfProcessIdsInList as DWORD
 ProcessIdList(0 to 0) as ULONG_PTR
end type

type JOBOBJECT_BASIC_PROCESS_ID_LIST as _JOBOBJECT_BASIC_PROCESS_ID_LIST
type PJOBOBJECT_BASIC_PROCESS_ID_LIST as _JOBOBJECT_BASIC_PROCESS_ID_LIST ptr

type _JOBOBJECT_BASIC_UI_RESTRICTIONS
 UIRestrictionsClass as DWORD
end type

type JOBOBJECT_BASIC_UI_RESTRICTIONS as _JOBOBJECT_BASIC_UI_RESTRICTIONS
type PJOBOBJECT_BASIC_UI_RESTRICTIONS as _JOBOBJECT_BASIC_UI_RESTRICTIONS ptr

type _JOBOBJECT_SECURITY_LIMIT_INFORMATION
 SecurityLimitFlags as DWORD
 JobToken as HANDLE
 SidsToDisable as PTOKEN_GROUPS
 PrivilegesToDelete as PTOKEN_PRIVILEGES
 RestrictedSids as PTOKEN_GROUPS
end type

type JOBOBJECT_SECURITY_LIMIT_INFORMATION as _JOBOBJECT_SECURITY_LIMIT_INFORMATION
type PJOBOBJECT_SECURITY_LIMIT_INFORMATION as _JOBOBJECT_SECURITY_LIMIT_INFORMATION ptr

type _JOBOBJECT_END_OF_JOB_TIME_INFORMATION
 EndOfJobTimeAction as DWORD
end type

type JOBOBJECT_END_OF_JOB_TIME_INFORMATION as _JOBOBJECT_END_OF_JOB_TIME_INFORMATION
type PJOBOBJECT_END_OF_JOB_TIME_INFORMATION as _JOBOBJECT_END_OF_JOB_TIME_INFORMATION ptr

type _JOBOBJECT_ASSOCIATE_COMPLETION_PORT
 CompletionKey as PVOID
 CompletionPort as HANDLE
end type

type JOBOBJECT_ASSOCIATE_COMPLETION_PORT as _JOBOBJECT_ASSOCIATE_COMPLETION_PORT
type PJOBOBJECT_ASSOCIATE_COMPLETION_PORT as _JOBOBJECT_ASSOCIATE_COMPLETION_PORT ptr

type _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION
 BasicInfo as JOBOBJECT_BASIC_ACCOUNTING_INFORMATION
 IoInfo as IO_COUNTERS
end type

type JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION as _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION
type PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION as _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION ptr

type _JOBOBJECT_JOBSET_INFORMATION
 MemberLevel as DWORD
end type

type JOBOBJECT_JOBSET_INFORMATION as _JOBOBJECT_JOBSET_INFORMATION
type PJOBOBJECT_JOBSET_INFORMATION as _JOBOBJECT_JOBSET_INFORMATION ptr

type _JOBOBJECT_RATE_CONTROL_TOLERANCE as long
enum
 ToleranceLow = 1
 ToleranceMedium
 ToleranceHigh
end enum

type JOBOBJECT_RATE_CONTROL_TOLERANCE as _JOBOBJECT_RATE_CONTROL_TOLERANCE

type _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL as long
enum
 ToleranceIntervalShort = 1
 ToleranceIntervalMedium
 ToleranceIntervalLong
end enum

type JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL as _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL

type _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION
 IoReadBytesLimit as DWORD64
 IoWriteBytesLimit as DWORD64
 PerJobUserTimeLimit as LARGE_INTEGER
 JobMemoryLimit as DWORD64
 RateControlTolerance as JOBOBJECT_RATE_CONTROL_TOLERANCE
 RateControlToleranceInterval as JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL
 LimitFlags as DWORD
end type

type JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION as _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION
type PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION as _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION ptr

type _JOBOBJECT_LIMIT_VIOLATION_INFORMATION
 LimitFlags as DWORD
 ViolationLimitFlags as DWORD
 IoReadBytes as DWORD64
 IoReadBytesLimit as DWORD64
 IoWriteBytes as DWORD64
 IoWriteBytesLimit as DWORD64
 PerJobUserTime as LARGE_INTEGER
 PerJobUserTimeLimit as LARGE_INTEGER
 JobMemory as DWORD64
 JobMemoryLimit as DWORD64
 RateControlTolerance as JOBOBJECT_RATE_CONTROL_TOLERANCE
 RateControlToleranceLimit as JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL
end type

type JOBOBJECT_LIMIT_VIOLATION_INFORMATION as _JOBOBJECT_LIMIT_VIOLATION_INFORMATION
type PJOBOBJECT_LIMIT_VIOLATION_INFORMATION as _JOBOBJECT_LIMIT_VIOLATION_INFORMATION ptr

type _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION
 ControlFlags as DWORD

 union
 CpuRate as DWORD
 Weight as DWORD
 end union
end type

type JOBOBJECT_CPU_RATE_CONTROL_INFORMATION as _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION
type PJOBOBJECT_CPU_RATE_CONTROL_INFORMATION as _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION ptr
const JOB_OBJECT_TERMINATE_AT_END_OF_JOB = 0
const JOB_OBJECT_POST_AT_END_OF_JOB = 1
const JOB_OBJECT_MSG_END_OF_JOB_TIME = 1
const JOB_OBJECT_MSG_END_OF_PROCESS_TIME = 2
const JOB_OBJECT_MSG_ACTIVE_PROCESS_LIMIT = 3
const JOB_OBJECT_MSG_ACTIVE_PROCESS_ZERO = 4
const JOB_OBJECT_MSG_NEW_PROCESS = 6
const JOB_OBJECT_MSG_EXIT_PROCESS = 7
const JOB_OBJECT_MSG_ABNORMAL_EXIT_PROCESS = 8
const JOB_OBJECT_MSG_PROCESS_MEMORY_LIMIT = 9
const JOB_OBJECT_MSG_JOB_MEMORY_LIMIT = 10
const JOB_OBJECT_MSG_NOTIFICATION_LIMIT = 11
const JOB_OBJECT_MSG_JOB_CYCLE_TIME_LIMIT = 12
const JOB_OBJECT_MSG_MINIMUM = 1
const JOB_OBJECT_MSG_MAXIMUM = 12
const JOB_OBJECT_LIMIT_WORKINGSET = &h00000001
const JOB_OBJECT_LIMIT_PROCESS_TIME = &h00000002
const JOB_OBJECT_LIMIT_JOB_TIME = &h00000004
const JOB_OBJECT_LIMIT_ACTIVE_PROCESS = &h00000008
const JOB_OBJECT_LIMIT_AFFINITY = &h00000010
const JOB_OBJECT_LIMIT_PRIORITY_CLASS = &h00000020
const JOB_OBJECT_LIMIT_PRESERVE_JOB_TIME = &h00000040
const JOB_OBJECT_LIMIT_SCHEDULING_CLASS = &h00000080
const JOB_OBJECT_LIMIT_PROCESS_MEMORY = &h00000100
const JOB_OBJECT_LIMIT_JOB_MEMORY = &h00000200
const JOB_OBJECT_LIMIT_DIE_ON_UNHANDLED_EXCEPTION = &h00000400
const JOB_OBJECT_LIMIT_BREAKAWAY_OK = &h00000800
const JOB_OBJECT_LIMIT_SILENT_BREAKAWAY_OK = &h00001000
const JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE = &h00002000
const JOB_OBJECT_LIMIT_SUBSET_AFFINITY = &h00004000
const JOB_OBJECT_LIMIT_RESERVED3 = &h00008000
const JOB_OBJECT_LIMIT_JOB_READ_BYTES = &h00010000
const JOB_OBJECT_LIMIT_JOB_WRITE_BYTES = &h00020000
const JOB_OBJECT_LIMIT_RATE_CONTROL = &h00040000
const JOB_OBJECT_LIMIT_RESERVED3 = &h00008000
const JOB_OBJECT_LIMIT_RESERVED4 = &h00010000
const JOB_OBJECT_LIMIT_RESERVED5 = &h00020000
const JOB_OBJECT_LIMIT_RESERVED6 = &h00040000
const JOB_OBJECT_LIMIT_VALID_FLAGS = &h0007ffff
const JOB_OBJECT_BASIC_LIMIT_VALID_FLAGS = &h000000ff
const JOB_OBJECT_EXTENDED_LIMIT_VALID_FLAGS = &h00007fff
const JOB_OBJECT_RESERVED_LIMIT_VALID_FLAGS = &h0007ffff
const JOB_OBJECT_NOTIFICATION_LIMIT_VALID_FLAGS = &h00070204
const JOB_OBJECT_UILIMIT_NONE = &h000000000
const JOB_OBJECT_UILIMIT_HANDLES = &h00000001
const JOB_OBJECT_UILIMIT_READCLIPBOARD = &h00000002
const JOB_OBJECT_UILIMIT_WRITECLIPBOARD = &h00000004
const JOB_OBJECT_UILIMIT_SYSTEMPARAMETERS = &h00000008
const JOB_OBJECT_UILIMIT_DISPLAYSETTINGS = &h00000010
const JOB_OBJECT_UILIMIT_GLOBALATOMS = &h00000020
const JOB_OBJECT_UILIMIT_DESKTOP = &h00000040
const JOB_OBJECT_UILIMIT_EXITWINDOWS = &h00000080
const JOB_OBJECT_UILIMIT_ALL = &h000000FF
const JOB_OBJECT_UI_VALID_FLAGS = &h000000FF
const JOB_OBJECT_SECURITY_NO_ADMIN = &h00000001
const JOB_OBJECT_SECURITY_RESTRICTED_TOKEN = &h00000002
const JOB_OBJECT_SECURITY_ONLY_TOKEN = &h00000004
const JOB_OBJECT_SECURITY_FILTER_TOKENS = &h00000008
const JOB_OBJECT_SECURITY_VALID_FLAGS = &h0000000f
const JOB_OBJECT_CPU_RATE_CONTROL_ENABLE = &h1
const JOB_OBJECT_CPU_RATE_CONTROL_WEIGHT_BASED = &h2
const JOB_OBJECT_CPU_RATE_CONTROL_HARD_CAP = &h4
const JOB_OBJECT_CPU_RATE_CONTROL_NOTIFY = &h8
const JOB_OBJECT_CPU_RATE_CONTROL_VALID_FLAGS = &hf

type _JOBOBJECTINFOCLASS as long
enum
 JobObjectBasicAccountingInformation = 1
 JobObjectBasicLimitInformation
 JobObjectBasicProcessIdList
 JobObjectBasicUIRestrictions
 JobObjectSecurityLimitInformation
 JobObjectEndOfJobTimeInformation
 JobObjectAssociateCompletionPortInformation
 JobObjectBasicAndIoAccountingInformation
 JobObjectExtendedLimitInformation
 JobObjectJobSetInformation
 JobObjectGroupInformation
 JobObjectNotificationLimitInformation
 JobObjectLimitViolationInformation
 JobObjectGroupInformationEx
 JobObjectCpuRateControlInformation
 JobObjectCompletionFilter
 JobObjectCompletionCounter
 JobObjectReserved1Information = 18
 JobObjectReserved2Information
 JobObjectReserved3Information
 JobObjectReserved4Information
 JobObjectReserved5Information
 JobObjectReserved6Information
 JobObjectReserved7Information
 JobObjectReserved8Information
 MaxJobObjectInfoClass
end enum

type JOBOBJECTINFOCLASS as _JOBOBJECTINFOCLASS

type _FIRMWARE_TYPE as long
enum
 FirmwareTypeUnknown
 FirmwareTypeBios
 FirmwareTypeUefi
 FirmwareTypeMax
end enum

type FIRMWARE_TYPE as _FIRMWARE_TYPE
type PFIRMWARE_TYPE as _FIRMWARE_TYPE ptr
const EVENT_MODIFY_STATE = &h0002
const EVENT_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED or SYNCHRONIZE) or &h3
const MUTANT_QUERY_STATE = &h0001
const MUTANT_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED or SYNCHRONIZE) or MUTANT_QUERY_STATE
const SEMAPHORE_MODIFY_STATE = &h0002
const SEMAPHORE_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED or SYNCHRONIZE) or &h3
const TIMER_QUERY_STATE = &h0001
const TIMER_MODIFY_STATE = &h0002
const TIMER_ALL_ACCESS = ((STANDARD_RIGHTS_REQUIRED or SYNCHRONIZE) or TIMER_QUERY_STATE) or TIMER_MODIFY_STATE
const TIME_ZONE_ID_UNKNOWN = 0
const TIME_ZONE_ID_STANDARD = 1
const TIME_ZONE_ID_DAYLIGHT = 2

type _LOGICAL_PROCESSOR_RELATIONSHIP as long
enum
 RelationProcessorCore
 RelationNumaNode
 RelationCache
 RelationProcessorPackage
 RelationGroup
 RelationAll = &hffff
end enum

type LOGICAL_PROCESSOR_RELATIONSHIP as _LOGICAL_PROCESSOR_RELATIONSHIP
const LTP_PC_SMT = &h1

type _PROCESSOR_CACHE_TYPE as long
enum
 CacheUnified
 CacheInstruction
 CacheData
 CacheTrace
end enum

type PROCESSOR_CACHE_TYPE as _PROCESSOR_CACHE_TYPE
const CACHE_FULLY_ASSOCIATIVE = &hFF

type _CACHE_DESCRIPTOR
 Level as UBYTE
 Associativity as UBYTE
 LineSize as WORD
 Size as DWORD
 as PROCESSOR_CACHE_TYPE Type
end type

type CACHE_DESCRIPTOR as _CACHE_DESCRIPTOR
type PCACHE_DESCRIPTOR as _CACHE_DESCRIPTOR ptr

type _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_ProcessorCore
 Flags as UBYTE
end type

type _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_NumaNode
 NodeNumber as DWORD
end type

type _SYSTEM_LOGICAL_PROCESSOR_INFORMATION
 ProcessorMask as ULONG_PTR
 Relationship as LOGICAL_PROCESSOR_RELATIONSHIP

 union
 ProcessorCore as _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_ProcessorCore
 NumaNode as _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_NumaNode
 Cache as CACHE_DESCRIPTOR
 Reserved(0 to 1) as ULONGLONG
 end union
end type

type SYSTEM_LOGICAL_PROCESSOR_INFORMATION as _SYSTEM_LOGICAL_PROCESSOR_INFORMATION
type PSYSTEM_LOGICAL_PROCESSOR_INFORMATION as _SYSTEM_LOGICAL_PROCESSOR_INFORMATION ptr

type _PROCESSOR_RELATIONSHIP
 Flags as UBYTE
 Reserved(0 to 20) as UBYTE
 GroupCount as WORD
 GroupMask(0 to 0) as GROUP_AFFINITY
end type

type PROCESSOR_RELATIONSHIP as _PROCESSOR_RELATIONSHIP
type PPROCESSOR_RELATIONSHIP as _PROCESSOR_RELATIONSHIP ptr

type _NUMA_NODE_RELATIONSHIP
 NodeNumber as DWORD
 Reserved(0 to 19) as UBYTE
 GroupMask as GROUP_AFFINITY
end type

type NUMA_NODE_RELATIONSHIP as _NUMA_NODE_RELATIONSHIP
type PNUMA_NODE_RELATIONSHIP as _NUMA_NODE_RELATIONSHIP ptr

type _CACHE_RELATIONSHIP
 Level as UBYTE
 Associativity as UBYTE
 LineSize as WORD
 CacheSize as DWORD
 as PROCESSOR_CACHE_TYPE Type
 Reserved(0 to 19) as UBYTE
 GroupMask as GROUP_AFFINITY
end type

type CACHE_RELATIONSHIP as _CACHE_RELATIONSHIP
type PCACHE_RELATIONSHIP as _CACHE_RELATIONSHIP ptr

type _PROCESSOR_GROUP_INFO
 MaximumProcessorCount as UBYTE
 ActiveProcessorCount as UBYTE
 Reserved(0 to 37) as UBYTE
 ActiveProcessorMask as KAFFINITY
end type

type PROCESSOR_GROUP_INFO as _PROCESSOR_GROUP_INFO
type PPROCESSOR_GROUP_INFO as _PROCESSOR_GROUP_INFO ptr

type _GROUP_RELATIONSHIP
 MaximumGroupCount as WORD
 ActiveGroupCount as WORD
 Reserved(0 to 19) as UBYTE
 GroupInfo(0 to 0) as PROCESSOR_GROUP_INFO
end type

type GROUP_RELATIONSHIP as _GROUP_RELATIONSHIP
type PGROUP_RELATIONSHIP as _GROUP_RELATIONSHIP ptr

type _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX
 Relationship as LOGICAL_PROCESSOR_RELATIONSHIP
 Size as DWORD

 union
 Processor as PROCESSOR_RELATIONSHIP
 NumaNode as NUMA_NODE_RELATIONSHIP
 Cache as CACHE_RELATIONSHIP
 Group as GROUP_RELATIONSHIP
 end union
end type

type SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX as _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX
type PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX as _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX ptr

type _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION
 CycleTime as DWORD64
end type

type SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION as _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION
type PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION as _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION ptr
const PROCESSOR_INTEL_386 = 386
const PROCESSOR_INTEL_486 = 486
const PROCESSOR_INTEL_PENTIUM = 586
const PROCESSOR_INTEL_IA64 = 2200
const PROCESSOR_AMD_X8664 = 8664
const PROCESSOR_MIPS_R4000 = 4000
const PROCESSOR_ALPHA_21064 = 21064
const PROCESSOR_PPC_601 = 601
const PROCESSOR_PPC_603 = 603
const PROCESSOR_PPC_604 = 604
const PROCESSOR_PPC_620 = 620
const PROCESSOR_HITACHI_SH3 = 10003
const PROCESSOR_HITACHI_SH3E = 10004
const PROCESSOR_HITACHI_SH4 = 10005
const PROCESSOR_MOTOROLA_821 = 821
const PROCESSOR_SHx_SH3 = 103
const PROCESSOR_SHx_SH4 = 104
const PROCESSOR_STRONGARM = 2577
const PROCESSOR_ARM720 = 1824
const PROCESSOR_ARM820 = 2080
const PROCESSOR_ARM920 = 2336
const PROCESSOR_ARM_7TDMI = 70001
const PROCESSOR_OPTIL = &h494f
const PROCESSOR_ARCHITECTURE_INTEL = 0
const PROCESSOR_ARCHITECTURE_MIPS = 1
const PROCESSOR_ARCHITECTURE_ALPHA = 2
const PROCESSOR_ARCHITECTURE_PPC = 3
const PROCESSOR_ARCHITECTURE_SHX = 4
const PROCESSOR_ARCHITECTURE_ARM = 5
const PROCESSOR_ARCHITECTURE_IA64 = 6
const PROCESSOR_ARCHITECTURE_ALPHA64 = 7
const PROCESSOR_ARCHITECTURE_MSIL = 8
const PROCESSOR_ARCHITECTURE_AMD64 = 9
const PROCESSOR_ARCHITECTURE_IA32_ON_WIN64 = 10
const PROCESSOR_ARCHITECTURE_NEUTRAL = 11
const PROCESSOR_ARCHITECTURE_UNKNOWN = &hffff
const PF_FLOATING_POINT_PRECISION_ERRATA = 0
const PF_FLOATING_POINT_EMULATED = 1
const PF_COMPARE_EXCHANGE_DOUBLE = 2
const PF_MMX_INSTRUCTIONS_AVAILABLE = 3
const PF_PPC_MOVEMEM_64BIT_OK = 4
const PF_ALPHA_BYTE_INSTRUCTIONS = 5
const PF_XMMI_INSTRUCTIONS_AVAILABLE = 6
const PF_3DNOW_INSTRUCTIONS_AVAILABLE = 7
const PF_RDTSC_INSTRUCTION_AVAILABLE = 8
const PF_PAE_ENABLED = 9
const PF_XMMI64_INSTRUCTIONS_AVAILABLE = 10
const PF_SSE_DAZ_MODE_AVAILABLE = 11
const PF_NX_ENABLED = 12
const PF_SSE3_INSTRUCTIONS_AVAILABLE = 13
const PF_COMPARE_EXCHANGE128 = 14
const PF_COMPARE64_EXCHANGE128 = 15
const PF_CHANNELS_ENABLED = 16
const PF_XSAVE_ENABLED = 17
const PF_ARM_VFP_32_REGISTERS_AVAILABLE = 18
const PF_ARM_NEON_INSTRUCTIONS_AVAILABLE = 19
const PF_SECOND_LEVEL_ADDRESS_TRANSLATION = 20
const PF_VIRT_FIRMWARE_ENABLED = 21
const PF_RDWRFSGSBASE_AVAILABLE = 22
const PF_FASTFAIL_AVAILABLE = 23
const PF_ARM_DIVIDE_INSTRUCTION_AVAILABLE = 24
const PF_ARM_64BIT_LOADSTORE_ATOMIC = 25
const PF_ARM_EXTERNAL_CACHE_AVAILABLE = 26
const PF_ARM_FMAC_INSTRUCTIONS_AVAILABLE = 27
const XSTATE_LEGACY_FLOATING_POINT = 0
const XSTATE_LEGACY_SSE = 1
const XSTATE_GSSE = 2
const XSTATE_AVX = XSTATE_GSSE
const XSTATE_MASK_LEGACY_FLOATING_POINT = 1 shl XSTATE_LEGACY_FLOATING_POINT
const XSTATE_MASK_LEGACY_SSE = 1 shl XSTATE_LEGACY_SSE
const XSTATE_MASK_LEGACY = XSTATE_MASK_LEGACY_FLOATING_POINT or XSTATE_MASK_LEGACY_SSE
const XSTATE_MASK_GSSE = 1 shl XSTATE_GSSE
const XSTATE_MASK_AVX = XSTATE_MASK_GSSE
const MAXIMUM_XSTATE_FEATURES = 64

type _XSTATE_FEATURE
 Offset as DWORD
 Size as DWORD
end type

type XSTATE_FEATURE as _XSTATE_FEATURE
type PXSTATE_FEATURE as _XSTATE_FEATURE ptr

type _XSTATE_CONFIGURATION
 EnabledFeatures as DWORD64
 EnabledVolatileFeatures as DWORD64
 Size as DWORD
 OptimizedSave : 1 as DWORD
 Features(0 to 63) as XSTATE_FEATURE
end type

type XSTATE_CONFIGURATION as _XSTATE_CONFIGURATION
type PXSTATE_CONFIGURATION as _XSTATE_CONFIGURATION ptr

type _MEMORY_BASIC_INFORMATION
 BaseAddress as PVOID
 AllocationBase as PVOID
 AllocationProtect as DWORD
 RegionSize as SIZE_T_
 State as DWORD
 Protect as DWORD
 as DWORD Type
end type

type MEMORY_BASIC_INFORMATION as _MEMORY_BASIC_INFORMATION
type PMEMORY_BASIC_INFORMATION as _MEMORY_BASIC_INFORMATION ptr

type _MEMORY_BASIC_INFORMATION32
 BaseAddress as DWORD
 AllocationBase as DWORD
 AllocationProtect as DWORD
 RegionSize as DWORD
 State as DWORD
 Protect as DWORD
 as DWORD Type
end type

type MEMORY_BASIC_INFORMATION32 as _MEMORY_BASIC_INFORMATION32
type PMEMORY_BASIC_INFORMATION32 as _MEMORY_BASIC_INFORMATION32 ptr

type _MEMORY_BASIC_INFORMATION64
 BaseAddress as ULONGLONG
 AllocationBase as ULONGLONG
 AllocationProtect as DWORD
 __alignment1 as DWORD
 RegionSize as ULONGLONG
 State as DWORD
 Protect as DWORD
 as DWORD Type
 __alignment2 as DWORD
end type

type MEMORY_BASIC_INFORMATION64 as _MEMORY_BASIC_INFORMATION64
type PMEMORY_BASIC_INFORMATION64 as _MEMORY_BASIC_INFORMATION64 ptr
const SECTION_QUERY = &h0001
const SECTION_MAP_WRITE = &h0002
const SECTION_MAP_READ = &h0004
const SECTION_MAP_EXECUTE = &h0008
const SECTION_EXTEND_SIZE = &h0010
const SECTION_MAP_EXECUTE_EXPLICIT = &h0020
const SECTION_ALL_ACCESS = ((((STANDARD_RIGHTS_REQUIRED or SECTION_QUERY) or SECTION_MAP_WRITE) or SECTION_MAP_READ) or SECTION_MAP_EXECUTE) or SECTION_EXTEND_SIZE
const SESSION_QUERY_ACCESS = &h1
const SESSION_MODIFY_ACCESS = &h2
const SESSION_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED or SESSION_QUERY_ACCESS) or SESSION_MODIFY_ACCESS
const PAGE_NOACCESS = &h01
const PAGE_READONLY = &h02
const PAGE_READWRITE = &h04
const PAGE_WRITECOPY = &h08
const PAGE_EXECUTE = &h10
const PAGE_EXECUTE_READ = &h20
const PAGE_EXECUTE_READWRITE = &h40
const PAGE_EXECUTE_WRITECOPY = &h80
const PAGE_GUARD = &h100
const PAGE_NOCACHE = &h200
const PAGE_WRITECOMBINE = &h400
const MEM_COMMIT = &h1000
const MEM_RESERVE = &h2000
const MEM_DECOMMIT = &h4000
const MEM_RELEASE = &h8000
const MEM_FREE = &h10000
const MEM_PRIVATE = &h20000
const MEM_MAPPED = &h40000
const MEM_RESET = &h80000
const MEM_TOP_DOWN = &h100000
const MEM_WRITE_WATCH = &h200000
const MEM_PHYSICAL = &h400000
const MEM_ROTATE = &h800000
const MEM_LARGE_PAGES = &h20000000
const MEM_4MB_PAGES = &h80000000
const SEC_FILE = &h800000
const SEC_IMAGE = &h1000000
const SEC_PROTECTED_IMAGE = &h2000000
const SEC_RESERVE = &h4000000
const SEC_COMMIT = &h8000000
const SEC_NOCACHE = &h10000000
const SEC_WRITECOMBINE = &h40000000
const SEC_LARGE_PAGES = &h80000000
const SEC_IMAGE_NO_EXECUTE = SEC_IMAGE or SEC_NOCACHE
const MEM_IMAGE = SEC_IMAGE
const WRITE_WATCH_FLAG_RESET = &h01
const MEM_UNMAP_WITH_TRANSIENT_BOOST = &h01
const FILE_READ_DATA = &h0001
const FILE_LIST_DIRECTORY = &h0001
const FILE_WRITE_DATA = &h0002
const FILE_ADD_FILE = &h0002
const FILE_APPEND_DATA = &h0004
const FILE_ADD_SUBDIRECTORY = &h0004
const FILE_CREATE_PIPE_INSTANCE = &h0004
const FILE_READ_EA = &h0008
const FILE_WRITE_EA = &h0010
const FILE_EXECUTE = &h0020
const FILE_TRAVERSE = &h0020
const FILE_DELETE_CHILD = &h0040
const FILE_READ_ATTRIBUTES = &h0080
const FILE_WRITE_ATTRIBUTES = &h0100
const FILE_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED or SYNCHRONIZE) or &h1FF
const FILE_GENERIC_READ = (((STANDARD_RIGHTS_READ or FILE_READ_DATA) or FILE_READ_ATTRIBUTES) or FILE_READ_EA) or SYNCHRONIZE
const FILE_GENERIC_WRITE = ((((STANDARD_RIGHTS_WRITE or FILE_WRITE_DATA) or FILE_WRITE_ATTRIBUTES) or FILE_WRITE_EA) or FILE_APPEND_DATA) or SYNCHRONIZE
const FILE_GENERIC_EXECUTE = ((STANDARD_RIGHTS_EXECUTE or FILE_READ_ATTRIBUTES) or FILE_EXECUTE) or SYNCHRONIZE
const FILE_SUPERSEDE = &h000000000
const FILE_OPEN = &h00000001
const FILE_CREATE = &h00000002
const FILE_OPEN_IF = &h00000003
const FILE_OVERWRITE = &h00000004
const FILE_OVERWRITE_IF = &h00000005
const FILE_MAXIMUM_DISPOSITION = &h00000005
const FILE_DIRECTORY_FILE = &h00000001
const FILE_WRITE_THROUGH = &h00000002
const FILE_SEQUENTIAL_ONLY = &h00000004
const FILE_NO_INTERMEDIATE_BUFFERING = &h00000008
const FILE_SYNCHRONOUS_IO_ALERT = &h00000010
const FILE_SYNCHRONOUS_IO_NONALERT = &h00000020
const FILE_NON_DIRECTORY_FILE = &h00000040
const FILE_CREATE_TREE_CONNECTION = &h00000080
const FILE_COMPLETE_IF_OPLOCKED = &h00000100
const FILE_NO_EA_KNOWLEDGE = &h00000200
const FILE_OPEN_REMOTE_INSTANCE = &h00000400
const FILE_RANDOM_ACCESS = &h00000800
const FILE_DELETE_ON_CLOSE = &h00001000
const FILE_OPEN_BY_FILE_ID = &h00002000
const FILE_OPEN_FOR_BACKUP_INTENT = &h00004000
const FILE_NO_COMPRESSION = &h00008000


const FILE_RESERVE_OPFILTER = &h00100000
const FILE_OPEN_REPARSE_POINT = &h00200000
const FILE_OPEN_NO_RECALL = &h00400000
const FILE_OPEN_FOR_FREE_SPACE_QUERY = &h00800000
const FILE_SHARE_READ = &h00000001
const FILE_SHARE_WRITE = &h00000002
const FILE_SHARE_DELETE = &h00000004
const FILE_SHARE_VALID_FLAGS = &h00000007
const FILE_ATTRIBUTE_READONLY = &h00000001
const FILE_ATTRIBUTE_HIDDEN = &h00000002
const FILE_ATTRIBUTE_SYSTEM = &h00000004
const FILE_ATTRIBUTE_DIRECTORY = &h00000010
const FILE_ATTRIBUTE_ARCHIVE = &h00000020
const FILE_ATTRIBUTE_DEVICE = &h00000040
const FILE_ATTRIBUTE_NORMAL = &h00000080
const FILE_ATTRIBUTE_TEMPORARY = &h00000100
const FILE_ATTRIBUTE_SPARSE_FILE = &h00000200
const FILE_ATTRIBUTE_REPARSE_POINT = &h00000400
const FILE_ATTRIBUTE_COMPRESSED = &h00000800
const FILE_ATTRIBUTE_OFFLINE = &h00001000
const FILE_ATTRIBUTE_NOT_CONTENT_INDEXED = &h00002000
const FILE_ATTRIBUTE_ENCRYPTED = &h00004000
const FILE_ATTRIBUTE_VIRTUAL = &h00010000
const FILE_NOTIFY_CHANGE_FILE_NAME = &h00000001
const FILE_NOTIFY_CHANGE_DIR_NAME = &h00000002
const FILE_NOTIFY_CHANGE_ATTRIBUTES = &h00000004
const FILE_NOTIFY_CHANGE_SIZE = &h00000008
const FILE_NOTIFY_CHANGE_LAST_WRITE = &h00000010
const FILE_NOTIFY_CHANGE_LAST_ACCESS = &h00000020
const FILE_NOTIFY_CHANGE_CREATION = &h00000040
const FILE_NOTIFY_CHANGE_SECURITY = &h00000100
const FILE_ACTION_ADDED = &h00000001
const FILE_ACTION_REMOVED = &h00000002
const FILE_ACTION_MODIFIED = &h00000003
const FILE_ACTION_RENAMED_OLD_NAME = &h00000004
const FILE_ACTION_RENAMED_NEW_NAME = &h00000005
const MAILSLOT_NO_MESSAGE = cast(DWORD, -1)
const MAILSLOT_WAIT_FOREVER = cast(DWORD, -1)
const FILE_CASE_SENSITIVE_SEARCH = &h00000001
const FILE_CASE_PRESERVED_NAMES = &h00000002
const FILE_UNICODE_ON_DISK = &h00000004
const FILE_PERSISTENT_ACLS = &h00000008
const FILE_FILE_COMPRESSION = &h00000010
const FILE_VOLUME_QUOTAS = &h00000020
const FILE_SUPPORTS_SPARSE_FILES = &h00000040
const FILE_SUPPORTS_REPARSE_POINTS = &h00000080
const FILE_SUPPORTS_REMOTE_STORAGE = &h00000100
const FILE_VOLUME_IS_COMPRESSED = &h00008000
const FILE_SUPPORTS_OBJECT_IDS = &h00010000
const FILE_SUPPORTS_ENCRYPTION = &h00020000
const FILE_NAMED_STREAMS = &h00040000
const FILE_READ_ONLY_VOLUME = &h00080000
const FILE_SEQUENTIAL_WRITE_ONCE = &h00100000
const FILE_SUPPORTS_TRANSACTIONS = &h00200000
const FILE_SUPPORTS_HARD_LINKS = &h00400000
const FILE_SUPPORTS_EXTENDED_ATTRIBUTES = &h00800000
const FILE_SUPPORTS_OPEN_BY_FILE_ID = &h01000000
const FILE_SUPPORTS_USN_JOURNAL = &h02000000
const FILE_SUPPORTS_INTEGRITY_STREAMS = &h04000000

type FILE_ID_128
 LowPart as ULONGLONG
 HighPart as ULONGLONG
end type

type PFILE_ID_128 as FILE_ID_128 ptr

type _FILE_NOTIFY_INFORMATION
 NextEntryOffset as DWORD
 Action as DWORD
 FileNameLength as DWORD
 FileName as wstring * 1
end type

type FILE_NOTIFY_INFORMATION as _FILE_NOTIFY_INFORMATION
type PFILE_NOTIFY_INFORMATION as _FILE_NOTIFY_INFORMATION ptr

union _FILE_SEGMENT_ELEMENT
 Buffer as PVOID64
 Alignment as ULONGLONG
end union

type FILE_SEGMENT_ELEMENT as _FILE_SEGMENT_ELEMENT
type PFILE_SEGMENT_ELEMENT as _FILE_SEGMENT_ELEMENT ptr

type _REPARSE_GUID_DATA_BUFFER_GenericReparseBuffer
 DataBuffer(0 to 0) as UBYTE
end type

type _REPARSE_GUID_DATA_BUFFER
 ReparseTag as DWORD
 ReparseDataLength as WORD
 Reserved as WORD
 ReparseGuid as GUID
 GenericReparseBuffer as _REPARSE_GUID_DATA_BUFFER_GenericReparseBuffer
end type

type REPARSE_GUID_DATA_BUFFER as _REPARSE_GUID_DATA_BUFFER
type PREPARSE_GUID_DATA_BUFFER as _REPARSE_GUID_DATA_BUFFER ptr
const MAXIMUM_REPARSE_DATA_BUFFER_SIZE = 16 * 1024
const SYMLINK_FLAG_RELATIVE = 1
const IO_REPARSE_TAG_RESERVED_ZERO = 0
const IO_REPARSE_TAG_RESERVED_ONE = 1
const IO_REPARSE_TAG_RESERVED_RANGE = IO_REPARSE_TAG_RESERVED_ONE
const IO_REPARSE_TAG_MOUNT_POINT = &hA0000003
const IO_REPARSE_TAG_HSM = &hC0000004
const IO_REPARSE_TAG_HSM2 = &h80000006
const IO_REPARSE_TAG_SIS = &h80000007
const IO_REPARSE_TAG_WIM = &h80000008
const IO_REPARSE_TAG_CSV = &h80000009
const IO_REPARSE_TAG_DFS = &h8000000A
const IO_REPARSE_TAG_FILTER_MANAGER = &h8000000B
const IO_REPARSE_TAG_DFSR = &h80000012
const IO_REPARSE_TAG_SYMLINK = &hA000000C
const IO_REPARSE_TAG_IIS_CACHE = &hA0000010
const IO_REPARSE_TAG_DRIVE_EXTENDER = &h80000005
const IO_REPARSE_TAG_DEDUP = &h80000013
const IO_REPARSE_TAG_NFS = &h80000014


const IO_COMPLETION_MODIFY_STATE = &h0002
const IO_COMPLETION_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED or SYNCHRONIZE) or &h3
const DUPLICATE_CLOSE_SOURCE = &h00000001
const DUPLICATE_SAME_ACCESS = &h00000002
const POWERBUTTON_ACTION_INDEX_NOTHING = 0
const POWERBUTTON_ACTION_INDEX_SLEEP = 1
const POWERBUTTON_ACTION_INDEX_HIBERNATE = 2
const POWERBUTTON_ACTION_INDEX_SHUTDOWN = 3
const POWERBUTTON_ACTION_VALUE_NOTHING = 0
const POWERBUTTON_ACTION_VALUE_SLEEP = 2
const POWERBUTTON_ACTION_VALUE_HIBERNATE = 3
const POWERBUTTON_ACTION_VALUE_SHUTDOWN = 6
const PERFSTATE_POLICY_CHANGE_IDEAL = 0
const PERFSTATE_POLICY_CHANGE_SINGLE = 1
const PERFSTATE_POLICY_CHANGE_ROCKET = 2
const PERFSTATE_POLICY_CHANGE_MAX = PERFSTATE_POLICY_CHANGE_ROCKET
const PROCESSOR_PERF_BOOST_POLICY_DISABLED = 0
const PROCESSOR_PERF_BOOST_POLICY_MAX = 100
const PROCESSOR_PERF_BOOST_MODE_DISABLED = 0
const PROCESSOR_PERF_BOOST_MODE_ENABLED = 1
const PROCESSOR_PERF_BOOST_MODE_AGGRESSIVE = 2
const PROCESSOR_PERF_BOOST_MODE_EFFICIENT_ENABLED = 3
const PROCESSOR_PERF_BOOST_MODE_EFFICIENT_AGGRESSIVE = 4
const PROCESSOR_PERF_BOOST_MODE_MAX = PROCESSOR_PERF_BOOST_MODE_EFFICIENT_AGGRESSIVE
const CORE_PARKING_POLICY_CHANGE_IDEAL = 0
const CORE_PARKING_POLICY_CHANGE_SINGLE = 1
const CORE_PARKING_POLICY_CHANGE_ROCKET = 2
const CORE_PARKING_POLICY_CHANGE_MULTISTEP = 3
const CORE_PARKING_POLICY_CHANGE_MAX = CORE_PARKING_POLICY_CHANGE_MULTISTEP
const POWER_DEVICE_IDLE_POLICY_PERFORMANCE = 0
const POWER_DEVICE_IDLE_POLICY_CONSERVATIVE = 1

extern GUID_MAX_POWER_SAVINGS as const GUID
extern GUID_MIN_POWER_SAVINGS as const GUID
extern GUID_TYPICAL_POWER_SAVINGS as const GUID
extern NO_SUBGROUP_GUID as const GUID
extern ALL_POWERSCHEMES_GUID as const GUID
extern GUID_POWERSCHEME_PERSONALITY as const GUID
extern GUID_ACTIVE_POWERSCHEME as const GUID
extern GUID_IDLE_RESILIENCY_SUBGROUP as const GUID
extern GUID_IDLE_RESILIENCY_PERIOD as const GUID
extern GUID_DISK_COALESCING_POWERDOWN_TIMEOUT as const GUID
extern GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT as const GUID
extern GUID_VIDEO_SUBGROUP as const GUID
extern GUID_VIDEO_POWERDOWN_TIMEOUT as const GUID
extern GUID_VIDEO_ANNOYANCE_TIMEOUT as const GUID
extern GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE as const GUID
extern GUID_VIDEO_DIM_TIMEOUT as const GUID
extern GUID_VIDEO_ADAPTIVE_POWERDOWN as const GUID
extern GUID_MONITOR_POWER_ON as const GUID
extern GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS as const GUID
extern GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS as const GUID
extern GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS as const GUID
extern GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS as const GUID
extern GUID_CONSOLE_DISPLAY_STATE as const GUID
extern GUID_ALLOW_DISPLAY_REQUIRED as const GUID
extern GUID_VIDEO_CONSOLE_LOCK_TIMEOUT as const GUID
extern GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP as const GUID
extern GUID_NON_ADAPTIVE_INPUT_TIMEOUT as const GUID
extern GUID_DISK_SUBGROUP as const GUID
extern GUID_DISK_POWERDOWN_TIMEOUT as const GUID
extern GUID_DISK_IDLE_TIMEOUT as const GUID
extern GUID_DISK_BURST_IGNORE_THRESHOLD as const GUID
extern GUID_DISK_ADAPTIVE_POWERDOWN as const GUID
extern GUID_SLEEP_SUBGROUP as const GUID
extern GUID_SLEEP_IDLE_THRESHOLD as const GUID
extern GUID_STANDBY_TIMEOUT as const GUID
extern GUID_UNATTEND_SLEEP_TIMEOUT as const GUID
extern GUID_HIBERNATE_TIMEOUT as const GUID
extern GUID_HIBERNATE_FASTS4_POLICY as const GUID
extern GUID_CRITICAL_POWER_TRANSITION as const GUID
extern GUID_SYSTEM_AWAYMODE as const GUID
extern GUID_ALLOW_AWAYMODE as const GUID
extern GUID_ALLOW_STANDBY_STATES as const GUID
extern GUID_ALLOW_RTC_WAKE as const GUID
extern GUID_ALLOW_SYSTEM_REQUIRED as const GUID
extern GUID_SYSTEM_BUTTON_SUBGROUP as const GUID
extern GUID_POWERBUTTON_ACTION as const GUID
extern GUID_SLEEPBUTTON_ACTION as const GUID
extern GUID_USERINTERFACEBUTTON_ACTION as const GUID
extern GUID_LIDCLOSE_ACTION as const GUID
extern GUID_LIDOPEN_POWERSTATE as const GUID
extern GUID_BATTERY_SUBGROUP as const GUID
extern GUID_BATTERY_DISCHARGE_ACTION_0 as const GUID
extern GUID_BATTERY_DISCHARGE_LEVEL_0 as const GUID
extern GUID_BATTERY_DISCHARGE_FLAGS_0 as const GUID
extern GUID_BATTERY_DISCHARGE_ACTION_1 as const GUID
extern GUID_BATTERY_DISCHARGE_LEVEL_1 as const GUID
extern GUID_BATTERY_DISCHARGE_FLAGS_1 as const GUID
extern GUID_BATTERY_DISCHARGE_ACTION_2 as const GUID
extern GUID_BATTERY_DISCHARGE_LEVEL_2 as const GUID
extern GUID_BATTERY_DISCHARGE_FLAGS_2 as const GUID
extern GUID_BATTERY_DISCHARGE_ACTION_3 as const GUID
extern GUID_BATTERY_DISCHARGE_LEVEL_3 as const GUID
extern GUID_BATTERY_DISCHARGE_FLAGS_3 as const GUID
extern GUID_PROCESSOR_SETTINGS_SUBGROUP as const GUID
extern GUID_PROCESSOR_THROTTLE_POLICY as const GUID
extern GUID_PROCESSOR_THROTTLE_MAXIMUM as const GUID
extern GUID_PROCESSOR_THROTTLE_MINIMUM as const GUID
extern GUID_PROCESSOR_ALLOW_THROTTLING as const GUID
extern GUID_PROCESSOR_IDLESTATE_POLICY as const GUID
extern GUID_PROCESSOR_PERFSTATE_POLICY as const GUID
extern GUID_PROCESSOR_PERF_INCREASE_THRESHOLD as const GUID
extern GUID_PROCESSOR_PERF_DECREASE_THRESHOLD as const GUID
extern GUID_PROCESSOR_PERF_INCREASE_POLICY as const GUID
extern GUID_PROCESSOR_PERF_DECREASE_POLICY as const GUID
extern GUID_PROCESSOR_PERF_INCREASE_TIME as const GUID
extern GUID_PROCESSOR_PERF_DECREASE_TIME as const GUID
extern GUID_PROCESSOR_PERF_TIME_CHECK as const GUID
extern GUID_PROCESSOR_PERF_BOOST_POLICY as const GUID
extern GUID_PROCESSOR_PERF_BOOST_MODE as const GUID
extern GUID_PROCESSOR_IDLE_ALLOW_SCALING as const GUID
extern GUID_PROCESSOR_IDLE_DISABLE as const GUID
extern GUID_PROCESSOR_IDLE_STATE_MAXIMUM as const GUID
extern GUID_PROCESSOR_IDLE_TIME_CHECK as const GUID
extern GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD as const GUID
extern GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD as const GUID
extern GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD as const GUID
extern GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD as const GUID
extern GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY as const GUID
extern GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY as const GUID
extern GUID_PROCESSOR_CORE_PARKING_MAX_CORES as const GUID
extern GUID_PROCESSOR_CORE_PARKING_MIN_CORES as const GUID
extern GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME as const GUID
extern GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME as const GUID
extern GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR as const GUID
extern GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD as const GUID
extern GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING as const GUID
extern GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR as const GUID
extern GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD as const GUID
extern GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING as const GUID
extern GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD as const GUID
extern GUID_PROCESSOR_PARKING_CORE_OVERRIDE as const GUID
extern GUID_PROCESSOR_PARKING_PERF_STATE as const GUID
extern GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD as const GUID
extern GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD as const GUID
extern GUID_PROCESSOR_PERF_HISTORY as const GUID
extern GUID_PROCESSOR_PERF_LATENCY_HINT as const GUID
extern GUID_PROCESSOR_DISTRIBUTE_UTILITY as const GUID
extern GUID_SYSTEM_COOLING_POLICY as const GUID
extern GUID_LOCK_CONSOLE_ON_WAKE as const GUID
extern GUID_DEVICE_IDLE_POLICY as const GUID
extern GUID_ACDC_POWER_SOURCE as const GUID
extern GUID_LIDSWITCH_STATE_CHANGE as const GUID
extern GUID_BATTERY_PERCENTAGE_REMAINING as const GUID
extern GUID_GLOBAL_USER_PRESENCE as const GUID
extern GUID_SESSION_DISPLAY_STATUS as const GUID
extern GUID_SESSION_USER_PRESENCE as const GUID
extern GUID_IDLE_BACKGROUND_TASK as const GUID
extern GUID_BACKGROUND_TASK_NOTIFICATION as const GUID
extern GUID_APPLAUNCH_BUTTON as const GUID
extern GUID_PCIEXPRESS_SETTINGS_SUBGROUP as const GUID
extern GUID_PCIEXPRESS_ASPM_POLICY as const GUID
extern GUID_ENABLE_SWITCH_FORCED_SHUTDOWN as const GUID

type _SYSTEM_POWER_STATE as long
enum
 PowerSystemUnspecified = 0
 PowerSystemWorking = 1
 PowerSystemSleeping1 = 2
 PowerSystemSleeping2 = 3
 PowerSystemSleeping3 = 4
 PowerSystemHibernate = 5
 PowerSystemShutdown = 6
 PowerSystemMaximum = 7
end enum

type SYSTEM_POWER_STATE as _SYSTEM_POWER_STATE
type PSYSTEM_POWER_STATE as _SYSTEM_POWER_STATE ptr
const POWER_SYSTEM_MAXIMUM = 7

type POWER_ACTION as long
enum
 PowerActionNone = 0
 PowerActionReserved
 PowerActionSleep
 PowerActionHibernate
 PowerActionShutdown
 PowerActionShutdownReset
 PowerActionShutdownOff
 PowerActionWarmEject
end enum

type PPOWER_ACTION as POWER_ACTION ptr

type _DEVICE_POWER_STATE as long
enum
 PowerDeviceUnspecified = 0
 PowerDeviceD0
 PowerDeviceD1
 PowerDeviceD2
 PowerDeviceD3
 PowerDeviceMaximum
end enum

type DEVICE_POWER_STATE as _DEVICE_POWER_STATE
type PDEVICE_POWER_STATE as _DEVICE_POWER_STATE ptr

type _MONITOR_DISPLAY_STATE as long
enum
 PowerMonitorOff = 0
 PowerMonitorOn
 PowerMonitorDim
end enum

type MONITOR_DISPLAY_STATE as _MONITOR_DISPLAY_STATE
type PMONITOR_DISPLAY_STATE as _MONITOR_DISPLAY_STATE ptr

type _USER_ACTIVITY_PRESENCE as long
enum
 PowerUserPresent = 0
 PowerUserNotPresent
 PowerUserInactive
 PowerUserMaximum
 PowerUserInvalid = PowerUserMaximum
end enum

type USER_ACTIVITY_PRESENCE as _USER_ACTIVITY_PRESENCE
type PUSER_ACTIVITY_PRESENCE as _USER_ACTIVITY_PRESENCE ptr
const ES_SYSTEM_REQUIRED = cast(DWORD, &h00000001)
const ES_DISPLAY_REQUIRED = cast(DWORD, &h00000002)
const ES_USER_PRESENT = cast(DWORD, &h00000004)
const ES_AWAYMODE_REQUIRED = cast(DWORD, &h00000040)
const ES_CONTINUOUS = cast(DWORD, &h80000000)
type EXECUTION_STATE as DWORD
type PEXECUTION_STATE as DWORD ptr

type LATENCY_TIME as long
enum
 LT_DONT_CARE
 LT_LOWEST_LATENCY
end enum

const DIAGNOSTIC_REASON_VERSION = 0
const POWER_REQUEST_CONTEXT_VERSION = 0
const DIAGNOSTIC_REASON_SIMPLE_STRING = &h00000001
const DIAGNOSTIC_REASON_DETAILED_STRING = &h00000002
const DIAGNOSTIC_REASON_NOT_SPECIFIED = &h80000000
const DIAGNOSTIC_REASON_INVALID_FLAGS = not &h80000003
const POWER_REQUEST_CONTEXT_SIMPLE_STRING = &h00000001
const POWER_REQUEST_CONTEXT_DETAILED_STRING = &h00000002

type _POWER_REQUEST_TYPE as long
enum
 PowerRequestDisplayRequired
 PowerRequestSystemRequired
 PowerRequestAwayModeRequired
 PowerRequestExecutionRequired
end enum

type POWER_REQUEST_TYPE as _POWER_REQUEST_TYPE
type PPOWER_REQUEST_TYPE as _POWER_REQUEST_TYPE ptr
const PDCAP_D0_SUPPORTED = &h00000001
const PDCAP_D1_SUPPORTED = &h00000002
const PDCAP_D2_SUPPORTED = &h00000004
const PDCAP_D3_SUPPORTED = &h00000008
const PDCAP_WAKE_FROM_D0_SUPPORTED = &h00000010
const PDCAP_WAKE_FROM_D1_SUPPORTED = &h00000020
const PDCAP_WAKE_FROM_D2_SUPPORTED = &h00000040
const PDCAP_WAKE_FROM_D3_SUPPORTED = &h00000080
const PDCAP_WARM_EJECT_SUPPORTED = &h00000100

type CM_Power_Data_s
 PD_Size as DWORD
 PD_MostRecentPowerState as DEVICE_POWER_STATE
 PD_Capabilities as DWORD
 PD_D1Latency as DWORD
 PD_D2Latency as DWORD
 PD_D3Latency as DWORD
 PD_PowerStateMapping(0 to 6) as DEVICE_POWER_STATE
 PD_DeepestSystemWake as SYSTEM_POWER_STATE
end type

type CM_POWER_DATA as CM_Power_Data_s
type PCM_POWER_DATA as CM_Power_Data_s ptr

type POWER_INFORMATION_LEVEL as long
enum
 SystemPowerPolicyAc
 SystemPowerPolicyDc
 VerifySystemPolicyAc
 VerifySystemPolicyDc
 SystemPowerCapabilities
 SystemBatteryState
 SystemPowerStateHandler
 ProcessorStateHandler
 SystemPowerPolicyCurrent
 AdministratorPowerPolicy
 SystemReserveHiberFile
 ProcessorInformation
 SystemPowerInformation
 ProcessorStateHandler2
 LastWakeTime
 LastSleepTime
 SystemExecutionState
 SystemPowerStateNotifyHandler
 ProcessorPowerPolicyAc
 ProcessorPowerPolicyDc
 VerifyProcessorPowerPolicyAc
 VerifyProcessorPowerPolicyDc
 ProcessorPowerPolicyCurrent
 SystemPowerStateLogging
 SystemPowerLoggingEntry
 SetPowerSettingValue
 NotifyUserPowerSetting
 PowerInformationLevelUnused0
 SystemMonitorHiberBootPowerOff
 SystemVideoState
 TraceApplicationPowerMessage
 TraceApplicationPowerMessageEnd
 ProcessorPerfStates
 ProcessorIdleStates
 ProcessorCap
 SystemWakeSource
 SystemHiberFileInformation
 TraceServicePowerMessage
 ProcessorLoad
 PowerShutdownNotification
 MonitorCapabilities
 SessionPowerInit
 SessionDisplayState
 PowerRequestCreate
 PowerRequestAction
 GetPowerRequestList
 ProcessorInformationEx
 NotifyUserModeLegacyPowerEvent
 GroupPark
 ProcessorIdleDomains
 WakeTimerList
 SystemHiberFileSize
 ProcessorIdleStatesHv
 ProcessorPerfStatesHv
 ProcessorPerfCapHv
 ProcessorSetIdle
 LogicalProcessorIdling
 UserPresence
 PowerSettingNotificationName
 GetPowerSettingValue
 IdleResiliency
 SessionRITState
 SessionConnectNotification
 SessionPowerCleanup
 SessionLockState
 SystemHiberbootState
 PlatformInformation
 PdcInvocation
 MonitorInvocation
 FirmwareTableInformationRegistered
 SetShutdownSelectedTime
 SuspendResumeInvocation
 PlmPowerRequestCreate
 ScreenOff
 CsDeviceNotification
 PlatformRole
 LastResumePerformance
 DisplayBurst
 ExitLatencySamplingPercentage
 ApplyLowPowerScenarioSettings
 PowerInformationLevelMaximum
end enum

type POWER_USER_PRESENCE_TYPE as long
enum
 UserNotPresent = 0
 UserPresent = 1
 UserUnknown = &hff
end enum

type PPOWER_USER_PRESENCE_TYPE as POWER_USER_PRESENCE_TYPE ptr

type _POWER_USER_PRESENCE
 UserPresence as POWER_USER_PRESENCE_TYPE
end type

type POWER_USER_PRESENCE as _POWER_USER_PRESENCE
type PPOWER_USER_PRESENCE as _POWER_USER_PRESENCE ptr

type _POWER_SESSION_CONNECT
 Connected as WINBOOLEAN
 Console as WINBOOLEAN
end type

type POWER_SESSION_CONNECT as _POWER_SESSION_CONNECT
type PPOWER_SESSION_CONNECT as _POWER_SESSION_CONNECT ptr

type _POWER_SESSION_TIMEOUTS
 InputTimeout as DWORD
 DisplayTimeout as DWORD
end type

type POWER_SESSION_TIMEOUTS as _POWER_SESSION_TIMEOUTS
type PPOWER_SESSION_TIMEOUTS as _POWER_SESSION_TIMEOUTS ptr

type _POWER_SESSION_RIT_STATE
 Active as WINBOOLEAN
 LastInputTime as DWORD
end type

type POWER_SESSION_RIT_STATE as _POWER_SESSION_RIT_STATE
type PPOWER_SESSION_RIT_STATE as _POWER_SESSION_RIT_STATE ptr

type _POWER_SESSION_WINLOGON
 SessionId as DWORD
 Console as WINBOOLEAN
 Locked as WINBOOLEAN
end type

type POWER_SESSION_WINLOGON as _POWER_SESSION_WINLOGON
type PPOWER_SESSION_WINLOGON as _POWER_SESSION_WINLOGON ptr

type _POWER_IDLE_RESILIENCY
 CoalescingTimeout as DWORD
 IdleResiliencyPeriod as DWORD
end type

type POWER_IDLE_RESILIENCY as _POWER_IDLE_RESILIENCY
type PPOWER_IDLE_RESILIENCY as _POWER_IDLE_RESILIENCY ptr

type POWER_MONITOR_REQUEST_REASON as long
enum
 MonitorRequestReasonUnknown
 MonitorRequestReasonPowerButton
 MonitorRequestReasonRemoteConnection
 MonitorRequestReasonScMonitorpower
 MonitorRequestReasonUserInput
 MonitorRequestReasonAcDcDisplayBurst
 MonitorRequestReasonUserDisplayBurst
 MonitorRequestReasonPoSetSystemState
 MonitorRequestReasonSetThreadExecutionState
 MonitorRequestReasonFullWake
 MonitorRequestReasonSessionUnlock
 MonitorRequestReasonScreenOffRequest
 MonitorRequestReasonIdleTimeout
 MonitorRequestReasonPolicyChange
 MonitorRequestReasonMax
end enum

type _POWER_MONITOR_INVOCATION
 On as WINBOOLEAN
 Console as WINBOOLEAN
 RequestReason as POWER_MONITOR_REQUEST_REASON
end type

type POWER_MONITOR_INVOCATION as _POWER_MONITOR_INVOCATION
type PPOWER_MONITOR_INVOCATION as _POWER_MONITOR_INVOCATION ptr

type _RESUME_PERFORMANCE
 PostTimeMs as DWORD
 TotalResumeTimeMs as ULONGLONG
 ResumeCompleteTimestamp as ULONGLONG
end type

type RESUME_PERFORMANCE as _RESUME_PERFORMANCE
type PRESUME_PERFORMANCE as _RESUME_PERFORMANCE ptr

type SYSTEM_POWER_CONDITION as long
enum
 PoAc
 PoDc
 PoHot
 PoConditionMaximum
end enum

type SET_POWER_SETTING_VALUE
 Version as DWORD
 Guid as GUID
 PowerCondition as SYSTEM_POWER_CONDITION
 DataLength as DWORD
 Data(0 to 0) as UBYTE
end type

type PSET_POWER_SETTING_VALUE as SET_POWER_SETTING_VALUE ptr
const POWER_SETTING_VALUE_VERSION = &h1

type NOTIFY_USER_POWER_SETTING
 Guid as GUID
end type

type PNOTIFY_USER_POWER_SETTING as NOTIFY_USER_POWER_SETTING ptr

type _APPLICATIONLAUNCH_SETTING_VALUE
 ActivationTime as LARGE_INTEGER
 Flags as DWORD
 ButtonInstanceID as DWORD
end type

type APPLICATIONLAUNCH_SETTING_VALUE as _APPLICATIONLAUNCH_SETTING_VALUE
type PAPPLICATIONLAUNCH_SETTING_VALUE as _APPLICATIONLAUNCH_SETTING_VALUE ptr

type _POWER_PLATFORM_ROLE as long
enum
 PlatformRoleUnspecified = 0
 PlatformRoleDesktop
 PlatformRoleMobile
 PlatformRoleWorkstation
 PlatformRoleEnterpriseServer
 PlatformRoleSOHOServer
 PlatformRoleAppliancePC
 PlatformRolePerformanceServer
 PlatformRoleSlate
 PlatformRoleMaximum
end enum

type POWER_PLATFORM_ROLE as _POWER_PLATFORM_ROLE
type PPOWER_PLATFORM_ROLE as _POWER_PLATFORM_ROLE ptr

type _POWER_PLATFORM_INFORMATION
 AoAc as WINBOOLEAN
end type

type POWER_PLATFORM_INFORMATION as _POWER_PLATFORM_INFORMATION
type PPOWER_PLATFORM_INFORMATION as _POWER_PLATFORM_INFORMATION ptr
const POWER_PLATFORM_ROLE_V1 = &h00000001
const POWER_PLATFORM_ROLE_V1_MAX = PlatformRolePerformanceServer + 1
const POWER_PLATFORM_ROLE_V2 = &h00000002
const POWER_PLATFORM_ROLE_V2_MAX = PlatformRoleSlate + 1

 const POWER_PLATFORM_ROLE_VERSION = POWER_PLATFORM_ROLE_V1
 const POWER_PLATFORM_ROLE_VERSION_MAX = POWER_PLATFORM_ROLE_V1_MAX

type BATTERY_REPORTING_SCALE
 Granularity as DWORD
 Capacity as DWORD
end type

type PBATTERY_REPORTING_SCALE as BATTERY_REPORTING_SCALE ptr

type PPM_WMI_LEGACY_PERFSTATE
 Frequency as DWORD
 Flags as DWORD
 PercentFrequency as DWORD
end type

type PPPM_WMI_LEGACY_PERFSTATE as PPM_WMI_LEGACY_PERFSTATE ptr

type PPM_WMI_IDLE_STATE
 Latency as DWORD
 Power as DWORD
 TimeCheck as DWORD
 PromotePercent as UBYTE
 DemotePercent as UBYTE
 StateType as UBYTE
 Reserved as UBYTE
 StateFlags as DWORD
 Context as DWORD
 IdleHandler as DWORD
 Reserved1 as DWORD
end type

type PPPM_WMI_IDLE_STATE as PPM_WMI_IDLE_STATE ptr

type PPM_WMI_IDLE_STATES
 as DWORD Type
 Count as DWORD
 TargetState as DWORD
 OldState as DWORD
 TargetProcessors as DWORD64
 State(0 to 0) as PPM_WMI_IDLE_STATE
end type

type PPPM_WMI_IDLE_STATES as PPM_WMI_IDLE_STATES ptr

type PPM_WMI_IDLE_STATES_EX
 as DWORD Type
 Count as DWORD
 TargetState as DWORD
 OldState as DWORD
 TargetProcessors as PVOID
 State(0 to 0) as PPM_WMI_IDLE_STATE
end type

type PPPM_WMI_IDLE_STATES_EX as PPM_WMI_IDLE_STATES_EX ptr

type PPM_WMI_PERF_STATE
 Frequency as DWORD
 Power as DWORD
 PercentFrequency as UBYTE
 IncreaseLevel as UBYTE
 DecreaseLevel as UBYTE
 as UBYTE Type
 IncreaseTime as DWORD
 DecreaseTime as DWORD
 Control as DWORD64
 Status as DWORD64
 HitCount as DWORD
 Reserved1 as DWORD
 Reserved2 as DWORD64
 Reserved3 as DWORD64
end type

type PPPM_WMI_PERF_STATE as PPM_WMI_PERF_STATE ptr

type PPM_WMI_PERF_STATES
 Count as DWORD
 MaxFrequency as DWORD
 CurrentState as DWORD
 MaxPerfState as DWORD
 MinPerfState as DWORD
 LowestPerfState as DWORD
 ThermalConstraint as DWORD
 BusyAdjThreshold as UBYTE
 PolicyType as UBYTE
 as UBYTE Type
 Reserved as UBYTE
 TimerInterval as DWORD
 TargetProcessors as DWORD64
 PStateHandler as DWORD
 PStateContext as DWORD
 TStateHandler as DWORD
 TStateContext as DWORD
 FeedbackHandler as DWORD
 Reserved1 as DWORD
 Reserved2 as DWORD64
 State(0 to 0) as PPM_WMI_PERF_STATE
end type

type PPPM_WMI_PERF_STATES as PPM_WMI_PERF_STATES ptr

type PPM_WMI_PERF_STATES_EX
 Count as DWORD
 MaxFrequency as DWORD
 CurrentState as DWORD
 MaxPerfState as DWORD
 MinPerfState as DWORD
 LowestPerfState as DWORD
 ThermalConstraint as DWORD
 BusyAdjThreshold as UBYTE
 PolicyType as UBYTE
 as UBYTE Type
 Reserved as UBYTE
 TimerInterval as DWORD
 TargetProcessors as PVOID
 PStateHandler as DWORD
 PStateContext as DWORD
 TStateHandler as DWORD
 TStateContext as DWORD
 FeedbackHandler as DWORD
 Reserved1 as DWORD
 Reserved2 as DWORD64
 State(0 to 0) as PPM_WMI_PERF_STATE
end type

type PPPM_WMI_PERF_STATES_EX as PPM_WMI_PERF_STATES_EX ptr
const PROC_IDLE_BUCKET_COUNT = 6
const PROC_IDLE_BUCKET_COUNT_EX = 16

type PPM_IDLE_STATE_ACCOUNTING
 IdleTransitions as DWORD
 FailedTransitions as DWORD
 InvalidBucketIndex as DWORD
 TotalTime as DWORD64
 IdleTimeBuckets(0 to 5) as DWORD
end type

type PPPM_IDLE_STATE_ACCOUNTING as PPM_IDLE_STATE_ACCOUNTING ptr

type PPM_IDLE_ACCOUNTING
 StateCount as DWORD
 TotalTransitions as DWORD
 ResetCount as DWORD
 StartTime as DWORD64
 State(0 to 0) as PPM_IDLE_STATE_ACCOUNTING
end type

type PPPM_IDLE_ACCOUNTING as PPM_IDLE_ACCOUNTING ptr

type PPM_IDLE_STATE_BUCKET_EX
 TotalTimeUs as DWORD64
 MinTimeUs as DWORD
 MaxTimeUs as DWORD
 Count as DWORD
end type

type PPPM_IDLE_STATE_BUCKET_EX as PPM_IDLE_STATE_BUCKET_EX ptr

type PPM_IDLE_STATE_ACCOUNTING_EX
 TotalTime as DWORD64
 IdleTransitions as DWORD
 FailedTransitions as DWORD
 InvalidBucketIndex as DWORD
 MinTimeUs as DWORD
 MaxTimeUs as DWORD
 CancelledTransitions as DWORD
 IdleTimeBuckets(0 to 15) as PPM_IDLE_STATE_BUCKET_EX
end type

type PPPM_IDLE_STATE_ACCOUNTING_EX as PPM_IDLE_STATE_ACCOUNTING_EX ptr

type PPM_IDLE_ACCOUNTING_EX
 StateCount as DWORD
 TotalTransitions as DWORD
 ResetCount as DWORD
 AbortCount as DWORD
 StartTime as DWORD64
 State(0 to 0) as PPM_IDLE_STATE_ACCOUNTING_EX
end type

type PPPM_IDLE_ACCOUNTING_EX as PPM_IDLE_ACCOUNTING_EX ptr
const ACPI_PPM_SOFTWARE_ALL = &hfc
const ACPI_PPM_SOFTWARE_ANY = &hfd
const ACPI_PPM_HARDWARE_ALL = &hfe
const MS_PPM_SOFTWARE_ALL = &h1
const PPM_FIRMWARE_ACPI1C2 = &h1
const PPM_FIRMWARE_ACPI1C3 = &h2
const PPM_FIRMWARE_ACPI1TSTATES = &h4
const PPM_FIRMWARE_CST = &h8
const PPM_FIRMWARE_CSD = &h10
const PPM_FIRMWARE_PCT = &h20
const PPM_FIRMWARE_PSS = &h40
const PPM_FIRMWARE_XPSS = &h80
const PPM_FIRMWARE_PPC = &h100
const PPM_FIRMWARE_PSD = &h200
const PPM_FIRMWARE_PTC = &h400
const PPM_FIRMWARE_TSS = &h800
const PPM_FIRMWARE_TPC = &h1000
const PPM_FIRMWARE_TSD = &h2000
const PPM_FIRMWARE_PCCH = &h4000
const PPM_FIRMWARE_PCCP = &h8000
const PPM_FIRMWARE_OSC = &h10000
const PPM_FIRMWARE_PDC = &h20000
const PPM_FIRMWARE_CPC = &h40000
const PPM_PERFORMANCE_IMPLEMENTATION_NONE = 0
const PPM_PERFORMANCE_IMPLEMENTATION_PSTATES = 1
const PPM_PERFORMANCE_IMPLEMENTATION_PCCV1 = 2
const PPM_PERFORMANCE_IMPLEMENTATION_CPPC = 3
const PPM_PERFORMANCE_IMPLEMENTATION_PEP = 4
const PPM_IDLE_IMPLEMENTATION_NONE = &h00
const PPM_IDLE_IMPLEMENTATION_CSTATES = &h1
const PPM_IDLE_IMPLEMENTATION_PEP = &h2

type PPM_PERFSTATE_EVENT
 State as DWORD
 Status as DWORD
 Latency as DWORD
 Speed as DWORD
 Processor as DWORD
end type

type PPPM_PERFSTATE_EVENT as PPM_PERFSTATE_EVENT ptr

type PPM_PERFSTATE_DOMAIN_EVENT
 State as DWORD
 Latency as DWORD
 Speed as DWORD
 Processors as DWORD64
end type

type PPPM_PERFSTATE_DOMAIN_EVENT as PPM_PERFSTATE_DOMAIN_EVENT ptr

type PPM_IDLESTATE_EVENT
 NewState as DWORD
 OldState as DWORD
 Processors as DWORD64
end type

type PPPM_IDLESTATE_EVENT as PPM_IDLESTATE_EVENT ptr

type PPM_THERMALCHANGE_EVENT
 ThermalConstraint as DWORD
 Processors as DWORD64
end type

type PPPM_THERMALCHANGE_EVENT as PPM_THERMALCHANGE_EVENT ptr

type PPM_THERMAL_POLICY_EVENT
 Mode as UBYTE
 Processors as DWORD64
end type

type PPPM_THERMAL_POLICY_EVENT as PPM_THERMAL_POLICY_EVENT ptr
extern PPM_PERFSTATE_CHANGE_GUID as const GUID
extern PPM_PERFSTATE_DOMAIN_CHANGE_GUID as const GUID
extern PPM_IDLESTATE_CHANGE_GUID as const GUID
extern PPM_PERFSTATES_DATA_GUID as const GUID
extern PPM_IDLESTATES_DATA_GUID as const GUID
extern PPM_IDLE_ACCOUNTING_GUID as const GUID
extern PPM_IDLE_ACCOUNTING_EX_GUID as const GUID
extern PPM_THERMALCONSTRAINT_GUID as const GUID
extern PPM_PERFMON_PERFSTATE_GUID as const GUID
extern PPM_THERMAL_POLICY_CHANGE_GUID as const GUID

type POWER_ACTION_POLICY
 Action as POWER_ACTION
 Flags as DWORD
 EventCode as DWORD
end type

type PPOWER_ACTION_POLICY as POWER_ACTION_POLICY ptr
const POWER_ACTION_QUERY_ALLOWED = &h00000001
const POWER_ACTION_UI_ALLOWED = &h00000002
const POWER_ACTION_OVERRIDE_APPS = &h00000004
const POWER_ACTION_HIBERBOOT = &h00000008
const POWER_ACTION_PSEUDO_TRANSITION = &h08000000
const POWER_ACTION_LIGHTEST_FIRST = &h10000000
const POWER_ACTION_LOCK_CONSOLE = &h20000000
const POWER_ACTION_DISABLE_WAKES = &h40000000
const POWER_ACTION_CRITICAL = &h80000000
const POWER_LEVEL_USER_NOTIFY_TEXT = &h00000001
const POWER_LEVEL_USER_NOTIFY_SOUND = &h00000002
const POWER_LEVEL_USER_NOTIFY_EXEC = &h00000004
const POWER_USER_NOTIFY_BUTTON = &h00000008
const POWER_USER_NOTIFY_SHUTDOWN = &h00000010
const POWER_USER_NOTIFY_FORCED_SHUTDOWN = &h00000020
const POWER_FORCE_TRIGGER_RESET = &h80000000
const BATTERY_DISCHARGE_FLAGS_EVENTCODE_MASK = &h00000007
const BATTERY_DISCHARGE_FLAGS_ENABLE = &h80000000
const DISCHARGE_POLICY_CRITICAL = 0
const DISCHARGE_POLICY_LOW = 1
const NUM_DISCHARGE_POLICIES = 4
const PROCESSOR_IDLESTATE_POLICY_COUNT = &h3

type PROCESSOR_IDLESTATE_INFO
 TimeCheck as DWORD
 DemotePercent as UBYTE
 PromotePercent as UBYTE
 Spare(0 to 1) as UBYTE
end type

type PPROCESSOR_IDLESTATE_INFO as PROCESSOR_IDLESTATE_INFO ptr

type SYSTEM_POWER_LEVEL
 Enable as WINBOOLEAN
 Spare(0 to 2) as UBYTE
 BatteryLevel as DWORD
 PowerPolicy as POWER_ACTION_POLICY
 MinSystemState as SYSTEM_POWER_STATE
end type

type PSYSTEM_POWER_LEVEL as SYSTEM_POWER_LEVEL ptr

type _SYSTEM_POWER_POLICY
 Revision as DWORD
 PowerButton as POWER_ACTION_POLICY
 SleepButton as POWER_ACTION_POLICY
 LidClose as POWER_ACTION_POLICY
 LidOpenWake as SYSTEM_POWER_STATE
 Reserved as DWORD
 Idle as POWER_ACTION_POLICY
 IdleTimeout as DWORD
 IdleSensitivity as UBYTE
 DynamicThrottle as UBYTE
 Spare2(0 to 1) as UBYTE
 MinSleep as SYSTEM_POWER_STATE
 MaxSleep as SYSTEM_POWER_STATE
 ReducedLatencySleep as SYSTEM_POWER_STATE
 WinLogonFlags as DWORD
 Spare3 as DWORD
 DozeS4Timeout as DWORD
 BroadcastCapacityResolution as DWORD
 DischargePolicy(0 to 3) as SYSTEM_POWER_LEVEL
 VideoTimeout as DWORD
 VideoDimDisplay as WINBOOLEAN
 VideoReserved(0 to 2) as DWORD
 SpindownTimeout as DWORD
 OptimizeForPower as WINBOOLEAN
 FanThrottleTolerance as UBYTE
 ForcedThrottle as UBYTE
 MinThrottle as UBYTE
 OverThrottled as POWER_ACTION_POLICY
end type

type SYSTEM_POWER_POLICY as _SYSTEM_POWER_POLICY
type PSYSTEM_POWER_POLICY as _SYSTEM_POWER_POLICY ptr
const PO_THROTTLE_NONE = 0
const PO_THROTTLE_CONSTANT = 1
const PO_THROTTLE_DEGRADE = 2
const PO_THROTTLE_ADAPTIVE = 3
const PO_THROTTLE_MAXIMUM = 4

union PROCESSOR_IDLESTATE_POLICY_Flags
 AsWORD as WORD

 type
 AllowScaling : 1 as WORD
 Disabled : 1 as WORD
 Reserved : 14 as WORD
 end type
end union

type PROCESSOR_IDLESTATE_POLICY
 Revision as WORD
 Flags as PROCESSOR_IDLESTATE_POLICY_Flags
 PolicyCount as DWORD
 Policy(0 to 2) as PROCESSOR_IDLESTATE_INFO
end type

type PPROCESSOR_IDLESTATE_POLICY as PROCESSOR_IDLESTATE_POLICY ptr

type _PROCESSOR_POWER_POLICY_INFO
 TimeCheck as DWORD
 DemoteLimit as DWORD
 PromoteLimit as DWORD
 DemotePercent as UBYTE
 PromotePercent as UBYTE
 Spare(0 to 1) as UBYTE
 AllowDemotion : 1 as DWORD
 AllowPromotion : 1 as DWORD
 Reserved : 30 as DWORD
end type

type PROCESSOR_POWER_POLICY_INFO as _PROCESSOR_POWER_POLICY_INFO
type PPROCESSOR_POWER_POLICY_INFO as _PROCESSOR_POWER_POLICY_INFO ptr

type _PROCESSOR_POWER_POLICY
 Revision as DWORD
 DynamicThrottle as UBYTE
 Spare(0 to 2) as UBYTE
 DisableCStates : 1 as DWORD
 Reserved : 31 as DWORD
 PolicyCount as DWORD
 Policy(0 to 2) as PROCESSOR_POWER_POLICY_INFO
end type

type PROCESSOR_POWER_POLICY as _PROCESSOR_POWER_POLICY
type PPROCESSOR_POWER_POLICY as _PROCESSOR_POWER_POLICY ptr

union PROCESSOR_PERFSTATE_POLICY_Flags
 AsBYTE as UBYTE

 type
 NoDomainAccounting : 1 as UBYTE
 IncreasePolicy : 2 as UBYTE
 DecreasePolicy : 2 as UBYTE
 Reserved : 3 as UBYTE
 end type
end union

type PROCESSOR_PERFSTATE_POLICY
 Revision as DWORD
 MaxThrottle as UBYTE
 MinThrottle as UBYTE
 BusyAdjThreshold as UBYTE

 union
 Spare as UBYTE
 Flags as PROCESSOR_PERFSTATE_POLICY_Flags
 end union

 TimeCheck as DWORD
 IncreaseTime as DWORD
 DecreaseTime as DWORD
 IncreasePercent as DWORD
 DecreasePercent as DWORD
end type

type PPROCESSOR_PERFSTATE_POLICY as PROCESSOR_PERFSTATE_POLICY ptr

type _ADMINISTRATOR_POWER_POLICY
 MinSleep as SYSTEM_POWER_STATE
 MaxSleep as SYSTEM_POWER_STATE
 MinVideoTimeout as DWORD
 MaxVideoTimeout as DWORD
 MinSpindownTimeout as DWORD
 MaxSpindownTimeout as DWORD
end type

type ADMINISTRATOR_POWER_POLICY as _ADMINISTRATOR_POWER_POLICY
type PADMINISTRATOR_POWER_POLICY as _ADMINISTRATOR_POWER_POLICY ptr

type SYSTEM_POWER_CAPABILITIES
 PowerButtonPresent as WINBOOLEAN
 SleepButtonPresent as WINBOOLEAN
 LidPresent as WINBOOLEAN
 SystemS1 as WINBOOLEAN
 SystemS2 as WINBOOLEAN
 SystemS3 as WINBOOLEAN
 SystemS4 as WINBOOLEAN
 SystemS5 as WINBOOLEAN
 HiberFilePresent as WINBOOLEAN
 FullWake as WINBOOLEAN
 VideoDimPresent as WINBOOLEAN
 ApmPresent as WINBOOLEAN
 UpsPresent as WINBOOLEAN
 ThermalControl as WINBOOLEAN
 ProcessorThrottle as WINBOOLEAN
 ProcessorMinThrottle as UBYTE
 ProcessorMaxThrottle as UBYTE
 FastSystemS4 as WINBOOLEAN
 spare2(0 to 2) as UBYTE
 DiskSpinDown as WINBOOLEAN
 spare3(0 to 7) as UBYTE
 SystemBatteriesPresent as WINBOOLEAN
 BatteriesAreShortTerm as WINBOOLEAN
 BatteryScale(0 to 2) as BATTERY_REPORTING_SCALE
 AcOnLineWake as SYSTEM_POWER_STATE
 SoftLidWake as SYSTEM_POWER_STATE
 RtcWake as SYSTEM_POWER_STATE
 MinDeviceWakeState as SYSTEM_POWER_STATE
 DefaultLowLatencyWake as SYSTEM_POWER_STATE
end type

type PSYSTEM_POWER_CAPABILITIES as SYSTEM_POWER_CAPABILITIES ptr

type SYSTEM_BATTERY_STATE
 AcOnLine as WINBOOLEAN
 BatteryPresent as WINBOOLEAN
 Charging as WINBOOLEAN
 Discharging as WINBOOLEAN
 Spare1(0 to 3) as WINBOOLEAN
 MaxCapacity as DWORD
 RemainingCapacity as DWORD
 Rate as DWORD
 EstimatedTime as DWORD
 DefaultAlert1 as DWORD
 DefaultAlert2 as DWORD
end type

type PSYSTEM_BATTERY_STATE as SYSTEM_BATTERY_STATE ptr
const IMAGE_DOS_SIGNATURE = &h5A4D
const IMAGE_OS2_SIGNATURE = &h454E
const IMAGE_OS2_SIGNATURE_LE = &h454C
const IMAGE_VXD_SIGNATURE = &h454C
const IMAGE_NT_SIGNATURE = &h00004550

type _IMAGE_DOS_HEADER field = 2
 e_magic as WORD
 e_cblp as WORD
 e_cp as WORD
 e_crlc as WORD
 e_cparhdr as WORD
 e_minalloc as WORD
 e_maxalloc as WORD
 e_ss as WORD
 e_sp as WORD
 e_csum as WORD
 e_ip as WORD
 e_cs as WORD
 e_lfarlc as WORD
 e_ovno as WORD
 e_res(0 to 3) as WORD
 e_oemid as WORD
 e_oeminfo as WORD
 e_res2(0 to 9) as WORD
 e_lfanew as LONG
end type

type IMAGE_DOS_HEADER as _IMAGE_DOS_HEADER
type PIMAGE_DOS_HEADER as _IMAGE_DOS_HEADER ptr

type _IMAGE_OS2_HEADER field = 2
 ne_magic as WORD
 ne_ver as CHAR
 ne_rev as CHAR
 ne_enttab as WORD
 ne_cbenttab as WORD
 ne_crc as LONG
 ne_flags as WORD
 ne_autodata as WORD
 ne_heap as WORD
 ne_stack as WORD
 ne_csip as LONG
 ne_sssp as LONG
 ne_cseg as WORD
 ne_cmod as WORD
 ne_cbnrestab as WORD
 ne_segtab as WORD
 ne_rsrctab as WORD
 ne_restab as WORD
 ne_modtab as WORD
 ne_imptab as WORD
 ne_nrestab as LONG
 ne_cmovent as WORD
 ne_align as WORD
 ne_cres as WORD
 ne_exetyp as UBYTE
 ne_flagsothers as UBYTE
 ne_pretthunks as WORD
 ne_psegrefbytes as WORD
 ne_swaparea as WORD
 ne_expver as WORD
end type

type IMAGE_OS2_HEADER as _IMAGE_OS2_HEADER
type PIMAGE_OS2_HEADER as _IMAGE_OS2_HEADER ptr

type _IMAGE_VXD_HEADER field = 2
 e32_magic as WORD
 e32_border as UBYTE
 e32_worder as UBYTE
 e32_level as DWORD
 e32_cpu as WORD
 e32_os as WORD
 e32_ver as DWORD
 e32_mflags as DWORD
 e32_mpages as DWORD
 e32_startobj as DWORD
 e32_eip as DWORD
 e32_stackobj as DWORD
 e32_esp as DWORD
 e32_pagesize as DWORD
 e32_lastpagesize as DWORD
 e32_fixupsize as DWORD
 e32_fixupsum as DWORD
 e32_ldrsize as DWORD
 e32_ldrsum as DWORD
 e32_objtab as DWORD
 e32_objcnt as DWORD
 e32_objmap as DWORD
 e32_itermap as DWORD
 e32_rsrctab as DWORD
 e32_rsrccnt as DWORD
 e32_restab as DWORD
 e32_enttab as DWORD
 e32_dirtab as DWORD
 e32_dircnt as DWORD
 e32_fpagetab as DWORD
 e32_frectab as DWORD
 e32_impmod as DWORD
 e32_impmodcnt as DWORD
 e32_impproc as DWORD
 e32_pagesum as DWORD
 e32_datapage as DWORD
 e32_preload as DWORD
 e32_nrestab as DWORD
 e32_cbnrestab as DWORD
 e32_nressum as DWORD
 e32_autodata as DWORD
 e32_debuginfo as DWORD
 e32_debuglen as DWORD
 e32_instpreload as DWORD
 e32_instdemand as DWORD
 e32_heapsize as DWORD
 e32_res3(0 to 11) as UBYTE
 e32_winresoff as DWORD
 e32_winreslen as DWORD
 e32_devid as WORD
 e32_ddkver as WORD
end type

type IMAGE_VXD_HEADER as _IMAGE_VXD_HEADER
type PIMAGE_VXD_HEADER as _IMAGE_VXD_HEADER ptr

type _IMAGE_FILE_HEADER field = 4
 Machine as WORD
 NumberOfSections as WORD
 TimeDateStamp as DWORD
 PointerToSymbolTable as DWORD
 NumberOfSymbols as DWORD
 SizeOfOptionalHeader as WORD
 Characteristics as WORD
end type

type IMAGE_FILE_HEADER as _IMAGE_FILE_HEADER
type PIMAGE_FILE_HEADER as _IMAGE_FILE_HEADER ptr
const IMAGE_SIZEOF_FILE_HEADER = 20
const IMAGE_FILE_RELOCS_STRIPPED = &h0001
const IMAGE_FILE_EXECUTABLE_IMAGE = &h0002
const IMAGE_FILE_LINE_NUMS_STRIPPED = &h0004
const IMAGE_FILE_LOCAL_SYMS_STRIPPED = &h0008
const IMAGE_FILE_AGGRESIVE_WS_TRIM = &h0010
const IMAGE_FILE_LARGE_ADDRESS_AWARE = &h0020
const IMAGE_FILE_BYTES_REVERSED_LO = &h0080
const IMAGE_FILE_32BIT_MACHINE = &h0100
const IMAGE_FILE_DEBUG_STRIPPED = &h0200
const IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP = &h0400
const IMAGE_FILE_NET_RUN_FROM_SWAP = &h0800
const IMAGE_FILE_SYSTEM = &h1000
const IMAGE_FILE_DLL = &h2000
const IMAGE_FILE_UP_SYSTEM_ONLY = &h4000
const IMAGE_FILE_BYTES_REVERSED_HI = &h8000
const IMAGE_FILE_MACHINE_UNKNOWN = 0
const IMAGE_FILE_MACHINE_I386 = &h014c
const IMAGE_FILE_MACHINE_R3000 = &h0162
const IMAGE_FILE_MACHINE_R4000 = &h0166
const IMAGE_FILE_MACHINE_R10000 = &h0168
const IMAGE_FILE_MACHINE_WCEMIPSV2 = &h0169
const IMAGE_FILE_MACHINE_ALPHA = &h0184
const IMAGE_FILE_MACHINE_SH3 = &h01a2
const IMAGE_FILE_MACHINE_SH3DSP = &h01a3
const IMAGE_FILE_MACHINE_SH3E = &h01a4
const IMAGE_FILE_MACHINE_SH4 = &h01a6
const IMAGE_FILE_MACHINE_SH5 = &h01a8
const IMAGE_FILE_MACHINE_ARM = &h01c0
const IMAGE_FILE_MACHINE_ARMV7 = &h01c4
const IMAGE_FILE_MACHINE_ARMNT = &h01c4
const IMAGE_FILE_MACHINE_THUMB = &h01c2
const IMAGE_FILE_MACHINE_AM33 = &h01d3
const IMAGE_FILE_MACHINE_POWERPC = &h01F0
const IMAGE_FILE_MACHINE_POWERPCFP = &h01f1
const IMAGE_FILE_MACHINE_IA64 = &h0200
const IMAGE_FILE_MACHINE_MIPS16 = &h0266
const IMAGE_FILE_MACHINE_ALPHA64 = &h0284
const IMAGE_FILE_MACHINE_MIPSFPU = &h0366
const IMAGE_FILE_MACHINE_MIPSFPU16 = &h0466
const IMAGE_FILE_MACHINE_AXP64 = IMAGE_FILE_MACHINE_ALPHA64
const IMAGE_FILE_MACHINE_TRICORE = &h0520
const IMAGE_FILE_MACHINE_CEF = &h0CEF
const IMAGE_FILE_MACHINE_EBC = &h0EBC
const IMAGE_FILE_MACHINE_AMD64 = &h8664
const IMAGE_FILE_MACHINE_M32R = &h9041
const IMAGE_FILE_MACHINE_CEE = &hc0ee

type _IMAGE_DATA_DIRECTORY field = 4
 VirtualAddress as DWORD
 Size as DWORD
end type

type IMAGE_DATA_DIRECTORY as _IMAGE_DATA_DIRECTORY
type PIMAGE_DATA_DIRECTORY as _IMAGE_DATA_DIRECTORY ptr
const IMAGE_NUMBEROF_DIRECTORY_ENTRIES = 16

type _IMAGE_OPTIONAL_HEADER field = 4
 Magic as WORD
 MajorLinkerVersion as UBYTE
 MinorLinkerVersion as UBYTE
 SizeOfCode as DWORD
 SizeOfInitializedData as DWORD
 SizeOfUninitializedData as DWORD
 AddressOfEntryPoint as DWORD
 BaseOfCode as DWORD
 BaseOfData as DWORD
 ImageBase as DWORD
 SectionAlignment as DWORD
 FileAlignment as DWORD
 MajorOperatingSystemVersion as WORD
 MinorOperatingSystemVersion as WORD
 MajorImageVersion as WORD
 MinorImageVersion as WORD
 MajorSubsystemVersion as WORD
 MinorSubsystemVersion as WORD
 Win32VersionValue as DWORD
 SizeOfImage as DWORD
 SizeOfHeaders as DWORD
 CheckSum as DWORD
 Subsystem as WORD
 DllCharacteristics as WORD
 SizeOfStackReserve as DWORD
 SizeOfStackCommit as DWORD
 SizeOfHeapReserve as DWORD
 SizeOfHeapCommit as DWORD
 LoaderFlags as DWORD
 NumberOfRvaAndSizes as DWORD
 DataDirectory(0 to 15) as IMAGE_DATA_DIRECTORY
end type

type IMAGE_OPTIONAL_HEADER32 as _IMAGE_OPTIONAL_HEADER
type PIMAGE_OPTIONAL_HEADER32 as _IMAGE_OPTIONAL_HEADER ptr

type _IMAGE_ROM_OPTIONAL_HEADER field = 4
 Magic as WORD
 MajorLinkerVersion as UBYTE
 MinorLinkerVersion as UBYTE
 SizeOfCode as DWORD
 SizeOfInitializedData as DWORD
 SizeOfUninitializedData as DWORD
 AddressOfEntryPoint as DWORD
 BaseOfCode as DWORD
 BaseOfData as DWORD
 BaseOfBss as DWORD
 GprMask as DWORD
 CprMask(0 to 3) as DWORD
 GpValue as DWORD
end type

type IMAGE_ROM_OPTIONAL_HEADER as _IMAGE_ROM_OPTIONAL_HEADER
type PIMAGE_ROM_OPTIONAL_HEADER as _IMAGE_ROM_OPTIONAL_HEADER ptr

type _IMAGE_OPTIONAL_HEADER64 field = 4
 Magic as WORD
 MajorLinkerVersion as UBYTE
 MinorLinkerVersion as UBYTE
 SizeOfCode as DWORD
 SizeOfInitializedData as DWORD
 SizeOfUninitializedData as DWORD
 AddressOfEntryPoint as DWORD
 BaseOfCode as DWORD
 ImageBase as ULONGLONG
 SectionAlignment as DWORD
 FileAlignment as DWORD
 MajorOperatingSystemVersion as WORD
 MinorOperatingSystemVersion as WORD
 MajorImageVersion as WORD
 MinorImageVersion as WORD
 MajorSubsystemVersion as WORD
 MinorSubsystemVersion as WORD
 Win32VersionValue as DWORD
 SizeOfImage as DWORD
 SizeOfHeaders as DWORD
 CheckSum as DWORD
 Subsystem as WORD
 DllCharacteristics as WORD
 SizeOfStackReserve as ULONGLONG
 SizeOfStackCommit as ULONGLONG
 SizeOfHeapReserve as ULONGLONG
 SizeOfHeapCommit as ULONGLONG
 LoaderFlags as DWORD
 NumberOfRvaAndSizes as DWORD
 DataDirectory(0 to 15) as IMAGE_DATA_DIRECTORY
end type

type IMAGE_OPTIONAL_HEADER64 as _IMAGE_OPTIONAL_HEADER64
type PIMAGE_OPTIONAL_HEADER64 as _IMAGE_OPTIONAL_HEADER64 ptr
const IMAGE_SIZEOF_ROM_OPTIONAL_HEADER = 56
const IMAGE_SIZEOF_STD_OPTIONAL_HEADER = 28
const IMAGE_SIZEOF_NT_OPTIONAL32_HEADER = 224
const IMAGE_SIZEOF_NT_OPTIONAL64_HEADER = 240
const IMAGE_NT_OPTIONAL_HDR32_MAGIC = &h10b
const IMAGE_NT_OPTIONAL_HDR64_MAGIC = &h20b
const IMAGE_ROM_OPTIONAL_HDR_MAGIC = &h107

 type IMAGE_OPTIONAL_HEADER as IMAGE_OPTIONAL_HEADER32
 type PIMAGE_OPTIONAL_HEADER as PIMAGE_OPTIONAL_HEADER32
 const IMAGE_SIZEOF_NT_OPTIONAL_HEADER = IMAGE_SIZEOF_NT_OPTIONAL32_HEADER
 const IMAGE_NT_OPTIONAL_HDR_MAGIC = IMAGE_NT_OPTIONAL_HDR32_MAGIC

type _IMAGE_NT_HEADERS64 field = 4
 Signature as DWORD
 FileHeader as IMAGE_FILE_HEADER
 OptionalHeader as IMAGE_OPTIONAL_HEADER64
end type

type IMAGE_NT_HEADERS64 as _IMAGE_NT_HEADERS64
type PIMAGE_NT_HEADERS64 as _IMAGE_NT_HEADERS64 ptr

type _IMAGE_NT_HEADERS field = 4
 Signature as DWORD
 FileHeader as IMAGE_FILE_HEADER
 OptionalHeader as IMAGE_OPTIONAL_HEADER32
end type

type IMAGE_NT_HEADERS32 as _IMAGE_NT_HEADERS
type PIMAGE_NT_HEADERS32 as _IMAGE_NT_HEADERS ptr

type _IMAGE_ROM_HEADERS field = 4
 FileHeader as IMAGE_FILE_HEADER
 OptionalHeader as IMAGE_ROM_OPTIONAL_HEADER
end type

type IMAGE_ROM_HEADERS as _IMAGE_ROM_HEADERS
type PIMAGE_ROM_HEADERS as _IMAGE_ROM_HEADERS ptr

 type IMAGE_NT_HEADERS as IMAGE_NT_HEADERS32
 type PIMAGE_NT_HEADERS as PIMAGE_NT_HEADERS32

const IMAGE_SUBSYSTEM_UNKNOWN = 0
const IMAGE_SUBSYSTEM_NATIVE = 1
const IMAGE_SUBSYSTEM_WINDOWS_GUI = 2
const IMAGE_SUBSYSTEM_WINDOWS_CUI = 3
const IMAGE_SUBSYSTEM_OS2_CUI = 5
const IMAGE_SUBSYSTEM_POSIX_CUI = 7
const IMAGE_SUBSYSTEM_NATIVE_WINDOWS = 8
const IMAGE_SUBSYSTEM_WINDOWS_CE_GUI = 9
const IMAGE_SUBSYSTEM_EFI_APPLICATION = 10
const IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER = 11
const IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER = 12
const IMAGE_SUBSYSTEM_EFI_ROM = 13
const IMAGE_SUBSYSTEM_XBOX = 14
const IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION = 16
const IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE = &h0040
const IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY = &h0080
const IMAGE_DLLCHARACTERISTICS_NX_COMPAT = &h0100
const IMAGE_DLLCHARACTERISTICS_NO_ISOLATION = &h0200
const IMAGE_DLLCHARACTERISTICS_NO_SEH = &h0400
const IMAGE_DLLCHARACTERISTICS_NO_BIND = &h0800
const IMAGE_DLLCHARACTERISTICS_APPCONTAINER = &h1000
const IMAGE_DLLCHARACTERISTICS_WDM_DRIVER = &h2000
const IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE = &h8000
const IMAGE_DIRECTORY_ENTRY_EXPORT = 0
const IMAGE_DIRECTORY_ENTRY_IMPORT = 1
const IMAGE_DIRECTORY_ENTRY_RESOURCE = 2
const IMAGE_DIRECTORY_ENTRY_EXCEPTION = 3
const IMAGE_DIRECTORY_ENTRY_SECURITY = 4
const IMAGE_DIRECTORY_ENTRY_BASERELOC = 5
const IMAGE_DIRECTORY_ENTRY_DEBUG = 6
const IMAGE_DIRECTORY_ENTRY_ARCHITECTURE = 7
const IMAGE_DIRECTORY_ENTRY_GLOBALPTR = 8
const IMAGE_DIRECTORY_ENTRY_TLS = 9
const IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG = 10
const IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT = 11
const IMAGE_DIRECTORY_ENTRY_IAT = 12
const IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT = 13
const IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR = 14

type ANON_OBJECT_HEADER field = 4
 Sig1 as WORD
 Sig2 as WORD
 Version as WORD
 Machine as WORD
 TimeDateStamp as DWORD
 ClassID as CLSID
 SizeOfData as DWORD
end type

type ANON_OBJECT_HEADER_V2 field = 4
 Sig1 as WORD
 Sig2 as WORD
 Version as WORD
 Machine as WORD
 TimeDateStamp as DWORD
 ClassID as CLSID
 SizeOfData as DWORD
 Flags as DWORD
 MetaDataSize as DWORD
 MetaDataOffset as DWORD
end type

type ANON_OBJECT_HEADER_BIGOBJ field = 4
 Sig1 as WORD
 Sig2 as WORD
 Version as WORD
 Machine as WORD
 TimeDateStamp as DWORD
 ClassID as CLSID
 SizeOfData as DWORD
 Flags as DWORD
 MetaDataSize as DWORD
 MetaDataOffset as DWORD
 NumberOfSections as DWORD
 PointerToSymbolTable as DWORD
 NumberOfSymbols as DWORD
end type

const IMAGE_SIZEOF_SHORT_NAME = 8

union _IMAGE_SECTION_HEADER_Misc field = 4
 PhysicalAddress as DWORD
 VirtualSize as DWORD
end union

type _IMAGE_SECTION_HEADER field = 4
 Name(0 to 7) as UBYTE
 Misc as _IMAGE_SECTION_HEADER_Misc
 VirtualAddress as DWORD
 SizeOfRawData as DWORD
 PointerToRawData as DWORD
 PointerToRelocations as DWORD
 PointerToLinenumbers as DWORD
 NumberOfRelocations as WORD
 NumberOfLinenumbers as WORD
 Characteristics as DWORD
end type

type IMAGE_SECTION_HEADER as _IMAGE_SECTION_HEADER
type PIMAGE_SECTION_HEADER as _IMAGE_SECTION_HEADER ptr
const IMAGE_SIZEOF_SECTION_HEADER = 40
const IMAGE_SCN_TYPE_NO_PAD = &h00000008
const IMAGE_SCN_CNT_CODE = &h00000020
const IMAGE_SCN_CNT_INITIALIZED_DATA = &h00000040
const IMAGE_SCN_CNT_UNINITIALIZED_DATA = &h00000080
const IMAGE_SCN_LNK_OTHER = &h00000100
const IMAGE_SCN_LNK_INFO = &h00000200
const IMAGE_SCN_LNK_REMOVE = &h00000800
const IMAGE_SCN_LNK_COMDAT = &h00001000
const IMAGE_SCN_NO_DEFER_SPEC_EXC = &h00004000
const IMAGE_SCN_GPREL = &h00008000
const IMAGE_SCN_MEM_FARDATA = &h00008000
const IMAGE_SCN_MEM_PURGEABLE = &h00020000
const IMAGE_SCN_MEM_16BIT = &h00020000
const IMAGE_SCN_MEM_LOCKED = &h00040000
const IMAGE_SCN_MEM_PRELOAD = &h00080000
const IMAGE_SCN_ALIGN_1BYTES = &h00100000
const IMAGE_SCN_ALIGN_2BYTES = &h00200000
const IMAGE_SCN_ALIGN_4BYTES = &h00300000
const IMAGE_SCN_ALIGN_8BYTES = &h00400000
const IMAGE_SCN_ALIGN_16BYTES = &h00500000
const IMAGE_SCN_ALIGN_32BYTES = &h00600000
const IMAGE_SCN_ALIGN_64BYTES = &h00700000
const IMAGE_SCN_ALIGN_128BYTES = &h00800000
const IMAGE_SCN_ALIGN_256BYTES = &h00900000
const IMAGE_SCN_ALIGN_512BYTES = &h00A00000
const IMAGE_SCN_ALIGN_1024BYTES = &h00B00000
const IMAGE_SCN_ALIGN_2048BYTES = &h00C00000
const IMAGE_SCN_ALIGN_4096BYTES = &h00D00000
const IMAGE_SCN_ALIGN_8192BYTES = &h00E00000
const IMAGE_SCN_ALIGN_MASK = &h00F00000
const IMAGE_SCN_LNK_NRELOC_OVFL = &h01000000
const IMAGE_SCN_MEM_DISCARDABLE = &h02000000
const IMAGE_SCN_MEM_NOT_CACHED = &h04000000
const IMAGE_SCN_MEM_NOT_PAGED = &h08000000
const IMAGE_SCN_MEM_SHARED = &h10000000
const IMAGE_SCN_MEM_EXECUTE = &h20000000
const IMAGE_SCN_MEM_READ = &h40000000
const IMAGE_SCN_MEM_WRITE = &h80000000
const IMAGE_SCN_SCALE_INDEX = &h00000001

type _IMAGE_SYMBOL_N_Name field = 2
 Short as DWORD
 Long as DWORD
end type

union _IMAGE_SYMBOL_N field = 2
 ShortName(0 to 7) as UBYTE
 Name as _IMAGE_SYMBOL_N_Name
 LongName(0 to 1) as DWORD
end union

type _IMAGE_SYMBOL field = 2
 N as _IMAGE_SYMBOL_N
 Value as DWORD
 SectionNumber as SHORT
 as WORD Type
 StorageClass as UBYTE
 NumberOfAuxSymbols as UBYTE
end type

type IMAGE_SYMBOL as _IMAGE_SYMBOL
type PIMAGE_SYMBOL as IMAGE_SYMBOL ptr
const IMAGE_SIZEOF_SYMBOL = 18

type _IMAGE_SYMBOL_EX_N_Name field = 2
 Short as DWORD
 Long as DWORD
end type

union _IMAGE_SYMBOL_EX_N field = 2
 ShortName(0 to 7) as UBYTE
 Name as _IMAGE_SYMBOL_EX_N_Name
 LongName(0 to 1) as DWORD
end union

type _IMAGE_SYMBOL_EX field = 2
 N as _IMAGE_SYMBOL_EX_N
 Value as DWORD
 SectionNumber as LONG
 as WORD Type
 StorageClass as UBYTE
 NumberOfAuxSymbols as UBYTE
end type

type IMAGE_SYMBOL_EX as _IMAGE_SYMBOL_EX
type PIMAGE_SYMBOL_EX as _IMAGE_SYMBOL_EX ptr
const IMAGE_SYM_SECTION_MAX = &hFEFF
const IMAGE_SYM_SECTION_MAX_EX = MAXLONG
const IMAGE_SYM_TYPE_NULL = &h00000
const IMAGE_SYM_TYPE_VOID = &h0001
const IMAGE_SYM_TYPE_CHAR = &h0002
const IMAGE_SYM_TYPE_SHORT = &h0003
const IMAGE_SYM_TYPE_INT = &h0004
const IMAGE_SYM_TYPE_LONG = &h0005
const IMAGE_SYM_TYPE_FLOAT = &h0006
const IMAGE_SYM_TYPE_DOUBLE = &h0007
const IMAGE_SYM_TYPE_STRUCT = &h0008
const IMAGE_SYM_TYPE_UNION = &h0009
const IMAGE_SYM_TYPE_ENUM = &h000A
const IMAGE_SYM_TYPE_MOE = &h000B
const IMAGE_SYM_TYPE_BYTE = &h000C
const IMAGE_SYM_TYPE_WORD = &h000D
const IMAGE_SYM_TYPE_UINT = &h000E
const IMAGE_SYM_TYPE_DWORD = &h000F
const IMAGE_SYM_TYPE_PCODE = &h8000
const IMAGE_SYM_DTYPE_NULL = 0
const IMAGE_SYM_DTYPE_POINTER = 1
const IMAGE_SYM_DTYPE_FUNCTION = 2
const IMAGE_SYM_DTYPE_ARRAY = 3
const IMAGE_SYM_CLASS_END_OF_FUNCTION = cast(UBYTE, -1)
const IMAGE_SYM_CLASS_NULL = &h00000
const IMAGE_SYM_CLASS_AUTOMATIC = &h0001
const IMAGE_SYM_CLASS_EXTERNAL = &h0002
const IMAGE_SYM_CLASS_STATIC = &h0003
const IMAGE_SYM_CLASS_REGISTER = &h0004
const IMAGE_SYM_CLASS_EXTERNAL_DEF = &h0005
const IMAGE_SYM_CLASS_LABEL = &h0006
const IMAGE_SYM_CLASS_UNDEFINED_LABEL = &h0007
const IMAGE_SYM_CLASS_MEMBER_OF_STRUCT = &h0008
const IMAGE_SYM_CLASS_ARGUMENT = &h0009
const IMAGE_SYM_CLASS_STRUCT_TAG = &h000A
const IMAGE_SYM_CLASS_MEMBER_OF_UNION = &h000B
const IMAGE_SYM_CLASS_UNION_TAG = &h000C
const IMAGE_SYM_CLASS_TYPE_DEFINITION = &h000D
const IMAGE_SYM_CLASS_UNDEFINED_STATIC = &h000E
const IMAGE_SYM_CLASS_ENUM_TAG = &h000F
const IMAGE_SYM_CLASS_MEMBER_OF_ENUM = &h0010
const IMAGE_SYM_CLASS_REGISTER_PARAM = &h0011
const IMAGE_SYM_CLASS_BIT_FIELD = &h0012
const IMAGE_SYM_CLASS_FAR_EXTERNAL = &h0044
const IMAGE_SYM_CLASS_BLOCK = &h0064
const IMAGE_SYM_CLASS_FUNCTION = &h0065
const IMAGE_SYM_CLASS_END_OF_STRUCT = &h0066
const IMAGE_SYM_CLASS_FILE = &h0067
const IMAGE_SYM_CLASS_SECTION = &h0068
const IMAGE_SYM_CLASS_WEAK_EXTERNAL = &h0069
const IMAGE_SYM_CLASS_CLR_TOKEN = &h006B
const N_BTMASK = &h000F
const N_TMASK = &h0030
const N_TMASK1 = &h00C0
const N_TMASK2 = &h00F0
const N_BTSHFT = 4
const N_TSHIFT = 2

type IMAGE_AUX_SYMBOL_TOKEN_DEF field = 2
 bAuxType as UBYTE
 bReserved as UBYTE
 SymbolTableIndex as DWORD
 rgbReserved(0 to 11) as UBYTE
end type

type PIMAGE_AUX_SYMBOL_TOKEN_DEF as IMAGE_AUX_SYMBOL_TOKEN_DEF ptr

type _IMAGE_AUX_SYMBOL_Sym_Misc_LnSz field = 2
 Linenumber as WORD
 Size as WORD
end type

union _IMAGE_AUX_SYMBOL_Sym_Misc field = 2
 LnSz as _IMAGE_AUX_SYMBOL_Sym_Misc_LnSz
 TotalSize as DWORD
end union

type _IMAGE_AUX_SYMBOL_Sym_FcnAry_Function field = 2
 PointerToLinenumber as DWORD
 PointerToNextFunction as DWORD
end type

type _IMAGE_AUX_SYMBOL_Sym_FcnAry_Array field = 2
 Dimension(0 to 3) as WORD
end type

union _IMAGE_AUX_SYMBOL_Sym_FcnAry field = 2
 Function as _IMAGE_AUX_SYMBOL_Sym_FcnAry_Function
 Array as _IMAGE_AUX_SYMBOL_Sym_FcnAry_Array
end union

type _IMAGE_AUX_SYMBOL_Sym field = 2
 TagIndex as DWORD
 Misc as _IMAGE_AUX_SYMBOL_Sym_Misc
 FcnAry as _IMAGE_AUX_SYMBOL_Sym_FcnAry
 TvIndex as WORD
end type

type _IMAGE_AUX_SYMBOL_File field = 2
 Name(0 to 17) as UBYTE
end type

type _IMAGE_AUX_SYMBOL_Section field = 2
 Length as DWORD
 NumberOfRelocations as WORD
 NumberOfLinenumbers as WORD
 CheckSum as DWORD
 Number as SHORT
 Selection as UBYTE
end type

type _IMAGE_AUX_SYMBOL_CRC field = 2
 crc as DWORD
 rgbReserved(0 to 13) as UBYTE
end type

union _IMAGE_AUX_SYMBOL field = 2
 Sym as _IMAGE_AUX_SYMBOL_Sym
 File as _IMAGE_AUX_SYMBOL_File
 Section as _IMAGE_AUX_SYMBOL_Section
 TokenDef as IMAGE_AUX_SYMBOL_TOKEN_DEF
 CRC as _IMAGE_AUX_SYMBOL_CRC
end union

type IMAGE_AUX_SYMBOL as _IMAGE_AUX_SYMBOL
type PIMAGE_AUX_SYMBOL as _IMAGE_AUX_SYMBOL ptr

type _IMAGE_AUX_SYMBOL_EX_Sym field = 2
 WeakDefaultSymIndex as DWORD
 WeakSearchType as DWORD
 rgbReserved(0 to 11) as UBYTE
end type

type _IMAGE_AUX_SYMBOL_EX_File field = 2
 Name(0 to sizeof(IMAGE_SYMBOL_EX) - 1) as UBYTE
end type

type _IMAGE_AUX_SYMBOL_EX_Section field = 2
 Length as DWORD
 NumberOfRelocations as WORD
 NumberOfLinenumbers as WORD
 CheckSum as DWORD
 Number as SHORT
 Selection as UBYTE
 bReserved as UBYTE
 HighNumber as SHORT
 rgbReserved(0 to 1) as UBYTE
end type

type _IMAGE_AUX_SYMBOL_EX_CRC field = 2
 crc as DWORD
 rgbReserved(0 to 15) as UBYTE
end type

union _IMAGE_AUX_SYMBOL_EX field = 2
 Sym as _IMAGE_AUX_SYMBOL_EX_Sym
 File as _IMAGE_AUX_SYMBOL_EX_File
 Section as _IMAGE_AUX_SYMBOL_EX_Section

 type field = 2
 TokenDef as IMAGE_AUX_SYMBOL_TOKEN_DEF
 rgbReserved(0 to 1) as UBYTE
 end type

 CRC as _IMAGE_AUX_SYMBOL_EX_CRC
end union

type IMAGE_AUX_SYMBOL_EX as _IMAGE_AUX_SYMBOL_EX
type PIMAGE_AUX_SYMBOL_EX as _IMAGE_AUX_SYMBOL_EX ptr
const IMAGE_SIZEOF_AUX_SYMBOL = 18

type IMAGE_AUX_SYMBOL_TYPE as long
enum
 IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1
end enum

const IMAGE_COMDAT_SELECT_NODUPLICATES = 1
const IMAGE_COMDAT_SELECT_ANY = 2
const IMAGE_COMDAT_SELECT_SAME_SIZE = 3
const IMAGE_COMDAT_SELECT_EXACT_MATCH = 4
const IMAGE_COMDAT_SELECT_ASSOCIATIVE = 5
const IMAGE_COMDAT_SELECT_LARGEST = 6
const IMAGE_COMDAT_SELECT_NEWEST = 7
const IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY = 1
const IMAGE_WEAK_EXTERN_SEARCH_LIBRARY = 2
const IMAGE_WEAK_EXTERN_SEARCH_ALIAS = 3

type _IMAGE_RELOCATION field = 2
 union field = 2
 VirtualAddress as DWORD
 RelocCount as DWORD
 end union

 SymbolTableIndex as DWORD
 as WORD Type
end type

type IMAGE_RELOCATION as _IMAGE_RELOCATION
type PIMAGE_RELOCATION as IMAGE_RELOCATION ptr
const IMAGE_SIZEOF_RELOCATION = 10
const IMAGE_REL_I386_ABSOLUTE = &h00000
const IMAGE_REL_I386_DIR16 = &h0001
const IMAGE_REL_I386_REL16 = &h0002
const IMAGE_REL_I386_DIR32 = &h0006
const IMAGE_REL_I386_DIR32NB = &h0007
const IMAGE_REL_I386_SEG12 = &h0009
const IMAGE_REL_I386_SECTION = &h000A
const IMAGE_REL_I386_SECREL = &h000B
const IMAGE_REL_I386_TOKEN = &h000C
const IMAGE_REL_I386_SECREL7 = &h000D
const IMAGE_REL_I386_REL32 = &h0014
const IMAGE_REL_MIPS_ABSOLUTE = &h00000
const IMAGE_REL_MIPS_REFHALF = &h0001
const IMAGE_REL_MIPS_REFWORD = &h0002
const IMAGE_REL_MIPS_JMPADDR = &h0003
const IMAGE_REL_MIPS_REFHI = &h0004
const IMAGE_REL_MIPS_REFLO = &h0005
const IMAGE_REL_MIPS_GPREL = &h0006
const IMAGE_REL_MIPS_LITERAL = &h0007
const IMAGE_REL_MIPS_SECTION = &h000A
const IMAGE_REL_MIPS_SECREL = &h000B
const IMAGE_REL_MIPS_SECRELLO = &h000C
const IMAGE_REL_MIPS_SECRELHI = &h000D
const IMAGE_REL_MIPS_TOKEN = &h000E
const IMAGE_REL_MIPS_JMPADDR16 = &h0010
const IMAGE_REL_MIPS_REFWORDNB = &h0022
const IMAGE_REL_MIPS_PAIR = &h0025
const IMAGE_REL_ALPHA_ABSOLUTE = &h00000
const IMAGE_REL_ALPHA_REFLONG = &h0001
const IMAGE_REL_ALPHA_REFQUAD = &h0002
const IMAGE_REL_ALPHA_GPREL32 = &h0003
const IMAGE_REL_ALPHA_LITERAL = &h0004
const IMAGE_REL_ALPHA_LITUSE = &h0005
const IMAGE_REL_ALPHA_GPDISP = &h0006
const IMAGE_REL_ALPHA_BRADDR = &h0007
const IMAGE_REL_ALPHA_HINT = &h0008
const IMAGE_REL_ALPHA_INLINE_REFLONG = &h0009
const IMAGE_REL_ALPHA_REFHI = &h000A
const IMAGE_REL_ALPHA_REFLO = &h000B
const IMAGE_REL_ALPHA_PAIR = &h000C
const IMAGE_REL_ALPHA_MATCH = &h000D
const IMAGE_REL_ALPHA_SECTION = &h000E
const IMAGE_REL_ALPHA_SECREL = &h000F
const IMAGE_REL_ALPHA_REFLONGNB = &h0010
const IMAGE_REL_ALPHA_SECRELLO = &h0011
const IMAGE_REL_ALPHA_SECRELHI = &h0012
const IMAGE_REL_ALPHA_REFQ3 = &h0013
const IMAGE_REL_ALPHA_REFQ2 = &h0014
const IMAGE_REL_ALPHA_REFQ1 = &h0015
const IMAGE_REL_ALPHA_GPRELLO = &h0016
const IMAGE_REL_ALPHA_GPRELHI = &h0017
const IMAGE_REL_PPC_ABSOLUTE = &h00000
const IMAGE_REL_PPC_ADDR64 = &h0001
const IMAGE_REL_PPC_ADDR32 = &h0002
const IMAGE_REL_PPC_ADDR24 = &h0003
const IMAGE_REL_PPC_ADDR16 = &h0004
const IMAGE_REL_PPC_ADDR14 = &h0005
const IMAGE_REL_PPC_REL24 = &h0006
const IMAGE_REL_PPC_REL14 = &h0007
const IMAGE_REL_PPC_TOCREL16 = &h0008
const IMAGE_REL_PPC_TOCREL14 = &h0009
const IMAGE_REL_PPC_ADDR32NB = &h000A
const IMAGE_REL_PPC_SECREL = &h000B
const IMAGE_REL_PPC_SECTION = &h000C
const IMAGE_REL_PPC_IFGLUE = &h000D
const IMAGE_REL_PPC_IMGLUE = &h000E
const IMAGE_REL_PPC_SECREL16 = &h000F
const IMAGE_REL_PPC_REFHI = &h0010
const IMAGE_REL_PPC_REFLO = &h0011
const IMAGE_REL_PPC_PAIR = &h0012
const IMAGE_REL_PPC_SECRELLO = &h0013
const IMAGE_REL_PPC_SECRELHI = &h0014
const IMAGE_REL_PPC_GPREL = &h0015
const IMAGE_REL_PPC_TOKEN = &h0016
const IMAGE_REL_PPC_TYPEMASK = &h00FF
const IMAGE_REL_PPC_NEG = &h0100
const IMAGE_REL_PPC_BRTAKEN = &h0200
const IMAGE_REL_PPC_BRNTAKEN = &h0400
const IMAGE_REL_PPC_TOCDEFN = &h0800
const IMAGE_REL_SH3_ABSOLUTE = &h00000
const IMAGE_REL_SH3_DIRECT16 = &h0001
const IMAGE_REL_SH3_DIRECT32 = &h0002
const IMAGE_REL_SH3_DIRECT8 = &h0003
const IMAGE_REL_SH3_DIRECT8_WORD = &h0004
const IMAGE_REL_SH3_DIRECT8_LONG = &h0005
const IMAGE_REL_SH3_DIRECT4 = &h0006
const IMAGE_REL_SH3_DIRECT4_WORD = &h0007
const IMAGE_REL_SH3_DIRECT4_LONG = &h0008
const IMAGE_REL_SH3_PCREL8_WORD = &h0009
const IMAGE_REL_SH3_PCREL8_LONG = &h000A
const IMAGE_REL_SH3_PCREL12_WORD = &h000B
const IMAGE_REL_SH3_STARTOF_SECTION = &h000C
const IMAGE_REL_SH3_SIZEOF_SECTION = &h000D
const IMAGE_REL_SH3_SECTION = &h000E
const IMAGE_REL_SH3_SECREL = &h000F
const IMAGE_REL_SH3_DIRECT32_NB = &h0010
const IMAGE_REL_SH3_GPREL4_LONG = &h0011
const IMAGE_REL_SH3_TOKEN = &h0012
const IMAGE_REL_SHM_PCRELPT = &h0013
const IMAGE_REL_SHM_REFLO = &h0014
const IMAGE_REL_SHM_REFHALF = &h0015
const IMAGE_REL_SHM_RELLO = &h0016
const IMAGE_REL_SHM_RELHALF = &h0017
const IMAGE_REL_SHM_PAIR = &h0018
const IMAGE_REL_SH_NOMODE = &h8000
const IMAGE_REL_ARM_ABSOLUTE = &h00000
const IMAGE_REL_ARM_ADDR32 = &h0001
const IMAGE_REL_ARM_ADDR32NB = &h0002
const IMAGE_REL_ARM_BRANCH24 = &h0003
const IMAGE_REL_ARM_BRANCH11 = &h0004
const IMAGE_REL_ARM_TOKEN = &h0005
const IMAGE_REL_ARM_GPREL12 = &h0006
const IMAGE_REL_ARM_GPREL7 = &h0007
const IMAGE_REL_ARM_BLX24 = &h0008
const IMAGE_REL_ARM_BLX11 = &h0009
const IMAGE_REL_ARM_SECTION = &h000E
const IMAGE_REL_ARM_SECREL = &h000F
const IMAGE_REL_ARM_MOV32A = &h0010
const IMAGE_REL_ARM_MOV32 = &h0010
const IMAGE_REL_ARM_MOV32T = &h0011
const IMAGE_REL_THUMB_MOV32 = &h0011
const IMAGE_REL_ARM_BRANCH20T = &h0012
const IMAGE_REL_THUMB_BRANCH20 = &h0012
const IMAGE_REL_ARM_BRANCH24T = &h0014
const IMAGE_REL_THUMB_BRANCH24 = &h0014
const IMAGE_REL_ARM_BLX23T = &h0015
const IMAGE_REL_THUMB_BLX23 = &h0015
const IMAGE_REL_AM_ABSOLUTE = &h00000
const IMAGE_REL_AM_ADDR32 = &h0001
const IMAGE_REL_AM_ADDR32NB = &h0002
const IMAGE_REL_AM_CALL32 = &h0003
const IMAGE_REL_AM_FUNCINFO = &h0004
const IMAGE_REL_AM_REL32_1 = &h0005
const IMAGE_REL_AM_REL32_2 = &h0006
const IMAGE_REL_AM_SECREL = &h0007
const IMAGE_REL_AM_SECTION = &h0008
const IMAGE_REL_AM_TOKEN = &h0009
const IMAGE_REL_AMD64_ABSOLUTE = &h00000
const IMAGE_REL_AMD64_ADDR64 = &h0001
const IMAGE_REL_AMD64_ADDR32 = &h0002
const IMAGE_REL_AMD64_ADDR32NB = &h0003
const IMAGE_REL_AMD64_REL32 = &h0004
const IMAGE_REL_AMD64_REL32_1 = &h0005
const IMAGE_REL_AMD64_REL32_2 = &h0006
const IMAGE_REL_AMD64_REL32_3 = &h0007
const IMAGE_REL_AMD64_REL32_4 = &h0008
const IMAGE_REL_AMD64_REL32_5 = &h0009
const IMAGE_REL_AMD64_SECTION = &h000A
const IMAGE_REL_AMD64_SECREL = &h000B
const IMAGE_REL_AMD64_SECREL7 = &h000C
const IMAGE_REL_AMD64_TOKEN = &h000D
const IMAGE_REL_AMD64_SREL32 = &h000E
const IMAGE_REL_AMD64_PAIR = &h000F
const IMAGE_REL_AMD64_SSPAN32 = &h0010
const IMAGE_REL_IA64_ABSOLUTE = &h00000
const IMAGE_REL_IA64_IMM14 = &h0001
const IMAGE_REL_IA64_IMM22 = &h0002
const IMAGE_REL_IA64_IMM64 = &h0003
const IMAGE_REL_IA64_DIR32 = &h0004
const IMAGE_REL_IA64_DIR64 = &h0005
const IMAGE_REL_IA64_PCREL21B = &h0006
const IMAGE_REL_IA64_PCREL21M = &h0007
const IMAGE_REL_IA64_PCREL21F = &h0008
const IMAGE_REL_IA64_GPREL22 = &h0009
const IMAGE_REL_IA64_LTOFF22 = &h000A
const IMAGE_REL_IA64_SECTION = &h000B
const IMAGE_REL_IA64_SECREL22 = &h000C
const IMAGE_REL_IA64_SECREL64I = &h000D
const IMAGE_REL_IA64_SECREL32 = &h000E
const IMAGE_REL_IA64_DIR32NB = &h0010
const IMAGE_REL_IA64_SREL14 = &h0011
const IMAGE_REL_IA64_SREL22 = &h0012
const IMAGE_REL_IA64_SREL32 = &h0013
const IMAGE_REL_IA64_UREL32 = &h0014
const IMAGE_REL_IA64_PCREL60X = &h0015
const IMAGE_REL_IA64_PCREL60B = &h0016
const IMAGE_REL_IA64_PCREL60F = &h0017
const IMAGE_REL_IA64_PCREL60I = &h0018
const IMAGE_REL_IA64_PCREL60M = &h0019
const IMAGE_REL_IA64_IMMGPREL64 = &h001A
const IMAGE_REL_IA64_TOKEN = &h001B
const IMAGE_REL_IA64_GPREL32 = &h001C
const IMAGE_REL_IA64_ADDEND = &h001F
const IMAGE_REL_CEF_ABSOLUTE = &h00000
const IMAGE_REL_CEF_ADDR32 = &h0001
const IMAGE_REL_CEF_ADDR64 = &h0002
const IMAGE_REL_CEF_ADDR32NB = &h0003
const IMAGE_REL_CEF_SECTION = &h0004
const IMAGE_REL_CEF_SECREL = &h0005
const IMAGE_REL_CEF_TOKEN = &h0006
const IMAGE_REL_CEE_ABSOLUTE = &h00000
const IMAGE_REL_CEE_ADDR32 = &h0001
const IMAGE_REL_CEE_ADDR64 = &h0002
const IMAGE_REL_CEE_ADDR32NB = &h0003
const IMAGE_REL_CEE_SECTION = &h0004
const IMAGE_REL_CEE_SECREL = &h0005
const IMAGE_REL_CEE_TOKEN = &h0006
const IMAGE_REL_M32R_ABSOLUTE = &h00000
const IMAGE_REL_M32R_ADDR32 = &h0001
const IMAGE_REL_M32R_ADDR32NB = &h0002
const IMAGE_REL_M32R_ADDR24 = &h0003
const IMAGE_REL_M32R_GPREL16 = &h0004
const IMAGE_REL_M32R_PCREL24 = &h0005
const IMAGE_REL_M32R_PCREL16 = &h0006
const IMAGE_REL_M32R_PCREL8 = &h0007
const IMAGE_REL_M32R_REFHALF = &h0008
const IMAGE_REL_M32R_REFHI = &h0009
const IMAGE_REL_M32R_REFLO = &h000A
const IMAGE_REL_M32R_PAIR = &h000B
const IMAGE_REL_M32R_SECTION = &h000C
const IMAGE_REL_M32R_SECREL32 = &h000D
const IMAGE_REL_M32R_TOKEN = &h000E
const IMAGE_REL_EBC_ABSOLUTE = &h00000
const IMAGE_REL_EBC_ADDR32NB = &h0001
const IMAGE_REL_EBC_REL32 = &h0002
const IMAGE_REL_EBC_SECTION = &h0003
const IMAGE_REL_EBC_SECREL = &h0004
const EMARCH_ENC_I17_IMM7B_INST_WORD_X = 3
const EMARCH_ENC_I17_IMM7B_SIZE_X = 7
const EMARCH_ENC_I17_IMM7B_INST_WORD_POS_X = 4
const EMARCH_ENC_I17_IMM7B_VAL_POS_X = 0
const EMARCH_ENC_I17_IMM9D_INST_WORD_X = 3
const EMARCH_ENC_I17_IMM9D_SIZE_X = 9
const EMARCH_ENC_I17_IMM9D_INST_WORD_POS_X = 18
const EMARCH_ENC_I17_IMM9D_VAL_POS_X = 7
const EMARCH_ENC_I17_IMM5C_INST_WORD_X = 3
const EMARCH_ENC_I17_IMM5C_SIZE_X = 5
const EMARCH_ENC_I17_IMM5C_INST_WORD_POS_X = 13
const EMARCH_ENC_I17_IMM5C_VAL_POS_X = 16
const EMARCH_ENC_I17_IC_INST_WORD_X = 3
const EMARCH_ENC_I17_IC_SIZE_X = 1
const EMARCH_ENC_I17_IC_INST_WORD_POS_X = 12
const EMARCH_ENC_I17_IC_VAL_POS_X = 21
const EMARCH_ENC_I17_IMM41a_INST_WORD_X = 1
const EMARCH_ENC_I17_IMM41a_SIZE_X = 10
const EMARCH_ENC_I17_IMM41a_INST_WORD_POS_X = 14
const EMARCH_ENC_I17_IMM41a_VAL_POS_X = 22
const EMARCH_ENC_I17_IMM41b_INST_WORD_X = 1
const EMARCH_ENC_I17_IMM41b_SIZE_X = 8
const EMARCH_ENC_I17_IMM41b_INST_WORD_POS_X = 24
const EMARCH_ENC_I17_IMM41b_VAL_POS_X = 32
const EMARCH_ENC_I17_IMM41c_INST_WORD_X = 2
const EMARCH_ENC_I17_IMM41c_SIZE_X = 23
const EMARCH_ENC_I17_IMM41c_INST_WORD_POS_X = 0
const EMARCH_ENC_I17_IMM41c_VAL_POS_X = 40
const EMARCH_ENC_I17_SIGN_INST_WORD_X = 3
const EMARCH_ENC_I17_SIGN_SIZE_X = 1
const EMARCH_ENC_I17_SIGN_INST_WORD_POS_X = 27
const EMARCH_ENC_I17_SIGN_VAL_POS_X = 63
const X3_OPCODE_INST_WORD_X = 3
const X3_OPCODE_SIZE_X = 4
const X3_OPCODE_INST_WORD_POS_X = 28
const X3_OPCODE_SIGN_VAL_POS_X = 0
const X3_I_INST_WORD_X = 3
const X3_I_SIZE_X = 1
const X3_I_INST_WORD_POS_X = 27
const X3_I_SIGN_VAL_POS_X = 59
const X3_D_WH_INST_WORD_X = 3
const X3_D_WH_SIZE_X = 3
const X3_D_WH_INST_WORD_POS_X = 24
const X3_D_WH_SIGN_VAL_POS_X = 0
const X3_IMM20_INST_WORD_X = 3
const X3_IMM20_SIZE_X = 20
const X3_IMM20_INST_WORD_POS_X = 4
const X3_IMM20_SIGN_VAL_POS_X = 0
const X3_IMM39_1_INST_WORD_X = 2
const X3_IMM39_1_SIZE_X = 23
const X3_IMM39_1_INST_WORD_POS_X = 0
const X3_IMM39_1_SIGN_VAL_POS_X = 36
const X3_IMM39_2_INST_WORD_X = 1
const X3_IMM39_2_SIZE_X = 16
const X3_IMM39_2_INST_WORD_POS_X = 16
const X3_IMM39_2_SIGN_VAL_POS_X = 20
const X3_P_INST_WORD_X = 3
const X3_P_SIZE_X = 4
const X3_P_INST_WORD_POS_X = 0
const X3_P_SIGN_VAL_POS_X = 0
const X3_TMPLT_INST_WORD_X = 0
const X3_TMPLT_SIZE_X = 4
const X3_TMPLT_INST_WORD_POS_X = 0
const X3_TMPLT_SIGN_VAL_POS_X = 0
const X3_BTYPE_QP_INST_WORD_X = 2
const X3_BTYPE_QP_SIZE_X = 9
const X3_BTYPE_QP_INST_WORD_POS_X = 23
const X3_BTYPE_QP_INST_VAL_POS_X = 0
const X3_EMPTY_INST_WORD_X = 1
const X3_EMPTY_SIZE_X = 2
const X3_EMPTY_INST_WORD_POS_X = 14
const X3_EMPTY_INST_VAL_POS_X = 0

union _IMAGE_LINENUMBER_Type field = 2
 SymbolTableIndex as DWORD
 VirtualAddress as DWORD
end union

type _IMAGE_LINENUMBER field = 2
 as _IMAGE_LINENUMBER_Type Type
 Linenumber as WORD
end type

type IMAGE_LINENUMBER as _IMAGE_LINENUMBER
type PIMAGE_LINENUMBER as IMAGE_LINENUMBER ptr
const IMAGE_SIZEOF_LINENUMBER = 6

type _IMAGE_BASE_RELOCATION field = 4
 VirtualAddress as DWORD
 SizeOfBlock as DWORD
end type

type IMAGE_BASE_RELOCATION as _IMAGE_BASE_RELOCATION
type PIMAGE_BASE_RELOCATION as IMAGE_BASE_RELOCATION ptr
const IMAGE_SIZEOF_BASE_RELOCATION = 8
const IMAGE_REL_BASED_ABSOLUTE = 0
const IMAGE_REL_BASED_HIGH = 1
const IMAGE_REL_BASED_LOW = 2
const IMAGE_REL_BASED_HIGHLOW = 3
const IMAGE_REL_BASED_HIGHADJ = 4
const IMAGE_REL_BASED_MIPS_JMPADDR = 5
const IMAGE_REL_BASED_ARM_MOV32 = 5
const IMAGE_REL_BASED_THUMB_MOV32 = 7
const IMAGE_REL_BASED_MIPS_JMPADDR16 = 9
const IMAGE_REL_BASED_IA64_IMM64 = 9
const IMAGE_REL_BASED_DIR64 = 10
const IMAGE_ARCHIVE_START_SIZE = 8

type _IMAGE_ARCHIVE_MEMBER_HEADER field = 4
 Name(0 to 15) as UBYTE
 Date(0 to 11) as UBYTE
 UserID(0 to 5) as UBYTE
 GroupID(0 to 5) as UBYTE
 Mode(0 to 7) as UBYTE
 Size(0 to 9) as UBYTE
 EndHeader(0 to 1) as UBYTE
end type

type IMAGE_ARCHIVE_MEMBER_HEADER as _IMAGE_ARCHIVE_MEMBER_HEADER
type PIMAGE_ARCHIVE_MEMBER_HEADER as _IMAGE_ARCHIVE_MEMBER_HEADER ptr
const IMAGE_SIZEOF_ARCHIVE_MEMBER_HDR = 60

type _IMAGE_EXPORT_DIRECTORY field = 4
 Characteristics as DWORD
 TimeDateStamp as DWORD
 MajorVersion as WORD
 MinorVersion as WORD
 Name as DWORD
 Base as DWORD
 NumberOfFunctions as DWORD
 NumberOfNames as DWORD
 AddressOfFunctions as DWORD
 AddressOfNames as DWORD
 AddressOfNameOrdinals as DWORD
end type

type IMAGE_EXPORT_DIRECTORY as _IMAGE_EXPORT_DIRECTORY
type PIMAGE_EXPORT_DIRECTORY as _IMAGE_EXPORT_DIRECTORY ptr

type _IMAGE_IMPORT_BY_NAME field = 4
 Hint as WORD
 Name(0 to 0) as UBYTE
end type

type IMAGE_IMPORT_BY_NAME as _IMAGE_IMPORT_BY_NAME
type PIMAGE_IMPORT_BY_NAME as _IMAGE_IMPORT_BY_NAME ptr

union _IMAGE_THUNK_DATA64_u1
 ForwarderString as ULONGLONG
 Function as ULONGLONG
 Ordinal as ULONGLONG
 AddressOfData as ULONGLONG
end union

type _IMAGE_THUNK_DATA64
 u1 as _IMAGE_THUNK_DATA64_u1
end type

type IMAGE_THUNK_DATA64 as _IMAGE_THUNK_DATA64
type PIMAGE_THUNK_DATA64 as IMAGE_THUNK_DATA64 ptr

union _IMAGE_THUNK_DATA32_u1 field = 4
 ForwarderString as DWORD
 Function as DWORD
 Ordinal as DWORD
 AddressOfData as DWORD
end union

type _IMAGE_THUNK_DATA32 field = 4
 u1 as _IMAGE_THUNK_DATA32_u1
end type

type IMAGE_THUNK_DATA32 as _IMAGE_THUNK_DATA32
type PIMAGE_THUNK_DATA32 as IMAGE_THUNK_DATA32 ptr
const IMAGE_ORDINAL_FLAG64 = &h8000000000000000
const IMAGE_ORDINAL_FLAG32 = &h80000000
type PIMAGE_TLS_CALLBACK as sub(byval DllHandle as PVOID, byval Reason as DWORD, byval Reserved as PVOID)

type _IMAGE_TLS_DIRECTORY64 field = 4
 StartAddressOfRawData as ULONGLONG
 EndAddressOfRawData as ULONGLONG
 AddressOfIndex as ULONGLONG
 AddressOfCallBacks as ULONGLONG
 SizeOfZeroFill as DWORD
 Characteristics as DWORD
end type

type IMAGE_TLS_DIRECTORY64 as _IMAGE_TLS_DIRECTORY64
type PIMAGE_TLS_DIRECTORY64 as IMAGE_TLS_DIRECTORY64 ptr

type _IMAGE_TLS_DIRECTORY32 field = 4
 StartAddressOfRawData as DWORD
 EndAddressOfRawData as DWORD
 AddressOfIndex as DWORD
 AddressOfCallBacks as DWORD
 SizeOfZeroFill as DWORD
 Characteristics as DWORD
end type

type IMAGE_TLS_DIRECTORY32 as _IMAGE_TLS_DIRECTORY32
type PIMAGE_TLS_DIRECTORY32 as IMAGE_TLS_DIRECTORY32 ptr

 const IMAGE_ORDINAL_FLAG = IMAGE_ORDINAL_FLAG32
 type IMAGE_THUNK_DATA as IMAGE_THUNK_DATA32
 type PIMAGE_THUNK_DATA as PIMAGE_THUNK_DATA32
 type IMAGE_TLS_DIRECTORY as IMAGE_TLS_DIRECTORY32
 type PIMAGE_TLS_DIRECTORY as PIMAGE_TLS_DIRECTORY32

type _IMAGE_IMPORT_DESCRIPTOR field = 4
 union field = 4
 Characteristics as DWORD
 OriginalFirstThunk as DWORD
 end union

 TimeDateStamp as DWORD
 ForwarderChain as DWORD
 Name as DWORD
 FirstThunk as DWORD
end type

type IMAGE_IMPORT_DESCRIPTOR as _IMAGE_IMPORT_DESCRIPTOR
type PIMAGE_IMPORT_DESCRIPTOR as IMAGE_IMPORT_DESCRIPTOR ptr

type _IMAGE_BOUND_IMPORT_DESCRIPTOR field = 4
 TimeDateStamp as DWORD
 OffsetModuleName as WORD
 NumberOfModuleForwarderRefs as WORD
end type

type IMAGE_BOUND_IMPORT_DESCRIPTOR as _IMAGE_BOUND_IMPORT_DESCRIPTOR
type PIMAGE_BOUND_IMPORT_DESCRIPTOR as _IMAGE_BOUND_IMPORT_DESCRIPTOR ptr

type _IMAGE_BOUND_FORWARDER_REF field = 4
 TimeDateStamp as DWORD
 OffsetModuleName as WORD
 Reserved as WORD
end type

type IMAGE_BOUND_FORWARDER_REF as _IMAGE_BOUND_FORWARDER_REF
type PIMAGE_BOUND_FORWARDER_REF as _IMAGE_BOUND_FORWARDER_REF ptr

union _IMAGE_DELAYLOAD_DESCRIPTOR_Attributes field = 4
 AllAttributes as DWORD

 type field = 4
 RvaBased : 1 as DWORD
 ReservedAttributes : 31 as DWORD
 end type
end union

type _IMAGE_DELAYLOAD_DESCRIPTOR field = 4
 Attributes as _IMAGE_DELAYLOAD_DESCRIPTOR_Attributes
 DllNameRVA as DWORD
 ModuleHandleRVA as DWORD
 ImportAddressTableRVA as DWORD
 ImportNameTableRVA as DWORD
 BoundImportAddressTableRVA as DWORD
 UnloadInformationTableRVA as DWORD
 TimeDateStamp as DWORD
end type

type IMAGE_DELAYLOAD_DESCRIPTOR as _IMAGE_DELAYLOAD_DESCRIPTOR
type PIMAGE_DELAYLOAD_DESCRIPTOR as _IMAGE_DELAYLOAD_DESCRIPTOR ptr
type PCIMAGE_DELAYLOAD_DESCRIPTOR as const IMAGE_DELAYLOAD_DESCRIPTOR ptr

type _IMAGE_RESOURCE_DIRECTORY field = 4
 Characteristics as DWORD
 TimeDateStamp as DWORD
 MajorVersion as WORD
 MinorVersion as WORD
 NumberOfNamedEntries as WORD
 NumberOfIdEntries as WORD
end type

type IMAGE_RESOURCE_DIRECTORY as _IMAGE_RESOURCE_DIRECTORY
type PIMAGE_RESOURCE_DIRECTORY as _IMAGE_RESOURCE_DIRECTORY ptr
const IMAGE_RESOURCE_NAME_IS_STRING = &h80000000
const IMAGE_RESOURCE_DATA_IS_DIRECTORY = &h80000000

type _IMAGE_RESOURCE_DIRECTORY_ENTRY field = 4
 union field = 4
 type field = 4
 NameOffset : 31 as DWORD
 NameIsString : 1 as DWORD
 end type

 Name as DWORD
 Id as WORD
 end union

 union field = 4
 OffsetToData as DWORD

 type field = 4
 OffsetToDirectory : 31 as DWORD
 DataIsDirectory : 1 as DWORD
 end type
 end union
end type

type IMAGE_RESOURCE_DIRECTORY_ENTRY as _IMAGE_RESOURCE_DIRECTORY_ENTRY
type PIMAGE_RESOURCE_DIRECTORY_ENTRY as _IMAGE_RESOURCE_DIRECTORY_ENTRY ptr

type _IMAGE_RESOURCE_DIRECTORY_STRING field = 4
 Length as WORD
 NameString as zstring * 1
end type

type IMAGE_RESOURCE_DIRECTORY_STRING as _IMAGE_RESOURCE_DIRECTORY_STRING
type PIMAGE_RESOURCE_DIRECTORY_STRING as _IMAGE_RESOURCE_DIRECTORY_STRING ptr

type _IMAGE_RESOURCE_DIR_STRING_U field = 4
 Length as WORD
 NameString as wstring * 1
end type

type IMAGE_RESOURCE_DIR_STRING_U as _IMAGE_RESOURCE_DIR_STRING_U
type PIMAGE_RESOURCE_DIR_STRING_U as _IMAGE_RESOURCE_DIR_STRING_U ptr

type _IMAGE_RESOURCE_DATA_ENTRY field = 4
 OffsetToData as DWORD
 Size as DWORD
 CodePage as DWORD
 Reserved as DWORD
end type

type IMAGE_RESOURCE_DATA_ENTRY as _IMAGE_RESOURCE_DATA_ENTRY
type PIMAGE_RESOURCE_DATA_ENTRY as _IMAGE_RESOURCE_DATA_ENTRY ptr

type IMAGE_LOAD_CONFIG_DIRECTORY32 field = 4
 Size as DWORD
 TimeDateStamp as DWORD
 MajorVersion as WORD
 MinorVersion as WORD
 GlobalFlagsClear as DWORD
 GlobalFlagsSet as DWORD
 CriticalSectionDefaultTimeout as DWORD
 DeCommitFreeBlockThreshold as DWORD
 DeCommitTotalFreeThreshold as DWORD
 LockPrefixTable as DWORD
 MaximumAllocationSize as DWORD
 VirtualMemoryThreshold as DWORD
 ProcessHeapFlags as DWORD
 ProcessAffinityMask as DWORD
 CSDVersion as WORD
 Reserved1 as WORD
 EditList as DWORD
 SecurityCookie as DWORD
 SEHandlerTable as DWORD
 SEHandlerCount as DWORD
end type

type PIMAGE_LOAD_CONFIG_DIRECTORY32 as IMAGE_LOAD_CONFIG_DIRECTORY32 ptr

type IMAGE_LOAD_CONFIG_DIRECTORY64 field = 4
 Size as DWORD
 TimeDateStamp as DWORD
 MajorVersion as WORD
 MinorVersion as WORD
 GlobalFlagsClear as DWORD
 GlobalFlagsSet as DWORD
 CriticalSectionDefaultTimeout as DWORD
 DeCommitFreeBlockThreshold as ULONGLONG
 DeCommitTotalFreeThreshold as ULONGLONG
 LockPrefixTable as ULONGLONG
 MaximumAllocationSize as ULONGLONG
 VirtualMemoryThreshold as ULONGLONG
 ProcessAffinityMask as ULONGLONG
 ProcessHeapFlags as DWORD
 CSDVersion as WORD
 Reserved1 as WORD
 EditList as ULONGLONG
 SecurityCookie as ULONGLONG
 SEHandlerTable as ULONGLONG
 SEHandlerCount as ULONGLONG
end type

type PIMAGE_LOAD_CONFIG_DIRECTORY64 as IMAGE_LOAD_CONFIG_DIRECTORY64 ptr

 type IMAGE_LOAD_CONFIG_DIRECTORY as IMAGE_LOAD_CONFIG_DIRECTORY32
 type PIMAGE_LOAD_CONFIG_DIRECTORY as PIMAGE_LOAD_CONFIG_DIRECTORY32

type _IMAGE_CE_RUNTIME_FUNCTION_ENTRY field = 4
 FuncStart as DWORD
 PrologLen : 8 as DWORD
 FuncLen : 22 as DWORD
 ThirtyTwoBit : 1 as DWORD
 ExceptionFlag : 1 as DWORD
end type

type IMAGE_CE_RUNTIME_FUNCTION_ENTRY as _IMAGE_CE_RUNTIME_FUNCTION_ENTRY
type PIMAGE_CE_RUNTIME_FUNCTION_ENTRY as _IMAGE_CE_RUNTIME_FUNCTION_ENTRY ptr

type _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY field = 4
 BeginAddress as ULONGLONG
 EndAddress as ULONGLONG
 ExceptionHandler as ULONGLONG
 HandlerData as ULONGLONG
 PrologEndAddress as ULONGLONG
end type

type IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY as _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY
type PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY as _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY ptr

type _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY field = 4
 BeginAddress as DWORD
 EndAddress as DWORD
 ExceptionHandler as DWORD
 HandlerData as DWORD
 PrologEndAddress as DWORD
end type

type IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY as _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY
type PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY as _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY ptr

type _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY field = 4
 BeginAddress as DWORD

 union field = 4
 UnwindData as DWORD

 type field = 4
 Flag : 2 as DWORD
 FunctionLength : 11 as DWORD
 Ret : 2 as DWORD
 H : 1 as DWORD
 Reg : 3 as DWORD
 R : 1 as DWORD
 L : 1 as DWORD
 C : 1 as DWORD
 StackAdjust : 10 as DWORD
 end type
 end union
end type

type IMAGE_ARM_RUNTIME_FUNCTION_ENTRY as _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY
type PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY as _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY ptr

type _IMAGE_RUNTIME_FUNCTION_ENTRY field = 4
 BeginAddress as DWORD
 EndAddress as DWORD

 union field = 4
 UnwindInfoAddress as DWORD
 UnwindData as DWORD
 end union
end type

type _PIMAGE_RUNTIME_FUNCTION_ENTRY as _IMAGE_RUNTIME_FUNCTION_ENTRY ptr
type IMAGE_IA64_RUNTIME_FUNCTION_ENTRY as _IMAGE_RUNTIME_FUNCTION_ENTRY
type PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY as _PIMAGE_RUNTIME_FUNCTION_ENTRY
type IMAGE_RUNTIME_FUNCTION_ENTRY as _IMAGE_RUNTIME_FUNCTION_ENTRY
type PIMAGE_RUNTIME_FUNCTION_ENTRY as _PIMAGE_RUNTIME_FUNCTION_ENTRY

type _IMAGE_DEBUG_DIRECTORY field = 4
 Characteristics as DWORD
 TimeDateStamp as DWORD
 MajorVersion as WORD
 MinorVersion as WORD
 as DWORD Type
 SizeOfData as DWORD
 AddressOfRawData as DWORD
 PointerToRawData as DWORD
end type

type IMAGE_DEBUG_DIRECTORY as _IMAGE_DEBUG_DIRECTORY
type PIMAGE_DEBUG_DIRECTORY as _IMAGE_DEBUG_DIRECTORY ptr
const IMAGE_DEBUG_TYPE_UNKNOWN = 0
const IMAGE_DEBUG_TYPE_COFF = 1
const IMAGE_DEBUG_TYPE_CODEVIEW = 2
const IMAGE_DEBUG_TYPE_FPO = 3
const IMAGE_DEBUG_TYPE_MISC = 4
const IMAGE_DEBUG_TYPE_EXCEPTION = 5
const IMAGE_DEBUG_TYPE_FIXUP = 6
const IMAGE_DEBUG_TYPE_OMAP_TO_SRC = 7
const IMAGE_DEBUG_TYPE_OMAP_FROM_SRC = 8
const IMAGE_DEBUG_TYPE_BORLAND = 9
const IMAGE_DEBUG_TYPE_RESERVED10 = 10
const IMAGE_DEBUG_TYPE_CLSID = 11

type _IMAGE_COFF_SYMBOLS_HEADER field = 4
 NumberOfSymbols as DWORD
 LvaToFirstSymbol as DWORD
 NumberOfLinenumbers as DWORD
 LvaToFirstLinenumber as DWORD
 RvaToFirstByteOfCode as DWORD
 RvaToLastByteOfCode as DWORD
 RvaToFirstByteOfData as DWORD
 RvaToLastByteOfData as DWORD
end type

type IMAGE_COFF_SYMBOLS_HEADER as _IMAGE_COFF_SYMBOLS_HEADER
type PIMAGE_COFF_SYMBOLS_HEADER as _IMAGE_COFF_SYMBOLS_HEADER ptr
const FRAME_FPO = 0
const FRAME_TRAP = 1
const FRAME_TSS = 2
const FRAME_NONFPO = 3

type _FPO_DATA field = 4
 ulOffStart as DWORD
 cbProcSize as DWORD
 cdwLocals as DWORD
 cdwParams as WORD
 cbProlog : 8 as WORD
 cbRegs : 3 as WORD
 fHasSEH : 1 as WORD
 fUseBP : 1 as WORD
 reserved : 1 as WORD
 cbFrame : 2 as WORD
end type

type FPO_DATA as _FPO_DATA
type PFPO_DATA as _FPO_DATA ptr
const SIZEOF_RFPO_DATA = 16
const IMAGE_DEBUG_MISC_EXENAME = 1

type _IMAGE_DEBUG_MISC field = 4
 DataType as DWORD
 Length as DWORD
 Unicode_ as WINBOOLEAN
 Reserved(0 to 2) as UBYTE
 Data(0 to 0) as UBYTE
end type

type IMAGE_DEBUG_MISC as _IMAGE_DEBUG_MISC
type PIMAGE_DEBUG_MISC as _IMAGE_DEBUG_MISC ptr

type _IMAGE_FUNCTION_ENTRY field = 4
 StartingAddress as DWORD
 EndingAddress as DWORD
 EndOfPrologue as DWORD
end type

type IMAGE_FUNCTION_ENTRY as _IMAGE_FUNCTION_ENTRY
type PIMAGE_FUNCTION_ENTRY as _IMAGE_FUNCTION_ENTRY ptr

type _IMAGE_FUNCTION_ENTRY64 field = 4
 StartingAddress as ULONGLONG
 EndingAddress as ULONGLONG

 union field = 4
 EndOfPrologue as ULONGLONG
 UnwindInfoAddress as ULONGLONG
 end union
end type

type IMAGE_FUNCTION_ENTRY64 as _IMAGE_FUNCTION_ENTRY64
type PIMAGE_FUNCTION_ENTRY64 as _IMAGE_FUNCTION_ENTRY64 ptr

type _IMAGE_SEPARATE_DEBUG_HEADER field = 4
 Signature as WORD
 Flags as WORD
 Machine as WORD
 Characteristics as WORD
 TimeDateStamp as DWORD
 CheckSum as DWORD
 ImageBase as DWORD
 SizeOfImage as DWORD
 NumberOfSections as DWORD
 ExportedNamesSize as DWORD
 DebugDirectorySize as DWORD
 SectionAlignment as DWORD
 Reserved(0 to 1) as DWORD
end type

type IMAGE_SEPARATE_DEBUG_HEADER as _IMAGE_SEPARATE_DEBUG_HEADER
type PIMAGE_SEPARATE_DEBUG_HEADER as _IMAGE_SEPARATE_DEBUG_HEADER ptr

type _NON_PAGED_DEBUG_INFO field = 4
 Signature as WORD
 Flags as WORD
 Size as DWORD
 Machine as WORD
 Characteristics as WORD
 TimeDateStamp as DWORD
 CheckSum as DWORD
 SizeOfImage as DWORD
 ImageBase as ULONGLONG
end type

type NON_PAGED_DEBUG_INFO as _NON_PAGED_DEBUG_INFO
type PNON_PAGED_DEBUG_INFO as _NON_PAGED_DEBUG_INFO ptr
const IMAGE_SEPARATE_DEBUG_SIGNATURE = &h4944
const NON_PAGED_DEBUG_SIGNATURE = &h494E
const IMAGE_SEPARATE_DEBUG_FLAGS_MASK = &h8000
const IMAGE_SEPARATE_DEBUG_MISMATCH = &h8000

type _ImageArchitectureHeader field = 4
 AmaskValue : 1 as ulong
 Adummy1 : 7 as long
 AmaskShift : 8 as ulong
 Adummy2 : 16 as long
 FirstEntryRVA as DWORD
end type

type IMAGE_ARCHITECTURE_HEADER as _ImageArchitectureHeader
type PIMAGE_ARCHITECTURE_HEADER as _ImageArchitectureHeader ptr

type _ImageArchitectureEntry field = 4
 FixupInstRVA as DWORD
 NewInst as DWORD
end type

type IMAGE_ARCHITECTURE_ENTRY as _ImageArchitectureEntry
type PIMAGE_ARCHITECTURE_ENTRY as _ImageArchitectureEntry ptr
const IMPORT_OBJECT_HDR_SIG2 = &hffff

type IMPORT_OBJECT_HEADER
 Sig1 as WORD
 Sig2 as WORD
 Version as WORD
 Machine as WORD
 TimeDateStamp as DWORD
 SizeOfData as DWORD

 union
 Ordinal as WORD
 Hint as WORD
 end union

 as WORD Type : 2
 NameType : 3 as WORD
 Reserved : 11 as WORD
end type

type IMPORT_OBJECT_TYPE as long
enum
 IMPORT_OBJECT_CODE = 0
 IMPORT_OBJECT_DATA = 1
 IMPORT_OBJECT_CONST = 2
end enum

type IMPORT_OBJECT_NAME_TYPE as long
enum
 IMPORT_OBJECT_ORDINAL = 0
 IMPORT_OBJECT_NAME = 1
 IMPORT_OBJECT_NAME_NO_PREFIX = 2
 IMPORT_OBJECT_NAME_UNDECORATE = 3
end enum


type ReplacesCorHdrNumericDefines as long
enum
 COMIMAGE_FLAGS_ILONLY = &h00000001
 COMIMAGE_FLAGS_32BITREQUIRED = &h00000002
 COMIMAGE_FLAGS_IL_LIBRARY = &h00000004
 COMIMAGE_FLAGS_STRONGNAMESIGNED = &h00000008
 COMIMAGE_FLAGS_TRACKDEBUGDATA = &h00010000
 COR_VERSION_MAJOR_V2 = 2
 COR_VERSION_MAJOR = COR_VERSION_MAJOR_V2
 COR_VERSION_MINOR = 0
 COR_DELETED_NAME_LENGTH = 8
 COR_VTABLEGAP_NAME_LENGTH = 8
 NATIVE_TYPE_MAX_CB = 1
 COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = &hFF
 IMAGE_COR_MIH_METHODRVA = &h01
 IMAGE_COR_MIH_EHRVA = &h02
 IMAGE_COR_MIH_BASICBLOCK = &h08
 COR_VTABLE_32BIT = &h01
 COR_VTABLE_64BIT = &h02
 COR_VTABLE_FROM_UNMANAGED = &h04
 COR_VTABLE_CALL_MOST_DERIVED = &h10
 IMAGE_COR_EATJ_THUNK_SIZE = 32
 MAX_CLASS_NAME = 1024
 MAX_PACKAGE_NAME = 1024
end enum

type IMAGE_COR20_HEADER
 cb as DWORD
 MajorRuntimeVersion as WORD
 MinorRuntimeVersion as WORD
 MetaData as IMAGE_DATA_DIRECTORY
 Flags as DWORD

 union
 EntryPointToken as DWORD
 EntryPointRVA as DWORD
 end union

 Resources as IMAGE_DATA_DIRECTORY
 StrongNameSignature as IMAGE_DATA_DIRECTORY
 CodeManagerTable as IMAGE_DATA_DIRECTORY
 VTableFixups as IMAGE_DATA_DIRECTORY
 ExportAddressTableJumps as IMAGE_DATA_DIRECTORY
 ManagedNativeHeader as IMAGE_DATA_DIRECTORY
end type

type PIMAGE_COR20_HEADER as IMAGE_COR20_HEADER ptr
declare function RtlCaptureStackBackTrace(byval FramesToSkip as DWORD, byval FramesToCapture as DWORD, byval BackTrace as PVOID ptr, byval BackTraceHash as PDWORD) as WORD
declare sub RtlCaptureContext(byval ContextRecord as PCONTEXT)
declare function RtlCompareMemory(byval Source1 as const any ptr, byval Source2 as const any ptr, byval Length as SIZE_T_) as SIZE_T_


declare sub RtlUnwind(byval TargetFrame as PVOID, byval TargetIp as PVOID, byval ExceptionRecord as PEXCEPTION_RECORD, byval ReturnValue as PVOID)
declare function RtlPcToFileHeader(byval PcValue as PVOID, byval BaseOfImage as PVOID ptr) as PVOID



 type SLIST_ENTRY as _SINGLE_LIST_ENTRY
 type PSLIST_ENTRY as _SINGLE_LIST_ENTRY ptr

union _SLIST_HEADER
 Alignment as ULONGLONG

 type
 Next as SLIST_ENTRY
 Depth as WORD
 Sequence as WORD
 end type

end union

type SLIST_HEADER as _SLIST_HEADER
type PSLIST_HEADER as _SLIST_HEADER ptr
declare sub RtlInitializeSListHead(byval ListHead as PSLIST_HEADER)
declare function RtlFirstEntrySList(byval ListHead as const SLIST_HEADER ptr) as PSLIST_ENTRY
declare function RtlInterlockedPopEntrySList(byval ListHead as PSLIST_HEADER) as PSLIST_ENTRY
declare function RtlInterlockedPushEntrySList(byval ListHead as PSLIST_HEADER, byval ListEntry as PSLIST_ENTRY) as PSLIST_ENTRY
declare function RtlInterlockedPushListSListEx(byval ListHead as PSLIST_HEADER, byval List as PSLIST_ENTRY, byval ListEnd as PSLIST_ENTRY, byval Count as DWORD) as PSLIST_ENTRY
declare function RtlInterlockedFlushSList(byval ListHead as PSLIST_HEADER) as PSLIST_ENTRY
declare function RtlQueryDepthSList(byval ListHead as PSLIST_HEADER) as WORD
const _RTL_RUN_ONCE_DEF = 1

type _RTL_RUN_ONCE
 Ptr as PVOID
end type

type RTL_RUN_ONCE as _RTL_RUN_ONCE
type PRTL_RUN_ONCE as _RTL_RUN_ONCE ptr
type PRTL_RUN_ONCE_INIT_FN as function(byval as PRTL_RUN_ONCE, byval as PVOID, byval as PVOID ptr) as DWORD

const RTL_RUN_ONCE_CHECK_ONLY = 1
const RTL_RUN_ONCE_ASYNC = 2
const RTL_RUN_ONCE_INIT_FAILED = 4
const RTL_RUN_ONCE_CTX_RESERVED_BITS = 2

type _RTL_BARRIER
 Reserved1 as DWORD
 Reserved2 as DWORD
 Reserved3(0 to 1) as ULONG_PTR
 Reserved4 as DWORD
 Reserved5 as DWORD
end type

type RTL_BARRIER as _RTL_BARRIER
type PRTL_BARRIER as _RTL_BARRIER ptr
const FAST_FAIL_LEGACY_GS_VIOLATION = 0
const FAST_FAIL_VTGUARD_CHECK_FAILURE = 1
const FAST_FAIL_STACK_COOKIE_CHECK_FAILURE = 2
const FAST_FAIL_CORRUPT_LIST_ENTRY = 3
const FAST_FAIL_INCORRECT_STACK = 4
const FAST_FAIL_INVALID_ARG = 5
const FAST_FAIL_GS_COOKIE_INIT = 6
const FAST_FAIL_FATAL_APP_EXIT = 7
const FAST_FAIL_RANGE_CHECK_FAILURE = 8
const FAST_FAIL_UNSAFE_REGISTRY_ACCESS = 9
const FAST_FAIL_INVALID_FAST_FAIL_CODE = &hffffffff
const HEAP_NO_SERIALIZE = &h00000001
const HEAP_GROWABLE = &h00000002
const HEAP_GENERATE_EXCEPTIONS = &h00000004
const HEAP_ZERO_MEMORY = &h00000008
const HEAP_REALLOC_IN_PLACE_ONLY = &h00000010
const HEAP_TAIL_CHECKING_ENABLED = &h00000020
const HEAP_FREE_CHECKING_ENABLED = &h00000040
const HEAP_DISABLE_COALESCE_ON_FREE = &h00000080
const HEAP_CREATE_ALIGN_16 = &h00010000
const HEAP_CREATE_ENABLE_TRACING = &h00020000
const HEAP_CREATE_ENABLE_EXECUTE = &h00040000
const HEAP_MAXIMUM_TAG = &h0FFF
const HEAP_PSEUDO_TAG_FLAG = &h8000
const HEAP_TAG_SHIFT = 18
const IS_TEXT_UNICODE_ASCII16 = &h0001
const IS_TEXT_UNICODE_REVERSE_ASCII16 = &h0010
const IS_TEXT_UNICODE_STATISTICS = &h0002
const IS_TEXT_UNICODE_REVERSE_STATISTICS = &h0020
const IS_TEXT_UNICODE_CONTROLS = &h0004
const IS_TEXT_UNICODE_REVERSE_CONTROLS = &h0040
const IS_TEXT_UNICODE_SIGNATURE = &h0008
const IS_TEXT_UNICODE_REVERSE_SIGNATURE = &h0080
const IS_TEXT_UNICODE_ILLEGAL_CHARS = &h0100
const IS_TEXT_UNICODE_ODD_LENGTH = &h0200
const IS_TEXT_UNICODE_DBCS_LEADBYTE = &h0400
const IS_TEXT_UNICODE_NULL_BYTES = &h1000
const IS_TEXT_UNICODE_UNICODE_MASK = &h000F
const IS_TEXT_UNICODE_REVERSE_MASK = &h00F0
const IS_TEXT_UNICODE_NOT_UNICODE_MASK = &h0F00
const IS_TEXT_UNICODE_NOT_ASCII_MASK = &hF000
const COMPRESSION_FORMAT_NONE = &h00000
const COMPRESSION_FORMAT_DEFAULT = &h0001
const COMPRESSION_FORMAT_LZNT1 = &h0002
const COMPRESSION_FORMAT_XPRESS = &h0003
const COMPRESSION_FORMAT_XPRESS_HUFF = &h0004
const COMPRESSION_ENGINE_STANDARD = &h00000
const COMPRESSION_ENGINE_MAXIMUM = &h0100
const COMPRESSION_ENGINE_HIBER = &h0200
declare function RtlSecureZeroMemory(byval ptr as PVOID, byval cnt as SIZE_T_) as PVOID

type _MESSAGE_RESOURCE_ENTRY
 Length as WORD
 Flags as WORD
 Text(0 to 0) as UBYTE
end type

type MESSAGE_RESOURCE_ENTRY as _MESSAGE_RESOURCE_ENTRY
type PMESSAGE_RESOURCE_ENTRY as _MESSAGE_RESOURCE_ENTRY ptr
const SEF_DACL_AUTO_INHERIT = &h01
const SEF_SACL_AUTO_INHERIT = &h02
const SEF_DEFAULT_DESCRIPTOR_FOR_OBJECT = &h04
const SEF_AVOID_PRIVILEGE_CHECK = &h08
const SEF_AVOID_OWNER_CHECK = &h10
const SEF_DEFAULT_OWNER_FROM_PARENT = &h20
const SEF_DEFAULT_GROUP_FROM_PARENT = &h40
const SEF_MACL_NO_WRITE_UP = &h100
const SEF_MACL_NO_READ_UP = &h200
const SEF_MACL_NO_EXECUTE_UP = &h400
const SEF_AVOID_OWNER_RESTRICTION = &h1000
const SEF_MACL_VALID_FLAGS = (SEF_MACL_NO_WRITE_UP or SEF_MACL_NO_READ_UP) or SEF_MACL_NO_EXECUTE_UP
const MESSAGE_RESOURCE_UNICODE = &h0001

type _MESSAGE_RESOURCE_BLOCK
 LowId as DWORD
 HighId as DWORD
 OffsetToEntries as DWORD
end type

type MESSAGE_RESOURCE_BLOCK as _MESSAGE_RESOURCE_BLOCK
type PMESSAGE_RESOURCE_BLOCK as _MESSAGE_RESOURCE_BLOCK ptr

type _MESSAGE_RESOURCE_DATA
 NumberOfBlocks as DWORD
 Blocks(0 to 0) as MESSAGE_RESOURCE_BLOCK
end type

type MESSAGE_RESOURCE_DATA as _MESSAGE_RESOURCE_DATA
type PMESSAGE_RESOURCE_DATA as _MESSAGE_RESOURCE_DATA ptr

type _OSVERSIONINFOA
 dwOSVersionInfoSize as DWORD
 dwMajorVersion as DWORD
 dwMinorVersion as DWORD
 dwBuildNumber as DWORD
 dwPlatformId as DWORD
 szCSDVersion as zstring * 128
end type

type OSVERSIONINFOA as _OSVERSIONINFOA
type POSVERSIONINFOA as _OSVERSIONINFOA ptr
type LPOSVERSIONINFOA as _OSVERSIONINFOA ptr

type _OSVERSIONINFOW
 dwOSVersionInfoSize as DWORD
 dwMajorVersion as DWORD
 dwMinorVersion as DWORD
 dwBuildNumber as DWORD
 dwPlatformId as DWORD
 szCSDVersion as wstring * 128
end type

type OSVERSIONINFOW as _OSVERSIONINFOW
type POSVERSIONINFOW as _OSVERSIONINFOW ptr
type LPOSVERSIONINFOW as _OSVERSIONINFOW ptr
type RTL_OSVERSIONINFOW as _OSVERSIONINFOW
type PRTL_OSVERSIONINFOW as _OSVERSIONINFOW ptr

 type OSVERSIONINFO as OSVERSIONINFOA
 type POSVERSIONINFO as POSVERSIONINFOA
 type LPOSVERSIONINFO as LPOSVERSIONINFOA

type _OSVERSIONINFOEXA
 dwOSVersionInfoSize as DWORD
 dwMajorVersion as DWORD
 dwMinorVersion as DWORD
 dwBuildNumber as DWORD
 dwPlatformId as DWORD
 szCSDVersion as zstring * 128
 wServicePackMajor as WORD
 wServicePackMinor as WORD
 wSuiteMask as WORD
 wProductType as UBYTE
 wReserved as UBYTE
end type

type OSVERSIONINFOEXA as _OSVERSIONINFOEXA
type POSVERSIONINFOEXA as _OSVERSIONINFOEXA ptr
type LPOSVERSIONINFOEXA as _OSVERSIONINFOEXA ptr

type _OSVERSIONINFOEXW
 dwOSVersionInfoSize as DWORD
 dwMajorVersion as DWORD
 dwMinorVersion as DWORD
 dwBuildNumber as DWORD
 dwPlatformId as DWORD
 szCSDVersion as wstring * 128
 wServicePackMajor as WORD
 wServicePackMinor as WORD
 wSuiteMask as WORD
 wProductType as UBYTE
 wReserved as UBYTE
end type

type OSVERSIONINFOEXW as _OSVERSIONINFOEXW
type POSVERSIONINFOEXW as _OSVERSIONINFOEXW ptr
type LPOSVERSIONINFOEXW as _OSVERSIONINFOEXW ptr
type RTL_OSVERSIONINFOEXW as _OSVERSIONINFOEXW
type PRTL_OSVERSIONINFOEXW as _OSVERSIONINFOEXW ptr

 type OSVERSIONINFOEX as OSVERSIONINFOEXA
 type POSVERSIONINFOEX as POSVERSIONINFOEXA
 type LPOSVERSIONINFOEX as LPOSVERSIONINFOEXA

const VER_EQUAL = 1
const VER_GREATER = 2
const VER_GREATER_EQUAL = 3
const VER_LESS = 4
const VER_LESS_EQUAL = 5
const VER_AND = 6
const VER_OR = 7
const VER_CONDITION_MASK = 7
const VER_NUM_BITS_PER_CONDITION_MASK = 3
const VER_MINORVERSION = &h0000001
const VER_MAJORVERSION = &h0000002
const VER_BUILDNUMBER = &h0000004
const VER_PLATFORMID = &h0000008
const VER_SERVICEPACKMINOR = &h0000010
const VER_SERVICEPACKMAJOR = &h0000020
const VER_SUITENAME = &h0000040
const VER_PRODUCT_TYPE = &h0000080
const VER_NT_WORKSTATION = &h0000001
const VER_NT_DOMAIN_CONTROLLER = &h0000002
const VER_NT_SERVER = &h0000003
const VER_PLATFORM_WIN32s = 0
const VER_PLATFORM_WIN32_WINDOWS = 1
const VER_PLATFORM_WIN32_NT = 2
declare function VerSetConditionMask(byval ConditionMask as ULONGLONG, byval TypeMask as DWORD, byval Condition as UBYTE) as ULONGLONG


const RTL_UMS_VERSION = &h0100

type _RTL_UMS_THREAD_INFO_CLASS as long
enum
 UmsThreadInvalidInfoClass = 0
 UmsThreadUserContext
 UmsThreadPriority
 UmsThreadAffinity
 UmsThreadTeb
 UmsThreadIsSuspended
 UmsThreadIsTerminated
 UmsThreadMaxInfoClass
end enum

type RTL_UMS_THREAD_INFO_CLASS as _RTL_UMS_THREAD_INFO_CLASS
type PRTL_UMS_THREAD_INFO_CLASS as _RTL_UMS_THREAD_INFO_CLASS ptr

type _RTL_UMS_SCHEDULER_REASON as long
enum
 UmsSchedulerStartup = 0
 UmsSchedulerThreadBlocked
 UmsSchedulerThreadYield
end enum

type RTL_UMS_SCHEDULER_REASON as _RTL_UMS_SCHEDULER_REASON
type PRTL_UMS_SCHEDULER_REASON as _RTL_UMS_SCHEDULER_REASON ptr
type PRTL_UMS_SCHEDULER_ENTRY_POINT as sub(byval Reason as RTL_UMS_SCHEDULER_REASON, byval ActivationPayload as ULONG_PTR, byval SchedulerParam as PVOID)


type _RTL_CRITICAL_SECTION as _RTL_CRITICAL_SECTION_

type _RTL_CRITICAL_SECTION_DEBUG
 as WORD Type
 CreatorBackTraceIndex as WORD
 CriticalSection as _RTL_CRITICAL_SECTION ptr
 ProcessLocksList as LIST_ENTRY
 EntryCount as DWORD
 ContentionCount as DWORD
 Flags as DWORD
 CreatorBackTraceIndexHigh as WORD
 SpareWORD as WORD
end type

type RTL_CRITICAL_SECTION_DEBUG as _RTL_CRITICAL_SECTION_DEBUG
type PRTL_CRITICAL_SECTION_DEBUG as _RTL_CRITICAL_SECTION_DEBUG ptr
type RTL_RESOURCE_DEBUG as _RTL_CRITICAL_SECTION_DEBUG
type PRTL_RESOURCE_DEBUG as _RTL_CRITICAL_SECTION_DEBUG ptr

const RTL_CRITSECT_TYPE = 0
const RTL_RESOURCE_TYPE = 1
const RTL_CRITICAL_SECTION_FLAG_NO_DEBUG_INFO = &h01000000
const RTL_CRITICAL_SECTION_FLAG_DYNAMIC_SPIN = &h02000000
const RTL_CRITICAL_SECTION_FLAG_STATIC_INIT = &h04000000
const RTL_CRITICAL_SECTION_FLAG_RESOURCE_TYPE = &h08000000
const RTL_CRITICAL_SECTION_FLAG_FORCE_DEBUG_INFO = &h10000000
const RTL_CRITICAL_SECTION_ALL_FLAG_BITS = &hff000000
const RTL_CRITICAL_SECTION_FLAG_RESERVED = RTL_CRITICAL_SECTION_ALL_FLAG_BITS and (not ((((RTL_CRITICAL_SECTION_FLAG_NO_DEBUG_INFO or RTL_CRITICAL_SECTION_FLAG_DYNAMIC_SPIN) or RTL_CRITICAL_SECTION_FLAG_STATIC_INIT) or RTL_CRITICAL_SECTION_FLAG_RESOURCE_TYPE) or RTL_CRITICAL_SECTION_FLAG_FORCE_DEBUG_INFO))
const RTL_CRITICAL_SECTION_DEBUG_FLAG_STATIC_INIT = &h00000001

type _RTL_CRITICAL_SECTION_
 DebugInfo as PRTL_CRITICAL_SECTION_DEBUG
 LockCount as LONG
 RecursionCount as LONG
 OwningThread as HANDLE
 LockSemaphore as HANDLE
 SpinCount as ULONG_PTR
end type

type RTL_CRITICAL_SECTION as _RTL_CRITICAL_SECTION
type PRTL_CRITICAL_SECTION as _RTL_CRITICAL_SECTION ptr

type _RTL_SRWLOCK
 Ptr as PVOID
end type

type RTL_SRWLOCK as _RTL_SRWLOCK
type PRTL_SRWLOCK as _RTL_SRWLOCK ptr

type _RTL_CONDITION_VARIABLE
 Ptr as PVOID
end type

type RTL_CONDITION_VARIABLE as _RTL_CONDITION_VARIABLE
type PRTL_CONDITION_VARIABLE as _RTL_CONDITION_VARIABLE ptr
const RTL_CONDITION_VARIABLE_LOCKMODE_SHARED = &h1
type PAPCFUNC as sub(byval Parameter as ULONG_PTR)
type PVECTORED_EXCEPTION_HANDLER as function(byval ExceptionInfo as _EXCEPTION_POINTERS ptr) as LONG

type _HEAP_INFORMATION_CLASS as long
enum
 HeapCompatibilityInformation
 HeapEnableTerminationOnCorruption
end enum

type HEAP_INFORMATION_CLASS as _HEAP_INFORMATION_CLASS
type WORKERCALLBACKFUNC as sub(byval as PVOID)
type APC_CALLBACK_FUNCTION as sub(byval as DWORD, byval as PVOID, byval as PVOID)
type WAITORTIMERCALLBACKFUNC as sub(byval as PVOID, byval as WINBOOLEAN)
type WAITORTIMERCALLBACK as WAITORTIMERCALLBACKFUNC
type PFLS_CALLBACK_FUNCTION as sub(byval lpFlsData as PVOID)
type PSECURE_MEMORY_CACHE_CALLBACK as function(byval Addr as PVOID, byval Range as SIZE_T_) as WINBOOLEAN

const WT_EXECUTEDEFAULT = &h000000000
const WT_EXECUTEINIOTHREAD = &h00000001
const WT_EXECUTEINUITHREAD = &h00000002
const WT_EXECUTEINWAITTHREAD = &h00000004
const WT_EXECUTEONLYONCE = &h00000008
const WT_EXECUTEINTIMERTHREAD = &h00000020
const WT_EXECUTELONGFUNCTION = &h00000010
const WT_EXECUTEINPERSISTENTIOTHREAD = &h00000040
const WT_EXECUTEINPERSISTENTTHREAD = &h00000080
const WT_TRANSFER_IMPERSONATION = &h00000100
const WT_EXECUTEDELETEWAIT = &h00000008
const WT_EXECUTEINLONGTHREAD = &h00000010

type _ACTIVATION_CONTEXT_INFO_CLASS as long
enum
 ActivationContextBasicInformation = 1
 ActivationContextDetailedInformation = 2
 AssemblyDetailedInformationInActivationContext = 3
 FileInformationInAssemblyOfAssemblyInActivationContext = 4
 RunlevelInformationInActivationContext = 5
 CompatibilityInformationInActivationContext = 6
 ActivationContextManifestResourceName = 7
 MaxActivationContextInfoClass
 AssemblyDetailedInformationInActivationContxt = 3
 FileInformationInAssemblyOfAssemblyInActivationContxt = 4
end enum

type ACTIVATION_CONTEXT_INFO_CLASS as _ACTIVATION_CONTEXT_INFO_CLASS

type ACTCTX_REQUESTED_RUN_LEVEL as long
enum
 ACTCTX_RUN_LEVEL_UNSPECIFIED = 0
 ACTCTX_RUN_LEVEL_AS_INVOKER
 ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE
 ACTCTX_RUN_LEVEL_REQUIRE_ADMIN
 ACTCTX_RUN_LEVEL_NUMBERS
end enum

type ACTCTX_COMPATIBILITY_ELEMENT_TYPE as long
enum
 ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = 0
 ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS
 ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION
end enum

type _ACTIVATION_CONTEXT_QUERY_INDEX
 ulAssemblyIndex as DWORD
 ulFileIndexInAssembly as DWORD
end type

type ACTIVATION_CONTEXT_QUERY_INDEX as _ACTIVATION_CONTEXT_QUERY_INDEX
type PACTIVATION_CONTEXT_QUERY_INDEX as _ACTIVATION_CONTEXT_QUERY_INDEX ptr

type _ASSEMBLY_FILE_DETAILED_INFORMATION
 ulFlags as DWORD
 ulFilenameLength as DWORD
 ulPathLength as DWORD
 lpFileName as PCWSTR
 lpFilePath as PCWSTR
end type

type ASSEMBLY_FILE_DETAILED_INFORMATION as _ASSEMBLY_FILE_DETAILED_INFORMATION
type PASSEMBLY_FILE_DETAILED_INFORMATION as _ASSEMBLY_FILE_DETAILED_INFORMATION ptr

type _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION
 ulFlags as DWORD
 ulEncodedAssemblyIdentityLength as DWORD
 ulManifestPathType as DWORD
 ulManifestPathLength as DWORD
 liManifestLastWriteTime as LARGE_INTEGER
 ulPolicyPathType as DWORD
 ulPolicyPathLength as DWORD
 liPolicyLastWriteTime as LARGE_INTEGER
 ulMetadataSatelliteRosterIndex as DWORD
 ulManifestVersionMajor as DWORD
 ulManifestVersionMinor as DWORD
 ulPolicyVersionMajor as DWORD
 ulPolicyVersionMinor as DWORD
 ulAssemblyDirectoryNameLength as DWORD
 lpAssemblyEncodedAssemblyIdentity as PCWSTR
 lpAssemblyManifestPath as PCWSTR
 lpAssemblyPolicyPath as PCWSTR
 lpAssemblyDirectoryName as PCWSTR
 ulFileCount as DWORD
end type

type ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION as _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION
type PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION as _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION ptr

type _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION
 ulFlags as DWORD
 RunLevel as ACTCTX_REQUESTED_RUN_LEVEL
 UiAccess as DWORD
end type

type ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION as _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION
type PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION as _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION ptr

type _COMPATIBILITY_CONTEXT_ELEMENT
 Id as GUID
 as ACTCTX_COMPATIBILITY_ELEMENT_TYPE Type
end type

type COMPATIBILITY_CONTEXT_ELEMENT as _COMPATIBILITY_CONTEXT_ELEMENT
type PCOMPATIBILITY_CONTEXT_ELEMENT as _COMPATIBILITY_CONTEXT_ELEMENT ptr

type _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION
 ElementCount as DWORD
 Elements(0 to 0) as COMPATIBILITY_CONTEXT_ELEMENT
end type

type ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION as _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION
type PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION as _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION ptr
const MAX_SUPPORTED_OS_NUM = 4

type _SUPPORTED_OS_INFO
 OsCount as WORD
 MitigationExist as WORD
 OsList(0 to 3) as WORD
end type

type SUPPORTED_OS_INFO as _SUPPORTED_OS_INFO
type PSUPPORTED_OS_INFO as _SUPPORTED_OS_INFO ptr

type _ACTIVATION_CONTEXT_DETAILED_INFORMATION
 dwFlags as DWORD
 ulFormatVersion as DWORD
 ulAssemblyCount as DWORD
 ulRootManifestPathType as DWORD
 ulRootManifestPathChars as DWORD
 ulRootConfigurationPathType as DWORD
 ulRootConfigurationPathChars as DWORD
 ulAppDirPathType as DWORD
 ulAppDirPathChars as DWORD
 lpRootManifestPath as PCWSTR
 lpRootConfigurationPath as PCWSTR
 lpAppDirPath as PCWSTR
end type

type ACTIVATION_CONTEXT_DETAILED_INFORMATION as _ACTIVATION_CONTEXT_DETAILED_INFORMATION
type PACTIVATION_CONTEXT_DETAILED_INFORMATION as _ACTIVATION_CONTEXT_DETAILED_INFORMATION ptr
type PCACTIVATION_CONTEXT_QUERY_INDEX as const _ACTIVATION_CONTEXT_QUERY_INDEX ptr
type PCASSEMBLY_FILE_DETAILED_INFORMATION as const ASSEMBLY_FILE_DETAILED_INFORMATION ptr
type PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION as const _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION ptr
type PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION as const _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION ptr
type PCCOMPATIBILITY_CONTEXT_ELEMENT as const _COMPATIBILITY_CONTEXT_ELEMENT ptr
type PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION as const _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION ptr
type PCACTIVATION_CONTEXT_DETAILED_INFORMATION as const _ACTIVATION_CONTEXT_DETAILED_INFORMATION ptr
type ACTIVATIONCONTEXTINFOCLASS as ACTIVATION_CONTEXT_INFO_CLASS

const ACTIVATION_CONTEXT_PATH_TYPE_NONE = 1
const ACTIVATION_CONTEXT_PATH_TYPE_WIN32_FILE = 2
const ACTIVATION_CONTEXT_PATH_TYPE_URL = 3
const ACTIVATION_CONTEXT_PATH_TYPE_ASSEMBLYREF = 4

type _ASSEMBLY_DLL_REDIRECTION_DETAILED_INFORMATION as _ASSEMBLY_FILE_DETAILED_INFORMATION
type ASSEMBLY_DLL_REDIRECTION_DETAILED_INFORMATION as ASSEMBLY_FILE_DETAILED_INFORMATION
type PASSEMBLY_DLL_REDIRECTION_DETAILED_INFORMATION as PASSEMBLY_FILE_DETAILED_INFORMATION
type PCASSEMBLY_DLL_REDIRECTION_DETAILED_INFORMATION as PCASSEMBLY_FILE_DETAILED_INFORMATION
const INVALID_OS_COUNT = &hffff
const CREATE_BOUNDARY_DESCRIPTOR_ADD_APPCONTAINER_SID = &h1
type RTL_VERIFIER_DLL_LOAD_CALLBACK as sub(byval DllName as PWSTR, byval DllBase as PVOID, byval DllSize as SIZE_T_, byval Reserved as PVOID)
type RTL_VERIFIER_DLL_UNLOAD_CALLBACK as sub(byval DllName as PWSTR, byval DllBase as PVOID, byval DllSize as SIZE_T_, byval Reserved as PVOID)
type RTL_VERIFIER_NTDLLHEAPFREE_CALLBACK as sub(byval AllocationBase as PVOID, byval AllocationSize as SIZE_T_)

type _RTL_VERIFIER_THUNK_DESCRIPTOR
 ThunkName as PCHAR
 ThunkOldAddress as PVOID
 ThunkNewAddress as PVOID
end type

type RTL_VERIFIER_THUNK_DESCRIPTOR as _RTL_VERIFIER_THUNK_DESCRIPTOR
type PRTL_VERIFIER_THUNK_DESCRIPTOR as _RTL_VERIFIER_THUNK_DESCRIPTOR ptr

type _RTL_VERIFIER_DLL_DESCRIPTOR
 DllName as PWCHAR
 DllFlags as DWORD
 DllAddress as PVOID
 DllThunks as PRTL_VERIFIER_THUNK_DESCRIPTOR
end type

type RTL_VERIFIER_DLL_DESCRIPTOR as _RTL_VERIFIER_DLL_DESCRIPTOR
type PRTL_VERIFIER_DLL_DESCRIPTOR as _RTL_VERIFIER_DLL_DESCRIPTOR ptr

type _RTL_VERIFIER_PROVIDER_DESCRIPTOR
 Length as DWORD
 ProviderDlls as PRTL_VERIFIER_DLL_DESCRIPTOR
 ProviderDllLoadCallback as RTL_VERIFIER_DLL_LOAD_CALLBACK
 ProviderDllUnloadCallback as RTL_VERIFIER_DLL_UNLOAD_CALLBACK
 VerifierImage as PWSTR
 VerifierFlags as DWORD
 VerifierDebug as DWORD
 RtlpGetStackTraceAddress as PVOID
 RtlpDebugPageHeapCreate as PVOID
 RtlpDebugPageHeapDestroy as PVOID
 ProviderNtdllHeapFreeCallback as RTL_VERIFIER_NTDLLHEAPFREE_CALLBACK
end type

type RTL_VERIFIER_PROVIDER_DESCRIPTOR as _RTL_VERIFIER_PROVIDER_DESCRIPTOR
type PRTL_VERIFIER_PROVIDER_DESCRIPTOR as _RTL_VERIFIER_PROVIDER_DESCRIPTOR ptr
const RTL_VRF_FLG_FULL_PAGE_HEAP = &h00000001
const RTL_VRF_FLG_RESERVED_DONOTUSE = &h00000002
const RTL_VRF_FLG_HANDLE_CHECKS = &h00000004
const RTL_VRF_FLG_STACK_CHECKS = &h00000008
const RTL_VRF_FLG_APPCOMPAT_CHECKS = &h00000010
const RTL_VRF_FLG_TLS_CHECKS = &h00000020
const RTL_VRF_FLG_DIRTY_STACKS = &h00000040
const RTL_VRF_FLG_RPC_CHECKS = &h00000080
const RTL_VRF_FLG_COM_CHECKS = &h00000100
const RTL_VRF_FLG_DANGEROUS_APIS = &h00000200
const RTL_VRF_FLG_RACE_CHECKS = &h00000400
const RTL_VRF_FLG_DEADLOCK_CHECKS = &h00000800
const RTL_VRF_FLG_FIRST_CHANCE_EXCEPTION_CHECKS = &h00001000
const RTL_VRF_FLG_VIRTUAL_MEM_CHECKS = &h00002000
const RTL_VRF_FLG_ENABLE_LOGGING = &h00004000
const RTL_VRF_FLG_FAST_FILL_HEAP = &h00008000
const RTL_VRF_FLG_VIRTUAL_SPACE_TRACKING = &h00010000
const RTL_VRF_FLG_ENABLED_SYSTEM_WIDE = &h00020000
const RTL_VRF_FLG_MISCELLANEOUS_CHECKS = &h00020000
const RTL_VRF_FLG_LOCK_CHECKS = &h00040000
const APPLICATION_VERIFIER_INTERNAL_ERROR = &h80000000
const APPLICATION_VERIFIER_INTERNAL_WARNING = &h40000000
const APPLICATION_VERIFIER_NO_BREAK = &h20000000
const APPLICATION_VERIFIER_CONTINUABLE_BREAK = &h10000000
const APPLICATION_VERIFIER_UNKNOWN_ERROR = &h0001
const APPLICATION_VERIFIER_ACCESS_VIOLATION = &h0002
const APPLICATION_VERIFIER_UNSYNCHRONIZED_ACCESS = &h0003
const APPLICATION_VERIFIER_EXTREME_SIZE_REQUEST = &h0004
const APPLICATION_VERIFIER_BAD_HEAP_HANDLE = &h0005
const APPLICATION_VERIFIER_SWITCHED_HEAP_HANDLE = &h0006
const APPLICATION_VERIFIER_DOUBLE_FREE = &h0007
const APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK = &h0008
const APPLICATION_VERIFIER_DESTROY_PROCESS_HEAP = &h0009
const APPLICATION_VERIFIER_UNEXPECTED_EXCEPTION = &h000A
const APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK_EXCEPTION_RAISED_FOR_HEADER = &h000B
const APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK_EXCEPTION_RAISED_FOR_PROBING = &h000C
const APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK_HEADER = &h000D
const APPLICATION_VERIFIER_CORRUPTED_FREED_HEAP_BLOCK = &h000E
const APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK_SUFFIX = &h000F
const APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK_START_STAMP = &h0010
const APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK_END_STAMP = &h0011
const APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK_PREFIX = &h0012
const APPLICATION_VERIFIER_FIRST_CHANCE_ACCESS_VIOLATION = &h0013
const APPLICATION_VERIFIER_CORRUPTED_HEAP_LIST = &h0014
const APPLICATION_VERIFIER_TERMINATE_THREAD_CALL = &h0100
const APPLICATION_VERIFIER_STACK_OVERFLOW = &h0101
const APPLICATION_VERIFIER_INVALID_EXIT_PROCESS_CALL = &h0102
const APPLICATION_VERIFIER_EXIT_THREAD_OWNS_LOCK = &h0200
const APPLICATION_VERIFIER_LOCK_IN_UNLOADED_DLL = &h0201
const APPLICATION_VERIFIER_LOCK_IN_FREED_HEAP = &h0202
const APPLICATION_VERIFIER_LOCK_DOUBLE_INITIALIZE = &h0203
const APPLICATION_VERIFIER_LOCK_IN_FREED_MEMORY = &h0204
const APPLICATION_VERIFIER_LOCK_CORRUPTED = &h0205
const APPLICATION_VERIFIER_LOCK_INVALID_OWNER = &h0206
const APPLICATION_VERIFIER_LOCK_INVALID_RECURSION_COUNT = &h0207
const APPLICATION_VERIFIER_LOCK_INVALID_LOCK_COUNT = &h0208
const APPLICATION_VERIFIER_LOCK_OVER_RELEASED = &h0209
const APPLICATION_VERIFIER_LOCK_NOT_INITIALIZED = &h0210
const APPLICATION_VERIFIER_LOCK_ALREADY_INITIALIZED = &h0211
const APPLICATION_VERIFIER_LOCK_IN_FREED_VMEM = &h0212
const APPLICATION_VERIFIER_LOCK_IN_UNMAPPED_MEM = &h0213
const APPLICATION_VERIFIER_THREAD_NOT_LOCK_OWNER = &h0214
const APPLICATION_VERIFIER_INVALID_HANDLE = &h0300
const APPLICATION_VERIFIER_INVALID_TLS_VALUE = &h0301
const APPLICATION_VERIFIER_INCORRECT_WAIT_CALL = &h0302
const APPLICATION_VERIFIER_NULL_HANDLE = &h0303
const APPLICATION_VERIFIER_WAIT_IN_DLLMAIN = &h0304
const APPLICATION_VERIFIER_COM_ERROR = &h0400
const APPLICATION_VERIFIER_COM_API_IN_DLLMAIN = &h0401
const APPLICATION_VERIFIER_COM_UNHANDLED_EXCEPTION = &h0402
const APPLICATION_VERIFIER_COM_UNBALANCED_COINIT = &h0403
const APPLICATION_VERIFIER_COM_UNBALANCED_OLEINIT = &h0404
const APPLICATION_VERIFIER_COM_UNBALANCED_SWC = &h0405
const APPLICATION_VERIFIER_COM_NULL_DACL = &h0406
const APPLICATION_VERIFIER_COM_UNSAFE_IMPERSONATION = &h0407
const APPLICATION_VERIFIER_COM_SMUGGLED_WRAPPER = &h0408
const APPLICATION_VERIFIER_COM_SMUGGLED_PROXY = &h0409
const APPLICATION_VERIFIER_COM_CF_SUCCESS_WITH_NULL = &h040A
const APPLICATION_VERIFIER_COM_GCO_SUCCESS_WITH_NULL = &h040B
const APPLICATION_VERIFIER_COM_OBJECT_IN_FREED_MEMORY = &h040C
const APPLICATION_VERIFIER_COM_OBJECT_IN_UNLOADED_DLL = &h040D
const APPLICATION_VERIFIER_COM_VTBL_IN_FREED_MEMORY = &h040E
const APPLICATION_VERIFIER_COM_VTBL_IN_UNLOADED_DLL = &h040F
const APPLICATION_VERIFIER_COM_HOLDING_LOCKS_ON_CALL = &h0410
const APPLICATION_VERIFIER_RPC_ERROR = &h0500
const APPLICATION_VERIFIER_INVALID_FREEMEM = &h0600
const APPLICATION_VERIFIER_INVALID_ALLOCMEM = &h0601
const APPLICATION_VERIFIER_INVALID_MAPVIEW = &h0602
const APPLICATION_VERIFIER_PROBE_INVALID_ADDRESS = &h0603
const APPLICATION_VERIFIER_PROBE_FREE_MEM = &h0604
const APPLICATION_VERIFIER_PROBE_GUARD_PAGE = &h0605
const APPLICATION_VERIFIER_PROBE_NULL = &h0606
const APPLICATION_VERIFIER_PROBE_INVALID_START_OR_SIZE = &h0607
const APPLICATION_VERIFIER_SIZE_HEAP_UNEXPECTED_EXCEPTION = &h0618

declare sub RtlApplicationVerifierStop(byval Code as ULONG_PTR, byval Message as PSTR, byval Param1 as ULONG_PTR, byval Description1 as PSTR, byval Param2 as ULONG_PTR, byval Description2 as PSTR, byval Param3 as ULONG_PTR, byval Description3 as PSTR, byval Param4 as ULONG_PTR, byval Description4 as PSTR)
declare function RtlSetHeapInformation(byval HeapHandle as PVOID, byval HeapInformationClass as HEAP_INFORMATION_CLASS, byval HeapInformation as PVOID, byval HeapInformationLength as SIZE_T_) as DWORD
declare function RtlQueryHeapInformation(byval HeapHandle as PVOID, byval HeapInformationClass as HEAP_INFORMATION_CLASS, byval HeapInformation as PVOID, byval HeapInformationLength as SIZE_T_, byval ReturnLength as PSIZE_T) as DWORD
declare function RtlMultipleAllocateHeap(byval HeapHandle as PVOID, byval Flags as DWORD, byval Size as SIZE_T_, byval Count as DWORD, byval Array as PVOID ptr) as DWORD
declare function RtlMultipleFreeHeap(byval HeapHandle as PVOID, byval Flags as DWORD, byval Count as DWORD, byval Array as PVOID ptr) as DWORD

type _HARDWARE_COUNTER_DATA
 as HARDWARE_COUNTER_TYPE Type
 Reserved as DWORD
 Value as DWORD64
end type

type HARDWARE_COUNTER_DATA as _HARDWARE_COUNTER_DATA
type PHARDWARE_COUNTER_DATA as _HARDWARE_COUNTER_DATA ptr

type _PERFORMANCE_DATA
 Size as WORD
 Version as UBYTE
 HwCountersCount as UBYTE
 ContextSwitchCount as DWORD
 WaitReasonBitMap as DWORD64
 CycleTime as DWORD64
 RetryCount as DWORD
 Reserved as DWORD
 HwCounters(0 to 15) as HARDWARE_COUNTER_DATA
end type

type PERFORMANCE_DATA as _PERFORMANCE_DATA
type PPERFORMANCE_DATA as _PERFORMANCE_DATA ptr
const PERFORMANCE_DATA_VERSION = 1
const READ_THREAD_PROFILING_FLAG_DISPATCHING = &h00000001
const READ_THREAD_PROFILING_FLAG_HARDWARE_COUNTERS = &h00000002
const DLL_PROCESS_ATTACH = 1
const DLL_THREAD_ATTACH = 2
const DLL_THREAD_DETACH = 3
const DLL_PROCESS_DETACH = 0
const DLL_PROCESS_VERIFIER = 4
const EVENTLOG_SEQUENTIAL_READ = &h0001
const EVENTLOG_SEEK_READ = &h0002
const EVENTLOG_FORWARDS_READ = &h0004
const EVENTLOG_BACKWARDS_READ = &h0008
const EVENTLOG_SUCCESS = &h00000
const EVENTLOG_ERROR_TYPE = &h0001
const EVENTLOG_WARNING_TYPE = &h0002
const EVENTLOG_INFORMATION_TYPE = &h0004
const EVENTLOG_AUDIT_SUCCESS = &h0008
const EVENTLOG_AUDIT_FAILURE = &h0010
const EVENTLOG_START_PAIRED_EVENT = &h0001
const EVENTLOG_END_PAIRED_EVENT = &h0002
const EVENTLOG_END_ALL_PAIRED_EVENTS = &h0004
const EVENTLOG_PAIRED_EVENT_ACTIVE = &h0008
const EVENTLOG_PAIRED_EVENT_INACTIVE = &h0010

type _EVENTLOGRECORD
 Length as DWORD
 Reserved as DWORD
 RecordNumber as DWORD
 TimeGenerated as DWORD
 TimeWritten as DWORD
 EventID as DWORD
 EventType as WORD
 NumStrings as WORD
 EventCategory as WORD
 ReservedFlags as WORD
 ClosingRecordNumber as DWORD
 StringOffset as DWORD
 UserSidLength as DWORD
 UserSidOffset as DWORD
 DataLength as DWORD
 DataOffset as DWORD
end type

type EVENTLOGRECORD as _EVENTLOGRECORD
type PEVENTLOGRECORD as _EVENTLOGRECORD ptr
const MAXLOGICALLOGNAMESIZE = 256

type _EVENTSFORLOGFILE
 ulSize as DWORD
 szLogicalLogFile as wstring * 256
 ulNumRecords as DWORD
 pEventLogRecords(0 to 0) as EVENTLOGRECORD
end type

type EVENTSFORLOGFILE as _EVENTSFORLOGFILE
type PEVENTSFORLOGFILE as _EVENTSFORLOGFILE ptr

type _PACKEDEVENTINFO
 ulSize as DWORD
 ulNumEventsForLogFile as DWORD
 ulOffsets(0 to 0) as DWORD
end type

type PACKEDEVENTINFO as _PACKEDEVENTINFO
type PPACKEDEVENTINFO as _PACKEDEVENTINFO ptr
const KEY_QUERY_VALUE = &h0001
const KEY_SET_VALUE = &h0002
const KEY_CREATE_SUB_KEY = &h0004
const KEY_ENUMERATE_SUB_KEYS = &h0008
const KEY_NOTIFY = &h0010
const KEY_CREATE_LINK = &h0020
const KEY_WOW64_64KEY = &h0100
const KEY_WOW64_32KEY = &h0200
const KEY_WOW64_RES = &h0300
const KEY_READ = (((STANDARD_RIGHTS_READ or KEY_QUERY_VALUE) or KEY_ENUMERATE_SUB_KEYS) or KEY_NOTIFY) and (not SYNCHRONIZE)
const KEY_WRITE = ((STANDARD_RIGHTS_WRITE or KEY_SET_VALUE) or KEY_CREATE_SUB_KEY) and (not SYNCHRONIZE)
const KEY_EXECUTE = KEY_READ and (not SYNCHRONIZE)
const KEY_ALL_ACCESS = ((((((STANDARD_RIGHTS_ALL or KEY_QUERY_VALUE) or KEY_SET_VALUE) or KEY_CREATE_SUB_KEY) or KEY_ENUMERATE_SUB_KEYS) or KEY_NOTIFY) or KEY_CREATE_LINK) and (not SYNCHRONIZE)
const REG_OPTION_RESERVED = &h000000000
const REG_OPTION_NON_VOLATILE = &h000000000
const REG_OPTION_VOLATILE = &h00000001
const REG_OPTION_CREATE_LINK = &h00000002
const REG_OPTION_BACKUP_RESTORE = &h00000004
const REG_OPTION_OPEN_LINK = &h00000008
const REG_LEGAL_OPTION = ((((REG_OPTION_RESERVED or REG_OPTION_NON_VOLATILE) or REG_OPTION_VOLATILE) or REG_OPTION_CREATE_LINK) or REG_OPTION_BACKUP_RESTORE) or REG_OPTION_OPEN_LINK
const REG_CREATED_NEW_KEY = &h00000001
const REG_OPENED_EXISTING_KEY = &h00000002
const REG_STANDARD_FORMAT = 1
const REG_LATEST_FORMAT = 2
const REG_NO_COMPRESSION = 4
const REG_WHOLE_HIVE_VOLATILE = &h00000001
const REG_REFRESH_HIVE = &h00000002
const REG_NO_LAZY_FLUSH = &h00000004
const REG_FORCE_RESTORE = &h00000008
const REG_APP_HIVE = &h00000010
const REG_PROCESS_PRIVATE = &h00000020
const REG_START_JOURNAL = &h00000040
const REG_HIVE_EXACT_FILE_GROWTH = &h00000080
const REG_HIVE_NO_RM = &h00000100
const REG_HIVE_SINGLE_LOG = &h00000200
const REG_BOOT_HIVE = &h00000400
const REG_FORCE_UNLOAD = 1
const REG_NOTIFY_CHANGE_NAME = &h00000001
const REG_NOTIFY_CHANGE_ATTRIBUTES = &h00000002
const REG_NOTIFY_CHANGE_LAST_SET = &h00000004
const REG_NOTIFY_CHANGE_SECURITY = &h00000008
const REG_NOTIFY_THREAD_AGNOSTIC = &h10000000
const REG_LEGAL_CHANGE_FILTER = (((REG_NOTIFY_CHANGE_NAME or REG_NOTIFY_CHANGE_ATTRIBUTES) or REG_NOTIFY_CHANGE_LAST_SET) or REG_NOTIFY_CHANGE_SECURITY) or REG_NOTIFY_THREAD_AGNOSTIC
const REG_NONE = 0
const REG_SZ = 1
const REG_EXPAND_SZ = 2
const REG_BINARY = 3
const REG_DWORD = 4
const REG_DWORD_LITTLE_ENDIAN = 4
const REG_DWORD_BIG_ENDIAN = 5
const REG_LINK = 6
const REG_MULTI_SZ = 7
const REG_RESOURCE_LIST = 8
const REG_FULL_RESOURCE_DESCRIPTOR = 9
const REG_RESOURCE_REQUIREMENTS_LIST = 10
const REG_QWORD = 11
const REG_QWORD_LITTLE_ENDIAN = 11
const SERVICE_KERNEL_DRIVER = &h00000001
const SERVICE_FILE_SYSTEM_DRIVER = &h00000002
const SERVICE_ADAPTER = &h00000004
const SERVICE_RECOGNIZER_DRIVER = &h00000008
const SERVICE_DRIVER = (SERVICE_KERNEL_DRIVER or SERVICE_FILE_SYSTEM_DRIVER) or SERVICE_RECOGNIZER_DRIVER
const SERVICE_WIN32_OWN_PROCESS = &h00000010
const SERVICE_WIN32_SHARE_PROCESS = &h00000020
const SERVICE_WIN32 = SERVICE_WIN32_OWN_PROCESS or SERVICE_WIN32_SHARE_PROCESS
const SERVICE_INTERACTIVE_PROCESS = &h00000100
const SERVICE_TYPE_ALL = ((SERVICE_WIN32 or SERVICE_ADAPTER) or SERVICE_DRIVER) or SERVICE_INTERACTIVE_PROCESS
const SERVICE_BOOT_START = &h000000000
const SERVICE_SYSTEM_START = &h00000001
const SERVICE_AUTO_START = &h00000002
const SERVICE_DEMAND_START = &h00000003
const SERVICE_DISABLED = &h00000004
const SERVICE_ERROR_IGNORE = &h000000000
const SERVICE_ERROR_NORMAL = &h00000001
const SERVICE_ERROR_SEVERE = &h00000002
const SERVICE_ERROR_CRITICAL = &h00000003

type _CM_SERVICE_NODE_TYPE as long
enum
 DriverType = &h00000001
 FileSystemType = &h00000002
 Win32ServiceOwnProcess = &h00000010
 Win32ServiceShareProcess = &h00000020
 AdapterType = &h00000004
 RecognizerType = &h00000008
end enum

type SERVICE_NODE_TYPE as _CM_SERVICE_NODE_TYPE

type _CM_SERVICE_LOAD_TYPE as long
enum
 BootLoad = &h000000000
 SystemLoad = &h00000001
 AutoLoad = &h00000002
 DemandLoad = &h00000003
 DisableLoad = &h00000004
end enum

type SERVICE_LOAD_TYPE as _CM_SERVICE_LOAD_TYPE

type _CM_ERROR_CONTROL_TYPE as long
enum
 IgnoreError = &h000000000
 NormalError = &h00000001
 SevereError = &h00000002
 CriticalError = &h00000003
end enum

type SERVICE_ERROR_TYPE as _CM_ERROR_CONTROL_TYPE
const CM_SERVICE_NETWORK_BOOT_LOAD = &h00000001
const CM_SERVICE_VIRTUAL_DISK_BOOT_LOAD = &h00000002
const CM_SERVICE_USB_DISK_BOOT_LOAD = &h00000004
const CM_SERVICE_SD_DISK_BOOT_LOAD = &h00000008
const CM_SERVICE_USB3_DISK_BOOT_LOAD = &h00000010
const CM_SERVICE_MEASURED_BOOT_LOAD = &h00000020
const CM_SERVICE_VERIFIER_BOOT_LOAD = &h00000040
const CM_SERVICE_WINPE_BOOT_LOAD = &h00000080
const CM_SERVICE_VALID_PROMOTION_MASK = ((((((CM_SERVICE_NETWORK_BOOT_LOAD or CM_SERVICE_VIRTUAL_DISK_BOOT_LOAD) or CM_SERVICE_USB_DISK_BOOT_LOAD) or CM_SERVICE_SD_DISK_BOOT_LOAD) or CM_SERVICE_USB3_DISK_BOOT_LOAD) or CM_SERVICE_MEASURED_BOOT_LOAD) or CM_SERVICE_VERIFIER_BOOT_LOAD) or CM_SERVICE_WINPE_BOOT_LOAD
const TAPE_ERASE_SHORT = 0
const TAPE_ERASE_LONG = 1

type _TAPE_ERASE
 as DWORD Type
 Immediate as WINBOOLEAN
end type

type TAPE_ERASE as _TAPE_ERASE
type PTAPE_ERASE as _TAPE_ERASE ptr
const TAPE_LOAD = 0
const TAPE_UNLOAD = 1
const TAPE_TENSION = 2
const TAPE_LOCK = 3
const TAPE_UNLOCK = 4
const TAPE_FORMAT = 5

type _TAPE_PREPARE
 Operation as DWORD
 Immediate as WINBOOLEAN
end type

type TAPE_PREPARE as _TAPE_PREPARE
type PTAPE_PREPARE as _TAPE_PREPARE ptr
const TAPE_SETMARKS = 0
const TAPE_FILEMARKS = 1
const TAPE_SHORT_FILEMARKS = 2
const TAPE_LONG_FILEMARKS = 3

type _TAPE_WRITE_MARKS
 as DWORD Type
 Count as DWORD
 Immediate as WINBOOLEAN
end type

type TAPE_WRITE_MARKS as _TAPE_WRITE_MARKS
type PTAPE_WRITE_MARKS as _TAPE_WRITE_MARKS ptr
const TAPE_ABSOLUTE_POSITION = 0
const TAPE_LOGICAL_POSITION = 1
const TAPE_PSEUDO_LOGICAL_POSITION = 2

type _TAPE_GET_POSITION
 as DWORD Type
 Partition as DWORD
 Offset as LARGE_INTEGER
end type

type TAPE_GET_POSITION as _TAPE_GET_POSITION
type PTAPE_GET_POSITION as _TAPE_GET_POSITION ptr
const TAPE_REWIND = 0
const TAPE_ABSOLUTE_BLOCK = 1
const TAPE_LOGICAL_BLOCK = 2
const TAPE_PSEUDO_LOGICAL_BLOCK = 3
const TAPE_SPACE_END_OF_DATA = 4
const TAPE_SPACE_RELATIVE_BLOCKS = 5
const TAPE_SPACE_FILEMARKS = 6
const TAPE_SPACE_SEQUENTIAL_FMKS = 7
const TAPE_SPACE_SETMARKS = 8
const TAPE_SPACE_SEQUENTIAL_SMKS = 9

type _TAPE_SET_POSITION
 Method as DWORD
 Partition as DWORD
 Offset as LARGE_INTEGER
 Immediate as WINBOOLEAN
end type

type TAPE_SET_POSITION as _TAPE_SET_POSITION
type PTAPE_SET_POSITION as _TAPE_SET_POSITION ptr
const TAPE_DRIVE_FIXED = &h00000001
const TAPE_DRIVE_SELECT = &h00000002
const TAPE_DRIVE_INITIATOR = &h00000004
const TAPE_DRIVE_ERASE_SHORT = &h00000010
const TAPE_DRIVE_ERASE_LONG = &h00000020
const TAPE_DRIVE_ERASE_BOP_ONLY = &h00000040
const TAPE_DRIVE_ERASE_IMMEDIATE = &h00000080
const TAPE_DRIVE_TAPE_CAPACITY = &h00000100
const TAPE_DRIVE_TAPE_REMAINING = &h00000200
const TAPE_DRIVE_FIXED_BLOCK = &h00000400
const TAPE_DRIVE_VARIABLE_BLOCK = &h00000800
const TAPE_DRIVE_WRITE_PROTECT = &h00001000
const TAPE_DRIVE_EOT_WZ_SIZE = &h00002000
const TAPE_DRIVE_ECC = &h00010000
const TAPE_DRIVE_COMPRESSION = &h00020000
const TAPE_DRIVE_PADDING = &h00040000
const TAPE_DRIVE_REPORT_SMKS = &h00080000
const TAPE_DRIVE_GET_ABSOLUTE_BLK = &h00100000
const TAPE_DRIVE_GET_LOGICAL_BLK = &h00200000
const TAPE_DRIVE_SET_EOT_WZ_SIZE = &h00400000
const TAPE_DRIVE_EJECT_MEDIA = &h01000000
const TAPE_DRIVE_CLEAN_REQUESTS = &h02000000
const TAPE_DRIVE_SET_CMP_BOP_ONLY = &h04000000
const TAPE_DRIVE_RESERVED_BIT = &h80000000
const TAPE_DRIVE_LOAD_UNLOAD = &h80000001
const TAPE_DRIVE_TENSION = &h80000002
const TAPE_DRIVE_LOCK_UNLOCK = &h80000004
const TAPE_DRIVE_REWIND_IMMEDIATE = &h80000008
const TAPE_DRIVE_SET_BLOCK_SIZE = &h80000010
const TAPE_DRIVE_LOAD_UNLD_IMMED = &h80000020
const TAPE_DRIVE_TENSION_IMMED = &h80000040
const TAPE_DRIVE_LOCK_UNLK_IMMED = &h80000080
const TAPE_DRIVE_SET_ECC = &h80000100
const TAPE_DRIVE_SET_COMPRESSION = &h80000200
const TAPE_DRIVE_SET_PADDING = &h80000400
const TAPE_DRIVE_SET_REPORT_SMKS = &h80000800
const TAPE_DRIVE_ABSOLUTE_BLK = &h80001000
const TAPE_DRIVE_ABS_BLK_IMMED = &h80002000
const TAPE_DRIVE_LOGICAL_BLK = &h80004000
const TAPE_DRIVE_LOG_BLK_IMMED = &h80008000
const TAPE_DRIVE_END_OF_DATA = &h80010000
const TAPE_DRIVE_RELATIVE_BLKS = &h80020000
const TAPE_DRIVE_FILEMARKS = &h80040000
const TAPE_DRIVE_SEQUENTIAL_FMKS = &h80080000
const TAPE_DRIVE_SETMARKS = &h80100000
const TAPE_DRIVE_SEQUENTIAL_SMKS = &h80200000
const TAPE_DRIVE_REVERSE_POSITION = &h80400000
const TAPE_DRIVE_SPACE_IMMEDIATE = &h80800000
const TAPE_DRIVE_WRITE_SETMARKS = &h81000000
const TAPE_DRIVE_WRITE_FILEMARKS = &h82000000
const TAPE_DRIVE_WRITE_SHORT_FMKS = &h84000000
const TAPE_DRIVE_WRITE_LONG_FMKS = &h88000000
const TAPE_DRIVE_WRITE_MARK_IMMED = &h90000000
const TAPE_DRIVE_FORMAT = &hA0000000
const TAPE_DRIVE_FORMAT_IMMEDIATE = &hC0000000
const TAPE_DRIVE_HIGH_FEATURES = &h80000000

type _TAPE_GET_DRIVE_PARAMETERS
 ECC as WINBOOLEAN
 Compression as WINBOOLEAN
 DataPadding as WINBOOLEAN
 ReportSetmarks as WINBOOLEAN
 DefaultBlockSize as DWORD
 MaximumBlockSize as DWORD
 MinimumBlockSize as DWORD
 MaximumPartitionCount as DWORD
 FeaturesLow as DWORD
 FeaturesHigh as DWORD
 EOTWarningZoneSize as DWORD
end type

type TAPE_GET_DRIVE_PARAMETERS as _TAPE_GET_DRIVE_PARAMETERS
type PTAPE_GET_DRIVE_PARAMETERS as _TAPE_GET_DRIVE_PARAMETERS ptr

type _TAPE_SET_DRIVE_PARAMETERS
 ECC as WINBOOLEAN
 Compression as WINBOOLEAN
 DataPadding as WINBOOLEAN
 ReportSetmarks as WINBOOLEAN
 EOTWarningZoneSize as DWORD
end type

type TAPE_SET_DRIVE_PARAMETERS as _TAPE_SET_DRIVE_PARAMETERS
type PTAPE_SET_DRIVE_PARAMETERS as _TAPE_SET_DRIVE_PARAMETERS ptr

type _TAPE_GET_MEDIA_PARAMETERS
 Capacity as LARGE_INTEGER
 Remaining as LARGE_INTEGER
 BlockSize as DWORD
 PartitionCount as DWORD
 WriteProtected as WINBOOLEAN
end type

type TAPE_GET_MEDIA_PARAMETERS as _TAPE_GET_MEDIA_PARAMETERS
type PTAPE_GET_MEDIA_PARAMETERS as _TAPE_GET_MEDIA_PARAMETERS ptr

type _TAPE_SET_MEDIA_PARAMETERS
 BlockSize as DWORD
end type

type TAPE_SET_MEDIA_PARAMETERS as _TAPE_SET_MEDIA_PARAMETERS
type PTAPE_SET_MEDIA_PARAMETERS as _TAPE_SET_MEDIA_PARAMETERS ptr
const TAPE_FIXED_PARTITIONS = 0
const TAPE_SELECT_PARTITIONS = 1
const TAPE_INITIATOR_PARTITIONS = 2

type _TAPE_CREATE_PARTITION
 Method as DWORD
 Count as DWORD
 Size as DWORD
end type

type TAPE_CREATE_PARTITION as _TAPE_CREATE_PARTITION
type PTAPE_CREATE_PARTITION as _TAPE_CREATE_PARTITION ptr
const TAPE_QUERY_DRIVE_PARAMETERS = 0
const TAPE_QUERY_MEDIA_CAPACITY = 1
const TAPE_CHECK_FOR_DRIVE_PROBLEM = 2
const TAPE_QUERY_IO_ERROR_DATA = 3
const TAPE_QUERY_DEVICE_ERROR_DATA = 4

type _TAPE_WMI_OPERATIONS
 Method as DWORD
 DataBufferSize as DWORD
 DataBuffer as PVOID
end type

type TAPE_WMI_OPERATIONS as _TAPE_WMI_OPERATIONS
type PTAPE_WMI_OPERATIONS as _TAPE_WMI_OPERATIONS ptr

type _TAPE_DRIVE_PROBLEM_TYPE as long
enum
 TapeDriveProblemNone
 TapeDriveReadWriteWarning
 TapeDriveReadWriteError
 TapeDriveReadWarning
 TapeDriveWriteWarning
 TapeDriveReadError
 TapeDriveWriteError
 TapeDriveHardwareError
 TapeDriveUnsupportedMedia
 TapeDriveScsiConnectionError
 TapeDriveTimetoClean
 TapeDriveCleanDriveNow
 TapeDriveMediaLifeExpired
 TapeDriveSnappedTape
end enum

type TAPE_DRIVE_PROBLEM_TYPE as _TAPE_DRIVE_PROBLEM_TYPE
type TP_VERSION as DWORD
type PTP_VERSION as DWORD ptr
type TP_CALLBACK_INSTANCE as _TP_CALLBACK_INSTANCE
type PTP_CALLBACK_INSTANCE as _TP_CALLBACK_INSTANCE ptr
type PTP_SIMPLE_CALLBACK as sub(byval Instance as PTP_CALLBACK_INSTANCE, byval Context as PVOID)
type TP_POOL as _TP_POOL
type PTP_POOL as _TP_POOL ptr

type _TP_CALLBACK_PRIORITY as long
enum
 TP_CALLBACK_PRIORITY_HIGH
 TP_CALLBACK_PRIORITY_NORMAL
 TP_CALLBACK_PRIORITY_LOW
 TP_CALLBACK_PRIORITY_INVALID
 TP_CALLBACK_PRIORITY_COUNT = TP_CALLBACK_PRIORITY_INVALID
end enum

type TP_CALLBACK_PRIORITY as _TP_CALLBACK_PRIORITY

type _TP_POOL_STACK_INFORMATION
 StackReserve as SIZE_T_
 StackCommit as SIZE_T_
end type

type TP_POOL_STACK_INFORMATION as _TP_POOL_STACK_INFORMATION
type PTP_POOL_STACK_INFORMATION as _TP_POOL_STACK_INFORMATION ptr
type TP_CLEANUP_GROUP as _TP_CLEANUP_GROUP
type PTP_CLEANUP_GROUP as _TP_CLEANUP_GROUP ptr
type PTP_CLEANUP_GROUP_CANCEL_CALLBACK as sub(byval ObjectContext as PVOID, byval CleanupContext as PVOID)

 type _TP_CALLBACK_ENVIRON_V1_u_s
 LongFunction : 1 as DWORD
 Persistent : 1 as DWORD
 as DWORD Private : 30
 end type

 union _TP_CALLBACK_ENVIRON_V1_u
 Flags as DWORD
 s as _TP_CALLBACK_ENVIRON_V1_u_s
 end union

type _ACTIVATION_CONTEXT as _ACTIVATION_CONTEXT_

 type _TP_CALLBACK_ENVIRON_V1
 Version as TP_VERSION
 Pool as PTP_POOL
 CleanupGroup as PTP_CLEANUP_GROUP
 CleanupGroupCancelCallback as PTP_CLEANUP_GROUP_CANCEL_CALLBACK
 RaceDll as PVOID
 ActivationContext as _ACTIVATION_CONTEXT ptr
 FinalizationCallback as PTP_SIMPLE_CALLBACK
 u as _TP_CALLBACK_ENVIRON_V1_u
 end type

 type TP_CALLBACK_ENVIRON_V1 as _TP_CALLBACK_ENVIRON_V1
 type TP_CALLBACK_ENVIRON as TP_CALLBACK_ENVIRON_V1
 type PTP_CALLBACK_ENVIRON as TP_CALLBACK_ENVIRON_V1 ptr

type TP_WORK as _TP_WORK
type PTP_WORK as _TP_WORK ptr
type PTP_WORK_CALLBACK as sub(byval Instance as PTP_CALLBACK_INSTANCE, byval Context as PVOID, byval Work as PTP_WORK)
type TP_TIMER as _TP_TIMER
type PTP_TIMER as _TP_TIMER ptr
type PTP_TIMER_CALLBACK as sub(byval Instance as PTP_CALLBACK_INSTANCE, byval Context as PVOID, byval Timer as PTP_TIMER)
type TP_WAIT_RESULT as DWORD
type TP_WAIT as _TP_WAIT
type PTP_WAIT as _TP_WAIT ptr
type PTP_WAIT_CALLBACK as sub(byval Instance as PTP_CALLBACK_INSTANCE, byval Context as PVOID, byval Wait as PTP_WAIT, byval WaitResult as TP_WAIT_RESULT)
type TP_IO as _TP_IO
type PTP_IO as _TP_IO ptr

 private sub TpInitializeCallbackEnviron cdecl(byval cbe as PTP_CALLBACK_ENVIRON)
 cbe->Pool = cptr(any ptr, 0)
 cbe->CleanupGroup = cptr(any ptr, 0)
 cbe->CleanupGroupCancelCallback = cptr(any ptr, 0)
 cbe->RaceDll = cptr(any ptr, 0)
 cbe->ActivationContext = cptr(any ptr, 0)
 cbe->FinalizationCallback = cptr(any ptr, 0)
 cbe->u.Flags = 0
 cbe->Version = 1
 end sub

private sub TpSetCallbackThreadpool cdecl(byval cbe as PTP_CALLBACK_ENVIRON, byval pool as PTP_POOL)
 cbe->Pool = pool
end sub

private sub TpSetCallbackCleanupGroup cdecl(byval cbe as PTP_CALLBACK_ENVIRON, byval cleanup_group as PTP_CLEANUP_GROUP, byval cleanup_group_cb as PTP_CLEANUP_GROUP_CANCEL_CALLBACK)
 cbe->CleanupGroup = cleanup_group
 cbe->CleanupGroupCancelCallback = cleanup_group_cb
end sub

private sub TpSetCallbackActivationContext cdecl(byval cbe as PTP_CALLBACK_ENVIRON, byval actx as _ACTIVATION_CONTEXT ptr)
 cbe->ActivationContext = actx
end sub

private sub TpSetCallbackNoActivationContext cdecl(byval cbe as PTP_CALLBACK_ENVIRON)
 cbe->ActivationContext = cptr(_ACTIVATION_CONTEXT ptr, cast(LONG_PTR, -1))
end sub

private sub TpSetCallbackLongFunction cdecl(byval cbe as PTP_CALLBACK_ENVIRON)
 cbe->u.s.LongFunction = 1
end sub

private sub TpSetCallbackRaceWithDll cdecl(byval cbe as PTP_CALLBACK_ENVIRON, byval h as PVOID)
 cbe->RaceDll = h
end sub

private sub TpSetCallbackFinalizationCallback cdecl(byval cbe as PTP_CALLBACK_ENVIRON, byval fini_cb as PTP_SIMPLE_CALLBACK)
 cbe->FinalizationCallback = fini_cb
end sub


private sub TpSetCallbackPersistent cdecl(byval cbe as PTP_CALLBACK_ENVIRON)
 cbe->u.s.Persistent = 1
end sub

private sub TpDestroyCallbackEnviron cdecl(byval cbe as PTP_CALLBACK_ENVIRON)
 cbe = cbe
end sub


const TRANSACTIONMANAGER_QUERY_INFORMATION = &h00001
const TRANSACTIONMANAGER_SET_INFORMATION = &h00002
const TRANSACTIONMANAGER_RECOVER = &h00004
const TRANSACTIONMANAGER_RENAME = &h00008
const TRANSACTIONMANAGER_CREATE_RM = &h00010
const TRANSACTIONMANAGER_BIND_TRANSACTION = &h00020
const TRANSACTIONMANAGER_GENERIC_READ = STANDARD_RIGHTS_READ or TRANSACTIONMANAGER_QUERY_INFORMATION
const TRANSACTIONMANAGER_GENERIC_WRITE = (((STANDARD_RIGHTS_WRITE or TRANSACTIONMANAGER_SET_INFORMATION) or TRANSACTIONMANAGER_RECOVER) or TRANSACTIONMANAGER_RENAME) or TRANSACTIONMANAGER_CREATE_RM
const TRANSACTIONMANAGER_GENERIC_EXECUTE = STANDARD_RIGHTS_EXECUTE
const TRANSACTIONMANAGER_ALL_ACCESS = (((STANDARD_RIGHTS_REQUIRED or TRANSACTIONMANAGER_GENERIC_READ) or TRANSACTIONMANAGER_GENERIC_WRITE) or TRANSACTIONMANAGER_GENERIC_EXECUTE) or TRANSACTIONMANAGER_BIND_TRANSACTION
const TRANSACTION_QUERY_INFORMATION = &h0001
const TRANSACTION_SET_INFORMATION = &h0002
const TRANSACTION_ENLIST = &h0004
const TRANSACTION_COMMIT = &h0008
const TRANSACTION_ROLLBACK = &h0010
const TRANSACTION_PROPAGATE = &h0020
const TRANSACTION_RIGHT_RESERVED1 = &h0040
const TRANSACTION_GENERIC_READ = (STANDARD_RIGHTS_READ or TRANSACTION_QUERY_INFORMATION) or SYNCHRONIZE
const TRANSACTION_GENERIC_WRITE = (((((STANDARD_RIGHTS_WRITE or TRANSACTION_SET_INFORMATION) or TRANSACTION_COMMIT) or TRANSACTION_ENLIST) or TRANSACTION_ROLLBACK) or TRANSACTION_PROPAGATE) or SYNCHRONIZE
const TRANSACTION_GENERIC_EXECUTE = ((STANDARD_RIGHTS_EXECUTE or TRANSACTION_COMMIT) or TRANSACTION_ROLLBACK) or SYNCHRONIZE
const TRANSACTION_ALL_ACCESS = ((STANDARD_RIGHTS_REQUIRED or TRANSACTION_GENERIC_READ) or TRANSACTION_GENERIC_WRITE) or TRANSACTION_GENERIC_EXECUTE
const TRANSACTION_RESOURCE_MANAGER_RIGHTS = (((((TRANSACTION_GENERIC_READ or STANDARD_RIGHTS_WRITE) or TRANSACTION_SET_INFORMATION) or TRANSACTION_ENLIST) or TRANSACTION_ROLLBACK) or TRANSACTION_PROPAGATE) or SYNCHRONIZE
const RESOURCEMANAGER_QUERY_INFORMATION = &h0001
const RESOURCEMANAGER_SET_INFORMATION = &h0002
const RESOURCEMANAGER_RECOVER = &h0004
const RESOURCEMANAGER_ENLIST = &h0008
const RESOURCEMANAGER_GET_NOTIFICATION = &h0010
const RESOURCEMANAGER_REGISTER_PROTOCOL = &h0020
const RESOURCEMANAGER_COMPLETE_PROPAGATION = &h0040
const RESOURCEMANAGER_GENERIC_READ = (STANDARD_RIGHTS_READ or RESOURCEMANAGER_QUERY_INFORMATION) or SYNCHRONIZE
const RESOURCEMANAGER_GENERIC_WRITE = ((((((STANDARD_RIGHTS_WRITE or RESOURCEMANAGER_SET_INFORMATION) or RESOURCEMANAGER_RECOVER) or RESOURCEMANAGER_ENLIST) or RESOURCEMANAGER_GET_NOTIFICATION) or RESOURCEMANAGER_REGISTER_PROTOCOL) or RESOURCEMANAGER_COMPLETE_PROPAGATION) or SYNCHRONIZE
const RESOURCEMANAGER_GENERIC_EXECUTE = ((((STANDARD_RIGHTS_EXECUTE or RESOURCEMANAGER_RECOVER) or RESOURCEMANAGER_ENLIST) or RESOURCEMANAGER_GET_NOTIFICATION) or RESOURCEMANAGER_COMPLETE_PROPAGATION) or SYNCHRONIZE
const RESOURCEMANAGER_ALL_ACCESS = ((STANDARD_RIGHTS_REQUIRED or RESOURCEMANAGER_GENERIC_READ) or RESOURCEMANAGER_GENERIC_WRITE) or RESOURCEMANAGER_GENERIC_EXECUTE
const ENLISTMENT_QUERY_INFORMATION = 1
const ENLISTMENT_SET_INFORMATION = 2
const ENLISTMENT_RECOVER = 4
const ENLISTMENT_SUBORDINATE_RIGHTS = 8
const ENLISTMENT_SUPERIOR_RIGHTS = &h10
const ENLISTMENT_GENERIC_READ = STANDARD_RIGHTS_READ or ENLISTMENT_QUERY_INFORMATION
const ENLISTMENT_GENERIC_WRITE = (((STANDARD_RIGHTS_WRITE or ENLISTMENT_SET_INFORMATION) or ENLISTMENT_RECOVER) or ENLISTMENT_SUBORDINATE_RIGHTS) or ENLISTMENT_SUPERIOR_RIGHTS
const ENLISTMENT_GENERIC_EXECUTE = ((STANDARD_RIGHTS_EXECUTE or ENLISTMENT_RECOVER) or ENLISTMENT_SUBORDINATE_RIGHTS) or ENLISTMENT_SUPERIOR_RIGHTS
const ENLISTMENT_ALL_ACCESS = ((STANDARD_RIGHTS_REQUIRED or ENLISTMENT_GENERIC_READ) or ENLISTMENT_GENERIC_WRITE) or ENLISTMENT_GENERIC_EXECUTE

type _TRANSACTION_OUTCOME as long
enum
 TransactionOutcomeUndetermined = 1
 TransactionOutcomeCommitted
 TransactionOutcomeAborted
end enum

type TRANSACTION_OUTCOME as _TRANSACTION_OUTCOME

type _TRANSACTION_STATE as long
enum
 TransactionStateNormal = 1
 TransactionStateIndoubt
 TransactionStateCommittedNotify
end enum

type TRANSACTION_STATE as _TRANSACTION_STATE

type _TRANSACTION_BASIC_INFORMATION
 TransactionId as GUID
 State as DWORD
 Outcome as DWORD
end type

type TRANSACTION_BASIC_INFORMATION as _TRANSACTION_BASIC_INFORMATION
type PTRANSACTION_BASIC_INFORMATION as _TRANSACTION_BASIC_INFORMATION ptr

type _TRANSACTIONMANAGER_BASIC_INFORMATION
 TmIdentity as GUID
 VirtualClock as LARGE_INTEGER
end type

type TRANSACTIONMANAGER_BASIC_INFORMATION as _TRANSACTIONMANAGER_BASIC_INFORMATION
type PTRANSACTIONMANAGER_BASIC_INFORMATION as _TRANSACTIONMANAGER_BASIC_INFORMATION ptr

type _TRANSACTIONMANAGER_LOG_INFORMATION
 LogIdentity as GUID
end type

type TRANSACTIONMANAGER_LOG_INFORMATION as _TRANSACTIONMANAGER_LOG_INFORMATION
type PTRANSACTIONMANAGER_LOG_INFORMATION as _TRANSACTIONMANAGER_LOG_INFORMATION ptr

type _TRANSACTIONMANAGER_LOGPATH_INFORMATION
 LogPathLength as DWORD
 LogPath as wstring * 1
end type

type TRANSACTIONMANAGER_LOGPATH_INFORMATION as _TRANSACTIONMANAGER_LOGPATH_INFORMATION
type PTRANSACTIONMANAGER_LOGPATH_INFORMATION as _TRANSACTIONMANAGER_LOGPATH_INFORMATION ptr

type _TRANSACTIONMANAGER_RECOVERY_INFORMATION
 LastRecoveredLsn as ULONGLONG
end type

type TRANSACTIONMANAGER_RECOVERY_INFORMATION as _TRANSACTIONMANAGER_RECOVERY_INFORMATION
type PTRANSACTIONMANAGER_RECOVERY_INFORMATION as _TRANSACTIONMANAGER_RECOVERY_INFORMATION ptr

type _TRANSACTIONMANAGER_OLDEST_INFORMATION
 OldestTransactionGuid as GUID
end type

type TRANSACTIONMANAGER_OLDEST_INFORMATION as _TRANSACTIONMANAGER_OLDEST_INFORMATION
type PTRANSACTIONMANAGER_OLDEST_INFORMATION as _TRANSACTIONMANAGER_OLDEST_INFORMATION ptr

type _TRANSACTION_PROPERTIES_INFORMATION
 IsolationLevel as DWORD
 IsolationFlags as DWORD
 Timeout as LARGE_INTEGER
 Outcome as DWORD
 DescriptionLength as DWORD
 Description as wstring * 1
end type

type TRANSACTION_PROPERTIES_INFORMATION as _TRANSACTION_PROPERTIES_INFORMATION
type PTRANSACTION_PROPERTIES_INFORMATION as _TRANSACTION_PROPERTIES_INFORMATION ptr

type _TRANSACTION_BIND_INFORMATION
 TmHandle as HANDLE
end type

type TRANSACTION_BIND_INFORMATION as _TRANSACTION_BIND_INFORMATION
type PTRANSACTION_BIND_INFORMATION as _TRANSACTION_BIND_INFORMATION ptr

type _TRANSACTION_ENLISTMENT_PAIR
 EnlistmentId as GUID
 ResourceManagerId as GUID
end type

type TRANSACTION_ENLISTMENT_PAIR as _TRANSACTION_ENLISTMENT_PAIR
type PTRANSACTION_ENLISTMENT_PAIR as _TRANSACTION_ENLISTMENT_PAIR ptr

type _TRANSACTION_ENLISTMENTS_INFORMATION
 NumberOfEnlistments as DWORD
 EnlistmentPair(0 to 0) as TRANSACTION_ENLISTMENT_PAIR
end type

type TRANSACTION_ENLISTMENTS_INFORMATION as _TRANSACTION_ENLISTMENTS_INFORMATION
type PTRANSACTION_ENLISTMENTS_INFORMATION as _TRANSACTION_ENLISTMENTS_INFORMATION ptr

type _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION
 SuperiorEnlistmentPair as TRANSACTION_ENLISTMENT_PAIR
end type

type TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION as _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION
type PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION as _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION ptr

type _RESOURCEMANAGER_BASIC_INFORMATION
 ResourceManagerId as GUID
 DescriptionLength as DWORD
 Description as wstring * 1
end type

type RESOURCEMANAGER_BASIC_INFORMATION as _RESOURCEMANAGER_BASIC_INFORMATION
type PRESOURCEMANAGER_BASIC_INFORMATION as _RESOURCEMANAGER_BASIC_INFORMATION ptr

type _RESOURCEMANAGER_COMPLETION_INFORMATION
 IoCompletionPortHandle as HANDLE
 CompletionKey as ULONG_PTR
end type

type RESOURCEMANAGER_COMPLETION_INFORMATION as _RESOURCEMANAGER_COMPLETION_INFORMATION
type PRESOURCEMANAGER_COMPLETION_INFORMATION as _RESOURCEMANAGER_COMPLETION_INFORMATION ptr

type _TRANSACTION_INFORMATION_CLASS as long
enum
 TransactionBasicInformation
 TransactionPropertiesInformation
 TransactionEnlistmentInformation
 TransactionSuperiorEnlistmentInformation
 TransactionBindInformation
 TransactionDTCPrivateInformation
end enum

type TRANSACTION_INFORMATION_CLASS as _TRANSACTION_INFORMATION_CLASS

type _TRANSACTIONMANAGER_INFORMATION_CLASS as long
enum
 TransactionManagerBasicInformation
 TransactionManagerLogInformation
 TransactionManagerLogPathInformation
 TransactionManagerOnlineProbeInformation = 3
 TransactionManagerRecoveryInformation = 4
 TransactionManagerOldestTransactionInformation = 5
end enum

type TRANSACTIONMANAGER_INFORMATION_CLASS as _TRANSACTIONMANAGER_INFORMATION_CLASS

type _RESOURCEMANAGER_INFORMATION_CLASS as long
enum
 ResourceManagerBasicInformation
 ResourceManagerCompletionInformation
end enum

type RESOURCEMANAGER_INFORMATION_CLASS as _RESOURCEMANAGER_INFORMATION_CLASS

type _ENLISTMENT_BASIC_INFORMATION
 EnlistmentId as GUID
 TransactionId as GUID
 ResourceManagerId as GUID
end type

type ENLISTMENT_BASIC_INFORMATION as _ENLISTMENT_BASIC_INFORMATION
type PENLISTMENT_BASIC_INFORMATION as _ENLISTMENT_BASIC_INFORMATION ptr

type _ENLISTMENT_CRM_INFORMATION
 CrmTransactionManagerId as GUID
 CrmResourceManagerId as GUID
 CrmEnlistmentId as GUID
end type

type ENLISTMENT_CRM_INFORMATION as _ENLISTMENT_CRM_INFORMATION
type PENLISTMENT_CRM_INFORMATION as _ENLISTMENT_CRM_INFORMATION ptr

type _ENLISTMENT_INFORMATION_CLASS as long
enum
 EnlistmentBasicInformation
 EnlistmentRecoveryInformation
 EnlistmentCrmInformation
end enum

type ENLISTMENT_INFORMATION_CLASS as _ENLISTMENT_INFORMATION_CLASS

type _TRANSACTION_LIST_ENTRY
 UOW as GUID
end type

type TRANSACTION_LIST_ENTRY as _TRANSACTION_LIST_ENTRY
type PTRANSACTION_LIST_ENTRY as _TRANSACTION_LIST_ENTRY ptr

type _TRANSACTION_LIST_INFORMATION
 NumberOfTransactions as DWORD
 TransactionInformation(0 to 0) as TRANSACTION_LIST_ENTRY
end type

type TRANSACTION_LIST_INFORMATION as _TRANSACTION_LIST_INFORMATION
type PTRANSACTION_LIST_INFORMATION as _TRANSACTION_LIST_INFORMATION ptr

type _KTMOBJECT_TYPE as long
enum
 KTMOBJECT_TRANSACTION
 KTMOBJECT_TRANSACTION_MANAGER
 KTMOBJECT_RESOURCE_MANAGER
 KTMOBJECT_ENLISTMENT
 KTMOBJECT_INVALID
end enum

type KTMOBJECT_TYPE as _KTMOBJECT_TYPE
type PKTMOBJECT_TYPE as _KTMOBJECT_TYPE ptr

type _KTMOBJECT_CURSOR
 LastQuery as GUID
 ObjectIdCount as DWORD
 ObjectIds(0 to 0) as GUID
end type

type KTMOBJECT_CURSOR as _KTMOBJECT_CURSOR
type PKTMOBJECT_CURSOR as _KTMOBJECT_CURSOR ptr
const WOW64_CONTEXT_i386 = &h00010000
const WOW64_CONTEXT_i486 = &h00010000
const WOW64_CONTEXT_CONTROL = WOW64_CONTEXT_i386 or &h00000001
const WOW64_CONTEXT_INTEGER = WOW64_CONTEXT_i386 or &h00000002
const WOW64_CONTEXT_SEGMENTS = WOW64_CONTEXT_i386 or &h00000004
const WOW64_CONTEXT_FLOATING_POINT = WOW64_CONTEXT_i386 or &h00000008
const WOW64_CONTEXT_DEBUG_REGISTERS = WOW64_CONTEXT_i386 or &h00000010
const WOW64_CONTEXT_EXTENDED_REGISTERS = WOW64_CONTEXT_i386 or &h00000020
const WOW64_CONTEXT_FULL = (WOW64_CONTEXT_CONTROL or WOW64_CONTEXT_INTEGER) or WOW64_CONTEXT_SEGMENTS
const WOW64_CONTEXT_ALL = ((((WOW64_CONTEXT_CONTROL or WOW64_CONTEXT_INTEGER) or WOW64_CONTEXT_SEGMENTS) or WOW64_CONTEXT_FLOATING_POINT) or WOW64_CONTEXT_DEBUG_REGISTERS) or WOW64_CONTEXT_EXTENDED_REGISTERS
const WOW64_CONTEXT_XSTATE = WOW64_CONTEXT_i386 or &h00000040
const WOW64_CONTEXT_EXCEPTION_ACTIVE = &h08000000
const WOW64_CONTEXT_SERVICE_ACTIVE = &h10000000
const WOW64_CONTEXT_EXCEPTION_REQUEST = &h40000000
const WOW64_CONTEXT_EXCEPTION_REPORTING = &h80000000
const WOW64_SIZE_OF_80387_REGISTERS = 80
const WOW64_MAXIMUM_SUPPORTED_EXTENSION = 512

type _WOW64_FLOATING_SAVE_AREA
 ControlWord as DWORD
 StatusWord as DWORD
 TagWord as DWORD
 ErrorOffset as DWORD
 ErrorSelector as DWORD
 DataOffset as DWORD
 DataSelector as DWORD
 RegisterArea(0 to 79) as UBYTE
 Cr0NpxState as DWORD
end type

type WOW64_FLOATING_SAVE_AREA as _WOW64_FLOATING_SAVE_AREA
type PWOW64_FLOATING_SAVE_AREA as _WOW64_FLOATING_SAVE_AREA ptr

type _WOW64_CONTEXT field = 4
 ContextFlags as DWORD
 Dr0 as DWORD
 Dr1 as DWORD
 Dr2 as DWORD
 Dr3 as DWORD
 Dr6 as DWORD
 Dr7 as DWORD
 FloatSave as WOW64_FLOATING_SAVE_AREA
 SegGs as DWORD
 SegFs as DWORD
 SegEs as DWORD
 SegDs as DWORD
 Edi as DWORD
 Esi as DWORD
 Ebx as DWORD
 Edx as DWORD
 Ecx as DWORD
 Eax as DWORD
 Ebp as DWORD
 Eip as DWORD
 SegCs as DWORD
 EFlags as DWORD
 Esp as DWORD
 SegSs as DWORD
 ExtendedRegisters(0 to 511) as UBYTE
end type

type WOW64_CONTEXT as _WOW64_CONTEXT
type PWOW64_CONTEXT as _WOW64_CONTEXT ptr

type _WOW64_LDT_ENTRY_HighWord_Bytes
 BaseMid as UBYTE
 Flags1 as UBYTE
 Flags2 as UBYTE
 BaseHi as UBYTE
end type

type _WOW64_LDT_ENTRY_HighWord_Bits
 BaseMid : 8 as DWORD
 as DWORD Type : 5
 Dpl : 2 as DWORD
 Pres : 1 as DWORD
 LimitHi : 4 as DWORD
 Sys : 1 as DWORD
 Reserved_0 : 1 as DWORD
 Default_Big : 1 as DWORD
 Granularity : 1 as DWORD
 BaseHi : 8 as DWORD
end type

union _WOW64_LDT_ENTRY_HighWord
 Bytes as _WOW64_LDT_ENTRY_HighWord_Bytes
 Bits as _WOW64_LDT_ENTRY_HighWord_Bits
end union

type _WOW64_LDT_ENTRY
 LimitLow as WORD
 BaseLow as WORD
 HighWord as _WOW64_LDT_ENTRY_HighWord
end type

type WOW64_LDT_ENTRY as _WOW64_LDT_ENTRY
type PWOW64_LDT_ENTRY as _WOW64_LDT_ENTRY ptr

type _WOW64_DESCRIPTOR_TABLE_ENTRY
 Selector as DWORD
 Descriptor as WOW64_LDT_ENTRY
end type

type WOW64_DESCRIPTOR_TABLE_ENTRY as _WOW64_DESCRIPTOR_TABLE_ENTRY
type PWOW64_DESCRIPTOR_TABLE_ENTRY as _WOW64_DESCRIPTOR_TABLE_ENTRY ptr


const ACTIVATION_CONTEXT_SECTION_ASSEMBLY_INFORMATION = 1
const ACTIVATION_CONTEXT_SECTION_DLL_REDIRECTION = 2
const ACTIVATION_CONTEXT_SECTION_WINDOW_CLASS_REDIRECTION = 3
const ACTIVATION_CONTEXT_SECTION_COM_SERVER_REDIRECTION = 4
const ACTIVATION_CONTEXT_SECTION_COM_INTERFACE_REDIRECTION = 5
const ACTIVATION_CONTEXT_SECTION_COM_TYPE_LIBRARY_REDIRECTION = 6
const ACTIVATION_CONTEXT_SECTION_COM_PROGID_REDIRECTION = 7
const ACTIVATION_CONTEXT_SECTION_GLOBAL_OBJECT_RENAME_TABLE = 8
const ACTIVATION_CONTEXT_SECTION_CLR_SURROGATES = 9
const ACTIVATION_CONTEXT_SECTION_APPLICATION_SETTINGS = 10
const ACTIVATION_CONTEXT_SECTION_COMPATIBILITY_INFO = 11

end extern



type CRM_PROTOCOL_ID as GUID
type PCRM_PROTOCOL_ID as GUID ptr
const TRANSACTION_MANAGER_VOLATILE = &h00000001
const TRANSACTION_MANAGER_COMMIT_DEFAULT = &h000000000
const TRANSACTION_MANAGER_COMMIT_SYSTEM_VOLUME = &h00000002
const TRANSACTION_MANAGER_COMMIT_SYSTEM_HIVES = &h00000004
const TRANSACTION_MANAGER_COMMIT_LOWEST = &h00000008
const TRANSACTION_MANAGER_CORRUPT_FOR_RECOVERY = &h00000010
const TRANSACTION_MANAGER_CORRUPT_FOR_PROGRESS = &h00000020
const TRANSACTION_MANAGER_MAXIMUM_OPTION = &h0000003f
const TRANSACTION_DO_NOT_PROMOTE = &h00000001
const TRANSACTION_MAXIMUM_OPTION = &h00000001
const RESOURCE_MANAGER_VOLATILE = &h00000001
const RESOURCE_MANAGER_COMMUNICATION = &h00000002
const RESOURCE_MANAGER_MAXIMUM_OPTION = &h00000003
const CRM_PROTOCOL_EXPLICIT_MARSHAL_ONLY = &h00000001
const CRM_PROTOCOL_DYNAMIC_MARSHAL_INFO = &h00000002
const CRM_PROTOCOL_MAXIMUM_OPTION = &h00000003
const ENLISTMENT_SUPERIOR = &h00000001
const ENLISTMENT_MAXIMUM_OPTION = &h00000001
type NOTIFICATION_MASK as ULONG
const TRANSACTION_NOTIFY_MASK = &h3fffffff
const TRANSACTION_NOTIFY_PREPREPARE = &h00000001
const TRANSACTION_NOTIFY_PREPARE = &h00000002
const TRANSACTION_NOTIFY_COMMIT = &h00000004
const TRANSACTION_NOTIFY_ROLLBACK = &h00000008
const TRANSACTION_NOTIFY_PREPREPARE_COMPLETE = &h00000010
const TRANSACTION_NOTIFY_PREPARE_COMPLETE = &h00000020
const TRANSACTION_NOTIFY_COMMIT_COMPLETE = &h00000040
const TRANSACTION_NOTIFY_ROLLBACK_COMPLETE = &h00000080
const TRANSACTION_NOTIFY_RECOVER = &h00000100
const TRANSACTION_NOTIFY_SINGLE_PHASE_COMMIT = &h00000200
const TRANSACTION_NOTIFY_DELEGATE_COMMIT = &h00000400
const TRANSACTION_NOTIFY_RECOVER_QUERY = &h00000800
const TRANSACTION_NOTIFY_ENLIST_PREPREPARE = &h00001000
const TRANSACTION_NOTIFY_LAST_RECOVER = &h00002000
const TRANSACTION_NOTIFY_INDOUBT = &h00004000
const TRANSACTION_NOTIFY_PROPAGATE_PULL = &h00008000
const TRANSACTION_NOTIFY_PROPAGATE_PUSH = &h00010000
const TRANSACTION_NOTIFY_MARSHAL = &h00020000
const TRANSACTION_NOTIFY_ENLIST_MASK = &h00040000
const TRANSACTION_NOTIFY_RM_DISCONNECTED = &h01000000
const TRANSACTION_NOTIFY_TM_ONLINE = &h02000000
const TRANSACTION_NOTIFY_COMMIT_REQUEST = &h04000000
const TRANSACTION_NOTIFY_PROMOTE = &h08000000
const TRANSACTION_NOTIFY_PROMOTE_NEW = &h10000000
const TRANSACTION_NOTIFY_REQUEST_OUTCOME = &h20000000
const TRANSACTION_NOTIFY_COMMIT_FINALIZE = &h40000000

type _TRANSACTION_NOTIFICATION
 TransactionKey as PVOID
 TransactionNotification as ULONG
 TmVirtualClock as LARGE_INTEGER
 ArgumentLength as ULONG
end type

type TRANSACTION_NOTIFICATION as _TRANSACTION_NOTIFICATION
type PTRANSACTION_NOTIFICATION as _TRANSACTION_NOTIFICATION ptr

type _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT
 EnlistmentId as GUID
 UOW as GUID
end type

type TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT as _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT
type PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT as _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT ptr
const TRANSACTION_NOTIFICATION_TM_ONLINE_FLAG_IS_CLUSTERED = &h1

type _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT
 TmIdentity as GUID
 Flags as ULONG
end type

type TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT as _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT
type PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT as _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT ptr
type SAVEPOINT_ID as ULONG
type PSAVEPOINT_ID as ULONG ptr

type _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT
 SavepointId as SAVEPOINT_ID
end type

type TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT as _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT
type PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT as _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT ptr

type _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT
 PropagationCookie as ULONG
 UOW as GUID
 TmIdentity as GUID
 BufferLength as ULONG
end type

type TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT as _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT
type PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT as _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT ptr

type _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT
 MarshalCookie as ULONG
 UOW as GUID
end type

type TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT as _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT
type PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT as _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT ptr
type TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT as TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT
type PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT as TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT ptr

const KTM_MARSHAL_BLOB_VERSION_MAJOR = 1
const KTM_MARSHAL_BLOB_VERSION_MINOR = 1
const MAX_TRANSACTION_DESCRIPTION_LENGTH = 64
const MAX_RESOURCEMANAGER_DESCRIPTION_LENGTH = 64

type _KCRM_MARSHAL_HEADER
 VersionMajor as ULONG
 VersionMinor as ULONG
 NumProtocols as ULONG
 Unused as ULONG
end type

type KCRM_MARSHAL_HEADER as _KCRM_MARSHAL_HEADER
type PKCRM_MARSHAL_HEADER as _KCRM_MARSHAL_HEADER ptr
type PRKCRM_MARSHAL_HEADER as _KCRM_MARSHAL_HEADER ptr

type _KCRM_TRANSACTION_BLOB
 UOW as GUID
 TmIdentity as GUID
 IsolationLevel as ULONG
 IsolationFlags as ULONG
 Timeout as ULONG
 Description as wstring * 64
end type

type KCRM_TRANSACTION_BLOB as _KCRM_TRANSACTION_BLOB
type PKCRM_TRANSACTION_BLOB as _KCRM_TRANSACTION_BLOB ptr
type PRKCRM_TRANSACTION_BLOB as _KCRM_TRANSACTION_BLOB ptr

type _KCRM_PROTOCOL_BLOB
 ProtocolId as CRM_PROTOCOL_ID
 StaticInfoLength as ULONG
 TransactionIdInfoLength as ULONG
 Unused1 as ULONG
 Unused2 as ULONG
end type

type KCRM_PROTOCOL_BLOB as _KCRM_PROTOCOL_BLOB
type PKCRM_PROTOCOL_BLOB as _KCRM_PROTOCOL_BLOB ptr
type PRKCRM_PROTOCOL_BLOB as _KCRM_PROTOCOL_BLOB ptr


#inclib "kernel32"




const __IN__WINERROR_ = 1
const FACILITY_WINDOWSUPDATE = 36
const FACILITY_WINDOWS_CE = 24
const FACILITY_WINDOWS = 8
const FACILITY_URT = 19
const FACILITY_UMI = 22
const FACILITY_SXS = 23
const FACILITY_STORAGE = 3
const FACILITY_STATE_MANAGEMENT = 34
const FACILITY_SSPI = 9
const FACILITY_SCARD = 16
const FACILITY_SETUPAPI = 15
const FACILITY_SECURITY = 9
const FACILITY_RPC = 1
const FACILITY_WIN32 = 7
const FACILITY_CONTROL = 10
const FACILITY_NULL = 0
const FACILITY_METADIRECTORY = 35
const FACILITY_MSMQ = 14
const FACILITY_MEDIASERVER = 13
const FACILITY_INTERNET = 12
const FACILITY_ITF = 4
const FACILITY_HTTP = 25
const FACILITY_DPLAY = 21
const FACILITY_DISPATCH = 2
const FACILITY_DIRECTORYSERVICE = 37
const FACILITY_CONFIGURATION = 33
const FACILITY_COMPLUS = 17
const FACILITY_CERT = 11
const FACILITY_BACKGROUNDCOPY = 32
const FACILITY_ACS = 20
const FACILITY_AAF = 18
const FACILITY_AUDCLNT = 2185
const ERROR_SUCCESS = 0
const NO_ERROR = 0
const SEC_E_OK = cast(HRESULT, &h000000000)
const ERROR_INVALID_FUNCTION = 1
const ERROR_FILE_NOT_FOUND = 2
const ERROR_PATH_NOT_FOUND = 3
const ERROR_TOO_MANY_OPEN_FILES = 4
const ERROR_ACCESS_DENIED = 5
const ERROR_INVALID_HANDLE = 6
const ERROR_ARENA_TRASHED = 7
const ERROR_NOT_ENOUGH_MEMORY = 8
const ERROR_INVALID_BLOCK = 9
const ERROR_BAD_ENVIRONMENT = 10
const ERROR_BAD_FORMAT = 11
const ERROR_INVALID_ACCESS = 12
const ERROR_INVALID_DATA = 13
const ERROR_OUTOFMEMORY = 14
const ERROR_INVALID_DRIVE = 15
const ERROR_CURRENT_DIRECTORY = 16
const ERROR_NOT_SAME_DEVICE = 17
const ERROR_NO_MORE_FILES = 18
const ERROR_WRITE_PROTECT = 19
const ERROR_BAD_UNIT = 20
const ERROR_NOT_READY = 21
const ERROR_BAD_COMMAND = 22
const ERROR_CRC = 23
const ERROR_BAD_LENGTH = 24
const ERROR_SEEK = 25
const ERROR_NOT_DOS_DISK = 26
const ERROR_SECTOR_NOT_FOUND = 27
const ERROR_OUT_OF_PAPER = 28
const ERROR_WRITE_FAULT = 29
const ERROR_READ_FAULT = 30
const ERROR_GEN_FAILURE = 31
const ERROR_SHARING_VIOLATION = 32
const ERROR_LOCK_VIOLATION = 33
const ERROR_WRONG_DISK = 34
const ERROR_SHARING_BUFFER_EXCEEDED = 36
const ERROR_HANDLE_EOF = 38
const ERROR_HANDLE_DISK_FULL = 39
const ERROR_NOT_SUPPORTED = 50
const ERROR_REM_NOT_LIST = 51
const ERROR_DUP_NAME = 52
const ERROR_BAD_NETPATH = 53
const ERROR_NETWORK_BUSY = 54
const ERROR_DEV_NOT_EXIST = 55
const ERROR_TOO_MANY_CMDS = 56
const ERROR_ADAP_HDW_ERR = 57
const ERROR_BAD_NET_RESP = 58
const ERROR_UNEXP_NET_ERR = 59
const ERROR_BAD_REM_ADAP = 60
const ERROR_PRINTQ_FULL = 61
const ERROR_NO_SPOOL_SPACE = 62
const ERROR_PRINT_CANCELLED = 63
const ERROR_NETNAME_DELETED = 64
const ERROR_NETWORK_ACCESS_DENIED = 65
const ERROR_BAD_DEV_TYPE = 66
const ERROR_BAD_NET_NAME = 67
const ERROR_TOO_MANY_NAMES = 68
const ERROR_TOO_MANY_SESS = 69
const ERROR_SHARING_PAUSED = 70
const ERROR_REQ_NOT_ACCEP = 71
const ERROR_REDIR_PAUSED = 72
const ERROR_FILE_EXISTS = 80
const ERROR_CANNOT_MAKE = 82
const ERROR_FAIL_I24 = 83
const ERROR_OUT_OF_STRUCTURES = 84
const ERROR_ALREADY_ASSIGNED = 85
const ERROR_INVALID_PASSWORD = 86
const ERROR_INVALID_PARAMETER = 87
const ERROR_NET_WRITE_FAULT = 88
const ERROR_NO_PROC_SLOTS = 89
const ERROR_TOO_MANY_SEMAPHORES = 100
const ERROR_EXCL_SEM_ALREADY_OWNED = 101
const ERROR_SEM_IS_SET = 102
const ERROR_TOO_MANY_SEM_REQUESTS = 103
const ERROR_INVALID_AT_INTERRUPT_TIME = 104
const ERROR_SEM_OWNER_DIED = 105
const ERROR_SEM_USER_LIMIT = 106
const ERROR_DISK_CHANGE = 107
const ERROR_DRIVE_LOCKED = 108
const ERROR_BROKEN_PIPE = 109
const ERROR_OPEN_FAILED = 110
const ERROR_BUFFER_OVERFLOW = 111
const ERROR_DISK_FULL = 112
const ERROR_NO_MORE_SEARCH_HANDLES = 113
const ERROR_INVALID_TARGET_HANDLE = 114
const ERROR_INVALID_CATEGORY = 117
const ERROR_INVALID_VERIFY_SWITCH = 118
const ERROR_BAD_DRIVER_LEVEL = 119
const ERROR_CALL_NOT_IMPLEMENTED = 120
const ERROR_SEM_TIMEOUT = 121
const ERROR_INSUFFICIENT_BUFFER = 122
const ERROR_INVALID_NAME = 123
const ERROR_INVALID_LEVEL = 124
const ERROR_NO_VOLUME_LABEL = 125
const ERROR_MOD_NOT_FOUND = 126
const ERROR_PROC_NOT_FOUND = 127
const ERROR_WAIT_NO_CHILDREN = 128
const ERROR_CHILD_NOT_COMPLETE = 129
const ERROR_DIRECT_ACCESS_HANDLE = 130
const ERROR_NEGATIVE_SEEK = 131
const ERROR_SEEK_ON_DEVICE = 132
const ERROR_IS_JOIN_TARGET = 133
const ERROR_IS_JOINED = 134
const ERROR_IS_SUBSTED = 135
const ERROR_NOT_JOINED = 136
const ERROR_NOT_SUBSTED = 137
const ERROR_JOIN_TO_JOIN = 138
const ERROR_SUBST_TO_SUBST = 139
const ERROR_JOIN_TO_SUBST = 140
const ERROR_SUBST_TO_JOIN = 141
const ERROR_BUSY_DRIVE = 142
const ERROR_SAME_DRIVE = 143
const ERROR_DIR_NOT_ROOT = 144
const ERROR_DIR_NOT_EMPTY = 145
const ERROR_IS_SUBST_PATH = 146
const ERROR_IS_JOIN_PATH = 147
const ERROR_PATH_BUSY = 148
const ERROR_IS_SUBST_TARGET = 149
const ERROR_SYSTEM_TRACE = 150
const ERROR_INVALID_EVENT_COUNT = 151
const ERROR_TOO_MANY_MUXWAITERS = 152
const ERROR_INVALID_LIST_FORMAT = 153
const ERROR_LABEL_TOO_LONG = 154
const ERROR_TOO_MANY_TCBS = 155
const ERROR_SIGNAL_REFUSED = 156
const ERROR_DISCARDED = 157
const ERROR_NOT_LOCKED = 158
const ERROR_BAD_THREADID_ADDR = 159
const ERROR_BAD_ARGUMENTS = 160
const ERROR_BAD_PATHNAME = 161
const ERROR_SIGNAL_PENDING = 162
const ERROR_MAX_THRDS_REACHED = 164
const ERROR_LOCK_FAILED = 167
const ERROR_BUSY = 170
const ERROR_CANCEL_VIOLATION = 173
const ERROR_ATOMIC_LOCKS_NOT_SUPPORTED = 174
const ERROR_INVALID_SEGMENT_NUMBER = 180
const ERROR_INVALID_ORDINAL = 182
const ERROR_ALREADY_EXISTS = 183
const ERROR_INVALID_FLAG_NUMBER = 186
const ERROR_SEM_NOT_FOUND = 187
const ERROR_INVALID_STARTING_CODESEG = 188
const ERROR_INVALID_STACKSEG = 189
const ERROR_INVALID_MODULETYPE = 190
const ERROR_INVALID_EXE_SIGNATURE = 191
const ERROR_EXE_MARKED_INVALID = 192
const ERROR_BAD_EXE_FORMAT = 193
const ERROR_ITERATED_DATA_EXCEEDS_64k = 194
const ERROR_INVALID_MINALLOCSIZE = 195
const ERROR_DYNLINK_FROM_INVALID_RING = 196
const ERROR_IOPL_NOT_ENABLED = 197
const ERROR_INVALID_SEGDPL = 198
const ERROR_AUTODATASEG_EXCEEDS_64k = 199
const ERROR_RING2SEG_MUST_BE_MOVABLE = 200
const ERROR_RELOC_CHAIN_XEEDS_SEGLIM = 201
const ERROR_INFLOOP_IN_RELOC_CHAIN = 202
const ERROR_ENVVAR_NOT_FOUND = 203
const ERROR_NO_SIGNAL_SENT = 205
const ERROR_FILENAME_EXCED_RANGE = 206
const ERROR_RING2_STACK_IN_USE = 207
const ERROR_META_EXPANSION_TOO_LONG = 208
const ERROR_INVALID_SIGNAL_NUMBER = 209
const ERROR_THREAD_1_INACTIVE = 210
const ERROR_LOCKED = 212
const ERROR_TOO_MANY_MODULES = 214
const ERROR_NESTING_NOT_ALLOWED = 215
const ERROR_EXE_MACHINE_TYPE_MISMATCH = 216
const ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY = 217
const ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY = 218
const ERROR_FILE_CHECKED_OUT = 220
const ERROR_CHECKOUT_REQUIRED = 221
const ERROR_BAD_FILE_TYPE = 222
const ERROR_FILE_TOO_LARGE = 223
const ERROR_FORMS_AUTH_REQUIRED = 224
const ERROR_PIPE_LOCAL = 229
const ERROR_BAD_PIPE = 230
const ERROR_PIPE_BUSY = 231
const ERROR_NO_DATA = 232
const ERROR_PIPE_NOT_CONNECTED = 233
const ERROR_MORE_DATA = 234
const ERROR_VC_DISCONNECTED = 240
const ERROR_INVALID_EA_NAME = 254
const ERROR_EA_LIST_INCONSISTENT = 255
const WAIT_TIMEOUT = 258
const ERROR_NO_MORE_ITEMS = 259
const ERROR_CANNOT_COPY = 266
const ERROR_DIRECTORY = 267
const ERROR_EAS_DIDNT_FIT = 275
const ERROR_EA_FILE_CORRUPT = 276
const ERROR_EA_TABLE_FULL = 277
const ERROR_INVALID_EA_HANDLE = 278
const ERROR_EAS_NOT_SUPPORTED = 282
const ERROR_NOT_OWNER = 288
const ERROR_TOO_MANY_POSTS = 298
const ERROR_PARTIAL_COPY = 299
const ERROR_OPLOCK_NOT_GRANTED = 300
const ERROR_INVALID_OPLOCK_PROTOCOL = 301
const ERROR_DISK_TOO_FRAGMENTED = 302
const ERROR_DELETE_PENDING = 303
const ERROR_MR_MID_NOT_FOUND = 317
const ERROR_SCOPE_NOT_FOUND = 318
const ERROR_INVALID_ADDRESS = 487
const ERROR_ARITHMETIC_OVERFLOW = 534
const ERROR_PIPE_CONNECTED = 535
const ERROR_PIPE_LISTENING = 536
const ERROR_WAKE_SYSTEM = 730
const ERROR_WAIT_1 = 731
const ERROR_WAIT_2 = 732
const ERROR_WAIT_3 = 733
const ERROR_WAIT_63 = 734
const ERROR_ABANDONED_WAIT_0 = 735
const ERROR_ABANDONED_WAIT_63 = 736
const ERROR_USER_APC = 737
const ERROR_KERNEL_APC = 738
const ERROR_ALERTED = 739
const ERROR_EA_ACCESS_DENIED = 994
const ERROR_OPERATION_ABORTED = 995
const ERROR_IO_INCOMPLETE = 996
const ERROR_IO_PENDING = 997
const ERROR_NOACCESS = 998
const ERROR_SWAPERROR = 999
const ERROR_STACK_OVERFLOW = 1001
const ERROR_INVALID_MESSAGE = 1002
const ERROR_CAN_NOT_COMPLETE = 1003
const ERROR_INVALID_FLAGS = 1004
const ERROR_UNRECOGNIZED_VOLUME = 1005
const ERROR_FILE_INVALID = 1006
const ERROR_FULLSCREEN_MODE = 1007
const ERROR_NO_TOKEN = 1008
const ERROR_BADDB = 1009
const ERROR_BADKEY = 1010
const ERROR_CANTOPEN = 1011
const ERROR_CANTREAD = 1012
const ERROR_CANTWRITE = 1013
const ERROR_REGISTRY_RECOVERED = 1014
const ERROR_REGISTRY_CORRUPT = 1015
const ERROR_REGISTRY_IO_FAILED = 1016
const ERROR_NOT_REGISTRY_FILE = 1017
const ERROR_KEY_DELETED = 1018
const ERROR_NO_LOG_SPACE = 1019
const ERROR_KEY_HAS_CHILDREN = 1020
const ERROR_CHILD_MUST_BE_VOLATILE = 1021
const ERROR_NOTIFY_ENUM_DIR = 1022
const ERROR_DEPENDENT_SERVICES_RUNNING = 1051
const ERROR_INVALID_SERVICE_CONTROL = 1052
const ERROR_SERVICE_REQUEST_TIMEOUT = 1053
const ERROR_SERVICE_NO_THREAD = 1054
const ERROR_SERVICE_DATABASE_LOCKED = 1055
const ERROR_SERVICE_ALREADY_RUNNING = 1056
const ERROR_INVALID_SERVICE_ACCOUNT = 1057
const ERROR_SERVICE_DISABLED = 1058
const ERROR_CIRCULAR_DEPENDENCY = 1059
const ERROR_SERVICE_DOES_NOT_EXIST = 1060
const ERROR_SERVICE_CANNOT_ACCEPT_CTRL = 1061
const ERROR_SERVICE_NOT_ACTIVE = 1062
const ERROR_FAILED_SERVICE_CONTROLLER_CONNECT = 1063
const ERROR_EXCEPTION_IN_SERVICE = 1064
const ERROR_DATABASE_DOES_NOT_EXIST = 1065
const ERROR_SERVICE_SPECIFIC_ERROR = 1066
const ERROR_PROCESS_ABORTED = 1067
const ERROR_SERVICE_DEPENDENCY_FAIL = 1068
const ERROR_SERVICE_LOGON_FAILED = 1069
const ERROR_SERVICE_START_HANG = 1070
const ERROR_INVALID_SERVICE_LOCK = 1071
const ERROR_SERVICE_MARKED_FOR_DELETE = 1072
const ERROR_SERVICE_EXISTS = 1073
const ERROR_ALREADY_RUNNING_LKG = 1074
const ERROR_SERVICE_DEPENDENCY_DELETED = 1075
const ERROR_BOOT_ALREADY_ACCEPTED = 1076
const ERROR_SERVICE_NEVER_STARTED = 1077
const ERROR_DUPLICATE_SERVICE_NAME = 1078
const ERROR_DIFFERENT_SERVICE_ACCOUNT = 1079
const ERROR_CANNOT_DETECT_DRIVER_FAILURE = 1080
const ERROR_CANNOT_DETECT_PROCESS_ABORT = 1081
const ERROR_NO_RECOVERY_PROGRAM = 1082
const ERROR_SERVICE_NOT_IN_EXE = 1083
const ERROR_NOT_SAFEBOOT_SERVICE = 1084
const ERROR_END_OF_MEDIA = 1100
const ERROR_FILEMARK_DETECTED = 1101
const ERROR_BEGINNING_OF_MEDIA = 1102
const ERROR_SETMARK_DETECTED = 1103
const ERROR_NO_DATA_DETECTED = 1104
const ERROR_PARTITION_FAILURE = 1105
const ERROR_INVALID_BLOCK_LENGTH = 1106
const ERROR_DEVICE_NOT_PARTITIONED = 1107
const ERROR_UNABLE_TO_LOCK_MEDIA = 1108
const ERROR_UNABLE_TO_UNLOAD_MEDIA = 1109
const ERROR_MEDIA_CHANGED = 1110
const ERROR_BUS_RESET = 1111
const ERROR_NO_MEDIA_IN_DRIVE = 1112
const ERROR_NO_UNICODE_TRANSLATION = 1113
const ERROR_DLL_INIT_FAILED = 1114
const ERROR_SHUTDOWN_IN_PROGRESS = 1115
const ERROR_NO_SHUTDOWN_IN_PROGRESS = 1116
const ERROR_IO_DEVICE = 1117
const ERROR_SERIAL_NO_DEVICE = 1118
const ERROR_IRQ_BUSY = 1119
const ERROR_MORE_WRITES = 1120
const ERROR_COUNTER_TIMEOUT = 1121
const ERROR_FLOPPY_ID_MARK_NOT_FOUND = 1122
const ERROR_FLOPPY_WRONG_CYLINDER = 1123
const ERROR_FLOPPY_UNKNOWN_ERROR = 1124
const ERROR_FLOPPY_BAD_REGISTERS = 1125
const ERROR_DISK_RECALIBRATE_FAILED = 1126
const ERROR_DISK_OPERATION_FAILED = 1127
const ERROR_DISK_RESET_FAILED = 1128
const ERROR_EOM_OVERFLOW = 1129
const ERROR_NOT_ENOUGH_SERVER_MEMORY = 1130
const ERROR_POSSIBLE_DEADLOCK = 1131
const ERROR_MAPPED_ALIGNMENT = 1132
const ERROR_SET_POWER_STATE_VETOED = 1140
const ERROR_SET_POWER_STATE_FAILED = 1141
const ERROR_TOO_MANY_LINKS = 1142
const ERROR_OLD_WIN_VERSION = 1150
const ERROR_APP_WRONG_OS = 1151
const ERROR_SINGLE_INSTANCE_APP = 1152
const ERROR_RMODE_APP = 1153
const ERROR_INVALID_DLL = 1154
const ERROR_NO_ASSOCIATION = 1155
const ERROR_DDE_FAIL = 1156
const ERROR_DLL_NOT_FOUND = 1157
const ERROR_NO_MORE_USER_HANDLES = 1158
const ERROR_MESSAGE_SYNC_ONLY = 1159
const ERROR_SOURCE_ELEMENT_EMPTY = 1160
const ERROR_DESTINATION_ELEMENT_FULL = 1161
const ERROR_ILLEGAL_ELEMENT_ADDRESS = 1162
const ERROR_MAGAZINE_NOT_PRESENT = 1163
const ERROR_DEVICE_REINITIALIZATION_NEEDED = 1164
const ERROR_DEVICE_REQUIRES_CLEANING = 1165
const ERROR_DEVICE_DOOR_OPEN = 1166
const ERROR_DEVICE_NOT_CONNECTED = 1167
const ERROR_NOT_FOUND = 1168
const ERROR_NO_MATCH = 1169
const ERROR_SET_NOT_FOUND = 1170
const ERROR_POINT_NOT_FOUND = 1171
const ERROR_NO_TRACKING_SERVICE = 1172
const ERROR_NO_VOLUME_ID = 1173
const ERROR_UNABLE_TO_REMOVE_REPLACED = 1175
const ERROR_UNABLE_TO_MOVE_REPLACEMENT = 1176
const ERROR_UNABLE_TO_MOVE_REPLACEMENT_2 = 1177
const ERROR_JOURNAL_DELETE_IN_PROGRESS = 1178
const ERROR_JOURNAL_NOT_ACTIVE = 1179
const ERROR_POTENTIAL_FILE_FOUND = 1180
const ERROR_JOURNAL_ENTRY_DELETED = 1181
const ERROR_BAD_DEVICE = 1200
const ERROR_CONNECTION_UNAVAIL = 1201
const ERROR_DEVICE_ALREADY_REMEMBERED = 1202
const ERROR_NO_NET_OR_BAD_PATH = 1203
const ERROR_BAD_PROVIDER = 1204
const ERROR_CANNOT_OPEN_PROFILE = 1205
const ERROR_BAD_PROFILE = 1206
const ERROR_NOT_CONTAINER = 1207
const ERROR_EXTENDED_ERROR = 1208
const ERROR_INVALID_GROUPNAME = 1209
const ERROR_INVALID_COMPUTERNAME = 1210
const ERROR_INVALID_EVENTNAME = 1211
const ERROR_INVALID_DOMAINNAME = 1212
const ERROR_INVALID_SERVICENAME = 1213
const ERROR_INVALID_NETNAME = 1214
const ERROR_INVALID_SHARENAME = 1215
const ERROR_INVALID_PASSWORDNAME = 1216
const ERROR_INVALID_MESSAGENAME = 1217
const ERROR_INVALID_MESSAGEDEST = 1218
const ERROR_SESSION_CREDENTIAL_CONFLICT = 1219
const ERROR_REMOTE_SESSION_LIMIT_EXCEEDED = 1220
const ERROR_DUP_DOMAINNAME = 1221
const ERROR_NO_NETWORK = 1222
const ERROR_CANCELLED = 1223
const ERROR_USER_MAPPED_FILE = 1224
const ERROR_CONNECTION_REFUSED = 1225
const ERROR_GRACEFUL_DISCONNECT = 1226
const ERROR_ADDRESS_ALREADY_ASSOCIATED = 1227
const ERROR_ADDRESS_NOT_ASSOCIATED = 1228
const ERROR_CONNECTION_INVALID = 1229
const ERROR_CONNECTION_ACTIVE = 1230
const ERROR_NETWORK_UNREACHABLE = 1231
const ERROR_HOST_UNREACHABLE = 1232
const ERROR_PROTOCOL_UNREACHABLE = 1233
const ERROR_PORT_UNREACHABLE = 1234
const ERROR_REQUEST_ABORTED = 1235
const ERROR_CONNECTION_ABORTED = 1236
const ERROR_RETRY = 1237
const ERROR_CONNECTION_COUNT_LIMIT = 1238
const ERROR_LOGIN_TIME_RESTRICTION = 1239
const ERROR_LOGIN_WKSTA_RESTRICTION = 1240
const ERROR_INCORRECT_ADDRESS = 1241
const ERROR_ALREADY_REGISTERED = 1242
const ERROR_SERVICE_NOT_FOUND = 1243
const ERROR_NOT_AUTHENTICATED = 1244
const ERROR_NOT_LOGGED_ON = 1245
const ERROR_CONTINUE = 1246
const ERROR_ALREADY_INITIALIZED = 1247
const ERROR_NO_MORE_DEVICES = 1248
const ERROR_NO_SUCH_SITE = 1249
const ERROR_DOMAIN_CONTROLLER_EXISTS = 1250
const ERROR_ONLY_IF_CONNECTED = 1251
const ERROR_OVERRIDE_NOCHANGES = 1252
const ERROR_BAD_USER_PROFILE = 1253
const ERROR_NOT_SUPPORTED_ON_SBS = 1254
const ERROR_SERVER_SHUTDOWN_IN_PROGRESS = 1255
const ERROR_HOST_DOWN = 1256
const ERROR_NON_ACCOUNT_SID = 1257
const ERROR_NON_DOMAIN_SID = 1258
const ERROR_APPHELP_BLOCK = 1259
const ERROR_ACCESS_DISABLED_BY_POLICY = 1260
const ERROR_REG_NAT_CONSUMPTION = 1261
const ERROR_CSCSHARE_OFFLINE = 1262
const ERROR_PKINIT_FAILURE = 1263
const ERROR_SMARTCARD_SUBSYSTEM_FAILURE = 1264
const ERROR_DOWNGRADE_DETECTED = 1265
const ERROR_MACHINE_LOCKED = 1271
const ERROR_CALLBACK_SUPPLIED_INVALID_DATA = 1273
const ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED = 1274
const ERROR_DRIVER_BLOCKED = 1275
const ERROR_INVALID_IMPORT_OF_NON_DLL = 1276
const ERROR_ACCESS_DISABLED_WEBBLADE = 1277
const ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER = 1278
const ERROR_RECOVERY_FAILURE = 1279
const ERROR_ALREADY_FIBER = 1280
const ERROR_ALREADY_THREAD = 1281
const ERROR_STACK_BUFFER_OVERRUN = 1282
const ERROR_PARAMETER_QUOTA_EXCEEDED = 1283
const ERROR_DEBUGGER_INACTIVE = 1284
const ERROR_DELAY_LOAD_FAILED = 1285
const ERROR_VDM_DISALLOWED = 1286
const ERROR_UNIDENTIFIED_ERROR = 1287
const ERROR_NOT_ALL_ASSIGNED = 1300
const ERROR_SOME_NOT_MAPPED = 1301
const ERROR_NO_QUOTAS_FOR_ACCOUNT = 1302
const ERROR_LOCAL_USER_SESSION_KEY = 1303
const ERROR_NULL_LM_PASSWORD = 1304
const ERROR_UNKNOWN_REVISION = 1305
const ERROR_REVISION_MISMATCH = 1306
const ERROR_INVALID_OWNER = 1307
const ERROR_INVALID_PRIMARY_GROUP = 1308
const ERROR_NO_IMPERSONATION_TOKEN = 1309
const ERROR_CANT_DISABLE_MANDATORY = 1310
const ERROR_NO_LOGON_SERVERS = 1311
const ERROR_NO_SUCH_LOGON_SESSION = 1312
const ERROR_NO_SUCH_PRIVILEGE = 1313
const ERROR_PRIVILEGE_NOT_HELD = 1314
const ERROR_INVALID_ACCOUNT_NAME = 1315
const ERROR_USER_EXISTS = 1316
const ERROR_NO_SUCH_USER = 1317
const ERROR_GROUP_EXISTS = 1318
const ERROR_NO_SUCH_GROUP = 1319
const ERROR_MEMBER_IN_GROUP = 1320
const ERROR_MEMBER_NOT_IN_GROUP = 1321
const ERROR_LAST_ADMIN = 1322
const ERROR_WRONG_PASSWORD = 1323
const ERROR_ILL_FORMED_PASSWORD = 1324
const ERROR_PASSWORD_RESTRICTION = 1325
const ERROR_LOGON_FAILURE = 1326
const ERROR_ACCOUNT_RESTRICTION = 1327
const ERROR_INVALID_LOGON_HOURS = 1328
const ERROR_INVALID_WORKSTATION = 1329
const ERROR_PASSWORD_EXPIRED = 1330
const ERROR_ACCOUNT_DISABLED = 1331
const ERROR_NONE_MAPPED = 1332
const ERROR_TOO_MANY_LUIDS_REQUESTED = 1333
const ERROR_LUIDS_EXHAUSTED = 1334
const ERROR_INVALID_SUB_AUTHORITY = 1335
const ERROR_INVALID_ACL = 1336
const ERROR_INVALID_SID = 1337
const ERROR_INVALID_SECURITY_DESCR = 1338
const ERROR_BAD_INHERITANCE_ACL = 1340
const ERROR_SERVER_DISABLED = 1341
const ERROR_SERVER_NOT_DISABLED = 1342
const ERROR_INVALID_ID_AUTHORITY = 1343
const ERROR_ALLOTTED_SPACE_EXCEEDED = 1344
const ERROR_INVALID_GROUP_ATTRIBUTES = 1345
const ERROR_BAD_IMPERSONATION_LEVEL = 1346
const ERROR_CANT_OPEN_ANONYMOUS = 1347
const ERROR_BAD_VALIDATION_CLASS = 1348
const ERROR_BAD_TOKEN_TYPE = 1349
const ERROR_NO_SECURITY_ON_OBJECT = 1350
const ERROR_CANT_ACCESS_DOMAIN_INFO = 1351
const ERROR_INVALID_SERVER_STATE = 1352
const ERROR_INVALID_DOMAIN_STATE = 1353
const ERROR_INVALID_DOMAIN_ROLE = 1354
const ERROR_NO_SUCH_DOMAIN = 1355
const ERROR_DOMAIN_EXISTS = 1356
const ERROR_DOMAIN_LIMIT_EXCEEDED = 1357
const ERROR_INTERNAL_DB_CORRUPTION = 1358
const ERROR_INTERNAL_ERROR = 1359
const ERROR_GENERIC_NOT_MAPPED = 1360
const ERROR_BAD_DESCRIPTOR_FORMAT = 1361
const ERROR_NOT_LOGON_PROCESS = 1362
const ERROR_LOGON_SESSION_EXISTS = 1363
const ERROR_NO_SUCH_PACKAGE = 1364
const ERROR_BAD_LOGON_SESSION_STATE = 1365
const ERROR_LOGON_SESSION_COLLISION = 1366
const ERROR_INVALID_LOGON_TYPE = 1367
const ERROR_CANNOT_IMPERSONATE = 1368
const ERROR_RXACT_INVALID_STATE = 1369
const ERROR_RXACT_COMMIT_FAILURE = 1370
const ERROR_SPECIAL_ACCOUNT = 1371
const ERROR_SPECIAL_GROUP = 1372
const ERROR_SPECIAL_USER = 1373
const ERROR_MEMBERS_PRIMARY_GROUP = 1374
const ERROR_TOKEN_ALREADY_IN_USE = 1375
const ERROR_NO_SUCH_ALIAS = 1376
const ERROR_MEMBER_NOT_IN_ALIAS = 1377
const ERROR_MEMBER_IN_ALIAS = 1378
const ERROR_ALIAS_EXISTS = 1379
const ERROR_LOGON_NOT_GRANTED = 1380
const ERROR_TOO_MANY_SECRETS = 1381
const ERROR_SECRET_TOO_LONG = 1382
const ERROR_INTERNAL_DB_ERROR = 1383
const ERROR_TOO_MANY_CONTEXT_IDS = 1384
const ERROR_LOGON_TYPE_NOT_GRANTED = 1385
const ERROR_NT_CROSS_ENCRYPTION_REQUIRED = 1386
const ERROR_NO_SUCH_MEMBER = 1387
const ERROR_INVALID_MEMBER = 1388
const ERROR_TOO_MANY_SIDS = 1389
const ERROR_LM_CROSS_ENCRYPTION_REQUIRED = 1390
const ERROR_NO_INHERITANCE = 1391
const ERROR_FILE_CORRUPT = 1392
const ERROR_DISK_CORRUPT = 1393
const ERROR_NO_USER_SESSION_KEY = 1394
const ERROR_LICENSE_QUOTA_EXCEEDED = 1395
const ERROR_WRONG_TARGET_NAME = 1396
const ERROR_MUTUAL_AUTH_FAILED = 1397
const ERROR_TIME_SKEW = 1398
const ERROR_CURRENT_DOMAIN_NOT_ALLOWED = 1399
const ERROR_INVALID_WINDOW_HANDLE = 1400
const ERROR_INVALID_MENU_HANDLE = 1401
const ERROR_INVALID_CURSOR_HANDLE = 1402
const ERROR_INVALID_ACCEL_HANDLE = 1403
const ERROR_INVALID_HOOK_HANDLE = 1404
const ERROR_INVALID_DWP_HANDLE = 1405
const ERROR_TLW_WITH_WSCHILD = 1406
const ERROR_CANNOT_FIND_WND_CLASS = 1407
const ERROR_WINDOW_OF_OTHER_THREAD = 1408
const ERROR_HOTKEY_ALREADY_REGISTERED = 1409
const ERROR_CLASS_ALREADY_EXISTS = 1410
const ERROR_CLASS_DOES_NOT_EXIST = 1411
const ERROR_CLASS_HAS_WINDOWS = 1412
const ERROR_INVALID_INDEX = 1413
const ERROR_INVALID_ICON_HANDLE = 1414
const ERROR_PRIVATE_DIALOG_INDEX = 1415
const ERROR_LISTBOX_ID_NOT_FOUND = 1416
const ERROR_NO_WILDCARD_CHARACTERS = 1417
const ERROR_CLIPBOARD_NOT_OPEN = 1418
const ERROR_HOTKEY_NOT_REGISTERED = 1419
const ERROR_WINDOW_NOT_DIALOG = 1420
const ERROR_CONTROL_ID_NOT_FOUND = 1421
const ERROR_INVALID_COMBOBOX_MESSAGE = 1422
const ERROR_WINDOW_NOT_COMBOBOX = 1423
const ERROR_INVALID_EDIT_HEIGHT = 1424
const ERROR_DC_NOT_FOUND = 1425
const ERROR_INVALID_HOOK_FILTER = 1426
const ERROR_INVALID_FILTER_PROC = 1427
const ERROR_HOOK_NEEDS_HMOD = 1428
const ERROR_GLOBAL_ONLY_HOOK = 1429
const ERROR_JOURNAL_HOOK_SET = 1430
const ERROR_HOOK_NOT_INSTALLED = 1431
const ERROR_INVALID_LB_MESSAGE = 1432
const ERROR_SETCOUNT_ON_BAD_LB = 1433
const ERROR_LB_WITHOUT_TABSTOPS = 1434
const ERROR_DESTROY_OBJECT_OF_OTHER_THREAD = 1435
const ERROR_CHILD_WINDOW_MENU = 1436
const ERROR_NO_SYSTEM_MENU = 1437
const ERROR_INVALID_MSGBOX_STYLE = 1438
const ERROR_INVALID_SPI_VALUE = 1439
const ERROR_SCREEN_ALREADY_LOCKED = 1440
const ERROR_HWNDS_HAVE_DIFF_PARENT = 1441
const ERROR_NOT_CHILD_WINDOW = 1442
const ERROR_INVALID_GW_COMMAND = 1443
const ERROR_INVALID_THREAD_ID = 1444
const ERROR_NON_MDICHILD_WINDOW = 1445
const ERROR_POPUP_ALREADY_ACTIVE = 1446
const ERROR_NO_SCROLLBARS = 1447
const ERROR_INVALID_SCROLLBAR_RANGE = 1448
const ERROR_INVALID_SHOWWIN_COMMAND = 1449
const ERROR_NO_SYSTEM_RESOURCES = 1450
const ERROR_NONPAGED_SYSTEM_RESOURCES = 1451
const ERROR_PAGED_SYSTEM_RESOURCES = 1452
const ERROR_WORKING_SET_QUOTA = 1453
const ERROR_PAGEFILE_QUOTA = 1454
const ERROR_COMMITMENT_LIMIT = 1455
const ERROR_MENU_ITEM_NOT_FOUND = 1456
const ERROR_INVALID_KEYBOARD_HANDLE = 1457
const ERROR_HOOK_TYPE_NOT_ALLOWED = 1458
const ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION = 1459
const ERROR_TIMEOUT = 1460
const ERROR_INVALID_MONITOR_HANDLE = 1461
const ERROR_INCORRECT_SIZE = 1462
const ERROR_EVENTLOG_FILE_CORRUPT = 1500
const ERROR_EVENTLOG_CANT_START = 1501
const ERROR_LOG_FILE_FULL = 1502
const ERROR_EVENTLOG_FILE_CHANGED = 1503
const ERROR_INSTALL_SERVICE_FAILURE = 1601
const ERROR_INSTALL_USEREXIT = 1602
const ERROR_INSTALL_FAILURE = 1603
const ERROR_INSTALL_SUSPEND = 1604
const ERROR_UNKNOWN_PRODUCT = 1605
const ERROR_UNKNOWN_FEATURE = 1606
const ERROR_UNKNOWN_COMPONENT = 1607
const ERROR_UNKNOWN_PROPERTY = 1608
const ERROR_INVALID_HANDLE_STATE = 1609
const ERROR_BAD_CONFIGURATION = 1610
const ERROR_INDEX_ABSENT = 1611
const ERROR_INSTALL_SOURCE_ABSENT = 1612
const ERROR_INSTALL_PACKAGE_VERSION = 1613
const ERROR_PRODUCT_UNINSTALLED = 1614
const ERROR_BAD_QUERY_SYNTAX = 1615
const ERROR_INVALID_FIELD = 1616
const ERROR_DEVICE_REMOVED = 1617
const ERROR_INSTALL_ALREADY_RUNNING = 1618
const ERROR_INSTALL_PACKAGE_OPEN_FAILED = 1619
const ERROR_INSTALL_PACKAGE_INVALID = 1620
const ERROR_INSTALL_UI_FAILURE = 1621
const ERROR_INSTALL_LOG_FAILURE = 1622
const ERROR_INSTALL_LANGUAGE_UNSUPPORTED = 1623
const ERROR_INSTALL_TRANSFORM_FAILURE = 1624
const ERROR_INSTALL_PACKAGE_REJECTED = 1625
const ERROR_FUNCTION_NOT_CALLED = 1626
const ERROR_FUNCTION_FAILED = 1627
const ERROR_INVALID_TABLE = 1628
const ERROR_DATATYPE_MISMATCH = 1629
const ERROR_UNSUPPORTED_TYPE = 1630
const ERROR_CREATE_FAILED = 1631
const ERROR_INSTALL_TEMP_UNWRITABLE = 1632
const ERROR_INSTALL_PLATFORM_UNSUPPORTED = 1633
const ERROR_INSTALL_NOTUSED = 1634
const ERROR_PATCH_PACKAGE_OPEN_FAILED = 1635
const ERROR_PATCH_PACKAGE_INVALID = 1636
const ERROR_PATCH_PACKAGE_UNSUPPORTED = 1637
const ERROR_PRODUCT_VERSION = 1638
const ERROR_INVALID_COMMAND_LINE = 1639
const ERROR_INSTALL_REMOTE_DISALLOWED = 1640
const ERROR_SUCCESS_REBOOT_INITIATED = 1641
const ERROR_PATCH_TARGET_NOT_FOUND = 1642
const ERROR_PATCH_PACKAGE_REJECTED = 1643
const ERROR_INSTALL_TRANSFORM_REJECTED = 1644
const ERROR_INSTALL_REMOTE_PROHIBITED = 1645
const RPC_S_INVALID_STRING_BINDING = 1700
const RPC_S_WRONG_KIND_OF_BINDING = 1701
const RPC_S_INVALID_BINDING = 1702
const RPC_S_PROTSEQ_NOT_SUPPORTED = 1703
const RPC_S_INVALID_RPC_PROTSEQ = 1704
const RPC_S_INVALID_STRING_UUID = 1705
const RPC_S_INVALID_ENDPOINT_FORMAT = 1706
const RPC_S_INVALID_NET_ADDR = 1707
const RPC_S_NO_ENDPOINT_FOUND = 1708
const RPC_S_INVALID_TIMEOUT = 1709
const RPC_S_OBJECT_NOT_FOUND = 1710
const RPC_S_ALREADY_REGISTERED = 1711
const RPC_S_TYPE_ALREADY_REGISTERED = 1712
const RPC_S_ALREADY_LISTENING = 1713
const RPC_S_NO_PROTSEQS_REGISTERED = 1714
const RPC_S_NOT_LISTENING = 1715
const RPC_S_UNKNOWN_MGR_TYPE = 1716
const RPC_S_UNKNOWN_IF = 1717
const RPC_S_NO_BINDINGS = 1718
const RPC_S_NO_PROTSEQS = 1719
const RPC_S_CANT_CREATE_ENDPOINT = 1720
const RPC_S_OUT_OF_RESOURCES = 1721
const RPC_S_SERVER_UNAVAILABLE = 1722
const RPC_S_SERVER_TOO_BUSY = 1723
const RPC_S_INVALID_NETWORK_OPTIONS = 1724
const RPC_S_NO_CALL_ACTIVE = 1725
const RPC_S_CALL_FAILED = 1726
const RPC_S_CALL_FAILED_DNE = 1727
const RPC_S_PROTOCOL_ERROR = 1728
const RPC_S_UNSUPPORTED_TRANS_SYN = 1730
const RPC_S_UNSUPPORTED_TYPE = 1732
const RPC_S_INVALID_TAG = 1733
const RPC_S_INVALID_BOUND = 1734
const RPC_S_NO_ENTRY_NAME = 1735
const RPC_S_INVALID_NAME_SYNTAX = 1736
const RPC_S_UNSUPPORTED_NAME_SYNTAX = 1737
const RPC_S_UUID_NO_ADDRESS = 1739
const RPC_S_DUPLICATE_ENDPOINT = 1740
const RPC_S_UNKNOWN_AUTHN_TYPE = 1741
const RPC_S_MAX_CALLS_TOO_SMALL = 1742
const RPC_S_STRING_TOO_LONG = 1743
const RPC_S_PROTSEQ_NOT_FOUND = 1744
const RPC_S_PROCNUM_OUT_OF_RANGE = 1745
const RPC_S_BINDING_HAS_NO_AUTH = 1746
const RPC_S_UNKNOWN_AUTHN_SERVICE = 1747
const RPC_S_UNKNOWN_AUTHN_LEVEL = 1748
const RPC_S_INVALID_AUTH_IDENTITY = 1749
const RPC_S_UNKNOWN_AUTHZ_SERVICE = 1750
const EPT_S_INVALID_ENTRY = 1751
const EPT_S_CANT_PERFORM_OP = 1752
const EPT_S_NOT_REGISTERED = 1753
const RPC_S_NOTHING_TO_EXPORT = 1754
const RPC_S_INCOMPLETE_NAME = 1755
const RPC_S_INVALID_VERS_OPTION = 1756
const RPC_S_NO_MORE_MEMBERS = 1757
const RPC_S_NOT_ALL_OBJS_UNEXPORTED = 1758
const RPC_S_INTERFACE_NOT_FOUND = 1759
const RPC_S_ENTRY_ALREADY_EXISTS = 1760
const RPC_S_ENTRY_NOT_FOUND = 1761
const RPC_S_NAME_SERVICE_UNAVAILABLE = 1762
const RPC_S_INVALID_NAF_ID = 1763
const RPC_S_CANNOT_SUPPORT = 1764
const RPC_S_NO_CONTEXT_AVAILABLE = 1765
const RPC_S_INTERNAL_ERROR = 1766
const RPC_S_ZERO_DIVIDE = 1767
const RPC_S_ADDRESS_ERROR = 1768
const RPC_S_FP_DIV_ZERO = 1769
const RPC_S_FP_UNDERFLOW = 1770
const RPC_S_FP_OVERFLOW = 1771
const RPC_X_NO_MORE_ENTRIES = 1772
const RPC_X_SS_CHAR_TRANS_OPEN_FAIL = 1773
const RPC_X_SS_CHAR_TRANS_SHORT_FILE = 1774
const RPC_X_SS_IN_NULL_CONTEXT = 1775
const RPC_X_SS_CONTEXT_DAMAGED = 1777
const RPC_X_SS_HANDLES_MISMATCH = 1778
const RPC_X_SS_CANNOT_GET_CALL_HANDLE = 1779
const RPC_X_NULL_REF_POINTER = 1780
const RPC_X_ENUM_VALUE_OUT_OF_RANGE = 1781
const RPC_X_BYTE_COUNT_TOO_SMALL = 1782
const RPC_X_BAD_STUB_DATA = 1783
const ERROR_INVALID_USER_BUFFER = 1784
const ERROR_UNRECOGNIZED_MEDIA = 1785
const ERROR_NO_TRUST_LSA_SECRET = 1786
const ERROR_NO_TRUST_SAM_ACCOUNT = 1787
const ERROR_TRUSTED_DOMAIN_FAILURE = 1788
const ERROR_TRUSTED_RELATIONSHIP_FAILURE = 1789
const ERROR_TRUST_FAILURE = 1790
const RPC_S_CALL_IN_PROGRESS = 1791
const ERROR_NETLOGON_NOT_STARTED = 1792
const ERROR_ACCOUNT_EXPIRED = 1793
const ERROR_REDIRECTOR_HAS_OPEN_HANDLES = 1794
const ERROR_PRINTER_DRIVER_ALREADY_INSTALLED = 1795
const ERROR_UNKNOWN_PORT = 1796
const ERROR_UNKNOWN_PRINTER_DRIVER = 1797
const ERROR_UNKNOWN_PRINTPROCESSOR = 1798
const ERROR_INVALID_SEPARATOR_FILE = 1799
const ERROR_INVALID_PRIORITY = 1800
const ERROR_INVALID_PRINTER_NAME = 1801
const ERROR_PRINTER_ALREADY_EXISTS = 1802
const ERROR_INVALID_PRINTER_COMMAND = 1803
const ERROR_INVALID_DATATYPE = 1804
const ERROR_INVALID_ENVIRONMENT = 1805
const RPC_S_NO_MORE_BINDINGS = 1806
const ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT = 1807
const ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT = 1808
const ERROR_NOLOGON_SERVER_TRUST_ACCOUNT = 1809
const ERROR_DOMAIN_TRUST_INCONSISTENT = 1810
const ERROR_SERVER_HAS_OPEN_HANDLES = 1811
const ERROR_RESOURCE_DATA_NOT_FOUND = 1812
const ERROR_RESOURCE_TYPE_NOT_FOUND = 1813
const ERROR_RESOURCE_NAME_NOT_FOUND = 1814
const ERROR_RESOURCE_LANG_NOT_FOUND = 1815
const ERROR_NOT_ENOUGH_QUOTA = 1816
const RPC_S_NO_INTERFACES = 1817
const RPC_S_CALL_CANCELLED = 1818
const RPC_S_BINDING_INCOMPLETE = 1819
const RPC_S_COMM_FAILURE = 1820
const RPC_S_UNSUPPORTED_AUTHN_LEVEL = 1821
const RPC_S_NO_PRINC_NAME = 1822
const RPC_S_NOT_RPC_ERROR = 1823
const RPC_S_UUID_LOCAL_ONLY = 1824
const RPC_S_SEC_PKG_ERROR = 1825
const RPC_S_NOT_CANCELLED = 1826
const RPC_X_INVALID_ES_ACTION = 1827
const RPC_X_WRONG_ES_VERSION = 1828
const RPC_X_WRONG_STUB_VERSION = 1829
const RPC_X_INVALID_PIPE_OBJECT = 1830
const RPC_X_WRONG_PIPE_ORDER = 1831
const RPC_X_WRONG_PIPE_VERSION = 1832
const RPC_S_GROUP_MEMBER_NOT_FOUND = 1898
const EPT_S_CANT_CREATE = 1899
const RPC_S_INVALID_OBJECT = 1900
const ERROR_INVALID_TIME = 1901
const ERROR_INVALID_FORM_NAME = 1902
const ERROR_INVALID_FORM_SIZE = 1903
const ERROR_ALREADY_WAITING = 1904
const ERROR_PRINTER_DELETED = 1905
const ERROR_INVALID_PRINTER_STATE = 1906
const ERROR_PASSWORD_MUST_CHANGE = 1907
const ERROR_DOMAIN_CONTROLLER_NOT_FOUND = 1908
const ERROR_ACCOUNT_LOCKED_OUT = 1909
const OR_INVALID_OXID = 1910
const OR_INVALID_OID = 1911
const OR_INVALID_SET = 1912
const RPC_S_SEND_INCOMPLETE = 1913
const RPC_S_INVALID_ASYNC_HANDLE = 1914
const RPC_S_INVALID_ASYNC_CALL = 1915
const RPC_X_PIPE_CLOSED = 1916
const RPC_X_PIPE_DISCIPLINE_ERROR = 1917
const RPC_X_PIPE_EMPTY = 1918
const ERROR_NO_SITENAME = 1919
const ERROR_CANT_ACCESS_FILE = 1920
const ERROR_CANT_RESOLVE_FILENAME = 1921
const RPC_S_ENTRY_TYPE_MISMATCH = 1922
const RPC_S_NOT_ALL_OBJS_EXPORTED = 1923
const RPC_S_INTERFACE_NOT_EXPORTED = 1924
const RPC_S_PROFILE_NOT_ADDED = 1925
const RPC_S_PRF_ELT_NOT_ADDED = 1926
const RPC_S_PRF_ELT_NOT_REMOVED = 1927
const RPC_S_GRP_ELT_NOT_ADDED = 1928
const RPC_S_GRP_ELT_NOT_REMOVED = 1929
const ERROR_KM_DRIVER_BLOCKED = 1930
const ERROR_CONTEXT_EXPIRED = 1931
const ERROR_PER_USER_TRUST_QUOTA_EXCEEDED = 1932
const ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED = 1933
const ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED = 1934
const ERROR_AUTHENTICATION_FIREWALL_FAILED = 1935
const ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED = 1936
const ERROR_INVALID_PIXEL_FORMAT = 2000
const ERROR_BAD_DRIVER = 2001
const ERROR_INVALID_WINDOW_STYLE = 2002
const ERROR_METAFILE_NOT_SUPPORTED = 2003
const ERROR_TRANSFORM_NOT_SUPPORTED = 2004
const ERROR_CLIPPING_NOT_SUPPORTED = 2005
const ERROR_INVALID_CMM = 2010
const ERROR_INVALID_PROFILE = 2011
const ERROR_TAG_NOT_FOUND = 2012
const ERROR_TAG_NOT_PRESENT = 2013
const ERROR_DUPLICATE_TAG = 2014
const ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE = 2015
const ERROR_PROFILE_NOT_FOUND = 2016
const ERROR_INVALID_COLORSPACE = 2017
const ERROR_ICM_NOT_ENABLED = 2018
const ERROR_DELETING_ICM_XFORM = 2019
const ERROR_INVALID_TRANSFORM = 2020
const ERROR_COLORSPACE_MISMATCH = 2021
const ERROR_INVALID_COLORINDEX = 2022
const ERROR_CONNECTED_OTHER_PASSWORD = 2108
const ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT = 2109
const ERROR_BAD_USERNAME = 2202
const ERROR_NOT_CONNECTED = 2250
const ERROR_OPEN_FILES = 2401
const ERROR_ACTIVE_CONNECTIONS = 2402
const ERROR_DEVICE_IN_USE = 2404
const ERROR_UNKNOWN_PRINT_MONITOR = 3000
const ERROR_PRINTER_DRIVER_IN_USE = 3001
const ERROR_SPOOL_FILE_NOT_FOUND = 3002
const ERROR_SPL_NO_STARTDOC = 3003
const ERROR_SPL_NO_ADDJOB = 3004
const ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED = 3005
const ERROR_PRINT_MONITOR_ALREADY_INSTALLED = 3006
const ERROR_INVALID_PRINT_MONITOR = 3007
const ERROR_PRINT_MONITOR_IN_USE = 3008
const ERROR_PRINTER_HAS_JOBS_QUEUED = 3009
const ERROR_SUCCESS_REBOOT_REQUIRED = 3010
const ERROR_SUCCESS_RESTART_REQUIRED = 3011
const ERROR_PRINTER_NOT_FOUND = 3012
const ERROR_PRINTER_DRIVER_WARNED = 3013
const ERROR_PRINTER_DRIVER_BLOCKED = 3014
const ERROR_WINS_INTERNAL = 4000
const ERROR_CAN_NOT_DEL_LOCAL_WINS = 4001
const ERROR_STATIC_INIT = 4002
const ERROR_INC_BACKUP = 4003
const ERROR_FULL_BACKUP = 4004
const ERROR_REC_NON_EXISTENT = 4005
const ERROR_RPL_NOT_ALLOWED = 4006
const ERROR_DHCP_ADDRESS_CONFLICT = 4100
const ERROR_WMI_GUID_NOT_FOUND = 4200
const ERROR_WMI_INSTANCE_NOT_FOUND = 4201
const ERROR_WMI_ITEMID_NOT_FOUND = 4202
const ERROR_WMI_TRY_AGAIN = 4203
const ERROR_WMI_DP_NOT_FOUND = 4204
const ERROR_WMI_UNRESOLVED_INSTANCE_REF = 4205
const ERROR_WMI_ALREADY_ENABLED = 4206
const ERROR_WMI_GUID_DISCONNECTED = 4207
const ERROR_WMI_SERVER_UNAVAILABLE = 4208
const ERROR_WMI_DP_FAILED = 4209
const ERROR_WMI_INVALID_MOF = 4210
const ERROR_WMI_INVALID_REGINFO = 4211
const ERROR_WMI_ALREADY_DISABLED = 4212
const ERROR_WMI_READ_ONLY = 4213
const ERROR_WMI_SET_FAILURE = 4214
const ERROR_INVALID_MEDIA = 4300
const ERROR_INVALID_LIBRARY = 4301
const ERROR_INVALID_MEDIA_POOL = 4302
const ERROR_DRIVE_MEDIA_MISMATCH = 4303
const ERROR_MEDIA_OFFLINE = 4304
const ERROR_LIBRARY_OFFLINE = 4305
const ERROR_EMPTY = 4306
const ERROR_NOT_EMPTY = 4307
const ERROR_MEDIA_UNAVAILABLE = 4308
const ERROR_RESOURCE_DISABLED = 4309
const ERROR_INVALID_CLEANER = 4310
const ERROR_UNABLE_TO_CLEAN = 4311
const ERROR_OBJECT_NOT_FOUND = 4312
const ERROR_DATABASE_FAILURE = 4313
const ERROR_DATABASE_FULL = 4314
const ERROR_MEDIA_INCOMPATIBLE = 4315
const ERROR_RESOURCE_NOT_PRESENT = 4316
const ERROR_INVALID_OPERATION = 4317
const ERROR_MEDIA_NOT_AVAILABLE = 4318
const ERROR_DEVICE_NOT_AVAILABLE = 4319
const ERROR_REQUEST_REFUSED = 4320
const ERROR_INVALID_DRIVE_OBJECT = 4321
const ERROR_LIBRARY_FULL = 4322
const ERROR_MEDIUM_NOT_ACCESSIBLE = 4323
const ERROR_UNABLE_TO_LOAD_MEDIUM = 4324
const ERROR_UNABLE_TO_INVENTORY_DRIVE = 4325
const ERROR_UNABLE_TO_INVENTORY_SLOT = 4326
const ERROR_UNABLE_TO_INVENTORY_TRANSPORT = 4327
const ERROR_TRANSPORT_FULL = 4328
const ERROR_CONTROLLING_IEPORT = 4329
const ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA = 4330
const ERROR_CLEANER_SLOT_SET = 4331
const ERROR_CLEANER_SLOT_NOT_SET = 4332
const ERROR_CLEANER_CARTRIDGE_SPENT = 4333
const ERROR_UNEXPECTED_OMID = 4334
const ERROR_CANT_DELETE_LAST_ITEM = 4335
const ERROR_MESSAGE_EXCEEDS_MAX_SIZE = 4336
const ERROR_VOLUME_CONTAINS_SYS_FILES = 4337
const ERROR_INDIGENOUS_TYPE = 4338
const ERROR_NO_SUPPORTING_DRIVES = 4339
const ERROR_CLEANER_CARTRIDGE_INSTALLED = 4340
const ERROR_IEPORT_FULL = 4341
const ERROR_FILE_OFFLINE = 4350
const ERROR_REMOTE_STORAGE_NOT_ACTIVE = 4351
const ERROR_REMOTE_STORAGE_MEDIA_ERROR = 4352
const ERROR_NOT_A_REPARSE_POINT = 4390
const ERROR_REPARSE_ATTRIBUTE_CONFLICT = 4391
const ERROR_INVALID_REPARSE_DATA = 4392
const ERROR_REPARSE_TAG_INVALID = 4393
const ERROR_REPARSE_TAG_MISMATCH = 4394
const ERROR_VOLUME_NOT_SIS_ENABLED = 4500
const ERROR_DEPENDENT_RESOURCE_EXISTS = 5001
const ERROR_DEPENDENCY_NOT_FOUND = 5002
const ERROR_DEPENDENCY_ALREADY_EXISTS = 5003
const ERROR_RESOURCE_NOT_ONLINE = 5004
const ERROR_HOST_NODE_NOT_AVAILABLE = 5005
const ERROR_RESOURCE_NOT_AVAILABLE = 5006
const ERROR_RESOURCE_NOT_FOUND = 5007
const ERROR_SHUTDOWN_CLUSTER = 5008
const ERROR_CANT_EVICT_ACTIVE_NODE = 5009
const ERROR_OBJECT_ALREADY_EXISTS = 5010
const ERROR_OBJECT_IN_LIST = 5011
const ERROR_GROUP_NOT_AVAILABLE = 5012
const ERROR_GROUP_NOT_FOUND = 5013
const ERROR_GROUP_NOT_ONLINE = 5014
const ERROR_HOST_NODE_NOT_RESOURCE_OWNER = 5015
const ERROR_HOST_NODE_NOT_GROUP_OWNER = 5016
const ERROR_RESMON_CREATE_FAILED = 5017
const ERROR_RESMON_ONLINE_FAILED = 5018
const ERROR_RESOURCE_ONLINE = 5019
const ERROR_QUORUM_RESOURCE = 5020
const ERROR_NOT_QUORUM_CAPABLE = 5021
const ERROR_CLUSTER_SHUTTING_DOWN = 5022
const ERROR_INVALID_STATE = 5023
const ERROR_RESOURCE_PROPERTIES_STORED = 5024
const ERROR_NOT_QUORUM_CLASS = 5025
const ERROR_CORE_RESOURCE = 5026
const ERROR_QUORUM_RESOURCE_ONLINE_FAILED = 5027
const ERROR_QUORUMLOG_OPEN_FAILED = 5028
const ERROR_CLUSTERLOG_CORRUPT = 5029
const ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE = 5030
const ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE = 5031
const ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND = 5032
const ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE = 5033
const ERROR_QUORUM_OWNER_ALIVE = 5034
const ERROR_NETWORK_NOT_AVAILABLE = 5035
const ERROR_NODE_NOT_AVAILABLE = 5036
const ERROR_ALL_NODES_NOT_AVAILABLE = 5037
const ERROR_RESOURCE_FAILED = 5038
const ERROR_CLUSTER_INVALID_NODE = 5039
const ERROR_CLUSTER_NODE_EXISTS = 5040
const ERROR_CLUSTER_JOIN_IN_PROGRESS = 5041
const ERROR_CLUSTER_NODE_NOT_FOUND = 5042
const ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND = 5043
const ERROR_CLUSTER_NETWORK_EXISTS = 5044
const ERROR_CLUSTER_NETWORK_NOT_FOUND = 5045
const ERROR_CLUSTER_NETINTERFACE_EXISTS = 5046
const ERROR_CLUSTER_NETINTERFACE_NOT_FOUND = 5047
const ERROR_CLUSTER_INVALID_REQUEST = 5048
const ERROR_CLUSTER_INVALID_NETWORK_PROVIDER = 5049
const ERROR_CLUSTER_NODE_DOWN = 5050
const ERROR_CLUSTER_NODE_UNREACHABLE = 5051
const ERROR_CLUSTER_NODE_NOT_MEMBER = 5052
const ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS = 5053
const ERROR_CLUSTER_INVALID_NETWORK = 5054
const ERROR_CLUSTER_NODE_UP = 5056
const ERROR_CLUSTER_IPADDR_IN_USE = 5057
const ERROR_CLUSTER_NODE_NOT_PAUSED = 5058
const ERROR_CLUSTER_NO_SECURITY_CONTEXT = 5059
const ERROR_CLUSTER_NETWORK_NOT_INTERNAL = 5060
const ERROR_CLUSTER_NODE_ALREADY_UP = 5061
const ERROR_CLUSTER_NODE_ALREADY_DOWN = 5062
const ERROR_CLUSTER_NETWORK_ALREADY_ONLINE = 5063
const ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE = 5064
const ERROR_CLUSTER_NODE_ALREADY_MEMBER = 5065
const ERROR_CLUSTER_LAST_INTERNAL_NETWORK = 5066
const ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS = 5067
const ERROR_INVALID_OPERATION_ON_QUORUM = 5068
const ERROR_DEPENDENCY_NOT_ALLOWED = 5069
const ERROR_CLUSTER_NODE_PAUSED = 5070
const ERROR_NODE_CANT_HOST_RESOURCE = 5071
const ERROR_CLUSTER_NODE_NOT_READY = 5072
const ERROR_CLUSTER_NODE_SHUTTING_DOWN = 5073
const ERROR_CLUSTER_JOIN_ABORTED = 5074
const ERROR_CLUSTER_INCOMPATIBLE_VERSIONS = 5075
const ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED = 5076
const ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED = 5077
const ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND = 5078
const ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED = 5079
const ERROR_CLUSTER_RESNAME_NOT_FOUND = 5080
const ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED = 5081
const ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST = 5082
const ERROR_CLUSTER_DATABASE_SEQMISMATCH = 5083
const ERROR_RESMON_INVALID_STATE = 5084
const ERROR_CLUSTER_GUM_NOT_LOCKER = 5085
const ERROR_QUORUM_DISK_NOT_FOUND = 5086
const ERROR_DATABASE_BACKUP_CORRUPT = 5087
const ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT = 5088
const ERROR_RESOURCE_PROPERTY_UNCHANGEABLE = 5089
const ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE = 5890
const ERROR_CLUSTER_QUORUMLOG_NOT_FOUND = 5891
const ERROR_CLUSTER_MEMBERSHIP_HALT = 5892
const ERROR_CLUSTER_INSTANCE_ID_MISMATCH = 5893
const ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP = 5894
const ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH = 5895
const ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP = 5896
const ERROR_CLUSTER_PARAMETER_MISMATCH = 5897
const ERROR_NODE_CANNOT_BE_CLUSTERED = 5898
const ERROR_CLUSTER_WRONG_OS_VERSION = 5899
const ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME = 5900
const ERROR_CLUSCFG_ALREADY_COMMITTED = 5901
const ERROR_CLUSCFG_ROLLBACK_FAILED = 5902
const ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT = 5903
const ERROR_CLUSTER_OLD_VERSION = 5904
const ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME = 5905
const ERROR_ENCRYPTION_FAILED = 6000
const ERROR_DECRYPTION_FAILED = 6001
const ERROR_FILE_ENCRYPTED = 6002
const ERROR_NO_RECOVERY_POLICY = 6003
const ERROR_NO_EFS = 6004
const ERROR_WRONG_EFS = 6005
const ERROR_NO_USER_KEYS = 6006
const ERROR_FILE_NOT_ENCRYPTED = 6007
const ERROR_NOT_EXPORT_FORMAT = 6008
const ERROR_FILE_READ_ONLY = 6009
const ERROR_DIR_EFS_DISALLOWED = 6010
const ERROR_EFS_SERVER_NOT_TRUSTED = 6011
const ERROR_BAD_RECOVERY_POLICY = 6012
const ERROR_EFS_ALG_BLOB_TOO_BIG = 6013
const ERROR_VOLUME_NOT_SUPPORT_EFS = 6014
const ERROR_EFS_DISABLED = 6015
const ERROR_EFS_VERSION_NOT_SUPPORT = 6016
const ERROR_NO_BROWSER_SERVERS_FOUND = 6118
const SCHED_E_SERVICE_NOT_LOCALSYSTEM = 6200
const ERROR_CTX_WINSTATION_NAME_INVALID = 7001
const ERROR_CTX_INVALID_PD = 7002
const ERROR_CTX_PD_NOT_FOUND = 7003
const ERROR_CTX_WD_NOT_FOUND = 7004
const ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY = 7005
const ERROR_CTX_SERVICE_NAME_COLLISION = 7006
const ERROR_CTX_CLOSE_PENDING = 7007
const ERROR_CTX_NO_OUTBUF = 7008
const ERROR_CTX_MODEM_INF_NOT_FOUND = 7009
const ERROR_CTX_INVALID_MODEMNAME = 7010
const ERROR_CTX_MODEM_RESPONSE_ERROR = 7011
const ERROR_CTX_MODEM_RESPONSE_TIMEOUT = 7012
const ERROR_CTX_MODEM_RESPONSE_NO_CARRIER = 7013
const ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE = 7014
const ERROR_CTX_MODEM_RESPONSE_BUSY = 7015
const ERROR_CTX_MODEM_RESPONSE_VOICE = 7016
const ERROR_CTX_TD_ERROR = 7017
const ERROR_CTX_WINSTATION_NOT_FOUND = 7022
const ERROR_CTX_WINSTATION_ALREADY_EXISTS = 7023
const ERROR_CTX_WINSTATION_BUSY = 7024
const ERROR_CTX_BAD_VIDEO_MODE = 7025
const ERROR_CTX_GRAPHICS_INVALID = 7035
const ERROR_CTX_LOGON_DISABLED = 7037
const ERROR_CTX_NOT_CONSOLE = 7038
const ERROR_CTX_CLIENT_QUERY_TIMEOUT = 7040
const ERROR_CTX_CONSOLE_DISCONNECT = 7041
const ERROR_CTX_CONSOLE_CONNECT = 7042
const ERROR_CTX_SHADOW_DENIED = 7044
const ERROR_CTX_WINSTATION_ACCESS_DENIED = 7045
const ERROR_CTX_INVALID_WD = 7049
const ERROR_CTX_SHADOW_INVALID = 7050
const ERROR_CTX_SHADOW_DISABLED = 7051
const ERROR_CTX_CLIENT_LICENSE_IN_USE = 7052
const ERROR_CTX_CLIENT_LICENSE_NOT_SET = 7053
const ERROR_CTX_LICENSE_NOT_AVAILABLE = 7054
const ERROR_CTX_LICENSE_CLIENT_INVALID = 7055
const ERROR_CTX_LICENSE_EXPIRED = 7056
const ERROR_CTX_SHADOW_NOT_RUNNING = 7057
const ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE = 7058
const ERROR_ACTIVATION_COUNT_EXCEEDED = 7059
const FRS_ERR_INVALID_API_SEQUENCE = 8001
const FRS_ERR_STARTING_SERVICE = 8002
const FRS_ERR_STOPPING_SERVICE = 8003
const FRS_ERR_INTERNAL_API = 8004
const FRS_ERR_INTERNAL = 8005
const FRS_ERR_SERVICE_COMM = 8006
const FRS_ERR_INSUFFICIENT_PRIV = 8007
const FRS_ERR_AUTHENTICATION = 8008
const FRS_ERR_PARENT_INSUFFICIENT_PRIV = 8009
const FRS_ERR_PARENT_AUTHENTICATION = 8010
const FRS_ERR_CHILD_TO_PARENT_COMM = 8011
const FRS_ERR_PARENT_TO_CHILD_COMM = 8012
const FRS_ERR_SYSVOL_POPULATE = 8013
const FRS_ERR_SYSVOL_POPULATE_TIMEOUT = 8014
const FRS_ERR_SYSVOL_IS_BUSY = 8015
const FRS_ERR_SYSVOL_DEMOTE = 8016
const FRS_ERR_INVALID_SERVICE_PARAMETER = 8017
const DS_S_SUCCESS = NO_ERROR
const ERROR_DS_NOT_INSTALLED = 8200
const ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY = 8201
const ERROR_DS_NO_ATTRIBUTE_OR_VALUE = 8202
const ERROR_DS_INVALID_ATTRIBUTE_SYNTAX = 8203
const ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED = 8204
const ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS = 8205
const ERROR_DS_BUSY = 8206
const ERROR_DS_UNAVAILABLE = 8207
const ERROR_DS_NO_RIDS_ALLOCATED = 8208
const ERROR_DS_NO_MORE_RIDS = 8209
const ERROR_DS_INCORRECT_ROLE_OWNER = 8210
const ERROR_DS_RIDMGR_INIT_ERROR = 8211
const ERROR_DS_OBJ_CLASS_VIOLATION = 8212
const ERROR_DS_CANT_ON_NON_LEAF = 8213
const ERROR_DS_CANT_ON_RDN = 8214
const ERROR_DS_CANT_MOD_OBJ_CLASS = 8215
const ERROR_DS_CROSS_DOM_MOVE_ERROR = 8216
const ERROR_DS_GC_NOT_AVAILABLE = 8217
const ERROR_SHARED_POLICY = 8218
const ERROR_POLICY_OBJECT_NOT_FOUND = 8219
const ERROR_POLICY_ONLY_IN_DS = 8220
const ERROR_PROMOTION_ACTIVE = 8221
const ERROR_NO_PROMOTION_ACTIVE = 8222
const ERROR_DS_OPERATIONS_ERROR = 8224
const ERROR_DS_PROTOCOL_ERROR = 8225
const ERROR_DS_TIMELIMIT_EXCEEDED = 8226
const ERROR_DS_SIZELIMIT_EXCEEDED = 8227
const ERROR_DS_ADMIN_LIMIT_EXCEEDED = 8228
const ERROR_DS_COMPARE_FALSE = 8229
const ERROR_DS_COMPARE_TRUE = 8230
const ERROR_DS_AUTH_METHOD_NOT_SUPPORTED = 8231
const ERROR_DS_STRONG_AUTH_REQUIRED = 8232
const ERROR_DS_INAPPROPRIATE_AUTH = 8233
const ERROR_DS_AUTH_UNKNOWN = 8234
const ERROR_DS_REFERRAL = 8235
const ERROR_DS_UNAVAILABLE_CRIT_EXTENSION = 8236
const ERROR_DS_CONFIDENTIALITY_REQUIRED = 8237
const ERROR_DS_INAPPROPRIATE_MATCHING = 8238
const ERROR_DS_CONSTRAINT_VIOLATION = 8239
const ERROR_DS_NO_SUCH_OBJECT = 8240
const ERROR_DS_ALIAS_PROBLEM = 8241
const ERROR_DS_INVALID_DN_SYNTAX = 8242
const ERROR_DS_IS_LEAF = 8243
const ERROR_DS_ALIAS_DEREF_PROBLEM = 8244
const ERROR_DS_UNWILLING_TO_PERFORM = 8245
const ERROR_DS_LOOP_DETECT = 8246
const ERROR_DS_NAMING_VIOLATION = 8247
const ERROR_DS_OBJECT_RESULTS_TOO_LARGE = 8248
const ERROR_DS_AFFECTS_MULTIPLE_DSAS = 8249
const ERROR_DS_SERVER_DOWN = 8250
const ERROR_DS_LOCAL_ERROR = 8251
const ERROR_DS_ENCODING_ERROR = 8252
const ERROR_DS_DECODING_ERROR = 8253
const ERROR_DS_FILTER_UNKNOWN = 8254
const ERROR_DS_PARAM_ERROR = 8255
const ERROR_DS_NOT_SUPPORTED = 8256
const ERROR_DS_NO_RESULTS_RETURNED = 8257
const ERROR_DS_CONTROL_NOT_FOUND = 8258
const ERROR_DS_CLIENT_LOOP = 8259
const ERROR_DS_REFERRAL_LIMIT_EXCEEDED = 8260
const ERROR_DS_SORT_CONTROL_MISSING = 8261
const ERROR_DS_OFFSET_RANGE_ERROR = 8262
const ERROR_DS_ROOT_MUST_BE_NC = 8301
const ERROR_DS_ADD_REPLICA_INHIBITED = 8302
const ERROR_DS_ATT_NOT_DEF_IN_SCHEMA = 8303
const ERROR_DS_MAX_OBJ_SIZE_EXCEEDED = 8304
const ERROR_DS_OBJ_STRING_NAME_EXISTS = 8305
const ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA = 8306
const ERROR_DS_RDN_DOESNT_MATCH_SCHEMA = 8307
const ERROR_DS_NO_REQUESTED_ATTS_FOUND = 8308
const ERROR_DS_USER_BUFFER_TO_SMALL = 8309
const ERROR_DS_ATT_IS_NOT_ON_OBJ = 8310
const ERROR_DS_ILLEGAL_MOD_OPERATION = 8311
const ERROR_DS_OBJ_TOO_LARGE = 8312
const ERROR_DS_BAD_INSTANCE_TYPE = 8313
const ERROR_DS_MASTERDSA_REQUIRED = 8314
const ERROR_DS_OBJECT_CLASS_REQUIRED = 8315
const ERROR_DS_MISSING_REQUIRED_ATT = 8316
const ERROR_DS_ATT_NOT_DEF_FOR_CLASS = 8317
const ERROR_DS_ATT_ALREADY_EXISTS = 8318
const ERROR_DS_CANT_ADD_ATT_VALUES = 8320
const ERROR_DS_SINGLE_VALUE_CONSTRAINT = 8321
const ERROR_DS_RANGE_CONSTRAINT = 8322
const ERROR_DS_ATT_VAL_ALREADY_EXISTS = 8323
const ERROR_DS_CANT_REM_MISSING_ATT = 8324
const ERROR_DS_CANT_REM_MISSING_ATT_VAL = 8325
const ERROR_DS_ROOT_CANT_BE_SUBREF = 8326
const ERROR_DS_NO_CHAINING = 8327
const ERROR_DS_NO_CHAINED_EVAL = 8328
const ERROR_DS_NO_PARENT_OBJECT = 8329
const ERROR_DS_PARENT_IS_AN_ALIAS = 8330
const ERROR_DS_CANT_MIX_MASTER_AND_REPS = 8331
const ERROR_DS_CHILDREN_EXIST = 8332
const ERROR_DS_OBJ_NOT_FOUND = 8333
const ERROR_DS_ALIASED_OBJ_MISSING = 8334
const ERROR_DS_BAD_NAME_SYNTAX = 8335
const ERROR_DS_ALIAS_POINTS_TO_ALIAS = 8336
const ERROR_DS_CANT_DEREF_ALIAS = 8337
const ERROR_DS_OUT_OF_SCOPE = 8338
const ERROR_DS_OBJECT_BEING_REMOVED = 8339
const ERROR_DS_CANT_DELETE_DSA_OBJ = 8340
const ERROR_DS_GENERIC_ERROR = 8341
const ERROR_DS_DSA_MUST_BE_INT_MASTER = 8342
const ERROR_DS_CLASS_NOT_DSA = 8343
const ERROR_DS_INSUFF_ACCESS_RIGHTS = 8344
const ERROR_DS_ILLEGAL_SUPERIOR = 8345
const ERROR_DS_ATTRIBUTE_OWNED_BY_SAM = 8346
const ERROR_DS_NAME_TOO_MANY_PARTS = 8347
const ERROR_DS_NAME_TOO_LONG = 8348
const ERROR_DS_NAME_VALUE_TOO_LONG = 8349
const ERROR_DS_NAME_UNPARSEABLE = 8350
const ERROR_DS_NAME_TYPE_UNKNOWN = 8351
const ERROR_DS_NOT_AN_OBJECT = 8352
const ERROR_DS_SEC_DESC_TOO_SHORT = 8353
const ERROR_DS_SEC_DESC_INVALID = 8354
const ERROR_DS_NO_DELETED_NAME = 8355
const ERROR_DS_SUBREF_MUST_HAVE_PARENT = 8356
const ERROR_DS_NCNAME_MUST_BE_NC = 8357
const ERROR_DS_CANT_ADD_SYSTEM_ONLY = 8358
const ERROR_DS_CLASS_MUST_BE_CONCRETE = 8359
const ERROR_DS_INVALID_DMD = 8360
const ERROR_DS_OBJ_GUID_EXISTS = 8361
const ERROR_DS_NOT_ON_BACKLINK = 8362
const ERROR_DS_NO_CROSSREF_FOR_NC = 8363
const ERROR_DS_SHUTTING_DOWN = 8364
const ERROR_DS_UNKNOWN_OPERATION = 8365
const ERROR_DS_INVALID_ROLE_OWNER = 8366
const ERROR_DS_COULDNT_CONTACT_FSMO = 8367
const ERROR_DS_CROSS_NC_DN_RENAME = 8368
const ERROR_DS_CANT_MOD_SYSTEM_ONLY = 8369
const ERROR_DS_REPLICATOR_ONLY = 8370
const ERROR_DS_OBJ_CLASS_NOT_DEFINED = 8371
const ERROR_DS_OBJ_CLASS_NOT_SUBCLASS = 8372
const ERROR_DS_NAME_REFERENCE_INVALID = 8373
const ERROR_DS_CROSS_REF_EXISTS = 8374
const ERROR_DS_CANT_DEL_MASTER_CROSSREF = 8375
const ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD = 8376
const ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX = 8377
const ERROR_DS_DUP_RDN = 8378
const ERROR_DS_DUP_OID = 8379
const ERROR_DS_DUP_MAPI_ID = 8380
const ERROR_DS_DUP_SCHEMA_ID_GUID = 8381
const ERROR_DS_DUP_LDAP_DISPLAY_NAME = 8382
const ERROR_DS_SEMANTIC_ATT_TEST = 8383
const ERROR_DS_SYNTAX_MISMATCH = 8384
const ERROR_DS_EXISTS_IN_MUST_HAVE = 8385
const ERROR_DS_EXISTS_IN_MAY_HAVE = 8386
const ERROR_DS_NONEXISTENT_MAY_HAVE = 8387
const ERROR_DS_NONEXISTENT_MUST_HAVE = 8388
const ERROR_DS_AUX_CLS_TEST_FAIL = 8389
const ERROR_DS_NONEXISTENT_POSS_SUP = 8390
const ERROR_DS_SUB_CLS_TEST_FAIL = 8391
const ERROR_DS_BAD_RDN_ATT_ID_SYNTAX = 8392
const ERROR_DS_EXISTS_IN_AUX_CLS = 8393
const ERROR_DS_EXISTS_IN_SUB_CLS = 8394
const ERROR_DS_EXISTS_IN_POSS_SUP = 8395
const ERROR_DS_RECALCSCHEMA_FAILED = 8396
const ERROR_DS_TREE_DELETE_NOT_FINISHED = 8397
const ERROR_DS_CANT_DELETE = 8398
const ERROR_DS_ATT_SCHEMA_REQ_ID = 8399
const ERROR_DS_BAD_ATT_SCHEMA_SYNTAX = 8400
const ERROR_DS_CANT_CACHE_ATT = 8401
const ERROR_DS_CANT_CACHE_CLASS = 8402
const ERROR_DS_CANT_REMOVE_ATT_CACHE = 8403
const ERROR_DS_CANT_REMOVE_CLASS_CACHE = 8404
const ERROR_DS_CANT_RETRIEVE_DN = 8405
const ERROR_DS_MISSING_SUPREF = 8406
const ERROR_DS_CANT_RETRIEVE_INSTANCE = 8407
const ERROR_DS_CODE_INCONSISTENCY = 8408
const ERROR_DS_DATABASE_ERROR = 8409
const ERROR_DS_GOVERNSID_MISSING = 8410
const ERROR_DS_MISSING_EXPECTED_ATT = 8411
const ERROR_DS_NCNAME_MISSING_CR_REF = 8412
const ERROR_DS_SECURITY_CHECKING_ERROR = 8413
const ERROR_DS_SCHEMA_NOT_LOADED = 8414
const ERROR_DS_SCHEMA_ALLOC_FAILED = 8415
const ERROR_DS_ATT_SCHEMA_REQ_SYNTAX = 8416
const ERROR_DS_GCVERIFY_ERROR = 8417
const ERROR_DS_DRA_SCHEMA_MISMATCH = 8418
const ERROR_DS_CANT_FIND_DSA_OBJ = 8419
const ERROR_DS_CANT_FIND_EXPECTED_NC = 8420
const ERROR_DS_CANT_FIND_NC_IN_CACHE = 8421
const ERROR_DS_CANT_RETRIEVE_CHILD = 8422
const ERROR_DS_SECURITY_ILLEGAL_MODIFY = 8423
const ERROR_DS_CANT_REPLACE_HIDDEN_REC = 8424
const ERROR_DS_BAD_HIERARCHY_FILE = 8425
const ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED = 8426
const ERROR_DS_CONFIG_PARAM_MISSING = 8427
const ERROR_DS_COUNTING_AB_INDICES_FAILED = 8428
const ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED = 8429
const ERROR_DS_INTERNAL_FAILURE = 8430
const ERROR_DS_UNKNOWN_ERROR = 8431
const ERROR_DS_ROOT_REQUIRES_CLASS_TOP = 8432
const ERROR_DS_REFUSING_FSMO_ROLES = 8433
const ERROR_DS_MISSING_FSMO_SETTINGS = 8434
const ERROR_DS_UNABLE_TO_SURRENDER_ROLES = 8435
const ERROR_DS_DRA_GENERIC = 8436
const ERROR_DS_DRA_INVALID_PARAMETER = 8437
const ERROR_DS_DRA_BUSY = 8438
const ERROR_DS_DRA_BAD_DN = 8439
const ERROR_DS_DRA_BAD_NC = 8440
const ERROR_DS_DRA_DN_EXISTS = 8441
const ERROR_DS_DRA_INTERNAL_ERROR = 8442
const ERROR_DS_DRA_INCONSISTENT_DIT = 8443
const ERROR_DS_DRA_CONNECTION_FAILED = 8444
const ERROR_DS_DRA_BAD_INSTANCE_TYPE = 8445
const ERROR_DS_DRA_OUT_OF_MEM = 8446
const ERROR_DS_DRA_MAIL_PROBLEM = 8447
const ERROR_DS_DRA_REF_ALREADY_EXISTS = 8448
const ERROR_DS_DRA_REF_NOT_FOUND = 8449
const ERROR_DS_DRA_OBJ_IS_REP_SOURCE = 8450
const ERROR_DS_DRA_DB_ERROR = 8451
const ERROR_DS_DRA_NO_REPLICA = 8452
const ERROR_DS_DRA_ACCESS_DENIED = 8453
const ERROR_DS_DRA_NOT_SUPPORTED = 8454
const ERROR_DS_DRA_RPC_CANCELLED = 8455
const ERROR_DS_DRA_SOURCE_DISABLED = 8456
const ERROR_DS_DRA_SINK_DISABLED = 8457
const ERROR_DS_DRA_NAME_COLLISION = 8458
const ERROR_DS_DRA_SOURCE_REINSTALLED = 8459
const ERROR_DS_DRA_MISSING_PARENT = 8460
const ERROR_DS_DRA_PREEMPTED = 8461
const ERROR_DS_DRA_ABANDON_SYNC = 8462
const ERROR_DS_DRA_SHUTDOWN = 8463
const ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET = 8464
const ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA = 8465
const ERROR_DS_DRA_EXTN_CONNECTION_FAILED = 8466
const ERROR_DS_INSTALL_SCHEMA_MISMATCH = 8467
const ERROR_DS_DUP_LINK_ID = 8468
const ERROR_DS_NAME_ERROR_RESOLVING = 8469
const ERROR_DS_NAME_ERROR_NOT_FOUND = 8470
const ERROR_DS_NAME_ERROR_NOT_UNIQUE = 8471
const ERROR_DS_NAME_ERROR_NO_MAPPING = 8472
const ERROR_DS_NAME_ERROR_DOMAIN_ONLY = 8473
const ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING = 8474
const ERROR_DS_CONSTRUCTED_ATT_MOD = 8475
const ERROR_DS_WRONG_OM_OBJ_CLASS = 8476
const ERROR_DS_DRA_REPL_PENDING = 8477
const ERROR_DS_DS_REQUIRED = 8478
const ERROR_DS_INVALID_LDAP_DISPLAY_NAME = 8479
const ERROR_DS_NON_BASE_SEARCH = 8480
const ERROR_DS_CANT_RETRIEVE_ATTS = 8481
const ERROR_DS_BACKLINK_WITHOUT_LINK = 8482
const ERROR_DS_EPOCH_MISMATCH = 8483
const ERROR_DS_SRC_NAME_MISMATCH = 8484
const ERROR_DS_SRC_AND_DST_NC_IDENTICAL = 8485
const ERROR_DS_DST_NC_MISMATCH = 8486
const ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC = 8487
const ERROR_DS_SRC_GUID_MISMATCH = 8488
const ERROR_DS_CANT_MOVE_DELETED_OBJECT = 8489
const ERROR_DS_PDC_OPERATION_IN_PROGRESS = 8490
const ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD = 8491
const ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION = 8492
const ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS = 8493
const ERROR_DS_NC_MUST_HAVE_NC_PARENT = 8494
const ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE = 8495
const ERROR_DS_DST_DOMAIN_NOT_NATIVE = 8496
const ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER = 8497
const ERROR_DS_CANT_MOVE_ACCOUNT_GROUP = 8498
const ERROR_DS_CANT_MOVE_RESOURCE_GROUP = 8499
const ERROR_DS_INVALID_SEARCH_FLAG = 8500
const ERROR_DS_NO_TREE_DELETE_ABOVE_NC = 8501
const ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE = 8502
const ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE = 8503
const ERROR_DS_SAM_INIT_FAILURE = 8504
const ERROR_DS_SENSITIVE_GROUP_VIOLATION = 8505
const ERROR_DS_CANT_MOD_PRIMARYGROUPID = 8506
const ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD = 8507
const ERROR_DS_NONSAFE_SCHEMA_CHANGE = 8508
const ERROR_DS_SCHEMA_UPDATE_DISALLOWED = 8509
const ERROR_DS_CANT_CREATE_UNDER_SCHEMA = 8510
const ERROR_DS_INSTALL_NO_SRC_SCH_VERSION = 8511
const ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE = 8512
const ERROR_DS_INVALID_GROUP_TYPE = 8513
const ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN = 8514
const ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN = 8515
const ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER = 8516
const ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER = 8517
const ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER = 8518
const ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER = 8519
const ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER = 8520
const ERROR_DS_HAVE_PRIMARY_MEMBERS = 8521
const ERROR_DS_STRING_SD_CONVERSION_FAILED = 8522
const ERROR_DS_NAMING_MASTER_GC = 8523
const ERROR_DS_DNS_LOOKUP_FAILURE = 8524
const ERROR_DS_COULDNT_UPDATE_SPNS = 8525
const ERROR_DS_CANT_RETRIEVE_SD = 8526
const ERROR_DS_KEY_NOT_UNIQUE = 8527
const ERROR_DS_WRONG_LINKED_ATT_SYNTAX = 8528
const ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD = 8529
const ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY = 8530
const ERROR_DS_CANT_START = 8531
const ERROR_DS_INIT_FAILURE = 8532
const ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION = 8533
const ERROR_DS_SOURCE_DOMAIN_IN_FOREST = 8534
const ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST = 8535
const ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED = 8536
const ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN = 8537
const ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER = 8538
const ERROR_DS_SRC_SID_EXISTS_IN_FOREST = 8539
const ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH = 8540
const ERROR_SAM_INIT_FAILURE = 8541
const ERROR_DS_DRA_SCHEMA_INFO_SHIP = 8542
const ERROR_DS_DRA_SCHEMA_CONFLICT = 8543
const ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT = 8544
const ERROR_DS_DRA_OBJ_NC_MISMATCH = 8545
const ERROR_DS_NC_STILL_HAS_DSAS = 8546
const ERROR_DS_GC_REQUIRED = 8547
const ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY = 8548
const ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS = 8549
const ERROR_DS_CANT_ADD_TO_GC = 8550
const ERROR_DS_NO_CHECKPOINT_WITH_PDC = 8551
const ERROR_DS_SOURCE_AUDITING_NOT_ENABLED = 8552
const ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC = 8553
const ERROR_DS_INVALID_NAME_FOR_SPN = 8554
const ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS = 8555
const ERROR_DS_UNICODEPWD_NOT_IN_QUOTES = 8556
const ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED = 8557
const ERROR_DS_MUST_BE_RUN_ON_DST_DC = 8558
const ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER = 8559
const ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ = 8560
const ERROR_DS_INIT_FAILURE_CONSOLE = 8561
const ERROR_DS_SAM_INIT_FAILURE_CONSOLE = 8562
const ERROR_DS_FOREST_VERSION_TOO_HIGH = 8563
const ERROR_DS_DOMAIN_VERSION_TOO_HIGH = 8564
const ERROR_DS_FOREST_VERSION_TOO_LOW = 8565
const ERROR_DS_DOMAIN_VERSION_TOO_LOW = 8566
const ERROR_DS_INCOMPATIBLE_VERSION = 8567
const ERROR_DS_LOW_DSA_VERSION = 8568
const ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN = 8569
const ERROR_DS_NOT_SUPPORTED_SORT_ORDER = 8570
const ERROR_DS_NAME_NOT_UNIQUE = 8571
const ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4 = 8572
const ERROR_DS_OUT_OF_VERSION_STORE = 8573
const ERROR_DS_INCOMPATIBLE_CONTROLS_USED = 8574
const ERROR_DS_NO_REF_DOMAIN = 8575
const ERROR_DS_RESERVED_LINK_ID = 8576
const ERROR_DS_LINK_ID_NOT_AVAILABLE = 8577
const ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER = 8578
const ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE = 8579
const ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC = 8580
const ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG = 8581
const ERROR_DS_MODIFYDN_WRONG_GRANDPARENT = 8582
const ERROR_DS_NAME_ERROR_TRUST_REFERRAL = 8583
const ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER = 8584
const ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD = 8585
const ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2 = 8586
const ERROR_DS_THREAD_LIMIT_EXCEEDED = 8587
const ERROR_DS_NOT_CLOSEST = 8588
const ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF = 8589
const ERROR_DS_SINGLE_USER_MODE_FAILED = 8590
const ERROR_DS_NTDSCRIPT_SYNTAX_ERROR = 8591
const ERROR_DS_NTDSCRIPT_PROCESS_ERROR = 8592
const ERROR_DS_DIFFERENT_REPL_EPOCHS = 8593
const ERROR_DS_DRS_EXTENSIONS_CHANGED = 8594
const ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR = 8595
const ERROR_DS_NO_MSDS_INTID = 8596
const ERROR_DS_DUP_MSDS_INTID = 8597
const ERROR_DS_EXISTS_IN_RDNATTID = 8598
const ERROR_DS_AUTHORIZATION_FAILED = 8599
const ERROR_DS_INVALID_SCRIPT = 8600
const ERROR_DS_REMOTE_CROSSREF_OP_FAILED = 8601
const ERROR_DS_CROSS_REF_BUSY = 8602
const ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN = 8603
const ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC = 8604
const ERROR_DS_DUPLICATE_ID_FOUND = 8605
const ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT = 8606
const ERROR_DS_GROUP_CONVERSION_ERROR = 8607
const ERROR_DS_CANT_MOVE_APP_BASIC_GROUP = 8608
const ERROR_DS_CANT_MOVE_APP_QUERY_GROUP = 8609
const ERROR_DS_ROLE_NOT_VERIFIED = 8610
const ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL = 8611
const ERROR_DS_DOMAIN_RENAME_IN_PROGRESS = 8612
const ERROR_DS_EXISTING_AD_CHILD_NC = 8613
const ERROR_DS_REPL_LIFETIME_EXCEEDED = 8614
const ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER = 8615
const ERROR_DS_LDAP_SEND_QUEUE_FULL = 8616
const ERROR_DS_DRA_OUT_SCHEDULE_WINDOW = 8617
const DNS_ERROR_RESPONSE_CODES_BASE = 9000
const DNS_ERROR_RCODE_NO_ERROR = NO_ERROR
const DNS_ERROR_MASK = &h00002328
const DNS_ERROR_RCODE_FORMAT_ERROR = 9001
const DNS_ERROR_RCODE_SERVER_FAILURE = 9002
const DNS_ERROR_RCODE_NAME_ERROR = 9003
const DNS_ERROR_RCODE_NOT_IMPLEMENTED = 9004
const DNS_ERROR_RCODE_REFUSED = 9005
const DNS_ERROR_RCODE_YXDOMAIN = 9006
const DNS_ERROR_RCODE_YXRRSET = 9007
const DNS_ERROR_RCODE_NXRRSET = 9008
const DNS_ERROR_RCODE_NOTAUTH = 9009
const DNS_ERROR_RCODE_NOTZONE = 9010
const DNS_ERROR_RCODE_BADSIG = 9016
const DNS_ERROR_RCODE_BADKEY = 9017
const DNS_ERROR_RCODE_BADTIME = 9018
const DNS_ERROR_RCODE_LAST = DNS_ERROR_RCODE_BADTIME
const DNS_ERROR_PACKET_FMT_BASE = 9500
const DNS_INFO_NO_RECORDS = 9501
const DNS_ERROR_BAD_PACKET = 9502
const DNS_ERROR_NO_PACKET = 9503
const DNS_ERROR_RCODE = 9504
const DNS_ERROR_UNSECURE_PACKET = 9505
const DNS_STATUS_PACKET_UNSECURE = DNS_ERROR_UNSECURE_PACKET
const DNS_ERROR_NO_MEMORY = ERROR_OUTOFMEMORY
const DNS_ERROR_INVALID_NAME = ERROR_INVALID_NAME
const DNS_ERROR_INVALID_DATA = ERROR_INVALID_DATA
const DNS_ERROR_GENERAL_API_BASE = 9550
const DNS_ERROR_INVALID_TYPE = 9551
const DNS_ERROR_INVALID_IP_ADDRESS = 9552
const DNS_ERROR_INVALID_PROPERTY = 9553
const DNS_ERROR_TRY_AGAIN_LATER = 9554
const DNS_ERROR_NOT_UNIQUE = 9555
const DNS_ERROR_NON_RFC_NAME = 9556
const DNS_STATUS_FQDN = 9557
const DNS_STATUS_DOTTED_NAME = 9558
const DNS_STATUS_SINGLE_PART_NAME = 9559
const DNS_ERROR_INVALID_NAME_CHAR = 9560
const DNS_ERROR_NUMERIC_NAME = 9561
const DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER = 9562
const DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION = 9563
const DNS_ERROR_CANNOT_FIND_ROOT_HINTS = 9564
const DNS_ERROR_INCONSISTENT_ROOT_HINTS = 9565
const DNS_ERROR_ZONE_BASE = 9600
const DNS_ERROR_ZONE_DOES_NOT_EXIST = 9601
const DNS_ERROR_NO_ZONE_INFO = 9602
const DNS_ERROR_INVALID_ZONE_OPERATION = 9603
const DNS_ERROR_ZONE_CONFIGURATION_ERROR = 9604
const DNS_ERROR_ZONE_HAS_NO_SOA_RECORD = 9605
const DNS_ERROR_ZONE_HAS_NO_NS_RECORDS = 9606
const DNS_ERROR_ZONE_LOCKED = 9607
const DNS_ERROR_ZONE_CREATION_FAILED = 9608
const DNS_ERROR_ZONE_ALREADY_EXISTS = 9609
const DNS_ERROR_AUTOZONE_ALREADY_EXISTS = 9610
const DNS_ERROR_INVALID_ZONE_TYPE = 9611
const DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP = 9612
const DNS_ERROR_ZONE_NOT_SECONDARY = 9613
const DNS_ERROR_NEED_SECONDARY_ADDRESSES = 9614
const DNS_ERROR_WINS_INIT_FAILED = 9615
const DNS_ERROR_NEED_WINS_SERVERS = 9616
const DNS_ERROR_NBSTAT_INIT_FAILED = 9617
const DNS_ERROR_SOA_DELETE_INVALID = 9618
const DNS_ERROR_FORWARDER_ALREADY_EXISTS = 9619
const DNS_ERROR_ZONE_REQUIRES_MASTER_IP = 9620
const DNS_ERROR_ZONE_IS_SHUTDOWN = 9621
const DNS_ERROR_DATAFILE_BASE = 9650
const DNS_ERROR_PRIMARY_REQUIRES_DATAFILE = 9651
const DNS_ERROR_INVALID_DATAFILE_NAME = 9652
const DNS_ERROR_DATAFILE_OPEN_FAILURE = 9653
const DNS_ERROR_FILE_WRITEBACK_FAILED = 9654
const DNS_ERROR_DATAFILE_PARSING = 9655
const DNS_ERROR_DATABASE_BASE = 9700
const DNS_ERROR_RECORD_DOES_NOT_EXIST = 9701
const DNS_ERROR_RECORD_FORMAT = 9702
const DNS_ERROR_NODE_CREATION_FAILED = 9703
const DNS_ERROR_UNKNOWN_RECORD_TYPE = 9704
const DNS_ERROR_RECORD_TIMED_OUT = 9705
const DNS_ERROR_NAME_NOT_IN_ZONE = 9706
const DNS_ERROR_CNAME_LOOP = 9707
const DNS_ERROR_NODE_IS_CNAME = 9708
const DNS_ERROR_CNAME_COLLISION = 9709
const DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT = 9710
const DNS_ERROR_RECORD_ALREADY_EXISTS = 9711
const DNS_ERROR_SECONDARY_DATA = 9712
const DNS_ERROR_NO_CREATE_CACHE_DATA = 9713
const DNS_ERROR_NAME_DOES_NOT_EXIST = 9714
const DNS_WARNING_PTR_CREATE_FAILED = 9715
const DNS_WARNING_DOMAIN_UNDELETED = 9716
const DNS_ERROR_DS_UNAVAILABLE = 9717
const DNS_ERROR_DS_ZONE_ALREADY_EXISTS = 9718
const DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE = 9719
const DNS_ERROR_OPERATION_BASE = 9750
const DNS_INFO_AXFR_COMPLETE = 9751
const DNS_ERROR_AXFR = 9752
const DNS_INFO_ADDED_LOCAL_WINS = 9753
const DNS_ERROR_SECURE_BASE = 9800
const DNS_STATUS_CONTINUE_NEEDED = 9801
const DNS_ERROR_SETUP_BASE = 9850
const DNS_ERROR_NO_TCPIP = 9851
const DNS_ERROR_NO_DNS_SERVERS = 9852
const DNS_ERROR_DP_BASE = 9900
const DNS_ERROR_DP_DOES_NOT_EXIST = 9901
const DNS_ERROR_DP_ALREADY_EXISTS = 9902
const DNS_ERROR_DP_NOT_ENLISTED = 9903
const DNS_ERROR_DP_ALREADY_ENLISTED = 9904
const DNS_ERROR_DP_NOT_AVAILABLE = 9905
const DNS_ERROR_DP_FSMO_ERROR = 9906
const WSABASEERR = 10000
const WSAEINTR = WSABASEERR + 4
const WSAEBADF = WSABASEERR + 9
const WSAEACCES = WSABASEERR + 13
const WSAEFAULT = WSABASEERR + 14
const WSAEINVAL = WSABASEERR + 22
const WSAEMFILE = WSABASEERR + 24
const WSAEWOULDBLOCK = WSABASEERR + 35
const WSAEINPROGRESS = WSABASEERR + 36
const WSAEALREADY = WSABASEERR + 37
const WSAENOTSOCK = WSABASEERR + 38
const WSAEDESTADDRREQ = WSABASEERR + 39
const WSAEMSGSIZE = WSABASEERR + 40
const WSAEPROTOTYPE = WSABASEERR + 41
const WSAENOPROTOOPT = WSABASEERR + 42
const WSAEPROTONOSUPPORT = WSABASEERR + 43
const WSAESOCKTNOSUPPORT = WSABASEERR + 44
const WSAEOPNOTSUPP = WSABASEERR + 45
const WSAEPFNOSUPPORT = WSABASEERR + 46
const WSAEAFNOSUPPORT = WSABASEERR + 47
const WSAEADDRINUSE = WSABASEERR + 48
const WSAEADDRNOTAVAIL = WSABASEERR + 49
const WSAENETDOWN = WSABASEERR + 50
const WSAENETUNREACH = WSABASEERR + 51
const WSAENETRESET = WSABASEERR + 52
const WSAECONNABORTED = WSABASEERR + 53
const WSAECONNRESET = WSABASEERR + 54
const WSAENOBUFS = WSABASEERR + 55
const WSAEISCONN = WSABASEERR + 56
const WSAENOTCONN = WSABASEERR + 57
const WSAESHUTDOWN = WSABASEERR + 58
const WSAETOOMANYREFS = WSABASEERR + 59
const WSAETIMEDOUT = WSABASEERR + 60
const WSAECONNREFUSED = WSABASEERR + 61
const WSAELOOP = WSABASEERR + 62
const WSAENAMETOOLONG = WSABASEERR + 63
const WSAEHOSTDOWN = WSABASEERR + 64
const WSAEHOSTUNREACH = WSABASEERR + 65
const WSAENOTEMPTY = WSABASEERR + 66
const WSAEPROCLIM = WSABASEERR + 67
const WSAEUSERS = WSABASEERR + 68
const WSAEDQUOT = WSABASEERR + 69
const WSAESTALE = WSABASEERR + 70
const WSAEREMOTE = WSABASEERR + 71
const WSASYSNOTREADY = WSABASEERR + 91
const WSAVERNOTSUPPORTED = WSABASEERR + 92
const WSANOTINITIALISED = WSABASEERR + 93
const WSAEDISCON = WSABASEERR + 101
const WSAENOMORE = WSABASEERR + 102
const WSAECANCELLED = WSABASEERR + 103
const WSAEINVALIDPROCTABLE = WSABASEERR + 104
const WSAEINVALIDPROVIDER = WSABASEERR + 105
const WSAEPROVIDERFAILEDINIT = WSABASEERR + 106
const WSASYSCALLFAILURE = WSABASEERR + 107
const WSASERVICE_NOT_FOUND = WSABASEERR + 108
const WSATYPE_NOT_FOUND = WSABASEERR + 109
const WSA_E_NO_MORE = WSABASEERR + 110
const WSA_E_CANCELLED = WSABASEERR + 111
const WSAEREFUSED = WSABASEERR + 112
const WSAHOST_NOT_FOUND = WSABASEERR + 1001
const WSATRY_AGAIN = WSABASEERR + 1002
const WSANO_RECOVERY = WSABASEERR + 1003
const WSANO_DATA = WSABASEERR + 1004
const WSA_QOS_RECEIVERS = WSABASEERR + 1005
const WSA_QOS_SENDERS = WSABASEERR + 1006
const WSA_QOS_NO_SENDERS = WSABASEERR + 1007
const WSA_QOS_NO_RECEIVERS = WSABASEERR + 1008
const WSA_QOS_REQUEST_CONFIRMED = WSABASEERR + 1009
const WSA_QOS_ADMISSION_FAILURE = WSABASEERR + 1010
const WSA_QOS_POLICY_FAILURE = WSABASEERR + 1011
const WSA_QOS_BAD_STYLE = WSABASEERR + 1012
const WSA_QOS_BAD_OBJECT = WSABASEERR + 1013
const WSA_QOS_TRAFFIC_CTRL_ERROR = WSABASEERR + 1014
const WSA_QOS_GENERIC_ERROR = WSABASEERR + 1015
const WSA_QOS_ESERVICETYPE = WSABASEERR + 1016
const WSA_QOS_EFLOWSPEC = WSABASEERR + 1017
const WSA_QOS_EPROVSPECBUF = WSABASEERR + 1018
const WSA_QOS_EFILTERSTYLE = WSABASEERR + 1019
const WSA_QOS_EFILTERTYPE = WSABASEERR + 1020
const WSA_QOS_EFILTERCOUNT = WSABASEERR + 1021
const WSA_QOS_EOBJLENGTH = WSABASEERR + 1022
const WSA_QOS_EFLOWCOUNT = WSABASEERR + 1023
const WSA_QOS_EUNKNOWNPSOBJ = WSABASEERR + 1024
const WSA_QOS_EUNKOWNPSOBJ = WSA_QOS_EUNKNOWNPSOBJ
const WSA_QOS_EPOLICYOBJ = WSABASEERR + 1025
const WSA_QOS_EFLOWDESC = WSABASEERR + 1026
const WSA_QOS_EPSFLOWSPEC = WSABASEERR + 1027
const WSA_QOS_EPSFILTERSPEC = WSABASEERR + 1028
const WSA_QOS_ESDMODEOBJ = WSABASEERR + 1029
const WSA_QOS_ESHAPERATEOBJ = WSABASEERR + 1030
const WSA_QOS_RESERVED_PETYPE = WSABASEERR + 1031
const ERROR_SXS_SECTION_NOT_FOUND = 14000
const ERROR_SXS_CANT_GEN_ACTCTX = 14001
const ERROR_SXS_INVALID_ACTCTXDATA_FORMAT = 14002
const ERROR_SXS_ASSEMBLY_NOT_FOUND = 14003
const ERROR_SXS_MANIFEST_FORMAT_ERROR = 14004
const ERROR_SXS_MANIFEST_PARSE_ERROR = 14005
const ERROR_SXS_ACTIVATION_CONTEXT_DISABLED = 14006
const ERROR_SXS_KEY_NOT_FOUND = 14007
const ERROR_SXS_VERSION_CONFLICT = 14008
const ERROR_SXS_WRONG_SECTION_TYPE = 14009
const ERROR_SXS_THREAD_QUERIES_DISABLED = 14010
const ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET = 14011
const ERROR_SXS_UNKNOWN_ENCODING_GROUP = 14012
const ERROR_SXS_UNKNOWN_ENCODING = 14013
const ERROR_SXS_INVALID_XML_NAMESPACE_URI = 14014
const ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED = 14015
const ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED = 14016
const ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE = 14017
const ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE = 14018
const ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE = 14019
const ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT = 14020
const ERROR_SXS_DUPLICATE_DLL_NAME = 14021
const ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME = 14022
const ERROR_SXS_DUPLICATE_CLSID = 14023
const ERROR_SXS_DUPLICATE_IID = 14024
const ERROR_SXS_DUPLICATE_TLBID = 14025
const ERROR_SXS_DUPLICATE_PROGID = 14026
const ERROR_SXS_DUPLICATE_ASSEMBLY_NAME = 14027
const ERROR_SXS_FILE_HASH_MISMATCH = 14028
const ERROR_SXS_POLICY_PARSE_ERROR = 14029
const ERROR_SXS_XML_E_MISSINGQUOTE = 14030
const ERROR_SXS_XML_E_COMMENTSYNTAX = 14031
const ERROR_SXS_XML_E_BADSTARTNAMECHAR = 14032
const ERROR_SXS_XML_E_BADNAMECHAR = 14033
const ERROR_SXS_XML_E_BADCHARINSTRING = 14034
const ERROR_SXS_XML_E_XMLDECLSYNTAX = 14035
const ERROR_SXS_XML_E_BADCHARDATA = 14036
const ERROR_SXS_XML_E_MISSINGWHITESPACE = 14037
const ERROR_SXS_XML_E_EXPECTINGTAGEND = 14038
const ERROR_SXS_XML_E_MISSINGSEMICOLON = 14039
const ERROR_SXS_XML_E_UNBALANCEDPAREN = 14040
const ERROR_SXS_XML_E_INTERNALERROR = 14041
const ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE = 14042
const ERROR_SXS_XML_E_INCOMPLETE_ENCODING = 14043
const ERROR_SXS_XML_E_MISSING_PAREN = 14044
const ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE = 14045
const ERROR_SXS_XML_E_MULTIPLE_COLONS = 14046
const ERROR_SXS_XML_E_INVALID_DECIMAL = 14047
const ERROR_SXS_XML_E_INVALID_HEXIDECIMAL = 14048
const ERROR_SXS_XML_E_INVALID_UNICODE = 14049
const ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK = 14050
const ERROR_SXS_XML_E_UNEXPECTEDENDTAG = 14051
const ERROR_SXS_XML_E_UNCLOSEDTAG = 14052
const ERROR_SXS_XML_E_DUPLICATEATTRIBUTE = 14053
const ERROR_SXS_XML_E_MULTIPLEROOTS = 14054
const ERROR_SXS_XML_E_INVALIDATROOTLEVEL = 14055
const ERROR_SXS_XML_E_BADXMLDECL = 14056
const ERROR_SXS_XML_E_MISSINGROOT = 14057
const ERROR_SXS_XML_E_UNEXPECTEDEOF = 14058
const ERROR_SXS_XML_E_BADPEREFINSUBSET = 14059
const ERROR_SXS_XML_E_UNCLOSEDSTARTTAG = 14060
const ERROR_SXS_XML_E_UNCLOSEDENDTAG = 14061
const ERROR_SXS_XML_E_UNCLOSEDSTRING = 14062
const ERROR_SXS_XML_E_UNCLOSEDCOMMENT = 14063
const ERROR_SXS_XML_E_UNCLOSEDDECL = 14064
const ERROR_SXS_XML_E_UNCLOSEDCDATA = 14065
const ERROR_SXS_XML_E_RESERVEDNAMESPACE = 14066
const ERROR_SXS_XML_E_INVALIDENCODING = 14067
const ERROR_SXS_XML_E_INVALIDSWITCH = 14068
const ERROR_SXS_XML_E_BADXMLCASE = 14069
const ERROR_SXS_XML_E_INVALID_STANDALONE = 14070
const ERROR_SXS_XML_E_UNEXPECTED_STANDALONE = 14071
const ERROR_SXS_XML_E_INVALID_VERSION = 14072
const ERROR_SXS_XML_E_MISSINGEQUALS = 14073
const ERROR_SXS_PROTECTION_RECOVERY_FAILED = 14074
const ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT = 14075
const ERROR_SXS_PROTECTION_CATALOG_NOT_VALID = 14076
const ERROR_SXS_UNTRANSLATABLE_HRESULT = 14077
const ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING = 14078
const ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE = 14079
const ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME = 14080
const ERROR_SXS_ASSEMBLY_MISSING = 14081
const ERROR_SXS_CORRUPT_ACTIVATION_STACK = 14082
const ERROR_SXS_CORRUPTION = 14083
const ERROR_SXS_EARLY_DEACTIVATION = 14084
const ERROR_SXS_INVALID_DEACTIVATION = 14085
const ERROR_SXS_MULTIPLE_DEACTIVATION = 14086
const ERROR_SXS_PROCESS_TERMINATION_REQUESTED = 14087
const ERROR_SXS_RELEASE_ACTIVATION_CONTEXT = 14088
const ERROR_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY = 14089
const ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE = 14090
const ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME = 14091
const ERROR_SXS_IDENTITY_DUPLICATE_ATTRIBUTE = 14092
const ERROR_SXS_IDENTITY_PARSE_ERROR = 14093
const ERROR_MALFORMED_SUBSTITUTION_STRING = 14094
const ERROR_SXS_INCORRECT_PUBLIC_KEY_TOKEN = 14095
const ERROR_UNMAPPED_SUBSTITUTION_STRING = 14096
const ERROR_SXS_ASSEMBLY_NOT_LOCKED = 14097
const ERROR_SXS_COMPONENT_STORE_CORRUPT = 14098
const ERROR_ADVANCED_INSTALLER_FAILED = 14099
const ERROR_XML_ENCODING_MISMATCH = 14100
const ERROR_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT = 14101
const ERROR_SXS_IDENTITIES_DIFFERENT = 14102
const ERROR_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT = 14103
const ERROR_SXS_FILE_NOT_PART_OF_ASSEMBLY = 14104
const ERROR_SXS_MANIFEST_TOO_BIG = 14105
const ERROR_SXS_SETTING_NOT_REGISTERED = 14106
const ERROR_SXS_TRANSACTION_CLOSURE_INCOMPLETE = 14107
const ERROR_SMI_PRIMITIVE_INSTALLER_FAILED = 14108
const ERROR_GENERIC_COMMAND_FAILED = 14109
const ERROR_SXS_FILE_HASH_MISSING = 14110
const ERROR_IPSEC_QM_POLICY_EXISTS = 13000
const ERROR_IPSEC_QM_POLICY_NOT_FOUND = 13001
const ERROR_IPSEC_QM_POLICY_IN_USE = 13002
const ERROR_IPSEC_MM_POLICY_EXISTS = 13003
const ERROR_IPSEC_MM_POLICY_NOT_FOUND = 13004
const ERROR_IPSEC_MM_POLICY_IN_USE = 13005
const ERROR_IPSEC_MM_FILTER_EXISTS = 13006
const ERROR_IPSEC_MM_FILTER_NOT_FOUND = 13007
const ERROR_IPSEC_TRANSPORT_FILTER_EXISTS = 13008
const ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND = 13009
const ERROR_IPSEC_MM_AUTH_EXISTS = 13010
const ERROR_IPSEC_MM_AUTH_NOT_FOUND = 13011
const ERROR_IPSEC_MM_AUTH_IN_USE = 13012
const ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND = 13013
const ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND = 13014
const ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND = 13015
const ERROR_IPSEC_TUNNEL_FILTER_EXISTS = 13016
const ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND = 13017
const ERROR_IPSEC_MM_FILTER_PENDING_DELETION = 13018
const ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION = 13019
const ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION = 13020
const ERROR_IPSEC_MM_POLICY_PENDING_DELETION = 13021
const ERROR_IPSEC_MM_AUTH_PENDING_DELETION = 13022
const ERROR_IPSEC_QM_POLICY_PENDING_DELETION = 13023
const WARNING_IPSEC_MM_POLICY_PRUNED = 13024
const WARNING_IPSEC_QM_POLICY_PRUNED = 13025
const ERROR_IPSEC_IKE_NEG_STATUS_BEGIN = 13800
const ERROR_IPSEC_IKE_AUTH_FAIL = 13801
const ERROR_IPSEC_IKE_ATTRIB_FAIL = 13802
const ERROR_IPSEC_IKE_NEGOTIATION_PENDING = 13803
const ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR = 13804
const ERROR_IPSEC_IKE_TIMED_OUT = 13805
const ERROR_IPSEC_IKE_NO_CERT = 13806
const ERROR_IPSEC_IKE_SA_DELETED = 13807
const ERROR_IPSEC_IKE_SA_REAPED = 13808
const ERROR_IPSEC_IKE_MM_ACQUIRE_DROP = 13809
const ERROR_IPSEC_IKE_QM_ACQUIRE_DROP = 13810
const ERROR_IPSEC_IKE_QUEUE_DROP_MM = 13811
const ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM = 13812
const ERROR_IPSEC_IKE_DROP_NO_RESPONSE = 13813
const ERROR_IPSEC_IKE_MM_DELAY_DROP = 13814
const ERROR_IPSEC_IKE_QM_DELAY_DROP = 13815
const ERROR_IPSEC_IKE_ERROR = 13816
const ERROR_IPSEC_IKE_CRL_FAILED = 13817
const ERROR_IPSEC_IKE_INVALID_KEY_USAGE = 13818
const ERROR_IPSEC_IKE_INVALID_CERT_TYPE = 13819
const ERROR_IPSEC_IKE_NO_PRIVATE_KEY = 13820
const ERROR_IPSEC_IKE_DH_FAIL = 13822
const ERROR_IPSEC_IKE_INVALID_HEADER = 13824
const ERROR_IPSEC_IKE_NO_POLICY = 13825
const ERROR_IPSEC_IKE_INVALID_SIGNATURE = 13826
const ERROR_IPSEC_IKE_KERBEROS_ERROR = 13827
const ERROR_IPSEC_IKE_NO_PUBLIC_KEY = 13828
const ERROR_IPSEC_IKE_PROCESS_ERR = 13829
const ERROR_IPSEC_IKE_PROCESS_ERR_SA = 13830
const ERROR_IPSEC_IKE_PROCESS_ERR_PROP = 13831
const ERROR_IPSEC_IKE_PROCESS_ERR_TRANS = 13832
const ERROR_IPSEC_IKE_PROCESS_ERR_KE = 13833
const ERROR_IPSEC_IKE_PROCESS_ERR_ID = 13834
const ERROR_IPSEC_IKE_PROCESS_ERR_CERT = 13835
const ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ = 13836
const ERROR_IPSEC_IKE_PROCESS_ERR_HASH = 13837
const ERROR_IPSEC_IKE_PROCESS_ERR_SIG = 13838
const ERROR_IPSEC_IKE_PROCESS_ERR_NONCE = 13839
const ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY = 13840
const ERROR_IPSEC_IKE_PROCESS_ERR_DELETE = 13841
const ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR = 13842
const ERROR_IPSEC_IKE_INVALID_PAYLOAD = 13843
const ERROR_IPSEC_IKE_LOAD_SOFT_SA = 13844
const ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN = 13845
const ERROR_IPSEC_IKE_INVALID_COOKIE = 13846
const ERROR_IPSEC_IKE_NO_PEER_CERT = 13847
const ERROR_IPSEC_IKE_PEER_CRL_FAILED = 13848
const ERROR_IPSEC_IKE_POLICY_CHANGE = 13849
const ERROR_IPSEC_IKE_NO_MM_POLICY = 13850
const ERROR_IPSEC_IKE_NOTCBPRIV = 13851
const ERROR_IPSEC_IKE_SECLOADFAIL = 13852
const ERROR_IPSEC_IKE_FAILSSPINIT = 13853
const ERROR_IPSEC_IKE_FAILQUERYSSP = 13854
const ERROR_IPSEC_IKE_SRVACQFAIL = 13855
const ERROR_IPSEC_IKE_SRVQUERYCRED = 13856
const ERROR_IPSEC_IKE_GETSPIFAIL = 13857
const ERROR_IPSEC_IKE_INVALID_FILTER = 13858
const ERROR_IPSEC_IKE_OUT_OF_MEMORY = 13859
const ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED = 13860
const ERROR_IPSEC_IKE_INVALID_POLICY = 13861
const ERROR_IPSEC_IKE_UNKNOWN_DOI = 13862
const ERROR_IPSEC_IKE_INVALID_SITUATION = 13863
const ERROR_IPSEC_IKE_DH_FAILURE = 13864
const ERROR_IPSEC_IKE_INVALID_GROUP = 13865
const ERROR_IPSEC_IKE_ENCRYPT = 13866
const ERROR_IPSEC_IKE_DECRYPT = 13867
const ERROR_IPSEC_IKE_POLICY_MATCH = 13868
const ERROR_IPSEC_IKE_UNSUPPORTED_ID = 13869
const ERROR_IPSEC_IKE_INVALID_HASH = 13870
const ERROR_IPSEC_IKE_INVALID_HASH_ALG = 13871
const ERROR_IPSEC_IKE_INVALID_HASH_SIZE = 13872
const ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG = 13873
const ERROR_IPSEC_IKE_INVALID_AUTH_ALG = 13874
const ERROR_IPSEC_IKE_INVALID_SIG = 13875
const ERROR_IPSEC_IKE_LOAD_FAILED = 13876
const ERROR_IPSEC_IKE_RPC_DELETE = 13877
const ERROR_IPSEC_IKE_BENIGN_REINIT = 13878
const ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY = 13879
const ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN = 13881
const ERROR_IPSEC_IKE_MM_LIMIT = 13882
const ERROR_IPSEC_IKE_NEGOTIATION_DISABLED = 13883
const ERROR_IPSEC_IKE_QM_LIMIT = 13884
const ERROR_IPSEC_IKE_MM_EXPIRED = 13885
const ERROR_IPSEC_IKE_PEER_MM_ASSUMED_INVALID = 13886
const ERROR_IPSEC_IKE_CERT_CHAIN_POLICY_MISMATCH = 13887
const ERROR_IPSEC_IKE_UNEXPECTED_MESSAGE_ID = 13888
const ERROR_IPSEC_IKE_INVALID_AUTH_PAYLOAD = 13889
const ERROR_IPSEC_IKE_DOS_COOKIE_SENT = 13890
const ERROR_IPSEC_IKE_SHUTTING_DOWN = 13891
const ERROR_IPSEC_IKE_CGA_AUTH_FAILED = 13892
const ERROR_IPSEC_IKE_PROCESS_ERR_NATOA = 13893
const ERROR_IPSEC_IKE_INVALID_MM_FOR_QM = 13894
const ERROR_IPSEC_IKE_QM_EXPIRED = 13895
const ERROR_IPSEC_IKE_TOO_MANY_FILTERS = 13896
const ERROR_IPSEC_IKE_NEG_STATUS_END = 13897
const ERROR_IPSEC_IKE_KILL_DUMMY_NAP_TUNNEL = 13898
const ERROR_IPSEC_IKE_INNER_IP_ASSIGNMENT_FAILURE = 13899
const ERROR_IPSEC_IKE_REQUIRE_CP_PAYLOAD_MISSING = 13900
const ERROR_IPSEC_KEY_MODULE_IMPERSONATION_NEGOTIATION_PENDING = 13901
const ERROR_IPSEC_IKE_COEXISTENCE_SUPPRESS = 13902
const ERROR_IPSEC_IKE_RATELIMIT_DROP = 13903
const ERROR_IPSEC_IKE_PEER_DOESNT_SUPPORT_MOBIKE = 13904
const ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE = 13905
const ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_FAILURE = 13906
const ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE_WITH_OPTIONAL_RETRY = 13907
const ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_AND_CERTMAP_FAILURE = 13908
const ERROR_IPSEC_IKE_NEG_STATUS_EXTENDED_END = 13909
const ERROR_IPSEC_BAD_SPI = 13910
const ERROR_IPSEC_SA_LIFETIME_EXPIRED = 13911
const ERROR_IPSEC_WRONG_SA = 13912
const ERROR_IPSEC_REPLAY_CHECK_FAILED = 13913
const ERROR_IPSEC_INVALID_PACKET = 13914
const ERROR_IPSEC_INTEGRITY_CHECK_FAILED = 13915
const ERROR_IPSEC_CLEAR_TEXT_DROP = 13916
const ERROR_IPSEC_AUTH_FIREWALL_DROP = 13917
const ERROR_IPSEC_THROTTLE_DROP = 13918
const ERROR_IPSEC_DOSP_BLOCK = 13925
const ERROR_IPSEC_DOSP_RECEIVED_MULTICAST = 13926
const ERROR_IPSEC_DOSP_INVALID_PACKET = 13927
const ERROR_IPSEC_DOSP_STATE_LOOKUP_FAILED = 13928
const ERROR_IPSEC_DOSP_MAX_ENTRIES = 13929
const ERROR_IPSEC_DOSP_KEYMOD_NOT_ALLOWED = 13930
const ERROR_IPSEC_DOSP_NOT_INSTALLED = 13931
const ERROR_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES = 13932
const ERROR_EVT_INVALID_CHANNEL_PATH = 15000
const ERROR_EVT_INVALID_QUERY = 15001
const ERROR_EVT_PUBLISHER_METADATA_NOT_FOUND = 15002
const ERROR_EVT_EVENT_TEMPLATE_NOT_FOUND = 15003
const ERROR_EVT_INVALID_PUBLISHER_NAME = 15004
const ERROR_EVT_INVALID_EVENT_DATA = 15005
const ERROR_EVT_CHANNEL_NOT_FOUND = 15007
const ERROR_EVT_MALFORMED_XML_TEXT = 15008
const ERROR_EVT_SUBSCRIPTION_TO_DIRECT_CHANNEL = 15009
const ERROR_EVT_CONFIGURATION_ERROR = 15010
const ERROR_EVT_QUERY_RESULT_STALE = 15011
const ERROR_EVT_QUERY_RESULT_INVALID_POSITION = 15012
const ERROR_EVT_NON_VALIDATING_MSXML = 15013
const ERROR_EVT_FILTER_ALREADYSCOPED = 15014
const ERROR_EVT_FILTER_NOTELTSET = 15015
const ERROR_EVT_FILTER_INVARG = 15016
const ERROR_EVT_FILTER_INVTEST = 15017
const ERROR_EVT_FILTER_INVTYPE = 15018
const ERROR_EVT_FILTER_PARSEERR = 15019
const ERROR_EVT_FILTER_UNSUPPORTEDOP = 15020
const ERROR_EVT_FILTER_UNEXPECTEDTOKEN = 15021
const ERROR_EVT_INVALID_OPERATION_OVER_ENABLED_DIRECT_CHANNEL = 15022
const ERROR_EVT_INVALID_CHANNEL_PROPERTY_VALUE = 15023
const ERROR_EVT_INVALID_PUBLISHER_PROPERTY_VALUE = 15024
const ERROR_EVT_CHANNEL_CANNOT_ACTIVATE = 15025
const ERROR_EVT_FILTER_TOO_COMPLEX = 15026
const ERROR_EVT_MESSAGE_NOT_FOUND = 15027
const ERROR_EVT_MESSAGE_ID_NOT_FOUND = 15028
const ERROR_EVT_UNRESOLVED_VALUE_INSERT = 15029
const ERROR_EVT_UNRESOLVED_PARAMETER_INSERT = 15030
const ERROR_EVT_MAX_INSERTS_REACHED = 15031
const ERROR_EVT_EVENT_DEFINITION_NOT_FOUND = 15032
const ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND = 15033
const ERROR_EVT_VERSION_TOO_OLD = 15034
const ERROR_EVT_VERSION_TOO_NEW = 15035
const ERROR_EVT_CANNOT_OPEN_CHANNEL_OF_QUERY = 15036
const ERROR_EVT_PUBLISHER_DISABLED = 15037
const ERROR_EVT_FILTER_OUT_OF_RANGE = 15038
const ERROR_EC_SUBSCRIPTION_CANNOT_ACTIVATE = 15080
const ERROR_EC_LOG_DISABLED = 15081
const ERROR_EC_CIRCULAR_FORWARDING = 15082
const ERROR_EC_CREDSTORE_FULL = 15083
const ERROR_EC_CRED_NOT_FOUND = 15084
const ERROR_EC_NO_ACTIVE_CHANNEL = 15085
const ERROR_MUI_FILE_NOT_FOUND = 15100
const ERROR_MUI_INVALID_FILE = 15101
const ERROR_MUI_INVALID_RC_CONFIG = 15102
const ERROR_MUI_INVALID_LOCALE_NAME = 15103
const ERROR_MUI_INVALID_ULTIMATEFALLBACK_NAME = 15104
const ERROR_MUI_FILE_NOT_LOADED = 15105
const ERROR_RESOURCE_ENUM_USER_STOP = 15106
const ERROR_MUI_INTLSETTINGS_UILANG_NOT_INSTALLED = 15107
const ERROR_MUI_INTLSETTINGS_INVALID_LOCALE_NAME = 15108
const ERROR_MRM_RUNTIME_NO_DEFAULT_OR_NEUTRAL_RESOURCE = 15110
const ERROR_MRM_INVALID_PRICONFIG = 15111
const ERROR_MRM_INVALID_FILE_TYPE = 15112
const ERROR_MRM_UNKNOWN_QUALIFIER = 15113
const ERROR_MRM_INVALID_QUALIFIER_VALUE = 15114
const ERROR_MRM_NO_CANDIDATE = 15115
const ERROR_MRM_NO_MATCH_OR_DEFAULT_CANDIDATE = 15116
const ERROR_MRM_RESOURCE_TYPE_MISMATCH = 15117
const ERROR_MRM_DUPLICATE_MAP_NAME = 15118
const ERROR_MRM_DUPLICATE_ENTRY = 15119
const ERROR_MRM_INVALID_RESOURCE_IDENTIFIER = 15120
const ERROR_MRM_FILEPATH_TOO_LONG = 15121
const ERROR_MRM_UNSUPPORTED_DIRECTORY_TYPE = 15122
const ERROR_MRM_INVALID_PRI_FILE = 15126
const ERROR_MRM_NAMED_RESOURCE_NOT_FOUND = 15127
const ERROR_MRM_MAP_NOT_FOUND = 15135
const ERROR_MRM_UNSUPPORTED_PROFILE_TYPE = 15136
const ERROR_MRM_INVALID_QUALIFIER_OPERATOR = 15137
const ERROR_MRM_INDETERMINATE_QUALIFIER_VALUE = 15138
const ERROR_MRM_AUTOMERGE_ENABLED = 15139
const ERROR_MRM_TOO_MANY_RESOURCES = 15140
const ERROR_MCA_INVALID_CAPABILITIES_STRING = 15200
const ERROR_MCA_INVALID_VCP_VERSION = 15201
const ERROR_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION = 15202
const ERROR_MCA_MCCS_VERSION_MISMATCH = 15203
const ERROR_MCA_UNSUPPORTED_MCCS_VERSION = 15204
const ERROR_MCA_INTERNAL_ERROR = 15205
const ERROR_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED = 15206
const ERROR_MCA_UNSUPPORTED_COLOR_TEMPERATURE = 15207
const ERROR_AMBIGUOUS_SYSTEM_DEVICE = 15250
const ERROR_SYSTEM_DEVICE_NOT_FOUND = 15299
const ERROR_HASH_NOT_SUPPORTED = 15300
const ERROR_HASH_NOT_PRESENT = 15301
const ERROR_SECONDARY_IC_PROVIDER_NOT_REGISTERED = 15321
const ERROR_GPIO_CLIENT_INFORMATION_INVALID = 15322
const ERROR_GPIO_VERSION_NOT_SUPPORTED = 15323
const ERROR_GPIO_INVALID_REGISTRATION_PACKET = 15324
const ERROR_GPIO_OPERATION_DENIED = 15325
const ERROR_GPIO_INCOMPATIBLE_CONNECT_MODE = 15326
const ERROR_GPIO_INTERRUPT_ALREADY_UNMASKED = 15327
const ERROR_CANNOT_SWITCH_RUNLEVEL = 15400
const ERROR_INVALID_RUNLEVEL_SETTING = 15401
const ERROR_RUNLEVEL_SWITCH_TIMEOUT = 15402
const ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT = 15403
const ERROR_RUNLEVEL_SWITCH_IN_PROGRESS = 15404
const ERROR_SERVICES_FAILED_AUTOSTART = 15405
const ERROR_COM_TASK_STOP_PENDING = 15501
const ERROR_INSTALL_OPEN_PACKAGE_FAILED = 15600
const ERROR_INSTALL_PACKAGE_NOT_FOUND = 15601
const ERROR_INSTALL_INVALID_PACKAGE = 15602
const ERROR_INSTALL_RESOLVE_DEPENDENCY_FAILED = 15603
const ERROR_INSTALL_OUT_OF_DISK_SPACE = 15604
const ERROR_INSTALL_NETWORK_FAILURE = 15605
const ERROR_INSTALL_REGISTRATION_FAILURE = 15606
const ERROR_INSTALL_DEREGISTRATION_FAILURE = 15607
const ERROR_INSTALL_CANCEL = 15608
const ERROR_INSTALL_FAILED = 15609
const ERROR_REMOVE_FAILED = 15610
const ERROR_PACKAGE_ALREADY_EXISTS = 15611
const ERROR_NEEDS_REMEDIATION = 15612
const ERROR_INSTALL_PREREQUISITE_FAILED = 15613
const ERROR_PACKAGE_REPOSITORY_CORRUPTED = 15614
const ERROR_INSTALL_POLICY_FAILURE = 15615
const ERROR_PACKAGE_UPDATING = 15616
const ERROR_DEPLOYMENT_BLOCKED_BY_POLICY = 15617
const ERROR_PACKAGES_IN_USE = 15618
const ERROR_RECOVERY_FILE_CORRUPT = 15619
const ERROR_INVALID_STAGED_SIGNATURE = 15620
const ERROR_DELETING_EXISTING_APPLICATIONDATA_STORE_FAILED = 15621
const ERROR_INSTALL_PACKAGE_DOWNGRADE = 15622
const ERROR_SYSTEM_NEEDS_REMEDIATION = 15623
const ERROR_APPX_INTEGRITY_FAILURE_CLR_NGEN = 15624
const ERROR_RESILIENCY_FILE_CORRUPT = 15625
const ERROR_INSTALL_FIREWALL_SERVICE_NOT_RUNNING = 15626
const APPMODEL_ERROR_NO_PACKAGE = 15700
const APPMODEL_ERROR_PACKAGE_RUNTIME_CORRUPT = 15701
const APPMODEL_ERROR_PACKAGE_IDENTITY_CORRUPT = 15702
const APPMODEL_ERROR_NO_APPLICATION = 15703
const ERROR_STATE_LOAD_STORE_FAILED = 15800
const ERROR_STATE_GET_VERSION_FAILED = 15801
const ERROR_STATE_SET_VERSION_FAILED = 15802
const ERROR_STATE_STRUCTURED_RESET_FAILED = 15803
const ERROR_STATE_OPEN_CONTAINER_FAILED = 15804
const ERROR_STATE_CREATE_CONTAINER_FAILED = 15805
const ERROR_STATE_DELETE_CONTAINER_FAILED = 15806
const ERROR_STATE_READ_SETTING_FAILED = 15807
const ERROR_STATE_WRITE_SETTING_FAILED = 15808
const ERROR_STATE_DELETE_SETTING_FAILED = 15809
const ERROR_STATE_QUERY_SETTING_FAILED = 15810
const ERROR_STATE_READ_COMPOSITE_SETTING_FAILED = 15811
const ERROR_STATE_WRITE_COMPOSITE_SETTING_FAILED = 15812
const ERROR_STATE_ENUMERATE_CONTAINER_FAILED = 15813
const ERROR_STATE_ENUMERATE_SETTINGS_FAILED = 15814
const ERROR_STATE_COMPOSITE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED = 15815
const ERROR_STATE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED = 15816
const ERROR_STATE_SETTING_NAME_SIZE_LIMIT_EXCEEDED = 15817
const ERROR_STATE_CONTAINER_NAME_SIZE_LIMIT_EXCEEDED = 15818
const ERROR_API_UNAVAILABLE = 15841
const SEVERITY_SUCCESS = 0
const SEVERITY_ERROR = 1
const FACILITY_NT_BIT = &h10000000
const NOERROR = 0
const S_OK = cast(HRESULT, &h000000000)
const S_FALSE = cast(HRESULT, &h00000001)
const OLE_E_FIRST = cast(HRESULT, &h80040000)
const OLE_E_LAST = cast(HRESULT, &h800400FF)
const OLE_S_FIRST = cast(HRESULT, &h00040000)
const OLE_S_LAST = cast(HRESULT, &h000400FF)
const DRAGDROP_E_FIRST = &h80040100
const DRAGDROP_E_LAST = &h8004010F
const DRAGDROP_S_FIRST = &h00040100
const DRAGDROP_S_LAST = &h0004010F
const CLASSFACTORY_E_FIRST = &h80040110
const CLASSFACTORY_E_LAST = &h8004011F
const CLASSFACTORY_S_FIRST = &h00040110
const CLASSFACTORY_S_LAST = &h0004011F
const MARSHAL_E_FIRST = &h80040120
const MARSHAL_E_LAST = &h8004012F
const MARSHAL_S_FIRST = &h00040120
const MARSHAL_S_LAST = &h0004012F
const DATA_E_FIRST = &h80040130
const DATA_E_LAST = &h8004013F
const DATA_S_FIRST = &h00040130
const DATA_S_LAST = &h0004013F
const VIEW_E_FIRST = &h80040140
const VIEW_E_LAST = &h8004014F
const VIEW_S_FIRST = &h00040140
const VIEW_S_LAST = &h0004014F
const REGDB_E_FIRST = &h80040150
const REGDB_E_LAST = &h8004015F
const REGDB_S_FIRST = &h00040150
const REGDB_S_LAST = &h0004015F
const CAT_E_FIRST = &h80040160
const CAT_E_LAST = &h80040161
const CS_E_FIRST = &h80040164
const CS_E_LAST = &h8004016F
const CACHE_E_FIRST = &h80040170
const CACHE_E_LAST = &h8004017F
const CACHE_S_FIRST = &h00040170
const CACHE_S_LAST = &h0004017F
const OLEOBJ_E_FIRST = &h80040180
const OLEOBJ_E_LAST = &h8004018F
const OLEOBJ_S_FIRST = &h00040180
const OLEOBJ_S_LAST = &h0004018F
const CLIENTSITE_E_FIRST = &h80040190
const CLIENTSITE_E_LAST = &h8004019F
const CLIENTSITE_S_FIRST = &h00040190
const CLIENTSITE_S_LAST = &h0004019F
const INPLACE_E_FIRST = &h800401A0
const INPLACE_E_LAST = &h800401AF
const INPLACE_S_FIRST = &h000401A0
const INPLACE_S_LAST = &h000401AF
const ENUM_E_FIRST = &h800401B0
const ENUM_E_LAST = &h800401BF
const ENUM_S_FIRST = &h000401B0
const ENUM_S_LAST = &h000401BF
const CONVERT10_E_FIRST = &h800401C0
const CONVERT10_E_LAST = &h800401CF
const CONVERT10_S_FIRST = &h000401C0
const CONVERT10_S_LAST = &h000401CF
const CLIPBRD_E_FIRST = &h800401D0
const CLIPBRD_E_LAST = &h800401DF
const CLIPBRD_S_FIRST = &h000401D0
const CLIPBRD_S_LAST = &h000401DF
const MK_E_FIRST = &h800401E0
const MK_E_LAST = &h800401EF
const MK_S_FIRST = &h000401E0
const MK_S_LAST = &h000401EF
const CO_E_FIRST = &h800401F0
const CO_E_LAST = &h800401FF
const CO_S_FIRST = &h000401F0
const CO_S_LAST = &h000401FF
const EVENT_E_FIRST = &h80040200
const EVENT_E_LAST = &h8004021F
const EVENT_S_FIRST = &h00040200
const EVENT_S_LAST = &h0004021F
const XACT_E_FIRST = &h8004D000
const XACT_E_LAST = &h8004D029
const XACT_S_FIRST = &h0004D000
const XACT_S_LAST = &h0004D010
const CONTEXT_E_FIRST = &h8004E000
const CONTEXT_E_LAST = &h8004E02F
const CONTEXT_S_FIRST = &h0004E000
const CONTEXT_S_LAST = &h0004E02F
const NTE_OP_OK = 0
const SCARD_S_SUCCESS = NO_ERROR


const FACILITY_USERMODE_FILTER_MANAGER = &h1f
const ERROR_FLT_IO_COMPLETE = cast(HRESULT, &h001f0001)
const ERROR_FLT_NO_HANDLER_DEFINED = cast(HRESULT, &h801f0001)
const ERROR_FLT_CONTEXT_ALREADY_DEFINED = cast(HRESULT, &h801f0002)
const ERROR_FLT_INVALID_ASYNCHRONOUS_REQUEST = cast(HRESULT, &h801f0003)
const ERROR_FLT_DISALLOW_FAST_IO = cast(HRESULT, &h801f0004)
const ERROR_FLT_INVALID_NAME_REQUEST = cast(HRESULT, &h801f0005)
const ERROR_FLT_NOT_SAFE_TO_POST_OPERATION = cast(HRESULT, &h801f0006)
const ERROR_FLT_NOT_INITIALIZED = cast(HRESULT, &h801f0007)
const ERROR_FLT_FILTER_NOT_READY = cast(HRESULT, &h801f0008)
const ERROR_FLT_POST_OPERATION_CLEANUP = cast(HRESULT, &h801f0009)
const ERROR_FLT_INTERNAL_ERROR = cast(HRESULT, &h801f000a)
const ERROR_FLT_DELETING_OBJECT = cast(HRESULT, &h801f000b)
const ERROR_FLT_MUST_BE_NONPAGED_POOL = cast(HRESULT, &h801f000c)
const ERROR_FLT_DUPLICATE_ENTRY = cast(HRESULT, &h801f000d)
const ERROR_FLT_CBDQ_DISABLED = cast(HRESULT, &h801f000e)
const ERROR_FLT_DO_NOT_ATTACH = cast(HRESULT, &h801f000f)
const ERROR_FLT_DO_NOT_DETACH = cast(HRESULT, &h801f0010)
const ERROR_FLT_INSTANCE_ALTITUDE_COLLISION = cast(HRESULT, &h801f0011)
const ERROR_FLT_INSTANCE_NAME_COLLISION = cast(HRESULT, &h801f0012)
const ERROR_FLT_FILTER_NOT_FOUND = cast(HRESULT, &h801f0013)
const ERROR_FLT_VOLUME_NOT_FOUND = cast(HRESULT, &h801f0014)
const ERROR_FLT_INSTANCE_NOT_FOUND = cast(HRESULT, &h801f0015)
const ERROR_FLT_CONTEXT_ALLOCATION_NOT_FOUND = cast(HRESULT, &h801f0016)
const ERROR_FLT_INVALID_CONTEXT_REGISTRATION = cast(HRESULT, &h801f0017)
const ERROR_FLT_NAME_CACHE_MISS = cast(HRESULT, &h801f0018)
const ERROR_FLT_NO_DEVICE_OBJECT = cast(HRESULT, &h801f0019)
const ERROR_FLT_VOLUME_ALREADY_MOUNTED = cast(HRESULT, &h801f001a)
const ERROR_FLT_ALREADY_ENLISTED = cast(HRESULT, &h801f001b)
const ERROR_FLT_CONTEXT_ALREADY_LINKED = cast(HRESULT, &h801F001c)
const ERROR_FLT_NO_WAITER_FOR_REPLY = cast(HRESULT, &h801f0020)
const ERROR_FLT_REGISTRATION_BUSY = cast(HRESULT, &h801F0023)
#undef __IN__WINERROR_


extern "Windows"


type _SECURITY_ATTRIBUTES
 nLength as DWORD
 lpSecurityDescriptor as LPVOID
 bInheritHandle as WINBOOL
end type

type SECURITY_ATTRIBUTES as _SECURITY_ATTRIBUTES
type PSECURITY_ATTRIBUTES as _SECURITY_ATTRIBUTES ptr
type LPSECURITY_ATTRIBUTES as _SECURITY_ATTRIBUTES ptr

type _OVERLAPPED
 Internal as ULONG_PTR
 InternalHigh as ULONG_PTR

 union
 type
 Offset as DWORD
 OffsetHigh as DWORD
 end type

 Pointer as PVOID
 end union

 hEvent as HANDLE
end type

type OVERLAPPED as _OVERLAPPED
type LPOVERLAPPED as _OVERLAPPED ptr

type _OVERLAPPED_ENTRY
 lpCompletionKey as ULONG_PTR
 lpOverlapped as LPOVERLAPPED
 Internal as ULONG_PTR
 dwNumberOfBytesTransferred as DWORD
end type

type OVERLAPPED_ENTRY as _OVERLAPPED_ENTRY
type LPOVERLAPPED_ENTRY as _OVERLAPPED_ENTRY ptr

type _SYSTEMTIME
 wYear as WORD
 wMonth as WORD
 wDayOfWeek as WORD
 wDay as WORD
 wHour as WORD
 wMinute as WORD
 wSecond as WORD
 wMilliseconds as WORD
end type

type SYSTEMTIME as _SYSTEMTIME
type PSYSTEMTIME as _SYSTEMTIME ptr
type LPSYSTEMTIME as _SYSTEMTIME ptr

type _WIN32_FIND_DATAA
 dwFileAttributes as DWORD
 ftCreationTime as FILETIME
 ftLastAccessTime as FILETIME
 ftLastWriteTime as FILETIME
 nFileSizeHigh as DWORD
 nFileSizeLow as DWORD
 dwReserved0 as DWORD
 dwReserved1 as DWORD
 cFileName as zstring * 260
 cAlternateFileName as zstring * 14
end type

type WIN32_FIND_DATAA as _WIN32_FIND_DATAA
type PWIN32_FIND_DATAA as _WIN32_FIND_DATAA ptr
type LPWIN32_FIND_DATAA as _WIN32_FIND_DATAA ptr

type _WIN32_FIND_DATAW
 dwFileAttributes as DWORD
 ftCreationTime as FILETIME
 ftLastAccessTime as FILETIME
 ftLastWriteTime as FILETIME
 nFileSizeHigh as DWORD
 nFileSizeLow as DWORD
 dwReserved0 as DWORD
 dwReserved1 as DWORD
 cFileName as wstring * 260
 cAlternateFileName as wstring * 14
end type

type WIN32_FIND_DATAW as _WIN32_FIND_DATAW
type PWIN32_FIND_DATAW as _WIN32_FIND_DATAW ptr
type LPWIN32_FIND_DATAW as _WIN32_FIND_DATAW ptr

 type WIN32_FIND_DATA as WIN32_FIND_DATAA
 type PWIN32_FIND_DATA as PWIN32_FIND_DATAA
 type LPWIN32_FIND_DATA as LPWIN32_FIND_DATAA

type _FINDEX_INFO_LEVELS as long
enum
 FindExInfoStandard
 FindExInfoBasic
 FindExInfoMaxInfoLevel
end enum

type FINDEX_INFO_LEVELS as _FINDEX_INFO_LEVELS
const FIND_FIRST_EX_CASE_SENSITIVE = &h00000001
const FIND_FIRST_EX_LARGE_FETCH = &h00000002

type _FINDEX_SEARCH_OPS as long
enum
 FindExSearchNameMatch
 FindExSearchLimitToDirectories
 FindExSearchLimitToDevices
 FindExSearchMaxSearchOp
end enum

type FINDEX_SEARCH_OPS as _FINDEX_SEARCH_OPS

type _GET_FILEEX_INFO_LEVELS as long
enum
 GetFileExInfoStandard
 GetFileExMaxInfoLevel
end enum

type GET_FILEEX_INFO_LEVELS as _GET_FILEEX_INFO_LEVELS


type CRITICAL_SECTION as RTL_CRITICAL_SECTION
type PCRITICAL_SECTION as PRTL_CRITICAL_SECTION
type LPCRITICAL_SECTION as PRTL_CRITICAL_SECTION
type CRITICAL_SECTION_DEBUG as RTL_CRITICAL_SECTION_DEBUG
type PCRITICAL_SECTION_DEBUG as PRTL_CRITICAL_SECTION_DEBUG
type LPCRITICAL_SECTION_DEBUG as PRTL_CRITICAL_SECTION_DEBUG
type LPOVERLAPPED_COMPLETION_ROUTINE as sub(byval dwErrorCode as DWORD, byval dwNumberOfBytesTransfered as DWORD, byval lpOverlapped as LPOVERLAPPED)
const LOCKFILE_FAIL_IMMEDIATELY = &h1
const LOCKFILE_EXCLUSIVE_LOCK = &h2

type _PROCESS_HEAP_ENTRY_Block
 hMem as HANDLE
 dwReserved(0 to 2) as DWORD
end type

type _PROCESS_HEAP_ENTRY_Region
 dwCommittedSize as DWORD
 dwUnCommittedSize as DWORD
 lpFirstBlock as LPVOID
 lpLastBlock as LPVOID
end type

type _PROCESS_HEAP_ENTRY
 lpData as PVOID
 cbData as DWORD
 cbOverhead as UBYTE
 iRegionIndex as UBYTE
 wFlags as WORD

 union
 Block as _PROCESS_HEAP_ENTRY_Block
 Region as _PROCESS_HEAP_ENTRY_Region
 end union
end type

type PROCESS_HEAP_ENTRY as _PROCESS_HEAP_ENTRY
type LPPROCESS_HEAP_ENTRY as _PROCESS_HEAP_ENTRY ptr
type PPROCESS_HEAP_ENTRY as _PROCESS_HEAP_ENTRY ptr

const PROCESS_HEAP_REGION = &h1
const PROCESS_HEAP_UNCOMMITTED_RANGE = &h2
const PROCESS_HEAP_ENTRY_BUSY = &h4
const PROCESS_HEAP_ENTRY_MOVEABLE = &h10
const PROCESS_HEAP_ENTRY_DDESHARE = &h20

type _REASON_CONTEXT_Reason_Detailed
 LocalizedReasonModule as HMODULE
 LocalizedReasonId as ULONG
 ReasonStringCount as ULONG
 ReasonStrings as LPWSTR ptr
end type

union _REASON_CONTEXT_Reason
 Detailed as _REASON_CONTEXT_Reason_Detailed
 SimpleReasonString as LPWSTR
end union

type _REASON_CONTEXT
 Version as ULONG
 Flags as DWORD
 Reason as _REASON_CONTEXT_Reason
end type

type REASON_CONTEXT as _REASON_CONTEXT
type PREASON_CONTEXT as _REASON_CONTEXT ptr
const EXCEPTION_DEBUG_EVENT = 1
const CREATE_THREAD_DEBUG_EVENT = 2
const CREATE_PROCESS_DEBUG_EVENT = 3
const EXIT_THREAD_DEBUG_EVENT = 4
const EXIT_PROCESS_DEBUG_EVENT = 5
const LOAD_DLL_DEBUG_EVENT = 6
const UNLOAD_DLL_DEBUG_EVENT = 7
const OUTPUT_DEBUG_STRING_EVENT = 8
const RIP_EVENT = 9
type PTHREAD_START_ROUTINE as function(byval lpThreadParameter as LPVOID) as DWORD
type LPTHREAD_START_ROUTINE as PTHREAD_START_ROUTINE

type _EXCEPTION_DEBUG_INFO
 ExceptionRecord as EXCEPTION_RECORD
 dwFirstChance as DWORD
end type

type EXCEPTION_DEBUG_INFO as _EXCEPTION_DEBUG_INFO
type LPEXCEPTION_DEBUG_INFO as _EXCEPTION_DEBUG_INFO ptr

type _CREATE_THREAD_DEBUG_INFO
 hThread as HANDLE
 lpThreadLocalBase as LPVOID
 lpStartAddress as LPTHREAD_START_ROUTINE
end type

type CREATE_THREAD_DEBUG_INFO as _CREATE_THREAD_DEBUG_INFO
type LPCREATE_THREAD_DEBUG_INFO as _CREATE_THREAD_DEBUG_INFO ptr

type _CREATE_PROCESS_DEBUG_INFO
 hFile as HANDLE
 hProcess as HANDLE
 hThread as HANDLE
 lpBaseOfImage as LPVOID
 dwDebugInfoFileOffset as DWORD
 nDebugInfoSize as DWORD
 lpThreadLocalBase as LPVOID
 lpStartAddress as LPTHREAD_START_ROUTINE
 lpImageName as LPVOID
 fUnicode as WORD
end type

type CREATE_PROCESS_DEBUG_INFO as _CREATE_PROCESS_DEBUG_INFO
type LPCREATE_PROCESS_DEBUG_INFO as _CREATE_PROCESS_DEBUG_INFO ptr

type _EXIT_THREAD_DEBUG_INFO
 dwExitCode as DWORD
end type

type EXIT_THREAD_DEBUG_INFO as _EXIT_THREAD_DEBUG_INFO
type LPEXIT_THREAD_DEBUG_INFO as _EXIT_THREAD_DEBUG_INFO ptr

type _EXIT_PROCESS_DEBUG_INFO
 dwExitCode as DWORD
end type

type EXIT_PROCESS_DEBUG_INFO as _EXIT_PROCESS_DEBUG_INFO
type LPEXIT_PROCESS_DEBUG_INFO as _EXIT_PROCESS_DEBUG_INFO ptr

type _LOAD_DLL_DEBUG_INFO
 hFile as HANDLE
 lpBaseOfDll as LPVOID
 dwDebugInfoFileOffset as DWORD
 nDebugInfoSize as DWORD
 lpImageName as LPVOID
 fUnicode as WORD
end type

type LOAD_DLL_DEBUG_INFO as _LOAD_DLL_DEBUG_INFO
type LPLOAD_DLL_DEBUG_INFO as _LOAD_DLL_DEBUG_INFO ptr

type _UNLOAD_DLL_DEBUG_INFO
 lpBaseOfDll as LPVOID
end type

type UNLOAD_DLL_DEBUG_INFO as _UNLOAD_DLL_DEBUG_INFO
type LPUNLOAD_DLL_DEBUG_INFO as _UNLOAD_DLL_DEBUG_INFO ptr

type _OUTPUT_DEBUG_STRING_INFO
 lpDebugStringData as LPSTR
 fUnicode as WORD
 nDebugStringLength as WORD
end type

type OUTPUT_DEBUG_STRING_INFO as _OUTPUT_DEBUG_STRING_INFO
type LPOUTPUT_DEBUG_STRING_INFO as _OUTPUT_DEBUG_STRING_INFO ptr

type _RIP_INFO
 dwError as DWORD
 dwType as DWORD
end type

type RIP_INFO as _RIP_INFO
type LPRIP_INFO as _RIP_INFO ptr

union _DEBUG_EVENT_u
 Exception as EXCEPTION_DEBUG_INFO
 CreateThread as CREATE_THREAD_DEBUG_INFO
 CreateProcessInfo as CREATE_PROCESS_DEBUG_INFO
 ExitThread as EXIT_THREAD_DEBUG_INFO
 ExitProcess as EXIT_PROCESS_DEBUG_INFO
 LoadDll as LOAD_DLL_DEBUG_INFO
 UnloadDll as UNLOAD_DLL_DEBUG_INFO
 DebugString as OUTPUT_DEBUG_STRING_INFO
 RipInfo as RIP_INFO
end union

type _DEBUG_EVENT
 dwDebugEventCode as DWORD
 dwProcessId as DWORD
 dwThreadId as DWORD
 u as _DEBUG_EVENT_u
end type

type DEBUG_EVENT as _DEBUG_EVENT
type LPDEBUG_EVENT as _DEBUG_EVENT ptr
type LPCONTEXT as PCONTEXT

const STILL_ACTIVE = STATUS_PENDING
const EXCEPTION_ACCESS_VIOLATION = STATUS_ACCESS_VIOLATION
const EXCEPTION_DATATYPE_MISALIGNMENT = STATUS_DATATYPE_MISALIGNMENT
const EXCEPTION_BREAKPOINT = STATUS_BREAKPOINT
const EXCEPTION_SINGLE_STEP = STATUS_SINGLE_STEP
const EXCEPTION_ARRAY_BOUNDS_EXCEEDED = STATUS_ARRAY_BOUNDS_EXCEEDED
const EXCEPTION_FLT_DENORMAL_OPERAND = STATUS_FLOAT_DENORMAL_OPERAND
const EXCEPTION_FLT_DIVIDE_BY_ZERO = STATUS_FLOAT_DIVIDE_BY_ZERO
const EXCEPTION_FLT_INEXACT_RESULT = STATUS_FLOAT_INEXACT_RESULT
const EXCEPTION_FLT_INVALID_OPERATION = STATUS_FLOAT_INVALID_OPERATION
const EXCEPTION_FLT_OVERFLOW = STATUS_FLOAT_OVERFLOW
const EXCEPTION_FLT_STACK_CHECK = STATUS_FLOAT_STACK_CHECK
const EXCEPTION_FLT_UNDERFLOW = STATUS_FLOAT_UNDERFLOW
const EXCEPTION_INT_DIVIDE_BY_ZERO = STATUS_INTEGER_DIVIDE_BY_ZERO
const EXCEPTION_INT_OVERFLOW = STATUS_INTEGER_OVERFLOW
const EXCEPTION_PRIV_INSTRUCTION = STATUS_PRIVILEGED_INSTRUCTION
const EXCEPTION_IN_PAGE_ERROR = STATUS_IN_PAGE_ERROR
const EXCEPTION_ILLEGAL_INSTRUCTION = STATUS_ILLEGAL_INSTRUCTION
const EXCEPTION_NONCONTINUABLE_EXCEPTION = STATUS_NONCONTINUABLE_EXCEPTION
const EXCEPTION_STACK_OVERFLOW = STATUS_STACK_OVERFLOW
const EXCEPTION_INVALID_DISPOSITION = STATUS_INVALID_DISPOSITION
const EXCEPTION_GUARD_PAGE = STATUS_GUARD_PAGE_VIOLATION
const EXCEPTION_INVALID_HANDLE = STATUS_INVALID_HANDLE
const CONTROL_C_EXIT = STATUS_CONTROL_C_EXIT
const LMEM_FIXED = &h00
const LMEM_MOVEABLE = &h2
const LMEM_NOCOMPACT = &h10
const LMEM_NODISCARD = &h20
const LMEM_ZEROINIT = &h40
const LMEM_MODIFY = &h80
const LMEM_DISCARDABLE = &hf00
const LMEM_VALID_FLAGS = &hf72
const LMEM_INVALID_HANDLE = &h8000
const LHND = LMEM_MOVEABLE or LMEM_ZEROINIT
const LPTR = LMEM_FIXED or LMEM_ZEROINIT
const NONZEROLHND = LMEM_MOVEABLE
const NONZEROLPTR = LMEM_FIXED
const LMEM_DISCARDED = &h4000
const LMEM_LOCKCOUNT = &hff

type CONTRACT_DESCRIPTION as _CONTRACT_DESCRIPTION
type BEM_REFERENCE as _BEM_REFERENCE
type BEM_FREE_INTERFACE_CALLBACK as sub(byval interfaceInstance as any ptr)

declare function BemCreateReference(byval iid as const GUID const ptr, byval interfaceInstance as any ptr, byval freeCallback as BEM_FREE_INTERFACE_CALLBACK, byval reference as BEM_REFERENCE ptr ptr) as HRESULT
declare function BemCreateContractFrom(byval dllPath as LPCWSTR, byval extensionId as const GUID const ptr, byval contractDescription as const CONTRACT_DESCRIPTION ptr, byval hostContract as any ptr, byval contract as any ptr ptr) as HRESULT
declare function BemCopyReference(byval reference as BEM_REFERENCE ptr, byval copiedReference as BEM_REFERENCE ptr ptr) as HRESULT
declare sub BemFreeReference(byval reference as BEM_REFERENCE ptr)
declare sub BemFreeContract(byval contract as any ptr)
declare function IsDebuggerPresent() as WINBOOL
declare sub OutputDebugStringA(byval lpOutputString as LPCSTR)
declare sub OutputDebugStringW(byval lpOutputString as LPCWSTR)

 declare sub OutputDebugString alias "OutputDebugStringA"(byval lpOutputString as LPCSTR)

declare sub DebugBreak()
declare function ContinueDebugEvent(byval dwProcessId as DWORD, byval dwThreadId as DWORD, byval dwContinueStatus as DWORD) as WINBOOL
declare function WaitForDebugEvent(byval lpDebugEvent as LPDEBUG_EVENT, byval dwMilliseconds as DWORD) as WINBOOL
declare function DebugActiveProcess(byval dwProcessId as DWORD) as WINBOOL
declare function DebugActiveProcessStop(byval dwProcessId as DWORD) as WINBOOL
declare function CheckRemoteDebuggerPresent(byval hProcess as HANDLE, byval pbDebuggerPresent as PBOOL) as WINBOOL
type PTOP_LEVEL_EXCEPTION_FILTER as function(byval ExceptionInfo as _EXCEPTION_POINTERS ptr) as LONG
type LPTOP_LEVEL_EXCEPTION_FILTER as PTOP_LEVEL_EXCEPTION_FILTER
declare function UnhandledExceptionFilter(byval ExceptionInfo as _EXCEPTION_POINTERS ptr) as LONG
declare function SetUnhandledExceptionFilter(byval lpTopLevelExceptionFilter as LPTOP_LEVEL_EXCEPTION_FILTER) as LPTOP_LEVEL_EXCEPTION_FILTER
declare function SetErrorMode(byval uMode as UINT) as UINT
declare function AddVectoredExceptionHandler(byval First as ULONG, byval Handler as PVECTORED_EXCEPTION_HANDLER) as PVOID
declare function RemoveVectoredExceptionHandler(byval Handle as PVOID) as ULONG
declare function AddVectoredContinueHandler(byval First as ULONG, byval Handler as PVECTORED_EXCEPTION_HANDLER) as PVOID
declare function RemoveVectoredContinueHandler(byval Handle as PVOID) as ULONG


declare sub RaiseException(byval dwExceptionCode as DWORD, byval dwExceptionFlags as DWORD, byval nNumberOfArguments as DWORD, byval lpArguments as const ULONG_PTR ptr)
declare function GetLastError() as DWORD
declare sub SetLastError(byval dwErrCode as DWORD)


const CREATE_NEW = 1
const CREATE_ALWAYS = 2
const OPEN_EXISTING = 3
const OPEN_ALWAYS = 4
const TRUNCATE_EXISTING = 5
const INVALID_FILE_SIZE = cast(DWORD, &hffffffff)
const INVALID_SET_FILE_POINTER = cast(DWORD, -1)
const INVALID_FILE_ATTRIBUTES = cast(DWORD, -1)

type _BY_HANDLE_FILE_INFORMATION
 dwFileAttributes as DWORD
 ftCreationTime as FILETIME
 ftLastAccessTime as FILETIME
 ftLastWriteTime as FILETIME
 dwVolumeSerialNumber as DWORD
 nFileSizeHigh as DWORD
 nFileSizeLow as DWORD
 nNumberOfLinks as DWORD
 nFileIndexHigh as DWORD
 nFileIndexLow as DWORD
end type

type BY_HANDLE_FILE_INFORMATION as _BY_HANDLE_FILE_INFORMATION
type PBY_HANDLE_FILE_INFORMATION as _BY_HANDLE_FILE_INFORMATION ptr
type LPBY_HANDLE_FILE_INFORMATION as _BY_HANDLE_FILE_INFORMATION ptr

declare function CompareFileTime(byval lpFileTime1 as const FILETIME ptr, byval lpFileTime2 as const FILETIME ptr) as LONG
declare function CreateFileA(byval lpFileName as LPCSTR, byval dwDesiredAccess as DWORD, byval dwShareMode as DWORD, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES, byval dwCreationDisposition as DWORD, byval dwFlagsAndAttributes as DWORD, byval hTemplateFile as HANDLE) as HANDLE
declare function CreateFileW(byval lpFileName as LPCWSTR, byval dwDesiredAccess as DWORD, byval dwShareMode as DWORD, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES, byval dwCreationDisposition as DWORD, byval dwFlagsAndAttributes as DWORD, byval hTemplateFile as HANDLE) as HANDLE
declare function DefineDosDeviceW(byval dwFlags as DWORD, byval lpDeviceName as LPCWSTR, byval lpTargetPath as LPCWSTR) as WINBOOL
declare function DeleteVolumeMountPointW(byval lpszVolumeMountPoint as LPCWSTR) as WINBOOL
declare function FileTimeToLocalFileTime(byval lpFileTime as const FILETIME ptr, byval lpLocalFileTime as LPFILETIME) as WINBOOL
declare function FindCloseChangeNotification(byval hChangeHandle as HANDLE) as WINBOOL
declare function FindFirstChangeNotificationA(byval lpPathName as LPCSTR, byval bWatchSubtree as WINBOOL, byval dwNotifyFilter as DWORD) as HANDLE
declare function FindFirstChangeNotificationW(byval lpPathName as LPCWSTR, byval bWatchSubtree as WINBOOL, byval dwNotifyFilter as DWORD) as HANDLE
declare function FindFirstFileA(byval lpFileName as LPCSTR, byval lpFindFileData as LPWIN32_FIND_DATAA) as HANDLE
declare function FindFirstFileW(byval lpFileName as LPCWSTR, byval lpFindFileData as LPWIN32_FIND_DATAW) as HANDLE
declare function FindFirstVolumeW(byval lpszVolumeName as LPWSTR, byval cchBufferLength as DWORD) as HANDLE
declare function FindNextChangeNotification(byval hChangeHandle as HANDLE) as WINBOOL
declare function FindNextVolumeW(byval hFindVolume as HANDLE, byval lpszVolumeName as LPWSTR, byval cchBufferLength as DWORD) as WINBOOL
declare function FindVolumeClose(byval hFindVolume as HANDLE) as WINBOOL
declare function GetDiskFreeSpaceA(byval lpRootPathName as LPCSTR, byval lpSectorsPerCluster as LPDWORD, byval lpBytesPerSector as LPDWORD, byval lpNumberOfFreeClusters as LPDWORD, byval lpTotalNumberOfClusters as LPDWORD) as WINBOOL
declare function GetDiskFreeSpaceW(byval lpRootPathName as LPCWSTR, byval lpSectorsPerCluster as LPDWORD, byval lpBytesPerSector as LPDWORD, byval lpNumberOfFreeClusters as LPDWORD, byval lpTotalNumberOfClusters as LPDWORD) as WINBOOL
declare function GetDriveTypeA(byval lpRootPathName as LPCSTR) as UINT
declare function GetDriveTypeW(byval lpRootPathName as LPCWSTR) as UINT
declare function GetFileAttributesA(byval lpFileName as LPCSTR) as DWORD
declare function GetFileAttributesW(byval lpFileName as LPCWSTR) as DWORD
declare function GetFileInformationByHandle(byval hFile as HANDLE, byval lpFileInformation as LPBY_HANDLE_FILE_INFORMATION) as WINBOOL
declare function GetFileSize(byval hFile as HANDLE, byval lpFileSizeHigh as LPDWORD) as DWORD
declare function GetFileSizeEx(byval hFile as HANDLE, byval lpFileSize as PLARGE_INTEGER) as WINBOOL
declare function GetFileTime(byval hFile as HANDLE, byval lpCreationTime as LPFILETIME, byval lpLastAccessTime as LPFILETIME, byval lpLastWriteTime as LPFILETIME) as WINBOOL
declare function GetFileType(byval hFile as HANDLE) as DWORD
declare function GetFullPathNameA(byval lpFileName as LPCSTR, byval nBufferLength as DWORD, byval lpBuffer as LPSTR, byval lpFilePart as LPSTR ptr) as DWORD
declare function GetFullPathNameW(byval lpFileName as LPCWSTR, byval nBufferLength as DWORD, byval lpBuffer as LPWSTR, byval lpFilePart as LPWSTR ptr) as DWORD
declare function GetLogicalDrives() as DWORD
declare function GetLogicalDriveStringsW(byval nBufferLength as DWORD, byval lpBuffer as LPWSTR) as DWORD
declare function GetLongPathNameA(byval lpszShortPath as LPCSTR, byval lpszLongPath as LPSTR, byval cchBuffer as DWORD) as DWORD
declare function GetLongPathNameW(byval lpszShortPath as LPCWSTR, byval lpszLongPath as LPWSTR, byval cchBuffer as DWORD) as DWORD
declare function GetShortPathNameW(byval lpszLongPath as LPCWSTR, byval lpszShortPath as LPWSTR, byval cchBuffer as DWORD) as DWORD
declare function GetTempFileNameW(byval lpPathName as LPCWSTR, byval lpPrefixString as LPCWSTR, byval uUnique as UINT, byval lpTempFileName as LPWSTR) as UINT
declare function GetVolumeInformationW(byval lpRootPathName as LPCWSTR, byval lpVolumeNameBuffer as LPWSTR, byval nVolumeNameSize as DWORD, byval lpVolumeSerialNumber as LPDWORD, byval lpMaximumComponentLength as LPDWORD, byval lpFileSystemFlags as LPDWORD, byval lpFileSystemNameBuffer as LPWSTR, byval nFileSystemNameSize as DWORD) as WINBOOL
declare function GetVolumePathNameW(byval lpszFileName as LPCWSTR, byval lpszVolumePathName as LPWSTR, byval cchBufferLength as DWORD) as WINBOOL
declare function LocalFileTimeToFileTime(byval lpLocalFileTime as const FILETIME ptr, byval lpFileTime as LPFILETIME) as WINBOOL
declare function LockFile(byval hFile as HANDLE, byval dwFileOffsetLow as DWORD, byval dwFileOffsetHigh as DWORD, byval nNumberOfBytesToLockLow as DWORD, byval nNumberOfBytesToLockHigh as DWORD) as WINBOOL
declare function QueryDosDeviceW(byval lpDeviceName as LPCWSTR, byval lpTargetPath as LPWSTR, byval ucchMax as DWORD) as DWORD
declare function ReadFileEx(byval hFile as HANDLE, byval lpBuffer as LPVOID, byval nNumberOfBytesToRead as DWORD, byval lpOverlapped as LPOVERLAPPED, byval lpCompletionRoutine as LPOVERLAPPED_COMPLETION_ROUTINE) as WINBOOL
declare function ReadFileScatter(byval hFile as HANDLE, byval aSegmentArray as FILE_SEGMENT_ELEMENT ptr, byval nNumberOfBytesToRead as DWORD, byval lpReserved as LPDWORD, byval lpOverlapped as LPOVERLAPPED) as WINBOOL
declare function SetFilePointer(byval hFile as HANDLE, byval lDistanceToMove as LONG, byval lpDistanceToMoveHigh as PLONG, byval dwMoveMethod as DWORD) as DWORD
declare function SetFileTime(byval hFile as HANDLE, byval lpCreationTime as const FILETIME ptr, byval lpLastAccessTime as const FILETIME ptr, byval lpLastWriteTime as const FILETIME ptr) as WINBOOL
declare function SetFileValidData(byval hFile as HANDLE, byval ValidDataLength as LONGLONG) as WINBOOL
declare function UnlockFile(byval hFile as HANDLE, byval dwFileOffsetLow as DWORD, byval dwFileOffsetHigh as DWORD, byval nNumberOfBytesToUnlockLow as DWORD, byval nNumberOfBytesToUnlockHigh as DWORD) as WINBOOL
declare function WriteFileEx(byval hFile as HANDLE, byval lpBuffer as LPCVOID, byval nNumberOfBytesToWrite as DWORD, byval lpOverlapped as LPOVERLAPPED, byval lpCompletionRoutine as LPOVERLAPPED_COMPLETION_ROUTINE) as WINBOOL
declare function WriteFileGather(byval hFile as HANDLE, byval aSegmentArray as FILE_SEGMENT_ELEMENT ptr, byval nNumberOfBytesToWrite as DWORD, byval lpReserved as LPDWORD, byval lpOverlapped as LPOVERLAPPED) as WINBOOL
declare function GetTempPathW(byval nBufferLength as DWORD, byval lpBuffer as LPWSTR) as DWORD
declare function GetVolumeNameForVolumeMountPointW(byval lpszVolumeMountPoint as LPCWSTR, byval lpszVolumeName as LPWSTR, byval cchBufferLength as DWORD) as WINBOOL
declare function GetVolumePathNamesForVolumeNameW(byval lpszVolumeName as LPCWSTR, byval lpszVolumePathNames as LPWCH, byval cchBufferLength as DWORD, byval lpcchReturnLength as PDWORD) as WINBOOL


 declare function CreateFile alias "CreateFileA"(byval lpFileName as LPCSTR, byval dwDesiredAccess as DWORD, byval dwShareMode as DWORD, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES, byval dwCreationDisposition as DWORD, byval dwFlagsAndAttributes as DWORD, byval hTemplateFile as HANDLE) as HANDLE
 declare function FindFirstChangeNotification alias "FindFirstChangeNotificationA"(byval lpPathName as LPCSTR, byval bWatchSubtree as WINBOOL, byval dwNotifyFilter as DWORD) as HANDLE
 declare function FindFirstFile alias "FindFirstFileA"(byval lpFileName as LPCSTR, byval lpFindFileData as LPWIN32_FIND_DATAA) as HANDLE
 declare function GetDiskFreeSpace alias "GetDiskFreeSpaceA"(byval lpRootPathName as LPCSTR, byval lpSectorsPerCluster as LPDWORD, byval lpBytesPerSector as LPDWORD, byval lpNumberOfFreeClusters as LPDWORD, byval lpTotalNumberOfClusters as LPDWORD) as WINBOOL
 declare function GetDriveType alias "GetDriveTypeA"(byval lpRootPathName as LPCSTR) as UINT
 declare function GetFileAttributes alias "GetFileAttributesA"(byval lpFileName as LPCSTR) as DWORD
 declare function GetFullPathName alias "GetFullPathNameA"(byval lpFileName as LPCSTR, byval nBufferLength as DWORD, byval lpBuffer as LPSTR, byval lpFilePart as LPSTR ptr) as DWORD
 declare function GetLongPathName alias "GetLongPathNameA"(byval lpszShortPath as LPCSTR, byval lpszLongPath as LPSTR, byval cchBuffer as DWORD) as DWORD


type _WIN32_FILE_ATTRIBUTE_DATA
 dwFileAttributes as DWORD
 ftCreationTime as FILETIME
 ftLastAccessTime as FILETIME
 ftLastWriteTime as FILETIME
 nFileSizeHigh as DWORD
 nFileSizeLow as DWORD
end type

type WIN32_FILE_ATTRIBUTE_DATA as _WIN32_FILE_ATTRIBUTE_DATA
type LPWIN32_FILE_ATTRIBUTE_DATA as _WIN32_FILE_ATTRIBUTE_DATA ptr


declare function CreateDirectoryA(byval lpPathName as LPCSTR, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES) as WINBOOL
declare function CreateDirectoryW(byval lpPathName as LPCWSTR, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES) as WINBOOL
declare function DeleteFileA(byval lpFileName as LPCSTR) as WINBOOL
declare function DeleteFileW(byval lpFileName as LPCWSTR) as WINBOOL
declare function FindClose(byval hFindFile as HANDLE) as WINBOOL
declare function FindFirstFileExA(byval lpFileName as LPCSTR, byval fInfoLevelId as FINDEX_INFO_LEVELS, byval lpFindFileData as LPVOID, byval fSearchOp as FINDEX_SEARCH_OPS, byval lpSearchFilter as LPVOID, byval dwAdditionalFlags as DWORD) as HANDLE
declare function FindFirstFileExW(byval lpFileName as LPCWSTR, byval fInfoLevelId as FINDEX_INFO_LEVELS, byval lpFindFileData as LPVOID, byval fSearchOp as FINDEX_SEARCH_OPS, byval lpSearchFilter as LPVOID, byval dwAdditionalFlags as DWORD) as HANDLE
declare function FindNextFileA(byval hFindFile as HANDLE, byval lpFindFileData as LPWIN32_FIND_DATAA) as WINBOOL
declare function FindNextFileW(byval hFindFile as HANDLE, byval lpFindFileData as LPWIN32_FIND_DATAW) as WINBOOL
declare function FlushFileBuffers(byval hFile as HANDLE) as WINBOOL
declare function GetDiskFreeSpaceExA(byval lpDirectoryName as LPCSTR, byval lpFreeBytesAvailableToCaller as PULARGE_INTEGER, byval lpTotalNumberOfBytes as PULARGE_INTEGER, byval lpTotalNumberOfFreeBytes as PULARGE_INTEGER) as WINBOOL
declare function GetDiskFreeSpaceExW(byval lpDirectoryName as LPCWSTR, byval lpFreeBytesAvailableToCaller as PULARGE_INTEGER, byval lpTotalNumberOfBytes as PULARGE_INTEGER, byval lpTotalNumberOfFreeBytes as PULARGE_INTEGER) as WINBOOL
declare function GetFileAttributesExA(byval lpFileName as LPCSTR, byval fInfoLevelId as GET_FILEEX_INFO_LEVELS, byval lpFileInformation as LPVOID) as WINBOOL
declare function GetFileAttributesExW(byval lpFileName as LPCWSTR, byval fInfoLevelId as GET_FILEEX_INFO_LEVELS, byval lpFileInformation as LPVOID) as WINBOOL
declare function LockFileEx(byval hFile as HANDLE, byval dwFlags as DWORD, byval dwReserved as DWORD, byval nNumberOfBytesToLockLow as DWORD, byval nNumberOfBytesToLockHigh as DWORD, byval lpOverlapped as LPOVERLAPPED) as WINBOOL
declare function ReadFile(byval hFile as HANDLE, byval lpBuffer as LPVOID, byval nNumberOfBytesToRead as DWORD, byval lpNumberOfBytesRead as LPDWORD, byval lpOverlapped as LPOVERLAPPED) as WINBOOL
declare function RemoveDirectoryA(byval lpPathName as LPCSTR) as WINBOOL
declare function RemoveDirectoryW(byval lpPathName as LPCWSTR) as WINBOOL
declare function SetEndOfFile(byval hFile as HANDLE) as WINBOOL
declare function SetFileAttributesA(byval lpFileName as LPCSTR, byval dwFileAttributes as DWORD) as WINBOOL
declare function SetFileAttributesW(byval lpFileName as LPCWSTR, byval dwFileAttributes as DWORD) as WINBOOL
declare function SetFilePointerEx(byval hFile as HANDLE, byval liDistanceToMove as LARGE_INTEGER, byval lpNewFilePointer as PLARGE_INTEGER, byval dwMoveMethod as DWORD) as WINBOOL
declare function UnlockFileEx(byval hFile as HANDLE, byval dwReserved as DWORD, byval nNumberOfBytesToUnlockLow as DWORD, byval nNumberOfBytesToUnlockHigh as DWORD, byval lpOverlapped as LPOVERLAPPED) as WINBOOL
declare function WriteFile(byval hFile as HANDLE, byval lpBuffer as LPCVOID, byval nNumberOfBytesToWrite as DWORD, byval lpNumberOfBytesWritten as LPDWORD, byval lpOverlapped as LPOVERLAPPED) as WINBOOL


 declare function CreateDirectory alias "CreateDirectoryA"(byval lpPathName as LPCSTR, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES) as WINBOOL
 declare function DeleteFile alias "DeleteFileA"(byval lpFileName as LPCSTR) as WINBOOL
 declare function FindFirstFileEx alias "FindFirstFileExA"(byval lpFileName as LPCSTR, byval fInfoLevelId as FINDEX_INFO_LEVELS, byval lpFindFileData as LPVOID, byval fSearchOp as FINDEX_SEARCH_OPS, byval lpSearchFilter as LPVOID, byval dwAdditionalFlags as DWORD) as HANDLE
 declare function FindNextFile alias "FindNextFileA"(byval hFindFile as HANDLE, byval lpFindFileData as LPWIN32_FIND_DATAA) as WINBOOL
 declare function GetDiskFreeSpaceEx alias "GetDiskFreeSpaceExA"(byval lpDirectoryName as LPCSTR, byval lpFreeBytesAvailableToCaller as PULARGE_INTEGER, byval lpTotalNumberOfBytes as PULARGE_INTEGER, byval lpTotalNumberOfFreeBytes as PULARGE_INTEGER) as WINBOOL
 declare function GetFileAttributesEx alias "GetFileAttributesExA"(byval lpFileName as LPCSTR, byval fInfoLevelId as GET_FILEEX_INFO_LEVELS, byval lpFileInformation as LPVOID) as WINBOOL
 declare function RemoveDirectory alias "RemoveDirectoryA"(byval lpPathName as LPCSTR) as WINBOOL
 declare function SetFileAttributes alias "SetFileAttributesA"(byval lpFileName as LPCSTR, byval dwFileAttributes as DWORD) as WINBOOL


const INVALID_HANDLE_VALUE = cast(HANDLE, cast(LONG_PTR, -1))
declare function CloseHandle(byval hObject as HANDLE) as WINBOOL
declare function DuplicateHandle(byval hSourceProcessHandle as HANDLE, byval hSourceHandle as HANDLE, byval hTargetProcessHandle as HANDLE, byval lpTargetHandle as LPHANDLE, byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval dwOptions as DWORD) as WINBOOL
declare function GetHandleInformation(byval hObject as HANDLE, byval lpdwFlags as LPDWORD) as WINBOOL
declare function SetHandleInformation(byval hObject as HANDLE, byval dwMask as DWORD, byval dwFlags as DWORD) as WINBOOL

type _HEAP_SUMMARY
 cb as DWORD
 cbAllocated as SIZE_T_
 cbCommitted as SIZE_T_
 cbReserved as SIZE_T_
 cbMaxReserve as SIZE_T_
end type

type HEAP_SUMMARY as _HEAP_SUMMARY
type PHEAP_SUMMARY as _HEAP_SUMMARY ptr
type LPHEAP_SUMMARY as PHEAP_SUMMARY

declare function HeapCreate(byval flOptions as DWORD, byval dwInitialSize as SIZE_T_, byval dwMaximumSize as SIZE_T_) as HANDLE
declare function HeapDestroy(byval hHeap as HANDLE) as WINBOOL
declare function HeapValidate(byval hHeap as HANDLE, byval dwFlags as DWORD, byval lpMem as LPCVOID) as WINBOOL
declare function HeapCompact(byval hHeap as HANDLE, byval dwFlags as DWORD) as SIZE_T_
declare function HeapSummary(byval hHeap as HANDLE, byval dwFlags as DWORD, byval lpSummary as LPHEAP_SUMMARY) as WINBOOL
declare function GetProcessHeaps(byval NumberOfHeaps as DWORD, byval ProcessHeaps as PHANDLE) as DWORD
declare function HeapLock(byval hHeap as HANDLE) as WINBOOL
declare function HeapUnlock(byval hHeap as HANDLE) as WINBOOL
declare function HeapWalk(byval hHeap as HANDLE, byval lpEntry as LPPROCESS_HEAP_ENTRY) as WINBOOL
declare function HeapSetInformation(byval HeapHandle as HANDLE, byval HeapInformationClass as HEAP_INFORMATION_CLASS, byval HeapInformation as PVOID, byval HeapInformationLength as SIZE_T_) as WINBOOL
declare function HeapQueryInformation(byval HeapHandle as HANDLE, byval HeapInformationClass as HEAP_INFORMATION_CLASS, byval HeapInformation as PVOID, byval HeapInformationLength as SIZE_T_, byval ReturnLength as PSIZE_T) as WINBOOL
declare function HeapAlloc(byval hHeap as HANDLE, byval dwFlags as DWORD, byval dwBytes as SIZE_T_) as LPVOID
declare function HeapReAlloc(byval hHeap as HANDLE, byval dwFlags as DWORD, byval lpMem as LPVOID, byval dwBytes as SIZE_T_) as LPVOID
declare function HeapFree(byval hHeap as HANDLE, byval dwFlags as DWORD, byval lpMem as LPVOID) as WINBOOL
declare function HeapSize(byval hHeap as HANDLE, byval dwFlags as DWORD, byval lpMem as LPCVOID) as SIZE_T_
declare function GetProcessHeap() as HANDLE
declare function GetOverlappedResult(byval hFile as HANDLE, byval lpOverlapped as LPOVERLAPPED, byval lpNumberOfBytesTransferred as LPDWORD, byval bWait as WINBOOL) as WINBOOL
declare function CreateIoCompletionPort(byval FileHandle as HANDLE, byval ExistingCompletionPort as HANDLE, byval CompletionKey as ULONG_PTR, byval NumberOfConcurrentThreads as DWORD) as HANDLE
declare function GetQueuedCompletionStatus(byval CompletionPort as HANDLE, byval lpNumberOfBytesTransferred as LPDWORD, byval lpCompletionKey as PULONG_PTR, byval lpOverlapped as LPOVERLAPPED ptr, byval dwMilliseconds as DWORD) as WINBOOL
declare function PostQueuedCompletionStatus(byval CompletionPort as HANDLE, byval dwNumberOfBytesTransferred as DWORD, byval dwCompletionKey as ULONG_PTR, byval lpOverlapped as LPOVERLAPPED) as WINBOOL
declare function DeviceIoControl(byval hDevice as HANDLE, byval dwIoControlCode as DWORD, byval lpInBuffer as LPVOID, byval nInBufferSize as DWORD, byval lpOutBuffer as LPVOID, byval nOutBufferSize as DWORD, byval lpBytesReturned as LPDWORD, byval lpOverlapped as LPOVERLAPPED) as WINBOOL
declare function CancelIo(byval hFile as HANDLE) as WINBOOL


declare function GetOverlappedResultEx(byval hFile as HANDLE, byval lpOverlapped as LPOVERLAPPED, byval lpNumberOfBytesTransferred as LPDWORD, byval dwMilliseconds as DWORD, byval bAlertable as WINBOOL) as WINBOOL


declare sub InitializeSListHead(byval ListHead as PSLIST_HEADER)
declare function InterlockedPopEntrySList(byval ListHead as PSLIST_HEADER) as PSLIST_ENTRY
declare function InterlockedPushEntrySList(byval ListHead as PSLIST_HEADER, byval ListEntry as PSLIST_ENTRY) as PSLIST_ENTRY
declare function InterlockedFlushSList(byval ListHead as PSLIST_HEADER) as PSLIST_ENTRY
declare function QueryDepthSList(byval ListHead as PSLIST_HEADER) as USHORT


declare function IsProcessInJob(byval ProcessHandle as HANDLE, byval JobHandle as HANDLE, byval Result as PBOOL) as WINBOOL

type tagENUMUILANG
 NumOfEnumUILang as ULONG
 SizeOfEnumUIBuffer as ULONG
 pEnumUIBuffer as LANGID ptr
end type

type ENUMUILANG as tagENUMUILANG
type PENUMUILANG as tagENUMUILANG ptr
type ENUMRESLANGPROCA as function(byval hModule as HMODULE, byval lpType as LPCSTR, byval lpName as LPCSTR, byval wLanguage as WORD, byval lParam as LONG_PTR) as WINBOOL
type ENUMRESLANGPROCW as function(byval hModule as HMODULE, byval lpType as LPCWSTR, byval lpName as LPCWSTR, byval wLanguage as WORD, byval lParam as LONG_PTR) as WINBOOL
type ENUMRESNAMEPROCA as function(byval hModule as HMODULE, byval lpType as LPCSTR, byval lpName as LPSTR, byval lParam as LONG_PTR) as WINBOOL
type ENUMRESNAMEPROCW as function(byval hModule as HMODULE, byval lpType as LPCWSTR, byval lpName as LPWSTR, byval lParam as LONG_PTR) as WINBOOL
type ENUMRESTYPEPROCA as function(byval hModule as HMODULE, byval lpType as LPSTR, byval lParam as LONG_PTR) as WINBOOL
type ENUMRESTYPEPROCW as function(byval hModule as HMODULE, byval lpType as LPWSTR, byval lParam as LONG_PTR) as WINBOOL
type PGET_MODULE_HANDLE_EXA as function(byval dwFlags as DWORD, byval lpModuleName as LPCSTR, byval phModule as HMODULE ptr) as WINBOOL
type PGET_MODULE_HANDLE_EXW as function(byval dwFlags as DWORD, byval lpModuleName as LPCWSTR, byval phModule as HMODULE ptr) as WINBOOL
type DLL_DIRECTORY_COOKIE as PVOID
type PDLL_DIRECTORY_COOKIE as PVOID ptr

const FIND_RESOURCE_DIRECTORY_TYPES = &h0100
const FIND_RESOURCE_DIRECTORY_NAMES = &h0200
const FIND_RESOURCE_DIRECTORY_LANGUAGES = &h0400
const RESOURCE_ENUM_LN = &h0001
const RESOURCE_ENUM_MUI = &h0002
const RESOURCE_ENUM_MUI_SYSTEM = &h0004
const RESOURCE_ENUM_VALIDATE = &h0008
const RESOURCE_ENUM_MODULE_EXACT = &h0010
const SUPPORT_LANG_NUMBER = 32
const DONT_RESOLVE_DLL_REFERENCES = &h1
const LOAD_LIBRARY_AS_DATAFILE = &h2
const LOAD_WITH_ALTERED_SEARCH_PATH = &h8
const LOAD_IGNORE_CODE_AUTHZ_LEVEL = &h10
const LOAD_LIBRARY_AS_IMAGE_RESOURCE = &h20
const LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE = &h40
const LOAD_LIBRARY_REQUIRE_SIGNED_TARGET = &h80
const LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR = &h100
const LOAD_LIBRARY_SEARCH_APPLICATION_DIR = &h200
const LOAD_LIBRARY_SEARCH_USER_DIRS = &h400
const LOAD_LIBRARY_SEARCH_SYSTEM32 = &h800
const LOAD_LIBRARY_SEARCH_DEFAULT_DIRS = &h1000
const GET_MODULE_HANDLE_EX_FLAG_PIN = &h1
const GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT = &h2
const GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS = &h4

 type ENUMRESLANGPROC as ENUMRESLANGPROCA
 type ENUMRESNAMEPROC as ENUMRESNAMEPROCA
 type ENUMRESTYPEPROC as ENUMRESTYPEPROCA

declare function FindResourceExW(byval hModule as HMODULE, byval lpType as LPCWSTR, byval lpName as LPCWSTR, byval wLanguage as WORD) as HRSRC
declare sub FreeLibraryAndExitThread(byval hLibModule as HMODULE, byval dwExitCode as DWORD)
declare function FreeResource(byval hResData as HGLOBAL) as WINBOOL
declare function GetModuleFileNameA(byval hModule as HMODULE, byval lpFilename as LPSTR, byval nSize as DWORD) as DWORD
declare function GetModuleFileNameW(byval hModule as HMODULE, byval lpFilename as LPWSTR, byval nSize as DWORD) as DWORD
declare function GetModuleHandleA(byval lpModuleName as LPCSTR) as HMODULE
declare function GetModuleHandleW(byval lpModuleName as LPCWSTR) as HMODULE
declare function LoadLibraryExA(byval lpLibFileName as LPCSTR, byval hFile as HANDLE, byval dwFlags as DWORD) as HMODULE
declare function LoadLibraryExW(byval lpLibFileName as LPCWSTR, byval hFile as HANDLE, byval dwFlags as DWORD) as HMODULE
declare function LoadResource(byval hModule as HMODULE, byval hResInfo as HRSRC) as HGLOBAL
declare function LoadStringA(byval hInstance as HINSTANCE, byval uID as UINT, byval lpBuffer as LPSTR, byval cchBufferMax as long) as long
declare function LoadStringW(byval hInstance as HINSTANCE, byval uID as UINT, byval lpBuffer as LPWSTR, byval cchBufferMax as long) as long
declare function LockResource(byval hResData as HGLOBAL) as LPVOID
declare function SizeofResource(byval hModule as HMODULE, byval hResInfo as HRSRC) as DWORD
declare function AddDllDirectory(byval NewDirectory as PCWSTR) as DLL_DIRECTORY_COOKIE
declare function RemoveDllDirectory(byval Cookie as DLL_DIRECTORY_COOKIE) as WINBOOL
declare function SetDefaultDllDirectories(byval DirectoryFlags as DWORD) as WINBOOL
declare function GetModuleHandleExA(byval dwFlags as DWORD, byval lpModuleName as LPCSTR, byval phModule as HMODULE ptr) as WINBOOL
declare function GetModuleHandleExW(byval dwFlags as DWORD, byval lpModuleName as LPCWSTR, byval phModule as HMODULE ptr) as WINBOOL

 type PGET_MODULE_HANDLE_EX as PGET_MODULE_HANDLE_EXA
 declare function GetModuleHandleEx alias "GetModuleHandleExA"(byval dwFlags as DWORD, byval lpModuleName as LPCSTR, byval phModule as HMODULE ptr) as WINBOOL
 declare function LoadString alias "LoadStringA"(byval hInstance as HINSTANCE, byval uID as UINT, byval lpBuffer as LPSTR, byval cchBufferMax as long) as long
 declare function GetModuleFileName alias "GetModuleFileNameA"(byval hModule as HMODULE, byval lpFilename as LPSTR, byval nSize as DWORD) as DWORD
 declare function GetModuleHandle alias "GetModuleHandleA"(byval lpModuleName as LPCSTR) as HMODULE
 declare function LoadLibraryEx alias "LoadLibraryExA"(byval lpLibFileName as LPCSTR, byval hFile as HANDLE, byval dwFlags as DWORD) as HMODULE



declare function DisableThreadLibraryCalls(byval hLibModule as HMODULE) as WINBOOL
declare function FreeLibrary(byval hLibModule as HMODULE) as WINBOOL
declare function GetProcAddress(byval hModule as HMODULE, byval lpProcName as LPCSTR) as FARPROC



type _MEMORY_RESOURCE_NOTIFICATION_TYPE as long
enum
 LowMemoryResourceNotification
 HighMemoryResourceNotification
end enum

type MEMORY_RESOURCE_NOTIFICATION_TYPE as _MEMORY_RESOURCE_NOTIFICATION_TYPE


const FILE_MAP_WRITE = SECTION_MAP_WRITE
const FILE_MAP_READ = SECTION_MAP_READ
const FILE_MAP_ALL_ACCESS = SECTION_ALL_ACCESS
const FILE_MAP_COPY = &h1
const FILE_MAP_RESERVE = &h80000000

declare function VirtualQuery(byval lpAddress as LPCVOID, byval lpBuffer as PMEMORY_BASIC_INFORMATION, byval dwLength as SIZE_T_) as SIZE_T_
declare function FlushViewOfFile(byval lpBaseAddress as LPCVOID, byval dwNumberOfBytesToFlush as SIZE_T_) as WINBOOL
declare function UnmapViewOfFile(byval lpBaseAddress as LPCVOID) as WINBOOL
declare function CreateFileMappingFromApp(byval hFile as HANDLE, byval SecurityAttributes as PSECURITY_ATTRIBUTES, byval PageProtection as ULONG, byval MaximumSize as ULONG64, byval Name as PCWSTR) as HANDLE
declare function MapViewOfFileFromApp(byval hFileMappingObject as HANDLE, byval DesiredAccess as ULONG, byval FileOffset as ULONG64, byval NumberOfBytesToMap as SIZE_T_) as PVOID

const FILE_MAP_EXECUTE = SECTION_MAP_EXECUTE_EXPLICIT
const FILE_CACHE_MAX_HARD_ENABLE = &h00000001
const FILE_CACHE_MAX_HARD_DISABLE = &h00000002
const FILE_CACHE_MIN_HARD_ENABLE = &h00000004
const FILE_CACHE_MIN_HARD_DISABLE = &h00000008

declare function VirtualAlloc(byval lpAddress as LPVOID, byval dwSize as SIZE_T_, byval flAllocationType as DWORD, byval flProtect as DWORD) as LPVOID
declare function VirtualFree(byval lpAddress as LPVOID, byval dwSize as SIZE_T_, byval dwFreeType as DWORD) as WINBOOL
declare function VirtualProtect(byval lpAddress as LPVOID, byval dwSize as SIZE_T_, byval flNewProtect as DWORD, byval lpflOldProtect as PDWORD) as WINBOOL
declare function VirtualAllocEx(byval hProcess as HANDLE, byval lpAddress as LPVOID, byval dwSize as SIZE_T_, byval flAllocationType as DWORD, byval flProtect as DWORD) as LPVOID
declare function VirtualFreeEx(byval hProcess as HANDLE, byval lpAddress as LPVOID, byval dwSize as SIZE_T_, byval dwFreeType as DWORD) as WINBOOL
declare function VirtualProtectEx(byval hProcess as HANDLE, byval lpAddress as LPVOID, byval dwSize as SIZE_T_, byval flNewProtect as DWORD, byval lpflOldProtect as PDWORD) as WINBOOL
declare function VirtualQueryEx(byval hProcess as HANDLE, byval lpAddress as LPCVOID, byval lpBuffer as PMEMORY_BASIC_INFORMATION, byval dwLength as SIZE_T_) as SIZE_T_
declare function ReadProcessMemory(byval hProcess as HANDLE, byval lpBaseAddress as LPCVOID, byval lpBuffer as LPVOID, byval nSize as SIZE_T_, byval lpNumberOfBytesRead as SIZE_T_ ptr) as WINBOOL
declare function WriteProcessMemory(byval hProcess as HANDLE, byval lpBaseAddress as LPVOID, byval lpBuffer as LPCVOID, byval nSize as SIZE_T_, byval lpNumberOfBytesWritten as SIZE_T_ ptr) as WINBOOL
declare function CreateFileMappingW(byval hFile as HANDLE, byval lpFileMappingAttributes as LPSECURITY_ATTRIBUTES, byval flProtect as DWORD, byval dwMaximumSizeHigh as DWORD, byval dwMaximumSizeLow as DWORD, byval lpName as LPCWSTR) as HANDLE
declare function OpenFileMappingW(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval lpName as LPCWSTR) as HANDLE
declare function MapViewOfFile(byval hFileMappingObject as HANDLE, byval dwDesiredAccess as DWORD, byval dwFileOffsetHigh as DWORD, byval dwFileOffsetLow as DWORD, byval dwNumberOfBytesToMap as SIZE_T_) as LPVOID
declare function MapViewOfFileEx(byval hFileMappingObject as HANDLE, byval dwDesiredAccess as DWORD, byval dwFileOffsetHigh as DWORD, byval dwFileOffsetLow as DWORD, byval dwNumberOfBytesToMap as SIZE_T_, byval lpBaseAddress as LPVOID) as LPVOID
declare function GetLargePageMinimum() as SIZE_T_
declare function GetProcessWorkingSetSizeEx(byval hProcess as HANDLE, byval lpMinimumWorkingSetSize as PSIZE_T, byval lpMaximumWorkingSetSize as PSIZE_T, byval Flags as PDWORD) as WINBOOL
declare function SetProcessWorkingSetSizeEx(byval hProcess as HANDLE, byval dwMinimumWorkingSetSize as SIZE_T_, byval dwMaximumWorkingSetSize as SIZE_T_, byval Flags as DWORD) as WINBOOL
declare function VirtualLock(byval lpAddress as LPVOID, byval dwSize as SIZE_T_) as WINBOOL
declare function VirtualUnlock(byval lpAddress as LPVOID, byval dwSize as SIZE_T_) as WINBOOL
declare function GetWriteWatch(byval dwFlags as DWORD, byval lpBaseAddress as PVOID, byval dwRegionSize as SIZE_T_, byval lpAddresses as PVOID ptr, byval lpdwCount as ULONG_PTR ptr, byval lpdwGranularity as LPDWORD) as UINT
declare function ResetWriteWatch(byval lpBaseAddress as LPVOID, byval dwRegionSize as SIZE_T_) as UINT
declare function CreateMemoryResourceNotification(byval NotificationType as MEMORY_RESOURCE_NOTIFICATION_TYPE) as HANDLE
declare function QueryMemoryResourceNotification(byval ResourceNotificationHandle as HANDLE, byval ResourceState as PBOOL) as WINBOOL
declare function GetSystemFileCacheSize(byval lpMinimumFileCacheSize as PSIZE_T, byval lpMaximumFileCacheSize as PSIZE_T, byval lpFlags as PDWORD) as WINBOOL
declare function SetSystemFileCacheSize(byval MinimumFileCacheSize as SIZE_T_, byval MaximumFileCacheSize as SIZE_T_, byval Flags as DWORD) as WINBOOL





declare function ImpersonateNamedPipeClient(byval hNamedPipe as HANDLE) as WINBOOL
declare function CreatePipe(byval hReadPipe as PHANDLE, byval hWritePipe as PHANDLE, byval lpPipeAttributes as LPSECURITY_ATTRIBUTES, byval nSize as DWORD) as WINBOOL
declare function ConnectNamedPipe(byval hNamedPipe as HANDLE, byval lpOverlapped as LPOVERLAPPED) as WINBOOL
declare function DisconnectNamedPipe(byval hNamedPipe as HANDLE) as WINBOOL
declare function SetNamedPipeHandleState(byval hNamedPipe as HANDLE, byval lpMode as LPDWORD, byval lpMaxCollectionCount as LPDWORD, byval lpCollectDataTimeout as LPDWORD) as WINBOOL
declare function PeekNamedPipe(byval hNamedPipe as HANDLE, byval lpBuffer as LPVOID, byval nBufferSize as DWORD, byval lpBytesRead as LPDWORD, byval lpTotalBytesAvail as LPDWORD, byval lpBytesLeftThisMessage as LPDWORD) as WINBOOL
declare function TransactNamedPipe(byval hNamedPipe as HANDLE, byval lpInBuffer as LPVOID, byval nInBufferSize as DWORD, byval lpOutBuffer as LPVOID, byval nOutBufferSize as DWORD, byval lpBytesRead as LPDWORD, byval lpOverlapped as LPOVERLAPPED) as WINBOOL
declare function CreateNamedPipeW(byval lpName as LPCWSTR, byval dwOpenMode as DWORD, byval dwPipeMode as DWORD, byval nMaxInstances as DWORD, byval nOutBufferSize as DWORD, byval nInBufferSize as DWORD, byval nDefaultTimeOut as DWORD, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES) as HANDLE
declare function WaitNamedPipeW(byval lpNamedPipeName as LPCWSTR, byval nTimeOut as DWORD) as WINBOOL



const PRIVATE_NAMESPACE_FLAG_DESTROY = &h1
declare function CreatePrivateNamespaceW(byval lpPrivateNamespaceAttributes as LPSECURITY_ATTRIBUTES, byval lpBoundaryDescriptor as LPVOID, byval lpAliasPrefix as LPCWSTR) as HANDLE
declare function OpenPrivateNamespaceW(byval lpBoundaryDescriptor as LPVOID, byval lpAliasPrefix as LPCWSTR) as HANDLE


declare function ClosePrivateNamespace(byval Handle as HANDLE, byval Flags as ULONG) as WINBOOLEAN
declare function CreateBoundaryDescriptorW(byval Name as LPCWSTR, byval Flags as ULONG) as HANDLE


declare function AddSIDToBoundaryDescriptor(byval BoundaryDescriptor as HANDLE ptr, byval RequiredSid as PSID) as WINBOOL
declare sub DeleteBoundaryDescriptor(byval BoundaryDescriptor as HANDLE)
declare function GetEnvironmentStringsA alias "GetEnvironmentStrings"() as LPCH
declare function GetEnvironmentStringsW() as LPWCH
declare function SetEnvironmentStringsW(byval NewEnvironment as LPWCH) as WINBOOL

 declare function GetEnvironmentStrings() as LPCH

declare function FreeEnvironmentStringsA(byval penv as LPCH) as WINBOOL
declare function FreeEnvironmentStringsW(byval penv as LPWCH) as WINBOOL
declare function GetStdHandle(byval nStdHandle as DWORD) as HANDLE
declare function SetStdHandle(byval nStdHandle as DWORD, byval hHandle as HANDLE) as WINBOOL


declare function GetCommandLineA() as LPSTR
declare function GetCommandLineW() as LPWSTR
declare function GetEnvironmentVariableA(byval lpName as LPCSTR, byval lpBuffer as LPSTR, byval nSize as DWORD) as DWORD
declare function GetEnvironmentVariableW(byval lpName as LPCWSTR, byval lpBuffer as LPWSTR, byval nSize as DWORD) as DWORD
declare function SetEnvironmentVariableA(byval lpName as LPCSTR, byval lpValue as LPCSTR) as WINBOOL
declare function SetEnvironmentVariableW(byval lpName as LPCWSTR, byval lpValue as LPCWSTR) as WINBOOL
declare function ExpandEnvironmentStringsA(byval lpSrc as LPCSTR, byval lpDst as LPSTR, byval nSize as DWORD) as DWORD
declare function ExpandEnvironmentStringsW(byval lpSrc as LPCWSTR, byval lpDst as LPWSTR, byval nSize as DWORD) as DWORD
declare function SetCurrentDirectoryA(byval lpPathName as LPCSTR) as WINBOOL
declare function SetCurrentDirectoryW(byval lpPathName as LPCWSTR) as WINBOOL
declare function GetCurrentDirectoryA(byval nBufferLength as DWORD, byval lpBuffer as LPSTR) as DWORD
declare function GetCurrentDirectoryW(byval nBufferLength as DWORD, byval lpBuffer as LPWSTR) as DWORD
declare function SearchPathW(byval lpPath as LPCWSTR, byval lpFileName as LPCWSTR, byval lpExtension as LPCWSTR, byval nBufferLength as DWORD, byval lpBuffer as LPWSTR, byval lpFilePart as LPWSTR ptr) as DWORD
declare function SearchPathA(byval lpPath as LPCSTR, byval lpFileName as LPCSTR, byval lpExtension as LPCSTR, byval nBufferLength as DWORD, byval lpBuffer as LPSTR, byval lpFilePart as LPSTR ptr) as DWORD
declare function NeedCurrentDirectoryForExePathA(byval ExeName as LPCSTR) as WINBOOL
declare function NeedCurrentDirectoryForExePathW(byval ExeName as LPCWSTR) as WINBOOL

 declare function ExpandEnvironmentStrings alias "ExpandEnvironmentStringsA"(byval lpSrc as LPCSTR, byval lpDst as LPSTR, byval nSize as DWORD) as DWORD
 declare function FreeEnvironmentStrings alias "FreeEnvironmentStringsA"(byval penv as LPCH) as WINBOOL
 declare function GetCommandLine alias "GetCommandLineA"() as LPSTR
 declare function GetCurrentDirectory alias "GetCurrentDirectoryA"(byval nBufferLength as DWORD, byval lpBuffer as LPSTR) as DWORD
 declare function GetEnvironmentVariable alias "GetEnvironmentVariableA"(byval lpName as LPCSTR, byval lpBuffer as LPSTR, byval nSize as DWORD) as DWORD
 declare function NeedCurrentDirectoryForExePath alias "NeedCurrentDirectoryForExePathA"(byval ExeName as LPCSTR) as WINBOOL
 declare function SearchPath alias "SearchPathA"(byval lpPath as LPCSTR, byval lpFileName as LPCSTR, byval lpExtension as LPCSTR, byval nBufferLength as DWORD, byval lpBuffer as LPSTR, byval lpFilePart as LPSTR ptr) as DWORD
 declare function SetCurrentDirectory alias "SetCurrentDirectoryA"(byval lpPathName as LPCSTR) as WINBOOL
 declare function SetEnvironmentVariable alias "SetEnvironmentVariableA"(byval lpName as LPCSTR, byval lpValue as LPCSTR) as WINBOOL


 const FLS_OUT_OF_INDEXES = cast(DWORD, &hffffffff)

const TLS_OUT_OF_INDEXES = cast(DWORD, &hffffffff)

type _PROCESS_INFORMATION
 hProcess as HANDLE
 hThread as HANDLE
 dwProcessId as DWORD
 dwThreadId as DWORD
end type

type PROCESS_INFORMATION as _PROCESS_INFORMATION
type PPROCESS_INFORMATION as _PROCESS_INFORMATION ptr
type LPPROCESS_INFORMATION as _PROCESS_INFORMATION ptr

type _STARTUPINFOA
 cb as DWORD
 lpReserved as LPSTR
 lpDesktop as LPSTR
 lpTitle as LPSTR
 dwX as DWORD
 dwY as DWORD
 dwXSize as DWORD
 dwYSize as DWORD
 dwXCountChars as DWORD
 dwYCountChars as DWORD
 dwFillAttribute as DWORD
 dwFlags as DWORD
 wShowWindow as WORD
 cbReserved2 as WORD
 lpReserved2 as LPBYTE
 hStdInput as HANDLE
 hStdOutput as HANDLE
 hStdError as HANDLE
end type

type STARTUPINFOA as _STARTUPINFOA
type LPSTARTUPINFOA as _STARTUPINFOA ptr

type _STARTUPINFOW
 cb as DWORD
 lpReserved as LPWSTR
 lpDesktop as LPWSTR
 lpTitle as LPWSTR
 dwX as DWORD
 dwY as DWORD
 dwXSize as DWORD
 dwYSize as DWORD
 dwXCountChars as DWORD
 dwYCountChars as DWORD
 dwFillAttribute as DWORD
 dwFlags as DWORD
 wShowWindow as WORD
 cbReserved2 as WORD
 lpReserved2 as LPBYTE
 hStdInput as HANDLE
 hStdOutput as HANDLE
 hStdError as HANDLE
end type

type STARTUPINFOW as _STARTUPINFOW
type LPSTARTUPINFOW as _STARTUPINFOW ptr

 type STARTUPINFO as STARTUPINFOA
 type LPSTARTUPINFO as LPSTARTUPINFOA

type PPROC_THREAD_ATTRIBUTE_LIST as _PROC_THREAD_ATTRIBUTE_LIST ptr
type LPPROC_THREAD_ATTRIBUTE_LIST as _PROC_THREAD_ATTRIBUTE_LIST ptr
declare function QueueUserAPC(byval pfnAPC as PAPCFUNC, byval hThread as HANDLE, byval dwData as ULONG_PTR) as DWORD
declare function GetProcessTimes(byval hProcess as HANDLE, byval lpCreationTime as LPFILETIME, byval lpExitTime as LPFILETIME, byval lpKernelTime as LPFILETIME, byval lpUserTime as LPFILETIME) as WINBOOL
declare sub ExitProcess(byval uExitCode as UINT)
declare function TerminateProcess(byval hProcess as HANDLE, byval uExitCode as UINT) as WINBOOL
declare function GetExitCodeProcess(byval hProcess as HANDLE, byval lpExitCode as LPDWORD) as WINBOOL
declare function SwitchToThread() as WINBOOL
declare function CreateRemoteThread(byval hProcess as HANDLE, byval lpThreadAttributes as LPSECURITY_ATTRIBUTES, byval dwStackSize as SIZE_T_, byval lpStartAddress as LPTHREAD_START_ROUTINE, byval lpParameter as LPVOID, byval dwCreationFlags as DWORD, byval lpThreadId as LPDWORD) as HANDLE
declare function OpenThread(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval dwThreadId as DWORD) as HANDLE
declare function SetThreadPriorityBoost(byval hThread as HANDLE, byval bDisablePriorityBoost as WINBOOL) as WINBOOL
declare function GetThreadPriorityBoost(byval hThread as HANDLE, byval pDisablePriorityBoost as PBOOL) as WINBOOL
declare function TerminateThread(byval hThread as HANDLE, byval dwExitCode as DWORD) as WINBOOL
declare function SetProcessShutdownParameters(byval dwLevel as DWORD, byval dwFlags as DWORD) as WINBOOL
declare function GetProcessVersion(byval ProcessId as DWORD) as DWORD
declare sub GetStartupInfoW(byval lpStartupInfo as LPSTARTUPINFOW)
declare function SetThreadToken(byval Thread as PHANDLE, byval Token as HANDLE) as WINBOOL
declare function OpenProcessToken(byval ProcessHandle as HANDLE, byval DesiredAccess as DWORD, byval TokenHandle as PHANDLE) as WINBOOL
declare function OpenThreadToken(byval ThreadHandle as HANDLE, byval DesiredAccess as DWORD, byval OpenAsSelf as WINBOOL, byval TokenHandle as PHANDLE) as WINBOOL
declare function SetPriorityClass(byval hProcess as HANDLE, byval dwPriorityClass as DWORD) as WINBOOL
declare function SetThreadStackGuarantee(byval StackSizeInBytes as PULONG) as WINBOOL
declare function GetPriorityClass(byval hProcess as HANDLE) as DWORD
declare function ProcessIdToSessionId(byval dwProcessId as DWORD, byval pSessionId as DWORD ptr) as WINBOOL
declare function GetProcessId(byval Process as HANDLE) as DWORD
declare function GetThreadId(byval Thread as HANDLE) as DWORD
declare function CreateRemoteThreadEx(byval hProcess as HANDLE, byval lpThreadAttributes as LPSECURITY_ATTRIBUTES, byval dwStackSize as SIZE_T_, byval lpStartAddress as LPTHREAD_START_ROUTINE, byval lpParameter as LPVOID, byval dwCreationFlags as DWORD, byval lpAttributeList as LPPROC_THREAD_ATTRIBUTE_LIST, byval lpThreadId as LPDWORD) as HANDLE
declare function GetThreadContext(byval hThread as HANDLE, byval lpContext as LPCONTEXT) as WINBOOL
declare function SetThreadContext(byval hThread as HANDLE, byval lpContext as const CONTEXT ptr) as WINBOOL
declare function FlushInstructionCache(byval hProcess as HANDLE, byval lpBaseAddress as LPCVOID, byval dwSize as SIZE_T_) as WINBOOL
declare function GetThreadTimes(byval hThread as HANDLE, byval lpCreationTime as LPFILETIME, byval lpExitTime as LPFILETIME, byval lpKernelTime as LPFILETIME, byval lpUserTime as LPFILETIME) as WINBOOL
declare function OpenProcess(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval dwProcessId as DWORD) as HANDLE
declare function GetProcessHandleCount(byval hProcess as HANDLE, byval pdwHandleCount as PDWORD) as WINBOOL
declare function GetCurrentProcessorNumber() as DWORD


declare function CreateProcessA(byval lpApplicationName as LPCSTR, byval lpCommandLine as LPSTR, byval lpProcessAttributes as LPSECURITY_ATTRIBUTES, byval lpThreadAttributes as LPSECURITY_ATTRIBUTES, byval bInheritHandles as WINBOOL, byval dwCreationFlags as DWORD, byval lpEnvironment as LPVOID, byval lpCurrentDirectory as LPCSTR, byval lpStartupInfo as LPSTARTUPINFOA, byval lpProcessInformation as LPPROCESS_INFORMATION) as WINBOOL
declare function CreateProcessW(byval lpApplicationName as LPCWSTR, byval lpCommandLine as LPWSTR, byval lpProcessAttributes as LPSECURITY_ATTRIBUTES, byval lpThreadAttributes as LPSECURITY_ATTRIBUTES, byval bInheritHandles as WINBOOL, byval dwCreationFlags as DWORD, byval lpEnvironment as LPVOID, byval lpCurrentDirectory as LPCWSTR, byval lpStartupInfo as LPSTARTUPINFOW, byval lpProcessInformation as LPPROCESS_INFORMATION) as WINBOOL

 declare function CreateProcess alias "CreateProcessA"(byval lpApplicationName as LPCSTR, byval lpCommandLine as LPSTR, byval lpProcessAttributes as LPSECURITY_ATTRIBUTES, byval lpThreadAttributes as LPSECURITY_ATTRIBUTES, byval bInheritHandles as WINBOOL, byval dwCreationFlags as DWORD, byval lpEnvironment as LPVOID, byval lpCurrentDirectory as LPCSTR, byval lpStartupInfo as LPSTARTUPINFOA, byval lpProcessInformation as LPPROCESS_INFORMATION) as WINBOOL

declare function CreateProcessAsUserW(byval hToken as HANDLE, byval lpApplicationName as LPCWSTR, byval lpCommandLine as LPWSTR, byval lpProcessAttributes as LPSECURITY_ATTRIBUTES, byval lpThreadAttributes as LPSECURITY_ATTRIBUTES, byval bInheritHandles as WINBOOL, byval dwCreationFlags as DWORD, byval lpEnvironment as LPVOID, byval lpCurrentDirectory as LPCWSTR, byval lpStartupInfo as LPSTARTUPINFOW, byval lpProcessInformation as LPPROCESS_INFORMATION) as WINBOOL



declare function GetCurrentProcess() as HANDLE
declare function GetCurrentProcessId() as DWORD
declare function GetCurrentThread() as HANDLE
declare function GetCurrentThreadId() as DWORD
declare function IsProcessorFeaturePresent(byval ProcessorFeature as DWORD) as WINBOOL


declare function CreateThread(byval lpThreadAttributes as LPSECURITY_ATTRIBUTES, byval dwStackSize as SIZE_T_, byval lpStartAddress as LPTHREAD_START_ROUTINE, byval lpParameter as LPVOID, byval dwCreationFlags as DWORD, byval lpThreadId as LPDWORD) as HANDLE
declare function SetThreadPriority(byval hThread as HANDLE, byval nPriority as long) as WINBOOL
declare function GetThreadPriority(byval hThread as HANDLE) as long
declare sub ExitThread(byval dwExitCode as DWORD)
declare function GetExitCodeThread(byval hThread as HANDLE, byval lpExitCode as LPDWORD) as WINBOOL
declare function SuspendThread(byval hThread as HANDLE) as DWORD
declare function ResumeThread(byval hThread as HANDLE) as DWORD
declare function TlsAlloc() as DWORD
declare function TlsGetValue(byval dwTlsIndex as DWORD) as LPVOID
declare function TlsSetValue(byval dwTlsIndex as DWORD, byval lpTlsValue as LPVOID) as WINBOOL
declare function TlsFree(byval dwTlsIndex as DWORD) as WINBOOL




declare function QueryPerformanceCounter(byval lpPerformanceCount as LARGE_INTEGER ptr) as WINBOOL
declare function QueryPerformanceFrequency(byval lpFrequency as LARGE_INTEGER ptr) as WINBOOL




declare function AccessCheck(byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval ClientToken as HANDLE, byval DesiredAccess as DWORD, byval GenericMapping as PGENERIC_MAPPING, byval PrivilegeSet as PPRIVILEGE_SET, byval PrivilegeSetLength as LPDWORD, byval GrantedAccess as LPDWORD, byval AccessStatus as LPBOOL) as WINBOOL
declare function AccessCheckAndAuditAlarmW(byval SubsystemName as LPCWSTR, byval HandleId as LPVOID, byval ObjectTypeName as LPWSTR, byval ObjectName as LPWSTR, byval SecurityDescriptor as PSECURITY_DESCRIPTOR, byval DesiredAccess as DWORD, byval GenericMapping as PGENERIC_MAPPING, byval ObjectCreation as WINBOOL, byval GrantedAccess as LPDWORD, byval AccessStatus as LPBOOL, byval pfGenerateOnClose as LPBOOL) as WINBOOL


declare function AccessCheckByType(byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval PrincipalSelfSid as PSID, byval ClientToken as HANDLE, byval DesiredAccess as DWORD, byval ObjectTypeList as POBJECT_TYPE_LIST, byval ObjectTypeListLength as DWORD, byval GenericMapping as PGENERIC_MAPPING, byval PrivilegeSet as PPRIVILEGE_SET, byval PrivilegeSetLength as LPDWORD, byval GrantedAccess as LPDWORD, byval AccessStatus as LPBOOL) as WINBOOL
declare function AccessCheckByTypeResultList(byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval PrincipalSelfSid as PSID, byval ClientToken as HANDLE, byval DesiredAccess as DWORD, byval ObjectTypeList as POBJECT_TYPE_LIST, byval ObjectTypeListLength as DWORD, byval GenericMapping as PGENERIC_MAPPING, byval PrivilegeSet as PPRIVILEGE_SET, byval PrivilegeSetLength as LPDWORD, byval GrantedAccessList as LPDWORD, byval AccessStatusList as LPDWORD) as WINBOOL
declare function AccessCheckByTypeAndAuditAlarmW(byval SubsystemName as LPCWSTR, byval HandleId as LPVOID, byval ObjectTypeName as LPCWSTR, byval ObjectName as LPCWSTR, byval SecurityDescriptor as PSECURITY_DESCRIPTOR, byval PrincipalSelfSid as PSID, byval DesiredAccess as DWORD, byval AuditType as AUDIT_EVENT_TYPE, byval Flags as DWORD, byval ObjectTypeList as POBJECT_TYPE_LIST, byval ObjectTypeListLength as DWORD, byval GenericMapping as PGENERIC_MAPPING, byval ObjectCreation as WINBOOL, byval GrantedAccess as LPDWORD, byval AccessStatus as LPBOOL, byval pfGenerateOnClose as LPBOOL) as WINBOOL


declare function AccessCheckByTypeResultListAndAuditAlarmW(byval SubsystemName as LPCWSTR, byval HandleId as LPVOID, byval ObjectTypeName as LPCWSTR, byval ObjectName as LPCWSTR, byval SecurityDescriptor as PSECURITY_DESCRIPTOR, byval PrincipalSelfSid as PSID, byval DesiredAccess as DWORD, byval AuditType as AUDIT_EVENT_TYPE, byval Flags as DWORD, byval ObjectTypeList as POBJECT_TYPE_LIST, byval ObjectTypeListLength as DWORD, byval GenericMapping as PGENERIC_MAPPING, byval ObjectCreation as WINBOOL, byval GrantedAccessList as LPDWORD, byval AccessStatusList as LPDWORD, byval pfGenerateOnClose as LPBOOL) as WINBOOL


declare function AccessCheckByTypeResultListAndAuditAlarmByHandleW(byval SubsystemName as LPCWSTR, byval HandleId as LPVOID, byval ClientToken as HANDLE, byval ObjectTypeName as LPCWSTR, byval ObjectName as LPCWSTR, byval SecurityDescriptor as PSECURITY_DESCRIPTOR, byval PrincipalSelfSid as PSID, byval DesiredAccess as DWORD, byval AuditType as AUDIT_EVENT_TYPE, byval Flags as DWORD, byval ObjectTypeList as POBJECT_TYPE_LIST, byval ObjectTypeListLength as DWORD, byval GenericMapping as PGENERIC_MAPPING, byval ObjectCreation as WINBOOL, byval GrantedAccessList as LPDWORD, byval AccessStatusList as LPDWORD, byval pfGenerateOnClose as LPBOOL) as WINBOOL


declare function AddAccessAllowedAce(byval pAcl as PACL, byval dwAceRevision as DWORD, byval AccessMask as DWORD, byval pSid as PSID) as WINBOOL
declare function AddAccessAllowedAceEx(byval pAcl as PACL, byval dwAceRevision as DWORD, byval AceFlags as DWORD, byval AccessMask as DWORD, byval pSid as PSID) as WINBOOL
declare function AddAccessAllowedObjectAce(byval pAcl as PACL, byval dwAceRevision as DWORD, byval AceFlags as DWORD, byval AccessMask as DWORD, byval ObjectTypeGuid as GUID ptr, byval InheritedObjectTypeGuid as GUID ptr, byval pSid as PSID) as WINBOOL
declare function AddAccessDeniedAce(byval pAcl as PACL, byval dwAceRevision as DWORD, byval AccessMask as DWORD, byval pSid as PSID) as WINBOOL
declare function AddAccessDeniedAceEx(byval pAcl as PACL, byval dwAceRevision as DWORD, byval AceFlags as DWORD, byval AccessMask as DWORD, byval pSid as PSID) as WINBOOL
declare function AddAccessDeniedObjectAce(byval pAcl as PACL, byval dwAceRevision as DWORD, byval AceFlags as DWORD, byval AccessMask as DWORD, byval ObjectTypeGuid as GUID ptr, byval InheritedObjectTypeGuid as GUID ptr, byval pSid as PSID) as WINBOOL
declare function AddAce(byval pAcl as PACL, byval dwAceRevision as DWORD, byval dwStartingAceIndex as DWORD, byval pAceList as LPVOID, byval nAceListLength as DWORD) as WINBOOL
declare function AddAuditAccessAce(byval pAcl as PACL, byval dwAceRevision as DWORD, byval dwAccessMask as DWORD, byval pSid as PSID, byval bAuditSuccess as WINBOOL, byval bAuditFailure as WINBOOL) as WINBOOL
declare function AddAuditAccessAceEx(byval pAcl as PACL, byval dwAceRevision as DWORD, byval AceFlags as DWORD, byval dwAccessMask as DWORD, byval pSid as PSID, byval bAuditSuccess as WINBOOL, byval bAuditFailure as WINBOOL) as WINBOOL
declare function AddAuditAccessObjectAce(byval pAcl as PACL, byval dwAceRevision as DWORD, byval AceFlags as DWORD, byval AccessMask as DWORD, byval ObjectTypeGuid as GUID ptr, byval InheritedObjectTypeGuid as GUID ptr, byval pSid as PSID, byval bAuditSuccess as WINBOOL, byval bAuditFailure as WINBOOL) as WINBOOL


declare function AdjustTokenGroups(byval TokenHandle as HANDLE, byval ResetToDefault as WINBOOL, byval NewState as PTOKEN_GROUPS, byval BufferLength as DWORD, byval PreviousState as PTOKEN_GROUPS, byval ReturnLength as PDWORD) as WINBOOL
declare function AdjustTokenPrivileges(byval TokenHandle as HANDLE, byval DisableAllPrivileges as WINBOOL, byval NewState as PTOKEN_PRIVILEGES, byval BufferLength as DWORD, byval PreviousState as PTOKEN_PRIVILEGES, byval ReturnLength as PDWORD) as WINBOOL
declare function AllocateAndInitializeSid(byval pIdentifierAuthority as PSID_IDENTIFIER_AUTHORITY, byval nSubAuthorityCount as UBYTE, byval nSubAuthority0 as DWORD, byval nSubAuthority1 as DWORD, byval nSubAuthority2 as DWORD, byval nSubAuthority3 as DWORD, byval nSubAuthority4 as DWORD, byval nSubAuthority5 as DWORD, byval nSubAuthority6 as DWORD, byval nSubAuthority7 as DWORD, byval pSid as PSID ptr) as WINBOOL
declare function AllocateLocallyUniqueId(byval Luid as PLUID) as WINBOOL
declare function AreAllAccessesGranted(byval GrantedAccess as DWORD, byval DesiredAccess as DWORD) as WINBOOL
declare function AreAnyAccessesGranted(byval GrantedAccess as DWORD, byval DesiredAccess as DWORD) as WINBOOL
declare function CheckTokenMembership(byval TokenHandle as HANDLE, byval SidToCheck as PSID, byval IsMember as PBOOL) as WINBOOL


declare function ConvertToAutoInheritPrivateObjectSecurity(byval ParentDescriptor as PSECURITY_DESCRIPTOR, byval CurrentSecurityDescriptor as PSECURITY_DESCRIPTOR, byval NewSecurityDescriptor as PSECURITY_DESCRIPTOR ptr, byval ObjectType as GUID ptr, byval IsDirectoryObject as WINBOOLEAN, byval GenericMapping as PGENERIC_MAPPING) as WINBOOL
declare function CopySid(byval nDestinationSidLength as DWORD, byval pDestinationSid as PSID, byval pSourceSid as PSID) as WINBOOL
declare function CreatePrivateObjectSecurity(byval ParentDescriptor as PSECURITY_DESCRIPTOR, byval CreatorDescriptor as PSECURITY_DESCRIPTOR, byval NewDescriptor as PSECURITY_DESCRIPTOR ptr, byval IsDirectoryObject as WINBOOL, byval Token as HANDLE, byval GenericMapping as PGENERIC_MAPPING) as WINBOOL
declare function CreatePrivateObjectSecurityEx(byval ParentDescriptor as PSECURITY_DESCRIPTOR, byval CreatorDescriptor as PSECURITY_DESCRIPTOR, byval NewDescriptor as PSECURITY_DESCRIPTOR ptr, byval ObjectType as GUID ptr, byval IsContainerObject as WINBOOL, byval AutoInheritFlags as ULONG, byval Token as HANDLE, byval GenericMapping as PGENERIC_MAPPING) as WINBOOL
declare function CreatePrivateObjectSecurityWithMultipleInheritance(byval ParentDescriptor as PSECURITY_DESCRIPTOR, byval CreatorDescriptor as PSECURITY_DESCRIPTOR, byval NewDescriptor as PSECURITY_DESCRIPTOR ptr, byval ObjectTypes as GUID ptr ptr, byval GuidCount as ULONG, byval IsContainerObject as WINBOOL, byval AutoInheritFlags as ULONG, byval Token as HANDLE, byval GenericMapping as PGENERIC_MAPPING) as WINBOOL
declare function CreateRestrictedToken(byval ExistingTokenHandle as HANDLE, byval Flags as DWORD, byval DisableSidCount as DWORD, byval SidsToDisable as PSID_AND_ATTRIBUTES, byval DeletePrivilegeCount as DWORD, byval PrivilegesToDelete as PLUID_AND_ATTRIBUTES, byval RestrictedSidCount as DWORD, byval SidsToRestrict as PSID_AND_ATTRIBUTES, byval NewTokenHandle as PHANDLE) as WINBOOL
declare function CreateWellKnownSid(byval WellKnownSidType as WELL_KNOWN_SID_TYPE, byval DomainSid as PSID, byval pSid as PSID, byval cbSid as DWORD ptr) as WINBOOL
declare function EqualDomainSid(byval pSid1 as PSID, byval pSid2 as PSID, byval pfEqual as WINBOOL ptr) as WINBOOL
declare function DeleteAce(byval pAcl as PACL, byval dwAceIndex as DWORD) as WINBOOL
declare function DestroyPrivateObjectSecurity(byval ObjectDescriptor as PSECURITY_DESCRIPTOR ptr) as WINBOOL
declare function DuplicateToken(byval ExistingTokenHandle as HANDLE, byval ImpersonationLevel as SECURITY_IMPERSONATION_LEVEL, byval DuplicateTokenHandle as PHANDLE) as WINBOOL
declare function DuplicateTokenEx(byval hExistingToken as HANDLE, byval dwDesiredAccess as DWORD, byval lpTokenAttributes as LPSECURITY_ATTRIBUTES, byval ImpersonationLevel as SECURITY_IMPERSONATION_LEVEL, byval TokenType as TOKEN_TYPE, byval phNewToken as PHANDLE) as WINBOOL
declare function EqualPrefixSid(byval pSid1 as PSID, byval pSid2 as PSID) as WINBOOL
declare function EqualSid(byval pSid1 as PSID, byval pSid2 as PSID) as WINBOOL
declare function FindFirstFreeAce(byval pAcl as PACL, byval pAce as LPVOID ptr) as WINBOOL
declare function FreeSid(byval pSid as PSID) as PVOID
declare function GetAce(byval pAcl as PACL, byval dwAceIndex as DWORD, byval pAce as LPVOID ptr) as WINBOOL
declare function GetAclInformation(byval pAcl as PACL, byval pAclInformation as LPVOID, byval nAclInformationLength as DWORD, byval dwAclInformationClass as ACL_INFORMATION_CLASS) as WINBOOL
declare function GetFileSecurityW(byval lpFileName as LPCWSTR, byval RequestedInformation as SECURITY_INFORMATION, byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval nLength as DWORD, byval lpnLengthNeeded as LPDWORD) as WINBOOL


declare function GetKernelObjectSecurity(byval Handle as HANDLE, byval RequestedInformation as SECURITY_INFORMATION, byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval nLength as DWORD, byval lpnLengthNeeded as LPDWORD) as WINBOOL
declare function GetLengthSid(byval pSid as PSID) as DWORD
declare function GetPrivateObjectSecurity(byval ObjectDescriptor as PSECURITY_DESCRIPTOR, byval SecurityInformation as SECURITY_INFORMATION, byval ResultantDescriptor as PSECURITY_DESCRIPTOR, byval DescriptorLength as DWORD, byval ReturnLength as PDWORD) as WINBOOL
declare function GetSecurityDescriptorControl(byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval pControl as PSECURITY_DESCRIPTOR_CONTROL, byval lpdwRevision as LPDWORD) as WINBOOL
declare function GetSecurityDescriptorDacl(byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval lpbDaclPresent as LPBOOL, byval pDacl as PACL ptr, byval lpbDaclDefaulted as LPBOOL) as WINBOOL
declare function GetSecurityDescriptorGroup(byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval pGroup as PSID ptr, byval lpbGroupDefaulted as LPBOOL) as WINBOOL
declare function GetSecurityDescriptorLength(byval pSecurityDescriptor as PSECURITY_DESCRIPTOR) as DWORD
declare function GetSecurityDescriptorOwner(byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval pOwner as PSID ptr, byval lpbOwnerDefaulted as LPBOOL) as WINBOOL
declare function GetSecurityDescriptorRMControl(byval SecurityDescriptor as PSECURITY_DESCRIPTOR, byval RMControl as PUCHAR) as DWORD
declare function GetSecurityDescriptorSacl(byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval lpbSaclPresent as LPBOOL, byval pSacl as PACL ptr, byval lpbSaclDefaulted as LPBOOL) as WINBOOL
declare function GetSidIdentifierAuthority(byval pSid as PSID) as PSID_IDENTIFIER_AUTHORITY
declare function GetSidLengthRequired(byval nSubAuthorityCount as UCHAR) as DWORD
declare function GetSidSubAuthority(byval pSid as PSID, byval nSubAuthority as DWORD) as PDWORD
declare function GetSidSubAuthorityCount(byval pSid as PSID) as PUCHAR
declare function GetTokenInformation(byval TokenHandle as HANDLE, byval TokenInformationClass as TOKEN_INFORMATION_CLASS, byval TokenInformation as LPVOID, byval TokenInformationLength as DWORD, byval ReturnLength as PDWORD) as WINBOOL
declare function GetWindowsAccountDomainSid(byval pSid as PSID, byval pDomainSid as PSID, byval cbDomainSid as DWORD ptr) as WINBOOL
declare function ImpersonateAnonymousToken(byval ThreadHandle as HANDLE) as WINBOOL
declare function ImpersonateLoggedOnUser(byval hToken as HANDLE) as WINBOOL
declare function ImpersonateSelf(byval ImpersonationLevel as SECURITY_IMPERSONATION_LEVEL) as WINBOOL
declare function InitializeAcl(byval pAcl as PACL, byval nAclLength as DWORD, byval dwAclRevision as DWORD) as WINBOOL
declare function InitializeSecurityDescriptor(byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval dwRevision as DWORD) as WINBOOL
declare function InitializeSid(byval Sid as PSID, byval pIdentifierAuthority as PSID_IDENTIFIER_AUTHORITY, byval nSubAuthorityCount as UBYTE) as WINBOOL
declare function IsTokenRestricted(byval TokenHandle as HANDLE) as WINBOOL
declare function IsValidAcl(byval pAcl as PACL) as WINBOOL
declare function IsValidSecurityDescriptor(byval pSecurityDescriptor as PSECURITY_DESCRIPTOR) as WINBOOL
declare function IsValidSid(byval pSid as PSID) as WINBOOL
declare function IsWellKnownSid(byval pSid as PSID, byval WellKnownSidType as WELL_KNOWN_SID_TYPE) as WINBOOL
declare function MakeAbsoluteSD(byval pSelfRelativeSecurityDescriptor as PSECURITY_DESCRIPTOR, byval pAbsoluteSecurityDescriptor as PSECURITY_DESCRIPTOR, byval lpdwAbsoluteSecurityDescriptorSize as LPDWORD, byval pDacl as PACL, byval lpdwDaclSize as LPDWORD, byval pSacl as PACL, byval lpdwSaclSize as LPDWORD, byval pOwner as PSID, byval lpdwOwnerSize as LPDWORD, byval pPrimaryGroup as PSID, byval lpdwPrimaryGroupSize as LPDWORD) as WINBOOL
declare function MakeSelfRelativeSD(byval pAbsoluteSecurityDescriptor as PSECURITY_DESCRIPTOR, byval pSelfRelativeSecurityDescriptor as PSECURITY_DESCRIPTOR, byval lpdwBufferLength as LPDWORD) as WINBOOL
declare sub MapGenericMask(byval AccessMask as PDWORD, byval GenericMapping as PGENERIC_MAPPING)
declare function ObjectCloseAuditAlarmW(byval SubsystemName as LPCWSTR, byval HandleId as LPVOID, byval GenerateOnClose as WINBOOL) as WINBOOL


declare function ObjectDeleteAuditAlarmW(byval SubsystemName as LPCWSTR, byval HandleId as LPVOID, byval GenerateOnClose as WINBOOL) as WINBOOL


declare function ObjectOpenAuditAlarmW(byval SubsystemName as LPCWSTR, byval HandleId as LPVOID, byval ObjectTypeName as LPWSTR, byval ObjectName as LPWSTR, byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval ClientToken as HANDLE, byval DesiredAccess as DWORD, byval GrantedAccess as DWORD, byval Privileges as PPRIVILEGE_SET, byval ObjectCreation as WINBOOL, byval AccessGranted as WINBOOL, byval GenerateOnClose as LPBOOL) as WINBOOL


declare function ObjectPrivilegeAuditAlarmW(byval SubsystemName as LPCWSTR, byval HandleId as LPVOID, byval ClientToken as HANDLE, byval DesiredAccess as DWORD, byval Privileges as PPRIVILEGE_SET, byval AccessGranted as WINBOOL) as WINBOOL


declare function PrivilegeCheck(byval ClientToken as HANDLE, byval RequiredPrivileges as PPRIVILEGE_SET, byval pfResult as LPBOOL) as WINBOOL
declare function PrivilegedServiceAuditAlarmW(byval SubsystemName as LPCWSTR, byval ServiceName as LPCWSTR, byval ClientToken as HANDLE, byval Privileges as PPRIVILEGE_SET, byval AccessGranted as WINBOOL) as WINBOOL



declare function RevertToSelf() as WINBOOL
declare function SetAclInformation(byval pAcl as PACL, byval pAclInformation as LPVOID, byval nAclInformationLength as DWORD, byval dwAclInformationClass as ACL_INFORMATION_CLASS) as WINBOOL
declare function SetFileSecurityW(byval lpFileName as LPCWSTR, byval SecurityInformation as SECURITY_INFORMATION, byval pSecurityDescriptor as PSECURITY_DESCRIPTOR) as WINBOOL


declare function SetKernelObjectSecurity(byval Handle as HANDLE, byval SecurityInformation as SECURITY_INFORMATION, byval SecurityDescriptor as PSECURITY_DESCRIPTOR) as WINBOOL
declare function SetPrivateObjectSecurity(byval SecurityInformation as SECURITY_INFORMATION, byval ModificationDescriptor as PSECURITY_DESCRIPTOR, byval ObjectsSecurityDescriptor as PSECURITY_DESCRIPTOR ptr, byval GenericMapping as PGENERIC_MAPPING, byval Token as HANDLE) as WINBOOL
declare function SetPrivateObjectSecurityEx(byval SecurityInformation as SECURITY_INFORMATION, byval ModificationDescriptor as PSECURITY_DESCRIPTOR, byval ObjectsSecurityDescriptor as PSECURITY_DESCRIPTOR ptr, byval AutoInheritFlags as ULONG, byval GenericMapping as PGENERIC_MAPPING, byval Token as HANDLE) as WINBOOL


declare function SetSecurityDescriptorControl(byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval ControlBitsOfInterest as SECURITY_DESCRIPTOR_CONTROL, byval ControlBitsToSet as SECURITY_DESCRIPTOR_CONTROL) as WINBOOL
declare function SetSecurityDescriptorDacl(byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval bDaclPresent as WINBOOL, byval pDacl as PACL, byval bDaclDefaulted as WINBOOL) as WINBOOL
declare function SetSecurityDescriptorGroup(byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval pGroup as PSID, byval bGroupDefaulted as WINBOOL) as WINBOOL
declare function SetSecurityDescriptorOwner(byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval pOwner as PSID, byval bOwnerDefaulted as WINBOOL) as WINBOOL
declare function SetSecurityDescriptorRMControl(byval SecurityDescriptor as PSECURITY_DESCRIPTOR, byval RMControl as PUCHAR) as DWORD
declare function SetSecurityDescriptorSacl(byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval bSaclPresent as WINBOOL, byval pSacl as PACL, byval bSaclDefaulted as WINBOOL) as WINBOOL
declare function SetTokenInformation(byval TokenHandle as HANDLE, byval TokenInformationClass as TOKEN_INFORMATION_CLASS, byval TokenInformation as LPVOID, byval TokenInformationLength as DWORD) as WINBOOL


const INIT_ONCE_CHECK_ONLY = RTL_RUN_ONCE_CHECK_ONLY
const INIT_ONCE_ASYNC = RTL_RUN_ONCE_ASYNC
const INIT_ONCE_INIT_FAILED = RTL_RUN_ONCE_INIT_FAILED
const INIT_ONCE_CTX_RESERVED_BITS = RTL_RUN_ONCE_CTX_RESERVED_BITS
const CONDITION_VARIABLE_LOCKMODE_SHARED = RTL_CONDITION_VARIABLE_LOCKMODE_SHARED
const MUTEX_MODIFY_STATE = MUTANT_QUERY_STATE
const MUTEX_ALL_ACCESS = MUTANT_ALL_ACCESS

type SRWLOCK as RTL_SRWLOCK
type PSRWLOCK as RTL_SRWLOCK ptr
type INIT_ONCE as RTL_RUN_ONCE
type PINIT_ONCE as PRTL_RUN_ONCE
type LPINIT_ONCE as PRTL_RUN_ONCE
type PINIT_ONCE_FN as function(byval InitOnce as PINIT_ONCE, byval Parameter as PVOID, byval Context as PVOID ptr) as WINBOOL
type CONDITION_VARIABLE as RTL_CONDITION_VARIABLE
type PCONDITION_VARIABLE as RTL_CONDITION_VARIABLE ptr

declare sub EnterCriticalSection(byval lpCriticalSection as LPCRITICAL_SECTION)
declare sub LeaveCriticalSection(byval lpCriticalSection as LPCRITICAL_SECTION)
declare function TryEnterCriticalSection(byval lpCriticalSection as LPCRITICAL_SECTION) as WINBOOL
declare sub DeleteCriticalSection(byval lpCriticalSection as LPCRITICAL_SECTION)
declare function SetEvent(byval hEvent as HANDLE) as WINBOOL
declare function ResetEvent(byval hEvent as HANDLE) as WINBOOL
declare function ReleaseSemaphore(byval hSemaphore as HANDLE, byval lReleaseCount as LONG, byval lpPreviousCount as LPLONG) as WINBOOL
declare function ReleaseMutex(byval hMutex as HANDLE) as WINBOOL
declare function WaitForSingleObjectEx(byval hHandle as HANDLE, byval dwMilliseconds as DWORD, byval bAlertable as WINBOOL) as DWORD
declare function WaitForMultipleObjectsEx(byval nCount as DWORD, byval lpHandles as const HANDLE ptr, byval bWaitAll as WINBOOL, byval dwMilliseconds as DWORD, byval bAlertable as WINBOOL) as DWORD
declare function OpenMutexW(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval lpName as LPCWSTR) as HANDLE
declare function OpenEventA(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval lpName as LPCSTR) as HANDLE
declare function OpenEventW(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval lpName as LPCWSTR) as HANDLE
declare function OpenSemaphoreW(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval lpName as LPCWSTR) as HANDLE
declare function WaitOnAddress(byval Address as any ptr, byval CompareAddress as PVOID, byval AddressSize as SIZE_T_, byval dwMilliseconds as DWORD) as WINBOOL
declare sub WakeByAddressSingle(byval Address as PVOID)
declare sub WakeByAddressAll(byval Address as PVOID)



 declare function OpenEvent alias "OpenEventA"(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval lpName as LPCSTR) as HANDLE

type PTIMERAPCROUTINE as sub(byval lpArgToCompletionRoutine as LPVOID, byval dwTimerLowValue as DWORD, byval dwTimerHighValue as DWORD)
type SYNCHRONIZATION_BARRIER as RTL_BARRIER
type PSYNCHRONIZATION_BARRIER as PRTL_BARRIER
type LPSYNCHRONIZATION_BARRIER as PRTL_BARRIER

const SYNCHRONIZATION_BARRIER_FLAGS_SPIN_ONLY = &h01
const SYNCHRONIZATION_BARRIER_FLAGS_BLOCK_ONLY = &h02
const SYNCHRONIZATION_BARRIER_FLAGS_NO_DELETE = &h04

declare sub InitializeCriticalSection(byval lpCriticalSection as LPCRITICAL_SECTION)
declare function InitializeCriticalSectionAndSpinCount(byval lpCriticalSection as LPCRITICAL_SECTION, byval dwSpinCount as DWORD) as WINBOOL
declare function SetCriticalSectionSpinCount(byval lpCriticalSection as LPCRITICAL_SECTION, byval dwSpinCount as DWORD) as DWORD
declare function WaitForSingleObject(byval hHandle as HANDLE, byval dwMilliseconds as DWORD) as DWORD
declare function SleepEx(byval dwMilliseconds as DWORD, byval bAlertable as WINBOOL) as DWORD
declare function CreateMutexA(byval lpMutexAttributes as LPSECURITY_ATTRIBUTES, byval bInitialOwner as WINBOOL, byval lpName as LPCSTR) as HANDLE
declare function CreateMutexW(byval lpMutexAttributes as LPSECURITY_ATTRIBUTES, byval bInitialOwner as WINBOOL, byval lpName as LPCWSTR) as HANDLE
declare function CreateEventA(byval lpEventAttributes as LPSECURITY_ATTRIBUTES, byval bManualReset as WINBOOL, byval bInitialState as WINBOOL, byval lpName as LPCSTR) as HANDLE
declare function CreateEventW(byval lpEventAttributes as LPSECURITY_ATTRIBUTES, byval bManualReset as WINBOOL, byval bInitialState as WINBOOL, byval lpName as LPCWSTR) as HANDLE
declare function SetWaitableTimer(byval hTimer as HANDLE, byval lpDueTime as const LARGE_INTEGER ptr, byval lPeriod as LONG, byval pfnCompletionRoutine as PTIMERAPCROUTINE, byval lpArgToCompletionRoutine as LPVOID, byval fResume as WINBOOL) as WINBOOL
declare function CancelWaitableTimer(byval hTimer as HANDLE) as WINBOOL
declare function OpenWaitableTimerW(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval lpTimerName as LPCWSTR) as HANDLE
declare function EnterSynchronizationBarrier(byval lpBarrier as LPSYNCHRONIZATION_BARRIER, byval dwFlags as DWORD) as WINBOOL
declare function InitializeSynchronizationBarrier(byval lpBarrier as LPSYNCHRONIZATION_BARRIER, byval lTotalThreads as LONG, byval lSpinCount as LONG) as WINBOOL
declare function DeleteSynchronizationBarrier(byval lpBarrier as LPSYNCHRONIZATION_BARRIER) as WINBOOL
declare sub Sleep_ alias "Sleep"(byval dwMilliseconds as DWORD)
declare function SignalObjectAndWait(byval hObjectToSignal as HANDLE, byval hObjectToWaitOn as HANDLE, byval dwMilliseconds as DWORD, byval bAlertable as WINBOOL) as DWORD




 declare function CreateMutex alias "CreateMutexA"(byval lpMutexAttributes as LPSECURITY_ATTRIBUTES, byval bInitialOwner as WINBOOL, byval lpName as LPCSTR) as HANDLE
 declare function CreateEvent alias "CreateEventA"(byval lpEventAttributes as LPSECURITY_ATTRIBUTES, byval bManualReset as WINBOOL, byval bInitialState as WINBOOL, byval lpName as LPCSTR) as HANDLE


type _SYSTEM_INFO
 union
 dwOemId as DWORD

 type
 wProcessorArchitecture as WORD
 wReserved as WORD
 end type
 end union

 dwPageSize as DWORD
 lpMinimumApplicationAddress as LPVOID
 lpMaximumApplicationAddress as LPVOID
 dwActiveProcessorMask as DWORD_PTR
 dwNumberOfProcessors as DWORD
 dwProcessorType as DWORD
 dwAllocationGranularity as DWORD
 wProcessorLevel as WORD
 wProcessorRevision as WORD
end type

type SYSTEM_INFO as _SYSTEM_INFO
type LPSYSTEM_INFO as _SYSTEM_INFO ptr
declare sub GetSystemTime(byval lpSystemTime as LPSYSTEMTIME)
declare sub GetSystemTimeAsFileTime(byval lpSystemTimeAsFileTime as LPFILETIME)
declare sub GetLocalTime(byval lpSystemTime as LPSYSTEMTIME)
declare sub GetNativeSystemInfo(byval lpSystemInfo as LPSYSTEM_INFO)


declare function GetVersion() as DWORD

type _MEMORYSTATUSEX
 dwLength as DWORD
 dwMemoryLoad as DWORD
 ullTotalPhys as DWORDLONG
 ullAvailPhys as DWORDLONG
 ullTotalPageFile as DWORDLONG
 ullAvailPageFile as DWORDLONG
 ullTotalVirtual as DWORDLONG
 ullAvailVirtual as DWORDLONG
 ullAvailExtendedVirtual as DWORDLONG
end type

type MEMORYSTATUSEX as _MEMORYSTATUSEX
type LPMEMORYSTATUSEX as _MEMORYSTATUSEX ptr

type _COMPUTER_NAME_FORMAT as long
enum
 ComputerNameNetBIOS
 ComputerNameDnsHostname
 ComputerNameDnsDomain
 ComputerNameDnsFullyQualified
 ComputerNamePhysicalNetBIOS
 ComputerNamePhysicalDnsHostname
 ComputerNamePhysicalDnsDomain
 ComputerNamePhysicalDnsFullyQualified
 ComputerNameMax
end enum

type COMPUTER_NAME_FORMAT as _COMPUTER_NAME_FORMAT
declare function GlobalMemoryStatusEx(byval lpBuffer as LPMEMORYSTATUSEX) as WINBOOL
declare function SetLocalTime(byval lpSystemTime as const SYSTEMTIME ptr) as WINBOOL
declare sub GetSystemInfo(byval lpSystemInfo as LPSYSTEM_INFO)
declare function GetTickCount() as DWORD
declare function GetSystemTimeAdjustment(byval lpTimeAdjustment as PDWORD, byval lpTimeIncrement as PDWORD, byval lpTimeAdjustmentDisabled as PBOOL) as WINBOOL
declare function GetSystemDirectoryA(byval lpBuffer as LPSTR, byval uSize as UINT) as UINT
declare function GetSystemDirectoryW(byval lpBuffer as LPWSTR, byval uSize as UINT) as UINT
declare function GetWindowsDirectoryA(byval lpBuffer as LPSTR, byval uSize as UINT) as UINT
declare function GetWindowsDirectoryW(byval lpBuffer as LPWSTR, byval uSize as UINT) as UINT
declare function GetSystemWindowsDirectoryA(byval lpBuffer as LPSTR, byval uSize as UINT) as UINT
declare function GetSystemWindowsDirectoryW(byval lpBuffer as LPWSTR, byval uSize as UINT) as UINT
declare function GetComputerNameExA(byval NameType as COMPUTER_NAME_FORMAT, byval lpBuffer as LPSTR, byval nSize as LPDWORD) as WINBOOL
declare function GetComputerNameExW(byval NameType as COMPUTER_NAME_FORMAT, byval lpBuffer as LPWSTR, byval nSize as LPDWORD) as WINBOOL
declare function SetComputerNameExW(byval NameType as COMPUTER_NAME_FORMAT, byval lpBuffer as LPCWSTR) as WINBOOL
declare function SetSystemTime(byval lpSystemTime as const SYSTEMTIME ptr) as WINBOOL
declare function GetVersionExA(byval lpVersionInformation as LPOSVERSIONINFOA) as WINBOOL
declare function GetVersionExW(byval lpVersionInformation as LPOSVERSIONINFOW) as WINBOOL
declare function GetLogicalProcessorInformation(byval Buffer as PSYSTEM_LOGICAL_PROCESSOR_INFORMATION, byval ReturnedLength as PDWORD) as WINBOOL
declare sub GetSystemTimePreciseAsFileTime(byval lpSystemTimeAsFileTime as LPFILETIME)
declare function EnumSystemFirmwareTables(byval FirmwareTableProviderSignature as DWORD, byval pFirmwareTableEnumBuffer as PVOID, byval BufferSize as DWORD) as UINT
declare function GetSystemFirmwareTable(byval FirmwareTableProviderSignature as DWORD, byval FirmwareTableID as DWORD, byval pFirmwareTableBuffer as PVOID, byval BufferSize as DWORD) as UINT


 declare function GetSystemDirectory alias "GetSystemDirectoryA"(byval lpBuffer as LPSTR, byval uSize as UINT) as UINT
 declare function GetWindowsDirectory alias "GetWindowsDirectoryA"(byval lpBuffer as LPSTR, byval uSize as UINT) as UINT
 declare function GetSystemWindowsDirectory alias "GetSystemWindowsDirectoryA"(byval lpBuffer as LPSTR, byval uSize as UINT) as UINT
 declare function GetComputerNameEx alias "GetComputerNameExA"(byval NameType as COMPUTER_NAME_FORMAT, byval lpBuffer as LPSTR, byval nSize as LPDWORD) as WINBOOL
 declare function GetVersionEx alias "GetVersionExA"(byval lpVersionInformation as LPOSVERSIONINFOA) as WINBOOL

declare function GetNumaHighestNodeNumber(byval HighestNodeNumber as PULONG) as WINBOOL


type PTP_WIN32_IO_CALLBACK as sub(byval Instance as PTP_CALLBACK_INSTANCE, byval Context as PVOID, byval Overlapped as PVOID, byval IoResult as ULONG, byval NumberOfBytesTransferred as ULONG_PTR, byval Io as PTP_IO)


declare function CreateTimerQueueTimer(byval phNewTimer as PHANDLE, byval TimerQueue as HANDLE, byval Callback as WAITORTIMERCALLBACK, byval Parameter as PVOID, byval DueTime as DWORD, byval Period as DWORD, byval Flags as ULONG) as WINBOOL
declare function DeleteTimerQueueTimer(byval TimerQueue as HANDLE, byval Timer as HANDLE, byval CompletionEvent as HANDLE) as WINBOOL
declare function QueueUserWorkItem(byval Function as LPTHREAD_START_ROUTINE, byval Context as PVOID, byval Flags as ULONG) as WINBOOL
declare function UnregisterWaitEx(byval WaitHandle as HANDLE, byval CompletionEvent as HANDLE) as WINBOOL
declare function CreateTimerQueue() as HANDLE
declare function ChangeTimerQueueTimer(byval TimerQueue as HANDLE, byval Timer as HANDLE, byval DueTime as ULONG, byval Period as ULONG) as WINBOOL
declare function DeleteTimerQueueEx(byval TimerQueue as HANDLE, byval CompletionEvent as HANDLE) as WINBOOL
declare function EncodePointer(byval Ptr as PVOID) as PVOID
declare function DecodePointer(byval Ptr as PVOID) as PVOID
declare function EncodeSystemPointer(byval Ptr as PVOID) as PVOID
declare function DecodeSystemPointer(byval Ptr as PVOID) as PVOID
declare function Beep_ alias "Beep"(byval dwFreq as DWORD, byval dwDuration as DWORD) as WINBOOL
declare function Wow64DisableWow64FsRedirection(byval OldValue as PVOID ptr) as WINBOOL
declare function Wow64RevertWow64FsRedirection(byval OlValue as PVOID) as WINBOOL
declare function IsWow64Process(byval hProcess as HANDLE, byval Wow64Process as PBOOL) as WINBOOL

const FILE_BEGIN = 0
const FILE_CURRENT = 1
const FILE_END = 2
const WAIT_FAILED = cast(DWORD, &hffffffff)
const WAIT_OBJECT_0 = STATUS_WAIT_0 + 0
const WAIT_ABANDONED = STATUS_ABANDONED_WAIT_0 + 0
const WAIT_ABANDONED_0 = STATUS_ABANDONED_WAIT_0 + 0
const WAIT_IO_COMPLETION = STATUS_USER_APC
declare function SecureZeroMemory alias "RtlSecureZeroMemory"(byval ptr as PVOID, byval cnt as SIZE_T_) as PVOID
declare function CaptureStackBackTrace alias "RtlCaptureStackBackTrace"(byval FramesToSkip as DWORD, byval FramesToCapture as DWORD, byval BackTrace as PVOID ptr, byval BackTraceHash as PDWORD) as WORD
const FILE_FLAG_WRITE_THROUGH = &h80000000
const FILE_FLAG_OVERLAPPED = &h40000000
const FILE_FLAG_NO_BUFFERING = &h20000000
const FILE_FLAG_RANDOM_ACCESS = &h10000000
const FILE_FLAG_SEQUENTIAL_SCAN = &h8000000
const FILE_FLAG_DELETE_ON_CLOSE = &h4000000
const FILE_FLAG_BACKUP_SEMANTICS = &h2000000
const FILE_FLAG_POSIX_SEMANTICS = &h1000000
const FILE_FLAG_SESSION_AWARE = &h800000
const FILE_FLAG_OPEN_REPARSE_POINT = &h200000
const FILE_FLAG_OPEN_NO_RECALL = &h100000
const FILE_FLAG_FIRST_PIPE_INSTANCE = &h80000


const PROGRESS_CONTINUE = 0
const PROGRESS_CANCEL = 1
const PROGRESS_STOP = 2
const PROGRESS_QUIET = 3
const CALLBACK_CHUNK_FINISHED = &h00
const CALLBACK_STREAM_SWITCH = &h1
const COPY_FILE_FAIL_IF_EXISTS = &h1
const COPY_FILE_RESTARTABLE = &h2
const COPY_FILE_OPEN_SOURCE_FOR_WRITE = &h4
const COPY_FILE_ALLOW_DECRYPTED_DESTINATION = &h8


const REPLACEFILE_WRITE_THROUGH = &h1
const REPLACEFILE_IGNORE_MERGE_ERRORS = &h2


const PIPE_ACCESS_INBOUND = &h1
const PIPE_ACCESS_OUTBOUND = &h2
const PIPE_ACCESS_DUPLEX = &h3
const PIPE_CLIENT_END = &h00
const PIPE_SERVER_END = &h1
const PIPE_WAIT = &h00
const PIPE_NOWAIT = &h1
const PIPE_READMODE_BYTE = &h00
const PIPE_READMODE_MESSAGE = &h2
const PIPE_TYPE_BYTE = &h00
const PIPE_TYPE_MESSAGE = &h4
const PIPE_ACCEPT_REMOTE_CLIENTS = &h00
const PIPE_REJECT_REMOTE_CLIENTS = &h8
const PIPE_UNLIMITED_INSTANCES = 255
const SECURITY_ANONYMOUS = SecurityAnonymous shl 16
const SECURITY_IDENTIFICATION = SecurityIdentification shl 16
const SECURITY_IMPERSONATION = SecurityImpersonation shl 16
const SECURITY_DELEGATION = SecurityDelegation shl 16
const SECURITY_CONTEXT_TRACKING = &h40000
const SECURITY_EFFECTIVE_ONLY = &h80000
const SECURITY_SQOS_PRESENT = &h100000
const SECURITY_VALID_SQOS_FLAGS = &h1f0000
const FAIL_FAST_GENERATE_EXCEPTION_ADDRESS = &h1
const FAIL_FAST_NO_HARD_ERROR_DLG = &h2
type PFIBER_START_ROUTINE as sub(byval lpFiberParameter as LPVOID)
type LPFIBER_START_ROUTINE as PFIBER_START_ROUTINE

 type LPLDT_ENTRY as PLDT_ENTRY

const SP_SERIALCOMM = cast(DWORD, &h1)
const PST_UNSPECIFIED = cast(DWORD, &h00)
const PST_RS232 = cast(DWORD, &h1)
const PST_PARALLELPORT = cast(DWORD, &h2)
const PST_RS422 = cast(DWORD, &h3)
const PST_RS423 = cast(DWORD, &h4)
const PST_RS449 = cast(DWORD, &h5)
const PST_MODEM = cast(DWORD, &h6)
const PST_FAX = cast(DWORD, &h21)
const PST_SCANNER = cast(DWORD, &h22)
const PST_NETWORK_BRIDGE = cast(DWORD, &h100)
const PST_LAT = cast(DWORD, &h101)
const PST_TCPIP_TELNET = cast(DWORD, &h102)
const PST_X25 = cast(DWORD, &h103)
const PCF_DTRDSR = cast(DWORD, &h1)
const PCF_RTSCTS = cast(DWORD, &h2)
const PCF_RLSD = cast(DWORD, &h4)
const PCF_PARITY_CHECK = cast(DWORD, &h8)
const PCF_XONXOFF = cast(DWORD, &h10)
const PCF_SETXCHAR = cast(DWORD, &h20)
const PCF_TOTALTIMEOUTS = cast(DWORD, &h40)
const PCF_INTTIMEOUTS = cast(DWORD, &h80)
const PCF_SPECIALCHARS = cast(DWORD, &h100)
const PCF_16BITMODE = cast(DWORD, &h200)
const SP_PARITY = cast(DWORD, &h1)
const SP_BAUD = cast(DWORD, &h2)
const SP_DATABITS = cast(DWORD, &h4)
const SP_STOPBITS = cast(DWORD, &h8)
const SP_HANDSHAKING = cast(DWORD, &h10)
const SP_PARITY_CHECK = cast(DWORD, &h20)
const SP_RLSD = cast(DWORD, &h40)
const BAUD_075 = cast(DWORD, &h1)
const BAUD_110 = cast(DWORD, &h2)
const BAUD_134_5 = cast(DWORD, &h4)
const BAUD_150 = cast(DWORD, &h8)
const BAUD_300 = cast(DWORD, &h10)
const BAUD_600 = cast(DWORD, &h20)
const BAUD_1200 = cast(DWORD, &h40)
const BAUD_1800 = cast(DWORD, &h80)
const BAUD_2400 = cast(DWORD, &h100)
const BAUD_4800 = cast(DWORD, &h200)
const BAUD_7200 = cast(DWORD, &h400)
const BAUD_9600 = cast(DWORD, &h800)
const BAUD_14400 = cast(DWORD, &h1000)
const BAUD_19200 = cast(DWORD, &h2000)
const BAUD_38400 = cast(DWORD, &h4000)
const BAUD_56K = cast(DWORD, &h8000)
const BAUD_128K = cast(DWORD, &h10000)
const BAUD_115200 = cast(DWORD, &h20000)
const BAUD_57600 = cast(DWORD, &h40000)
const BAUD_USER = cast(DWORD, &h10000000)
const DATABITS_5 = cast(WORD, &h1)
const DATABITS_6 = cast(WORD, &h2)
const DATABITS_7 = cast(WORD, &h4)
const DATABITS_8 = cast(WORD, &h8)
const DATABITS_16 = cast(WORD, &h10)
const DATABITS_16X = cast(WORD, &h20)
const STOPBITS_10 = cast(WORD, &h1)
const STOPBITS_15 = cast(WORD, &h2)
const STOPBITS_20 = cast(WORD, &h4)
const PARITY_NONE = cast(WORD, &h100)
const PARITY_ODD = cast(WORD, &h200)
const PARITY_EVEN = cast(WORD, &h400)
const PARITY_MARK = cast(WORD, &h800)
const PARITY_SPACE = cast(WORD, &h1000)

type _COMMPROP
 wPacketLength as WORD
 wPacketVersion as WORD
 dwServiceMask as DWORD
 dwReserved1 as DWORD
 dwMaxTxQueue as DWORD
 dwMaxRxQueue as DWORD
 dwMaxBaud as DWORD
 dwProvSubType as DWORD
 dwProvCapabilities as DWORD
 dwSettableParams as DWORD
 dwSettableBaud as DWORD
 wSettableData as WORD
 wSettableStopParity as WORD
 dwCurrentTxQueue as DWORD
 dwCurrentRxQueue as DWORD
 dwProvSpec1 as DWORD
 dwProvSpec2 as DWORD
 wcProvChar as wstring * 1
end type

type COMMPROP as _COMMPROP
type LPCOMMPROP as _COMMPROP ptr
const COMMPROP_INITIALIZED = cast(DWORD, &he73cf52e)

type _COMSTAT
 fCtsHold : 1 as DWORD
 fDsrHold : 1 as DWORD
 fRlsdHold : 1 as DWORD
 fXoffHold : 1 as DWORD
 fXoffSent : 1 as DWORD
 fEof : 1 as DWORD
 fTxim : 1 as DWORD
 fReserved : 25 as DWORD
 cbInQue as DWORD
 cbOutQue as DWORD
end type

type COMSTAT as _COMSTAT
type LPCOMSTAT as _COMSTAT ptr
const DTR_CONTROL_DISABLE = &h00
const DTR_CONTROL_ENABLE = &h1
const DTR_CONTROL_HANDSHAKE = &h2
const RTS_CONTROL_DISABLE = &h00
const RTS_CONTROL_ENABLE = &h1
const RTS_CONTROL_HANDSHAKE = &h2
const RTS_CONTROL_TOGGLE = &h3

type _DCB
 DCBlength as DWORD
 BaudRate as DWORD
 fBinary : 1 as DWORD
 fParity : 1 as DWORD
 fOutxCtsFlow : 1 as DWORD
 fOutxDsrFlow : 1 as DWORD
 fDtrControl : 2 as DWORD
 fDsrSensitivity : 1 as DWORD
 fTXContinueOnXoff : 1 as DWORD
 fOutX : 1 as DWORD
 fInX : 1 as DWORD
 fErrorChar : 1 as DWORD
 fNull : 1 as DWORD
 fRtsControl : 2 as DWORD
 fAbortOnError : 1 as DWORD
 fDummy2 : 17 as DWORD
 wReserved as WORD
 XonLim as WORD
 XoffLim as WORD
 ByteSize as UBYTE
 Parity as UBYTE
 StopBits as UBYTE
 XonChar as byte
 XoffChar as byte
 ErrorChar as byte
 EofChar as byte
 EvtChar as byte
 wReserved1 as WORD
end type

type DCB as _DCB
type LPDCB as _DCB ptr

type _COMMTIMEOUTS
 ReadIntervalTimeout as DWORD
 ReadTotalTimeoutMultiplier as DWORD
 ReadTotalTimeoutConstant as DWORD
 WriteTotalTimeoutMultiplier as DWORD
 WriteTotalTimeoutConstant as DWORD
end type

type COMMTIMEOUTS as _COMMTIMEOUTS
type LPCOMMTIMEOUTS as _COMMTIMEOUTS ptr

type _COMMCONFIG
 dwSize as DWORD
 wVersion as WORD
 wReserved as WORD
 dcb as DCB
 dwProviderSubType as DWORD
 dwProviderOffset as DWORD
 dwProviderSize as DWORD
 wcProviderData as wstring * 1
end type

type COMMCONFIG as _COMMCONFIG
type LPCOMMCONFIG as _COMMCONFIG ptr
const GMEM_FIXED = &h00
const GMEM_MOVEABLE = &h2
const GMEM_NOCOMPACT = &h10
const GMEM_NODISCARD = &h20
const GMEM_ZEROINIT = &h40
const GMEM_MODIFY = &h80
const GMEM_DISCARDABLE = &h100
const GMEM_NOT_BANKED = &h1000
const GMEM_SHARE = &h2000
const GMEM_DDESHARE = &h2000
const GMEM_NOTIFY = &h4000
const GMEM_LOWER = GMEM_NOT_BANKED
const GMEM_VALID_FLAGS = &h7f72
const GMEM_INVALID_HANDLE = &h8000
const GHND_ = GMEM_MOVEABLE or GMEM_ZEROINIT
const GPTR_ = GMEM_FIXED or GMEM_ZEROINIT
const GMEM_DISCARDED = &h4000
const GMEM_LOCKCOUNT = &h00ff

type _MEMORYSTATUS
 dwLength as DWORD
 dwMemoryLoad as DWORD
 dwTotalPhys as SIZE_T_
 dwAvailPhys as SIZE_T_
 dwTotalPageFile as SIZE_T_
 dwAvailPageFile as SIZE_T_
 dwTotalVirtual as SIZE_T_
 dwAvailVirtual as SIZE_T_
end type

type MEMORYSTATUS as _MEMORYSTATUS
type LPMEMORYSTATUS as _MEMORYSTATUS ptr
const NUMA_NO_PREFERRED_NODE = cast(DWORD, -1)
const DEBUG_PROCESS = &h1
const DEBUG_ONLY_THIS_PROCESS = &h2
const CREATE_SUSPENDED = &h4
const DETACHED_PROCESS = &h8
const CREATE_NEW_CONSOLE = &h10
const NORMAL_PRIORITY_CLASS = &h20
const IDLE_PRIORITY_CLASS = &h40
const HIGH_PRIORITY_CLASS = &h80
const REALTIME_PRIORITY_CLASS = &h100
const CREATE_NEW_PROCESS_GROUP = &h200
const CREATE_UNICODE_ENVIRONMENT = &h400
const CREATE_SEPARATE_WOW_VDM = &h800
const CREATE_SHARED_WOW_VDM = &h1000
const CREATE_FORCEDOS = &h2000
const BELOW_NORMAL_PRIORITY_CLASS = &h4000
const ABOVE_NORMAL_PRIORITY_CLASS = &h8000
const INHERIT_PARENT_AFFINITY = &h10000
const INHERIT_CALLER_PRIORITY = &h20000
const CREATE_PROTECTED_PROCESS = &h40000
const EXTENDED_STARTUPINFO_PRESENT = &h80000
const PROCESS_MODE_BACKGROUND_BEGIN = &h100000
const PROCESS_MODE_BACKGROUND_END = &h200000
const CREATE_BREAKAWAY_FROM_JOB = &h1000000
const CREATE_PRESERVE_CODE_AUTHZ_LEVEL = &h2000000
const CREATE_DEFAULT_ERROR_MODE = &h4000000
const CREATE_NO_WINDOW = &h8000000
const PROFILE_USER = &h10000000
const PROFILE_KERNEL = &h20000000
const PROFILE_SERVER = &h40000000
const CREATE_IGNORE_SYSTEM_DEFAULT = &h80000000
const STACK_SIZE_PARAM_IS_A_RESERVATION = &h10000
const THREAD_PRIORITY_LOWEST = THREAD_BASE_PRIORITY_MIN
const THREAD_PRIORITY_BELOW_NORMAL = THREAD_PRIORITY_LOWEST + 1
const THREAD_PRIORITY_NORMAL = 0
const THREAD_PRIORITY_HIGHEST = THREAD_BASE_PRIORITY_MAX
const THREAD_PRIORITY_ABOVE_NORMAL = THREAD_PRIORITY_HIGHEST - 1
const THREAD_PRIORITY_ERROR_RETURN = MAXLONG
const THREAD_PRIORITY_TIME_CRITICAL = THREAD_BASE_PRIORITY_LOWRT
const THREAD_PRIORITY_IDLE = THREAD_BASE_PRIORITY_IDLE
const THREAD_MODE_BACKGROUND_BEGIN = &h00010000
const THREAD_MODE_BACKGROUND_END = &h00020000
const VOLUME_NAME_DOS = &h00
const VOLUME_NAME_GUID = &h1
const VOLUME_NAME_NT = &h2
const VOLUME_NAME_NONE = &h4
const FILE_NAME_NORMALIZED = &h00
const FILE_NAME_OPENED = &h8

type _JIT_DEBUG_INFO
 dwSize as DWORD
 dwProcessorArchitecture as DWORD
 dwThreadID as DWORD
 dwReserved0 as DWORD
 lpExceptionAddress as ULONG64
 lpExceptionRecord as ULONG64
 lpContextRecord as ULONG64
end type

type JIT_DEBUG_INFO as _JIT_DEBUG_INFO
type LPJIT_DEBUG_INFO as _JIT_DEBUG_INFO ptr
type JIT_DEBUG_INFO32 as JIT_DEBUG_INFO
type LPJIT_DEBUG_INFO32 as JIT_DEBUG_INFO ptr
type JIT_DEBUG_INFO64 as JIT_DEBUG_INFO
type LPJIT_DEBUG_INFO64 as JIT_DEBUG_INFO ptr
type LPEXCEPTION_RECORD as PEXCEPTION_RECORD
type LPEXCEPTION_POINTERS as PEXCEPTION_POINTERS

const DRIVE_UNKNOWN = 0
const DRIVE_NO_ROOT_DIR = 1
const DRIVE_REMOVABLE = 2
const DRIVE_FIXED = 3
const DRIVE_REMOTE = 4
const DRIVE_CDROM = 5
const DRIVE_RAMDISK = 6
const FILE_TYPE_UNKNOWN = &h00
const FILE_TYPE_DISK = &h1
const FILE_TYPE_CHAR = &h2
const FILE_TYPE_PIPE = &h3
const FILE_TYPE_REMOTE = &h8000
const STD_INPUT_HANDLE = cast(DWORD, -10)
const STD_OUTPUT_HANDLE = cast(DWORD, -11)
const STD_ERROR_HANDLE = cast(DWORD, -12)
const NOPARITY = 0
const ODDPARITY = 1
const EVENPARITY = 2
const MARKPARITY = 3
const SPACEPARITY = 4
const ONESTOPBIT = 0
const ONE5STOPBITS = 1
const TWOSTOPBITS = 2
const IGNORE = 0
const INFINITE = &hffffffff
const CBR_110 = 110
const CBR_300 = 300
const CBR_600 = 600
const CBR_1200 = 1200
const CBR_2400 = 2400
const CBR_4800 = 4800
const CBR_9600 = 9600
const CBR_14400 = 14400
const CBR_19200 = 19200
const CBR_38400 = 38400
const CBR_56000 = 56000
const CBR_57600 = 57600
const CBR_115200 = 115200
const CBR_128000 = 128000
const CBR_256000 = 256000
const CE_RXOVER = &h1
const CE_OVERRUN = &h2
const CE_RXPARITY = &h4
const CE_FRAME = &h8
const CE_BREAK = &h10
const CE_TXFULL = &h100
const CE_PTO = &h200
const CE_IOE = &h400
const CE_DNS = &h800
const CE_OOP = &h1000
const CE_MODE = &h8000
const IE_BADID = -1
const IE_OPEN = -2
const IE_NOPEN = -3
const IE_MEMORY = -4
const IE_DEFAULT = -5
const IE_HARDWARE = -10
const IE_BYTESIZE = -11
const IE_BAUDRATE = -12
const EV_RXCHAR = &h1
const EV_RXFLAG = &h2
const EV_TXEMPTY = &h4
const EV_CTS = &h8
const EV_DSR = &h10
const EV_RLSD = &h20
const EV_BREAK = &h40
const EV_ERR = &h80
const EV_RING = &h100
const EV_PERR = &h200
const EV_RX80FULL = &h400
const EV_EVENT1 = &h800
const EV_EVENT2 = &h1000
const SETXOFF = 1
const SETXON = 2
const SETRTS = 3
const CLRRTS = 4
const SETDTR = 5
const CLRDTR = 6
const RESETDEV = 7
const SETBREAK = 8
const CLRBREAK = 9
const PURGE_TXABORT = &h1
const PURGE_RXABORT = &h2
const PURGE_TXCLEAR = &h4
const PURGE_RXCLEAR = &h8
const LPTx = &h80
const MS_CTS_ON = cast(DWORD, &h10)
const MS_DSR_ON = cast(DWORD, &h20)
const MS_RING_ON = cast(DWORD, &h40)
const MS_RLSD_ON = cast(DWORD, &h80)
const S_QUEUEEMPTY = 0
const S_THRESHOLD = 1
const S_ALLTHRESHOLD = 2
const S_NORMAL = 0
const S_LEGATO = 1
const S_STACCATO = 2
const S_PERIOD512 = 0
const S_PERIOD1024 = 1
const S_PERIOD2048 = 2
const S_PERIODVOICE = 3
const S_WHITE512 = 4
const S_WHITE1024 = 5
const S_WHITE2048 = 6
const S_WHITEVOICE = 7
const S_SERDVNA = -1
const S_SEROFM = -2
const S_SERMACT = -3
const S_SERQFUL = -4
const S_SERBDNT = -5
const S_SERDLN = -6
const S_SERDCC = -7
const S_SERDTP = -8
const S_SERDVL = -9
const S_SERDMD = -10
const S_SERDSH = -11
const S_SERDPT = -12
const S_SERDFQ = -13
const S_SERDDR = -14
const S_SERDSR = -15
const S_SERDST = -16
const NMPWAIT_WAIT_FOREVER = &hffffffff
const NMPWAIT_NOWAIT = &h1
const NMPWAIT_USE_DEFAULT_WAIT = &h00
const FS_CASE_IS_PRESERVED = FILE_CASE_PRESERVED_NAMES
const FS_CASE_SENSITIVE = FILE_CASE_SENSITIVE_SEARCH
const FS_UNICODE_STORED_ON_DISK = FILE_UNICODE_ON_DISK
const FS_PERSISTENT_ACLS = FILE_PERSISTENT_ACLS
const FS_VOL_IS_COMPRESSED = FILE_VOLUME_IS_COMPRESSED
const FS_FILE_COMPRESSION = FILE_FILE_COMPRESSION
const FS_FILE_ENCRYPTION = FILE_SUPPORTS_ENCRYPTION
const OF_READ = &h00
const OF_WRITE = &h1
const OF_READWRITE = &h2
const OF_SHARE_COMPAT = &h00
const OF_SHARE_EXCLUSIVE = &h10
const OF_SHARE_DENY_WRITE = &h20
const OF_SHARE_DENY_READ = &h30
const OF_SHARE_DENY_NONE = &h40
const OF_PARSE = &h100
const OF_DELETE = &h200
const OF_VERIFY = &h400
const OF_CANCEL = &h800
const OF_CREATE = &h1000
const OF_PROMPT = &h2000
const OF_EXIST = &h4000
const OF_REOPEN = &h8000
const OFS_MAXPATHNAME = 128

type _OFSTRUCT
 cBytes as UBYTE
 fFixedDisk as UBYTE
 nErrCode as WORD
 Reserved1 as WORD
 Reserved2 as WORD
 szPathName as zstring * 128
end type

type OFSTRUCT as _OFSTRUCT
type LPOFSTRUCT as _OFSTRUCT ptr
type POFSTRUCT as _OFSTRUCT ptr

 private function InterlockedAnd64 cdecl(byval Destination as LONGLONG ptr, byval Value as LONGLONG) as LONGLONG
 dim Old as LONGLONG
 do
 Old = *Destination
 loop while cast(LONGLONG, _InterlockedCompareExchange64((Destination), (Old and Value), (Old))) <> Old
 return Old
 end function

 private function InterlockedOr64 cdecl(byval Destination as LONGLONG ptr, byval Value as LONGLONG) as LONGLONG
 dim Old as LONGLONG
 do
 Old = *Destination
 loop while cast(LONGLONG, _InterlockedCompareExchange64((Destination), (Old or Value), (Old))) <> Old
 return Old
 end function

 private function InterlockedXor64 cdecl(byval Destination as LONGLONG ptr, byval Value as LONGLONG) as LONGLONG
 dim Old as LONGLONG
 do
 Old = *Destination
 loop while cast(LONGLONG, _InterlockedCompareExchange64((Destination), (Old xor Value), (Old))) <> Old
 return Old
 end function

 private function InterlockedIncrement64 cdecl(byval Addend as LONGLONG ptr) as LONGLONG
 dim Old as LONGLONG
 do
 Old = *Addend
 loop while cast(LONGLONG, _InterlockedCompareExchange64((Addend), (Old + 1), (Old))) <> Old
 return Old + 1
 end function

 private function InterlockedDecrement64 cdecl(byval Addend as LONGLONG ptr) as LONGLONG
 dim Old as LONGLONG
 do
 Old = *Addend
 loop while cast(LONGLONG, _InterlockedCompareExchange64((Addend), (Old -1), (Old))) <> Old
 return Old - 1
 end function

 private function InterlockedExchange64 cdecl(byval Target as LONGLONG ptr, byval Value as LONGLONG) as LONGLONG
 dim Old as LONGLONG
 do
 Old = *Target
 loop while cast(LONGLONG, _InterlockedCompareExchange64((Target), (Value), (Old))) <> Old
 return Old
 end function

 private function InterlockedExchangeAdd64 cdecl(byval Addend as LONGLONG ptr, byval Value as LONGLONG) as LONGLONG
 dim Old as LONGLONG
 do
 Old = *Addend
 loop while cast(LONGLONG, _InterlockedCompareExchange64((Addend), (Old + Value), (Old))) <> Old
 return Old
 end function










const MAXINTATOM = &hc000
const INVALID_ATOM = cast(ATOM, 0)

declare function GlobalAlloc(byval uFlags as UINT, byval dwBytes as SIZE_T_) as HGLOBAL
declare function GlobalReAlloc(byval hMem as HGLOBAL, byval dwBytes as SIZE_T_, byval uFlags as UINT) as HGLOBAL
declare function GlobalSize(byval hMem as HGLOBAL) as SIZE_T_
declare function GlobalFlags(byval hMem as HGLOBAL) as UINT
declare function GlobalLock(byval hMem as HGLOBAL) as LPVOID
declare function GlobalHandle(byval pMem as LPCVOID) as HGLOBAL
declare function GlobalUnlock(byval hMem as HGLOBAL) as WINBOOL
declare function GlobalFree(byval hMem as HGLOBAL) as HGLOBAL
declare function GlobalCompact(byval dwMinFree as DWORD) as SIZE_T_
declare sub GlobalFix(byval hMem as HGLOBAL)
declare sub GlobalUnfix(byval hMem as HGLOBAL)
declare function GlobalWire(byval hMem as HGLOBAL) as LPVOID
declare function GlobalUnWire(byval hMem as HGLOBAL) as WINBOOL
declare sub GlobalMemoryStatus(byval lpBuffer as LPMEMORYSTATUS)
declare function LocalAlloc(byval uFlags as UINT, byval uBytes as SIZE_T_) as HLOCAL
declare function LocalReAlloc(byval hMem as HLOCAL, byval uBytes as SIZE_T_, byval uFlags as UINT) as HLOCAL
declare function LocalLock(byval hMem as HLOCAL) as LPVOID
declare function LocalHandle(byval pMem as LPCVOID) as HLOCAL
declare function LocalUnlock(byval hMem as HLOCAL) as WINBOOL
declare function LocalSize(byval hMem as HLOCAL) as SIZE_T_
declare function LocalFlags(byval hMem as HLOCAL) as UINT
declare function LocalFree(byval hMem as HLOCAL) as HLOCAL
declare function LocalShrink(byval hMem as HLOCAL, byval cbNewSize as UINT) as SIZE_T_
declare function LocalCompact(byval uMinFree as UINT) as SIZE_T_


const SCS_32BIT_BINARY = 0
const SCS_DOS_BINARY = 1
const SCS_WOW_BINARY = 2
const SCS_PIF_BINARY = 3
const SCS_POSIX_BINARY = 4
const SCS_OS216_BINARY = 5
const SCS_64BIT_BINARY = 6

 const SCS_THIS_PLATFORM_BINARY = SCS_32BIT_BINARY

declare function GetBinaryTypeA(byval lpApplicationName as LPCSTR, byval lpBinaryType as LPDWORD) as WINBOOL
declare function GetBinaryTypeW(byval lpApplicationName as LPCWSTR, byval lpBinaryType as LPDWORD) as WINBOOL
declare function GetShortPathNameA(byval lpszLongPath as LPCSTR, byval lpszShortPath as LPSTR, byval cchBuffer as DWORD) as DWORD


declare function GetProcessAffinityMask(byval hProcess as HANDLE, byval lpProcessAffinityMask as PDWORD_PTR, byval lpSystemAffinityMask as PDWORD_PTR) as WINBOOL
declare function SetProcessAffinityMask(byval hProcess as HANDLE, byval dwProcessAffinityMask as DWORD_PTR) as WINBOOL
declare function GetProcessIoCounters(byval hProcess as HANDLE, byval lpIoCounters as PIO_COUNTERS) as WINBOOL
declare function GetProcessWorkingSetSize(byval hProcess as HANDLE, byval lpMinimumWorkingSetSize as PSIZE_T, byval lpMaximumWorkingSetSize as PSIZE_T) as WINBOOL
declare function SetProcessWorkingSetSize(byval hProcess as HANDLE, byval dwMinimumWorkingSetSize as SIZE_T_, byval dwMaximumWorkingSetSize as SIZE_T_) as WINBOOL
declare sub FatalExit(byval ExitCode as long)
declare function SetEnvironmentStringsA(byval NewEnvironment as LPCH) as WINBOOL


 declare function SetEnvironmentStrings alias "SetEnvironmentStringsA"(byval NewEnvironment as LPCH) as WINBOOL
 declare function GetShortPathName alias "GetShortPathNameA"(byval lpszLongPath as LPCSTR, byval lpszShortPath as LPSTR, byval cchBuffer as DWORD) as DWORD
 declare function GetBinaryType alias "GetBinaryTypeA"(byval lpApplicationName as LPCSTR, byval lpBinaryType as LPDWORD) as WINBOOL


declare sub RaiseFailFastException(byval pExceptionRecord as PEXCEPTION_RECORD, byval pContextRecord as PCONTEXT, byval dwFlags as DWORD)
declare function SetThreadIdealProcessor(byval hThread as HANDLE, byval dwIdealProcessor as DWORD) as DWORD
const FIBER_FLAG_FLOAT_SWITCH = &h1
declare function CreateFiber(byval dwStackSize as SIZE_T_, byval lpStartAddress as LPFIBER_START_ROUTINE, byval lpParameter as LPVOID) as LPVOID
declare function CreateFiberEx(byval dwStackCommitSize as SIZE_T_, byval dwStackReserveSize as SIZE_T_, byval dwFlags as DWORD, byval lpStartAddress as LPFIBER_START_ROUTINE, byval lpParameter as LPVOID) as LPVOID
declare sub DeleteFiber(byval lpFiber as LPVOID)
declare function ConvertThreadToFiber(byval lpParameter as LPVOID) as LPVOID
declare function ConvertThreadToFiberEx(byval lpParameter as LPVOID, byval dwFlags as DWORD) as LPVOID
declare function ConvertFiberToThread() as WINBOOL
declare sub SwitchToFiber(byval lpFiber as LPVOID)
declare function SetThreadAffinityMask(byval hThread as HANDLE, byval dwThreadAffinityMask as DWORD_PTR) as DWORD_PTR

type _THREAD_INFORMATION_CLASS as long
enum
 ThreadMemoryPriority
 ThreadAbsoluteCpuPriority
 ThreadInformationClassMax
end enum

type THREAD_INFORMATION_CLASS as _THREAD_INFORMATION_CLASS

type _PROCESS_INFORMATION_CLASS as long
enum
 ProcessMemoryPriority
 ProcessInformationClassMax
end enum

type PROCESS_INFORMATION_CLASS as _PROCESS_INFORMATION_CLASS


declare function SetProcessPriorityBoost(byval hProcess as HANDLE, byval bDisablePriorityBoost as WINBOOL) as WINBOOL
declare function GetProcessPriorityBoost(byval hProcess as HANDLE, byval pDisablePriorityBoost as PBOOL) as WINBOOL
declare function RequestWakeupLatency(byval latency as LATENCY_TIME) as WINBOOL
declare function IsSystemResumeAutomatic() as WINBOOL
declare function GetThreadIOPendingFlag(byval hThread as HANDLE, byval lpIOIsPending as PBOOL) as WINBOOL
declare function GetThreadSelectorEntry(byval hThread as HANDLE, byval dwSelector as DWORD, byval lpSelectorEntry as LPLDT_ENTRY) as WINBOOL
declare function SetThreadExecutionState(byval esFlags as EXECUTION_STATE) as EXECUTION_STATE




const SEM_FAILCRITICALERRORS = &h0001
const SEM_NOGPFAULTERRORBOX = &h0002
const SEM_NOALIGNMENTFAULTEXCEPT = &h0004
const SEM_NOOPENFILEERRORBOX = &h8000
declare function GetThreadErrorMode() as DWORD
declare function SetThreadErrorMode(byval dwNewMode as DWORD, byval lpOldMode as LPDWORD) as WINBOOL


declare function DebugSetProcessKillOnExit(byval KillOnExit as WINBOOL) as WINBOOL
declare function DebugBreakProcess(byval Process as HANDLE) as WINBOOL
const CRITICAL_SECTION_NO_DEBUG_INFO = RTL_CRITICAL_SECTION_FLAG_NO_DEBUG_INFO

type _DEP_SYSTEM_POLICY_TYPE as long
enum
 DEPPolicyAlwaysOff = 0
 DEPPolicyAlwaysOn
 DEPPolicyOptIn
 DEPPolicyOptOut
 DEPTotalPolicyCount
end enum

type DEP_SYSTEM_POLICY_TYPE as _DEP_SYSTEM_POLICY_TYPE
const HANDLE_FLAG_INHERIT = &h1
const HANDLE_FLAG_PROTECT_FROM_CLOSE = &h2
const HINSTANCE_ERROR = 32
const GET_TAPE_MEDIA_INFORMATION = 0
const GET_TAPE_DRIVE_INFORMATION = 1
const SET_TAPE_MEDIA_INFORMATION = 0
const SET_TAPE_DRIVE_INFORMATION = 1

declare function PulseEvent(byval hEvent as HANDLE) as WINBOOL
declare function WaitForMultipleObjects(byval nCount as DWORD, byval lpHandles as const HANDLE ptr, byval bWaitAll as WINBOOL, byval dwMilliseconds as DWORD) as DWORD
declare function GlobalDeleteAtom(byval nAtom as ATOM) as ATOM
declare function InitAtomTable(byval nSize as DWORD) as WINBOOL
declare function DeleteAtom(byval nAtom as ATOM) as ATOM
declare function SetHandleCount(byval uNumber as UINT) as UINT
declare function RequestDeviceWakeup(byval hDevice as HANDLE) as WINBOOL
declare function CancelDeviceWakeupRequest(byval hDevice as HANDLE) as WINBOOL
declare function GetDevicePowerState(byval hDevice as HANDLE, byval pfOn as WINBOOL ptr) as WINBOOL
declare function SetMessageWaitingIndicator(byval hMsgIndicator as HANDLE, byval ulMsgCount as ULONG) as WINBOOL
declare function SetFileShortNameA(byval hFile as HANDLE, byval lpShortName as LPCSTR) as WINBOOL
declare function SetFileShortNameW(byval hFile as HANDLE, byval lpShortName as LPCWSTR) as WINBOOL
declare function LoadModule(byval lpModuleName as LPCSTR, byval lpParameterBlock as LPVOID) as DWORD
declare function WinExec(byval lpCmdLine as LPCSTR, byval uCmdShow as UINT) as UINT
declare function ClearCommBreak(byval hFile as HANDLE) as WINBOOL
declare function ClearCommError(byval hFile as HANDLE, byval lpErrors as LPDWORD, byval lpStat as LPCOMSTAT) as WINBOOL
declare function SetupComm(byval hFile as HANDLE, byval dwInQueue as DWORD, byval dwOutQueue as DWORD) as WINBOOL
declare function EscapeCommFunction(byval hFile as HANDLE, byval dwFunc as DWORD) as WINBOOL
declare function GetCommConfig(byval hCommDev as HANDLE, byval lpCC as LPCOMMCONFIG, byval lpdwSize as LPDWORD) as WINBOOL
declare function GetCommMask(byval hFile as HANDLE, byval lpEvtMask as LPDWORD) as WINBOOL
declare function GetCommProperties(byval hFile as HANDLE, byval lpCommProp as LPCOMMPROP) as WINBOOL
declare function GetCommModemStatus(byval hFile as HANDLE, byval lpModemStat as LPDWORD) as WINBOOL
declare function GetCommState(byval hFile as HANDLE, byval lpDCB as LPDCB) as WINBOOL
declare function GetCommTimeouts(byval hFile as HANDLE, byval lpCommTimeouts as LPCOMMTIMEOUTS) as WINBOOL
declare function PurgeComm(byval hFile as HANDLE, byval dwFlags as DWORD) as WINBOOL
declare function SetCommBreak(byval hFile as HANDLE) as WINBOOL
declare function SetCommConfig(byval hCommDev as HANDLE, byval lpCC as LPCOMMCONFIG, byval dwSize as DWORD) as WINBOOL
declare function SetCommMask(byval hFile as HANDLE, byval dwEvtMask as DWORD) as WINBOOL
declare function SetCommState(byval hFile as HANDLE, byval lpDCB as LPDCB) as WINBOOL
declare function SetCommTimeouts(byval hFile as HANDLE, byval lpCommTimeouts as LPCOMMTIMEOUTS) as WINBOOL
declare function TransmitCommChar(byval hFile as HANDLE, byval cChar as byte) as WINBOOL
declare function WaitCommEvent(byval hFile as HANDLE, byval lpEvtMask as LPDWORD, byval lpOverlapped as LPOVERLAPPED) as WINBOOL
declare function SetTapePosition(byval hDevice as HANDLE, byval dwPositionMethod as DWORD, byval dwPartition as DWORD, byval dwOffsetLow as DWORD, byval dwOffsetHigh as DWORD, byval bImmediate as WINBOOL) as DWORD
declare function GetTapePosition(byval hDevice as HANDLE, byval dwPositionType as DWORD, byval lpdwPartition as LPDWORD, byval lpdwOffsetLow as LPDWORD, byval lpdwOffsetHigh as LPDWORD) as DWORD
declare function PrepareTape(byval hDevice as HANDLE, byval dwOperation as DWORD, byval bImmediate as WINBOOL) as DWORD
declare function EraseTape(byval hDevice as HANDLE, byval dwEraseType as DWORD, byval bImmediate as WINBOOL) as DWORD
declare function CreateTapePartition(byval hDevice as HANDLE, byval dwPartitionMethod as DWORD, byval dwCount as DWORD, byval dwSize as DWORD) as DWORD
declare function WriteTapemark(byval hDevice as HANDLE, byval dwTapemarkType as DWORD, byval dwTapemarkCount as DWORD, byval bImmediate as WINBOOL) as DWORD
declare function GetTapeStatus(byval hDevice as HANDLE) as DWORD
declare function GetTapeParameters(byval hDevice as HANDLE, byval dwOperation as DWORD, byval lpdwSize as LPDWORD, byval lpTapeInformation as LPVOID) as DWORD
declare function SetTapeParameters(byval hDevice as HANDLE, byval dwOperation as DWORD, byval lpTapeInformation as LPVOID) as DWORD
declare function GetSystemDEPPolicy() as DEP_SYSTEM_POLICY_TYPE
declare function GetSystemRegistryQuota(byval pdwQuotaAllowed as PDWORD, byval pdwQuotaUsed as PDWORD) as WINBOOL
declare function GetSystemTimes(byval lpIdleTime as LPFILETIME, byval lpKernelTime as LPFILETIME, byval lpUserTime as LPFILETIME) as WINBOOL
declare function FileTimeToDosDateTime(byval lpFileTime as const FILETIME ptr, byval lpFatDate as LPWORD, byval lpFatTime as LPWORD) as WINBOOL
declare function DosDateTimeToFileTime(byval wFatDate as WORD, byval wFatTime as WORD, byval lpFileTime as LPFILETIME) as WINBOOL
declare function SetSystemTimeAdjustment(byval dwTimeAdjustment as DWORD, byval bTimeAdjustmentDisabled as WINBOOL) as WINBOOL

 declare function SetFileShortName alias "SetFileShortNameA"(byval hFile as HANDLE, byval lpShortName as LPCSTR) as WINBOOL

declare function MulDiv(byval nNumber as long, byval nNumerator as long, byval nDenominator as long) as long
declare function FormatMessageA(byval dwFlags as DWORD, byval lpSource as LPCVOID, byval dwMessageId as DWORD, byval dwLanguageId as DWORD, byval lpBuffer as LPSTR, byval nSize as DWORD, byval Arguments as va_list ptr) as DWORD
declare function FormatMessageW(byval dwFlags as DWORD, byval lpSource as LPCVOID, byval dwMessageId as DWORD, byval dwLanguageId as DWORD, byval lpBuffer as LPWSTR, byval nSize as DWORD, byval Arguments as va_list ptr) as DWORD

 declare function FormatMessage alias "FormatMessageA"(byval dwFlags as DWORD, byval lpSource as LPCVOID, byval dwMessageId as DWORD, byval dwLanguageId as DWORD, byval lpBuffer as LPSTR, byval nSize as DWORD, byval Arguments as va_list ptr) as DWORD

const FORMAT_MESSAGE_IGNORE_INSERTS = &h00000200
const FORMAT_MESSAGE_FROM_STRING = &h00000400
const FORMAT_MESSAGE_FROM_HMODULE = &h00000800
const FORMAT_MESSAGE_FROM_SYSTEM = &h00001000
const FORMAT_MESSAGE_ARGUMENT_ARRAY = &h00002000
const FORMAT_MESSAGE_MAX_WIDTH_MASK = &h000000ff
type PFE_EXPORT_FUNC as function(byval pbData as PBYTE, byval pvCallbackContext as PVOID, byval ulLength as ULONG) as DWORD
type PFE_IMPORT_FUNC as function(byval pbData as PBYTE, byval pvCallbackContext as PVOID, byval ulLength as PULONG) as DWORD
const FILE_ENCRYPTABLE = 0
const FILE_IS_ENCRYPTED = 1
const FILE_SYSTEM_ATTR = 2
const FILE_ROOT_DIR = 3
const FILE_SYSTEM_DIR = 4
const FILE_UNKNOWN = 5
const FILE_SYSTEM_NOT_SUPPORT = 6
const FILE_USER_DISALLOWED = 7
const FILE_READ_ONLY = 8
const FILE_DIR_DISALLOWED = 9
const FORMAT_MESSAGE_ALLOCATE_BUFFER = &h00000100
const EFS_USE_RECOVERY_KEYS = &h1
const CREATE_FOR_IMPORT = 1
const CREATE_FOR_DIR = 2
const OVERWRITE_HIDDEN = 4
const EFSRPC_SECURE_ONLY = 8

declare function GetNamedPipeInfo(byval hNamedPipe as HANDLE, byval lpFlags as LPDWORD, byval lpOutBufferSize as LPDWORD, byval lpInBufferSize as LPDWORD, byval lpMaxInstances as LPDWORD) as WINBOOL
declare function CreateMailslotA(byval lpName as LPCSTR, byval nMaxMessageSize as DWORD, byval lReadTimeout as DWORD, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES) as HANDLE
declare function CreateMailslotW(byval lpName as LPCWSTR, byval nMaxMessageSize as DWORD, byval lReadTimeout as DWORD, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES) as HANDLE
declare function GetMailslotInfo(byval hMailslot as HANDLE, byval lpMaxMessageSize as LPDWORD, byval lpNextSize as LPDWORD, byval lpMessageCount as LPDWORD, byval lpReadTimeout as LPDWORD) as WINBOOL
declare function SetMailslotInfo(byval hMailslot as HANDLE, byval lReadTimeout as DWORD) as WINBOOL
declare function EncryptFileA(byval lpFileName as LPCSTR) as WINBOOL
declare function EncryptFileW(byval lpFileName as LPCWSTR) as WINBOOL
declare function DecryptFileA(byval lpFileName as LPCSTR, byval dwReserved as DWORD) as WINBOOL
declare function DecryptFileW(byval lpFileName as LPCWSTR, byval dwReserved as DWORD) as WINBOOL
declare function FileEncryptionStatusA(byval lpFileName as LPCSTR, byval lpStatus as LPDWORD) as WINBOOL
declare function FileEncryptionStatusW(byval lpFileName as LPCWSTR, byval lpStatus as LPDWORD) as WINBOOL
declare function OpenEncryptedFileRawA(byval lpFileName as LPCSTR, byval ulFlags as ULONG, byval pvContext as PVOID ptr) as DWORD
declare function OpenEncryptedFileRawW(byval lpFileName as LPCWSTR, byval ulFlags as ULONG, byval pvContext as PVOID ptr) as DWORD
declare function ReadEncryptedFileRaw(byval pfExportCallback as PFE_EXPORT_FUNC, byval pvCallbackContext as PVOID, byval pvContext as PVOID) as DWORD
declare function WriteEncryptedFileRaw(byval pfImportCallback as PFE_IMPORT_FUNC, byval pvCallbackContext as PVOID, byval pvContext as PVOID) as DWORD
declare sub CloseEncryptedFileRaw(byval pvContext as PVOID)
declare function lstrcmpA(byval lpString1 as LPCSTR, byval lpString2 as LPCSTR) as long
declare function lstrcmpW(byval lpString1 as LPCWSTR, byval lpString2 as LPCWSTR) as long
declare function lstrcmpiA(byval lpString1 as LPCSTR, byval lpString2 as LPCSTR) as long
declare function lstrcmpiW(byval lpString1 as LPCWSTR, byval lpString2 as LPCWSTR) as long
declare function lstrcpynA(byval lpString1 as LPSTR, byval lpString2 as LPCSTR, byval iMaxLength as long) as LPSTR
declare function lstrcpynW(byval lpString1 as LPWSTR, byval lpString2 as LPCWSTR, byval iMaxLength as long) as LPWSTR
declare function lstrcpyA(byval lpString1 as LPSTR, byval lpString2 as LPCSTR) as LPSTR
declare function lstrcpyW(byval lpString1 as LPWSTR, byval lpString2 as LPCWSTR) as LPWSTR
declare function lstrcatA(byval lpString1 as LPSTR, byval lpString2 as LPCSTR) as LPSTR
declare function lstrcatW(byval lpString1 as LPWSTR, byval lpString2 as LPCWSTR) as LPWSTR
declare function lstrlenA(byval lpString as LPCSTR) as long
declare function lstrlenW(byval lpString as LPCWSTR) as long
declare function OpenFile(byval lpFileName as LPCSTR, byval lpReOpenBuff as LPOFSTRUCT, byval uStyle as UINT) as HFILE
declare function _lopen(byval lpPathName as LPCSTR, byval iReadWrite as long) as HFILE
declare function _lcreat(byval lpPathName as LPCSTR, byval iAttribute as long) as HFILE
declare function _lread(byval hFile as HFILE, byval lpBuffer as LPVOID, byval uBytes as UINT) as UINT
declare function _lwrite(byval hFile as HFILE, byval lpBuffer as LPCCH, byval uBytes as UINT) as UINT
declare function _hread(byval hFile as HFILE, byval lpBuffer as LPVOID, byval lBytes as long) as long
declare function _hwrite(byval hFile as HFILE, byval lpBuffer as LPCCH, byval lBytes as long) as long
declare function _lclose(byval hFile as HFILE) as HFILE
declare function _llseek(byval hFile as HFILE, byval lOffset as LONG, byval iOrigin as long) as LONG
declare function IsTextUnicode(byval lpv as const any ptr, byval iSize as long, byval lpiResult as LPINT) as WINBOOL
declare function BackupRead(byval hFile as HANDLE, byval lpBuffer as LPBYTE, byval nNumberOfBytesToRead as DWORD, byval lpNumberOfBytesRead as LPDWORD, byval bAbort as WINBOOL, byval bProcessSecurity as WINBOOL, byval lpContext as LPVOID ptr) as WINBOOL
declare function BackupSeek(byval hFile as HANDLE, byval dwLowBytesToSeek as DWORD, byval dwHighBytesToSeek as DWORD, byval lpdwLowByteSeeked as LPDWORD, byval lpdwHighByteSeeked as LPDWORD, byval lpContext as LPVOID ptr) as WINBOOL
declare function BackupWrite(byval hFile as HANDLE, byval lpBuffer as LPBYTE, byval nNumberOfBytesToWrite as DWORD, byval lpNumberOfBytesWritten as LPDWORD, byval bAbort as WINBOOL, byval bProcessSecurity as WINBOOL, byval lpContext as LPVOID ptr) as WINBOOL

 declare function CreateMailslot alias "CreateMailslotA"(byval lpName as LPCSTR, byval nMaxMessageSize as DWORD, byval lReadTimeout as DWORD, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES) as HANDLE
 declare function EncryptFile alias "EncryptFileA"(byval lpFileName as LPCSTR) as WINBOOL
 declare function DecryptFile alias "DecryptFileA"(byval lpFileName as LPCSTR, byval dwReserved as DWORD) as WINBOOL
 declare function FileEncryptionStatus alias "FileEncryptionStatusA"(byval lpFileName as LPCSTR, byval lpStatus as LPDWORD) as WINBOOL
 declare function OpenEncryptedFileRaw alias "OpenEncryptedFileRawA"(byval lpFileName as LPCSTR, byval ulFlags as ULONG, byval pvContext as PVOID ptr) as DWORD
 declare function lstrcmp alias "lstrcmpA"(byval lpString1 as LPCSTR, byval lpString2 as LPCSTR) as long
 declare function lstrcmpi alias "lstrcmpiA"(byval lpString1 as LPCSTR, byval lpString2 as LPCSTR) as long
 declare function lstrcpyn alias "lstrcpynA"(byval lpString1 as LPSTR, byval lpString2 as LPCSTR, byval iMaxLength as long) as LPSTR
 declare function lstrlen alias "lstrlenA"(byval lpString as LPCSTR) as long

type _WIN32_STREAM_ID
 dwStreamId as DWORD
 dwStreamAttributes as DWORD
 Size as LARGE_INTEGER
 dwStreamNameSize as DWORD
 cStreamName as wstring * 1
end type

type WIN32_STREAM_ID as _WIN32_STREAM_ID
type LPWIN32_STREAM_ID as _WIN32_STREAM_ID ptr
const BACKUP_INVALID = &h000000000
const BACKUP_DATA = &h00000001
const BACKUP_EA_DATA = &h00000002
const BACKUP_SECURITY_DATA = &h00000003
const BACKUP_ALTERNATE_DATA = &h00000004
const BACKUP_LINK = &h00000005
const BACKUP_PROPERTY_DATA = &h00000006
const BACKUP_OBJECT_ID = &h00000007
const BACKUP_REPARSE_DATA = &h00000008
const BACKUP_SPARSE_BLOCK = &h00000009
const BACKUP_TXFS_DATA = &h0000000a
const STREAM_NORMAL_ATTRIBUTE = &h000000000
const STREAM_MODIFIED_WHEN_READ = &h00000001
const STREAM_CONTAINS_SECURITY = &h00000002
const STREAM_CONTAINS_PROPERTIES = &h00000004
const STREAM_SPARSE_ATTRIBUTE = &h00000008
const STARTF_USESHOWWINDOW = &h00000001
const STARTF_USESIZE = &h00000002
const STARTF_USEPOSITION = &h00000004
const STARTF_USECOUNTCHARS = &h00000008
const STARTF_USEFILLATTRIBUTE = &h00000010
const STARTF_RUNFULLSCREEN = &h00000020
const STARTF_FORCEONFEEDBACK = &h00000040
const STARTF_FORCEOFFFEEDBACK = &h00000080
const STARTF_USESTDHANDLES = &h00000100
const STARTF_USEHOTKEY = &h00000200
const STARTF_TITLEISLINKNAME = &h00000800
const STARTF_TITLEISAPPID = &h00001000
const STARTF_PREVENTPINNING = &h00002000



const SHUTDOWN_NORETRY = &h1
declare function CreateSemaphoreW(byval lpSemaphoreAttributes as LPSECURITY_ATTRIBUTES, byval lInitialCount as LONG, byval lMaximumCount as LONG, byval lpName as LPCWSTR) as HANDLE


declare function LoadLibraryW(byval lpLibFileName as LPCWSTR) as HMODULE
declare function OpenMutexA(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval lpName as LPCSTR) as HANDLE
declare function CreateSemaphoreA(byval lpSemaphoreAttributes as LPSECURITY_ATTRIBUTES, byval lInitialCount as LONG, byval lMaximumCount as LONG, byval lpName as LPCSTR) as HANDLE

 declare function CreateSemaphore alias "CreateSemaphoreA"(byval lpSemaphoreAttributes as LPSECURITY_ATTRIBUTES, byval lInitialCount as LONG, byval lMaximumCount as LONG, byval lpName as LPCSTR) as HANDLE

declare function OpenSemaphoreA(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval lpName as LPCSTR) as HANDLE
declare function CreateWaitableTimerA(byval lpTimerAttributes as LPSECURITY_ATTRIBUTES, byval bManualReset as WINBOOL, byval lpTimerName as LPCSTR) as HANDLE
declare function CreateWaitableTimerW(byval lpTimerAttributes as LPSECURITY_ATTRIBUTES, byval bManualReset as WINBOOL, byval lpTimerName as LPCWSTR) as HANDLE
declare function OpenWaitableTimerA(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval lpTimerName as LPCSTR) as HANDLE
declare function CreateFileMappingA(byval hFile as HANDLE, byval lpFileMappingAttributes as LPSECURITY_ATTRIBUTES, byval flProtect as DWORD, byval dwMaximumSizeHigh as DWORD, byval dwMaximumSizeLow as DWORD, byval lpName as LPCSTR) as HANDLE


declare function OpenFileMappingA(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval lpName as LPCSTR) as HANDLE
declare function GetLogicalDriveStringsA(byval nBufferLength as DWORD, byval lpBuffer as LPSTR) as DWORD
declare function LoadLibraryA(byval lpLibFileName as LPCSTR) as HMODULE




 declare function OpenMutex alias "OpenMutexA"(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval lpName as LPCSTR) as HANDLE
 declare function OpenSemaphore alias "OpenSemaphoreA"(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval lpName as LPCSTR) as HANDLE
 declare function OpenWaitableTimer alias "OpenWaitableTimerA"(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval lpTimerName as LPCSTR) as HANDLE
 declare function CreateFileMapping alias "CreateFileMappingA"(byval hFile as HANDLE, byval lpFileMappingAttributes as LPSECURITY_ATTRIBUTES, byval flProtect as DWORD, byval dwMaximumSizeHigh as DWORD, byval dwMaximumSizeLow as DWORD, byval lpName as LPCSTR) as HANDLE
 declare function OpenFileMapping alias "OpenFileMappingA"(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval lpName as LPCSTR) as HANDLE
 declare function GetLogicalDriveStrings alias "GetLogicalDriveStringsA"(byval nBufferLength as DWORD, byval lpBuffer as LPSTR) as DWORD
 declare function CreateWaitableTimer alias "CreateWaitableTimerA"(byval lpTimerAttributes as LPSECURITY_ATTRIBUTES, byval bManualReset as WINBOOL, byval lpTimerName as LPCSTR) as HANDLE
 declare function LoadLibrary alias "LoadLibraryA"(byval lpLibFileName as LPCSTR) as HMODULE

const ATOM_FLAG_GLOBAL = &h2
declare function GetProcessShutdownParameters(byval lpdwLevel as LPDWORD, byval lpdwFlags as LPDWORD) as WINBOOL
declare sub FatalAppExitA(byval uAction as UINT, byval lpMessageText as LPCSTR)
declare sub FatalAppExitW(byval uAction as UINT, byval lpMessageText as LPCWSTR)
declare sub GetStartupInfoA(byval lpStartupInfo as LPSTARTUPINFOA)
declare function GetFirmwareEnvironmentVariableA(byval lpName as LPCSTR, byval lpGuid as LPCSTR, byval pBuffer as PVOID, byval nSize as DWORD) as DWORD
declare function GetFirmwareEnvironmentVariableW(byval lpName as LPCWSTR, byval lpGuid as LPCWSTR, byval pBuffer as PVOID, byval nSize as DWORD) as DWORD
declare function SetFirmwareEnvironmentVariableA(byval lpName as LPCSTR, byval lpGuid as LPCSTR, byval pValue as PVOID, byval nSize as DWORD) as WINBOOL
declare function SetFirmwareEnvironmentVariableW(byval lpName as LPCWSTR, byval lpGuid as LPCWSTR, byval pValue as PVOID, byval nSize as DWORD) as WINBOOL
declare function FindResourceA(byval hModule as HMODULE, byval lpName as LPCSTR, byval lpType as LPCSTR) as HRSRC
declare function FindResourceW(byval hModule as HMODULE, byval lpName as LPCWSTR, byval lpType as LPCWSTR) as HRSRC
declare function FindResourceExA(byval hModule as HMODULE, byval lpType as LPCSTR, byval lpName as LPCSTR, byval wLanguage as WORD) as HRSRC
declare function EnumResourceTypesA(byval hModule as HMODULE, byval lpEnumFunc as ENUMRESTYPEPROCA, byval lParam as LONG_PTR) as WINBOOL
declare function EnumResourceTypesW(byval hModule as HMODULE, byval lpEnumFunc as ENUMRESTYPEPROCW, byval lParam as LONG_PTR) as WINBOOL
declare function EnumResourceNamesA(byval hModule as HMODULE, byval lpType as LPCSTR, byval lpEnumFunc as ENUMRESNAMEPROCA, byval lParam as LONG_PTR) as WINBOOL
declare function EnumResourceNamesW(byval hModule as HMODULE, byval lpType as LPCWSTR, byval lpEnumFunc as ENUMRESNAMEPROCW, byval lParam as LONG_PTR) as WINBOOL
declare function EnumResourceLanguagesA(byval hModule as HMODULE, byval lpType as LPCSTR, byval lpName as LPCSTR, byval lpEnumFunc as ENUMRESLANGPROCA, byval lParam as LONG_PTR) as WINBOOL
declare function EnumResourceLanguagesW(byval hModule as HMODULE, byval lpType as LPCWSTR, byval lpName as LPCWSTR, byval lpEnumFunc as ENUMRESLANGPROCW, byval lParam as LONG_PTR) as WINBOOL
declare function BeginUpdateResourceA(byval pFileName as LPCSTR, byval bDeleteExistingResources as WINBOOL) as HANDLE
declare function BeginUpdateResourceW(byval pFileName as LPCWSTR, byval bDeleteExistingResources as WINBOOL) as HANDLE
declare function UpdateResourceA(byval hUpdate as HANDLE, byval lpType as LPCSTR, byval lpName as LPCSTR, byval wLanguage as WORD, byval lpData as LPVOID, byval cb as DWORD) as WINBOOL
declare function UpdateResourceW(byval hUpdate as HANDLE, byval lpType as LPCWSTR, byval lpName as LPCWSTR, byval wLanguage as WORD, byval lpData as LPVOID, byval cb as DWORD) as WINBOOL
declare function EndUpdateResourceA(byval hUpdate as HANDLE, byval fDiscard as WINBOOL) as WINBOOL
declare function EndUpdateResourceW(byval hUpdate as HANDLE, byval fDiscard as WINBOOL) as WINBOOL


declare function GlobalAddAtomA(byval lpString as LPCSTR) as ATOM
declare function GlobalAddAtomW(byval lpString as LPCWSTR) as ATOM
declare function GlobalAddAtomExA(byval lpString as LPCSTR, byval Flags as DWORD) as ATOM
declare function GlobalAddAtomExW(byval lpString as LPCWSTR, byval Flags as DWORD) as ATOM
declare function GlobalFindAtomA(byval lpString as LPCSTR) as ATOM
declare function GlobalFindAtomW(byval lpString as LPCWSTR) as ATOM
declare function GlobalGetAtomNameA(byval nAtom as ATOM, byval lpBuffer as LPSTR, byval nSize as long) as UINT
declare function GlobalGetAtomNameW(byval nAtom as ATOM, byval lpBuffer as LPWSTR, byval nSize as long) as UINT
declare function AddAtomA(byval lpString as LPCSTR) as ATOM
declare function AddAtomW(byval lpString as LPCWSTR) as ATOM
declare function FindAtomA(byval lpString as LPCSTR) as ATOM
declare function FindAtomW(byval lpString as LPCWSTR) as ATOM
declare function GetAtomNameA(byval nAtom as ATOM, byval lpBuffer as LPSTR, byval nSize as long) as UINT
declare function GetAtomNameW(byval nAtom as ATOM, byval lpBuffer as LPWSTR, byval nSize as long) as UINT
declare function GetProfileIntA(byval lpAppName as LPCSTR, byval lpKeyName as LPCSTR, byval nDefault as INT_) as UINT
declare function GetProfileIntW(byval lpAppName as LPCWSTR, byval lpKeyName as LPCWSTR, byval nDefault as INT_) as UINT
declare function GetProfileStringA(byval lpAppName as LPCSTR, byval lpKeyName as LPCSTR, byval lpDefault as LPCSTR, byval lpReturnedString as LPSTR, byval nSize as DWORD) as DWORD
declare function GetProfileStringW(byval lpAppName as LPCWSTR, byval lpKeyName as LPCWSTR, byval lpDefault as LPCWSTR, byval lpReturnedString as LPWSTR, byval nSize as DWORD) as DWORD
declare function WriteProfileStringA(byval lpAppName as LPCSTR, byval lpKeyName as LPCSTR, byval lpString as LPCSTR) as WINBOOL
declare function WriteProfileStringW(byval lpAppName as LPCWSTR, byval lpKeyName as LPCWSTR, byval lpString as LPCWSTR) as WINBOOL
declare function GetProfileSectionA(byval lpAppName as LPCSTR, byval lpReturnedString as LPSTR, byval nSize as DWORD) as DWORD
declare function GetProfileSectionW(byval lpAppName as LPCWSTR, byval lpReturnedString as LPWSTR, byval nSize as DWORD) as DWORD
declare function WriteProfileSectionA(byval lpAppName as LPCSTR, byval lpString as LPCSTR) as WINBOOL
declare function WriteProfileSectionW(byval lpAppName as LPCWSTR, byval lpString as LPCWSTR) as WINBOOL
declare function GetPrivateProfileIntA(byval lpAppName as LPCSTR, byval lpKeyName as LPCSTR, byval nDefault as INT_, byval lpFileName as LPCSTR) as UINT
declare function GetPrivateProfileIntW(byval lpAppName as LPCWSTR, byval lpKeyName as LPCWSTR, byval nDefault as INT_, byval lpFileName as LPCWSTR) as UINT
declare function GetPrivateProfileStringA(byval lpAppName as LPCSTR, byval lpKeyName as LPCSTR, byval lpDefault as LPCSTR, byval lpReturnedString as LPSTR, byval nSize as DWORD, byval lpFileName as LPCSTR) as DWORD
declare function GetPrivateProfileStringW(byval lpAppName as LPCWSTR, byval lpKeyName as LPCWSTR, byval lpDefault as LPCWSTR, byval lpReturnedString as LPWSTR, byval nSize as DWORD, byval lpFileName as LPCWSTR) as DWORD
declare function WritePrivateProfileStringA(byval lpAppName as LPCSTR, byval lpKeyName as LPCSTR, byval lpString as LPCSTR, byval lpFileName as LPCSTR) as WINBOOL
declare function WritePrivateProfileStringW(byval lpAppName as LPCWSTR, byval lpKeyName as LPCWSTR, byval lpString as LPCWSTR, byval lpFileName as LPCWSTR) as WINBOOL
declare function GetPrivateProfileSectionA(byval lpAppName as LPCSTR, byval lpReturnedString as LPSTR, byval nSize as DWORD, byval lpFileName as LPCSTR) as DWORD
declare function GetPrivateProfileSectionW(byval lpAppName as LPCWSTR, byval lpReturnedString as LPWSTR, byval nSize as DWORD, byval lpFileName as LPCWSTR) as DWORD
declare function WritePrivateProfileSectionA(byval lpAppName as LPCSTR, byval lpString as LPCSTR, byval lpFileName as LPCSTR) as WINBOOL
declare function WritePrivateProfileSectionW(byval lpAppName as LPCWSTR, byval lpString as LPCWSTR, byval lpFileName as LPCWSTR) as WINBOOL
declare function GetPrivateProfileSectionNamesA(byval lpszReturnBuffer as LPSTR, byval nSize as DWORD, byval lpFileName as LPCSTR) as DWORD
declare function GetPrivateProfileSectionNamesW(byval lpszReturnBuffer as LPWSTR, byval nSize as DWORD, byval lpFileName as LPCWSTR) as DWORD
declare function GetPrivateProfileStructA(byval lpszSection as LPCSTR, byval lpszKey as LPCSTR, byval lpStruct as LPVOID, byval uSizeStruct as UINT, byval szFile as LPCSTR) as WINBOOL
declare function GetPrivateProfileStructW(byval lpszSection as LPCWSTR, byval lpszKey as LPCWSTR, byval lpStruct as LPVOID, byval uSizeStruct as UINT, byval szFile as LPCWSTR) as WINBOOL
declare function WritePrivateProfileStructA(byval lpszSection as LPCSTR, byval lpszKey as LPCSTR, byval lpStruct as LPVOID, byval uSizeStruct as UINT, byval szFile as LPCSTR) as WINBOOL
declare function WritePrivateProfileStructW(byval lpszSection as LPCWSTR, byval lpszKey as LPCWSTR, byval lpStruct as LPVOID, byval uSizeStruct as UINT, byval szFile as LPCWSTR) as WINBOOL
declare function GetTempPathA(byval nBufferLength as DWORD, byval lpBuffer as LPSTR) as DWORD
declare function GetTempFileNameA(byval lpPathName as LPCSTR, byval lpPrefixString as LPCSTR, byval uUnique as UINT, byval lpTempFileName as LPSTR) as UINT


 declare sub GetStartupInfo alias "GetStartupInfoA"(byval lpStartupInfo as LPSTARTUPINFOA)
 declare function FindResourceEx alias "FindResourceExA"(byval hModule as HMODULE, byval lpType as LPCSTR, byval lpName as LPCSTR, byval wLanguage as WORD) as HRSRC
 declare function GetTempPath alias "GetTempPathA"(byval nBufferLength as DWORD, byval lpBuffer as LPSTR) as DWORD
 declare function GetTempFileName alias "GetTempFileNameA"(byval lpPathName as LPCSTR, byval lpPrefixString as LPCSTR, byval uUnique as UINT, byval lpTempFileName as LPSTR) as UINT
 declare sub FatalAppExit alias "FatalAppExitA"(byval uAction as UINT, byval lpMessageText as LPCSTR)
 declare function GetFirmwareEnvironmentVariable alias "GetFirmwareEnvironmentVariableA"(byval lpName as LPCSTR, byval lpGuid as LPCSTR, byval pBuffer as PVOID, byval nSize as DWORD) as DWORD
 declare function SetFirmwareEnvironmentVariable alias "SetFirmwareEnvironmentVariableA"(byval lpName as LPCSTR, byval lpGuid as LPCSTR, byval pValue as PVOID, byval nSize as DWORD) as WINBOOL
 declare function FindResource alias "FindResourceA"(byval hModule as HMODULE, byval lpName as LPCSTR, byval lpType as LPCSTR) as HRSRC
 declare function EnumResourceTypes alias "EnumResourceTypesA"(byval hModule as HMODULE, byval lpEnumFunc as ENUMRESTYPEPROCA, byval lParam as LONG_PTR) as WINBOOL
 declare function EnumResourceNames alias "EnumResourceNamesA"(byval hModule as HMODULE, byval lpType as LPCSTR, byval lpEnumFunc as ENUMRESNAMEPROCA, byval lParam as LONG_PTR) as WINBOOL
 declare function BeginUpdateResource alias "BeginUpdateResourceA"(byval pFileName as LPCSTR, byval bDeleteExistingResources as WINBOOL) as HANDLE
 declare function UpdateResource alias "UpdateResourceA"(byval hUpdate as HANDLE, byval lpType as LPCSTR, byval lpName as LPCSTR, byval wLanguage as WORD, byval lpData as LPVOID, byval cb as DWORD) as WINBOOL
 declare function EndUpdateResource alias "EndUpdateResourceA"(byval hUpdate as HANDLE, byval fDiscard as WINBOOL) as WINBOOL
 declare function GlobalAddAtom alias "GlobalAddAtomA"(byval lpString as LPCSTR) as ATOM
 declare function GlobalAddAtomEx alias "GlobalAddAtomExA"(byval lpString as LPCSTR, byval Flags as DWORD) as ATOM
 declare function GlobalFindAtom alias "GlobalFindAtomA"(byval lpString as LPCSTR) as ATOM
 declare function GlobalGetAtomName alias "GlobalGetAtomNameA"(byval nAtom as ATOM, byval lpBuffer as LPSTR, byval nSize as long) as UINT
 declare function AddAtom alias "AddAtomA"(byval lpString as LPCSTR) as ATOM
 declare function FindAtom alias "FindAtomA"(byval lpString as LPCSTR) as ATOM
 declare function GetAtomName alias "GetAtomNameA"(byval nAtom as ATOM, byval lpBuffer as LPSTR, byval nSize as long) as UINT
 declare function GetProfileInt alias "GetProfileIntA"(byval lpAppName as LPCSTR, byval lpKeyName as LPCSTR, byval nDefault as INT_) as UINT
 declare function GetProfileString alias "GetProfileStringA"(byval lpAppName as LPCSTR, byval lpKeyName as LPCSTR, byval lpDefault as LPCSTR, byval lpReturnedString as LPSTR, byval nSize as DWORD) as DWORD
 declare function WriteProfileString alias "WriteProfileStringA"(byval lpAppName as LPCSTR, byval lpKeyName as LPCSTR, byval lpString as LPCSTR) as WINBOOL
 declare function GetProfileSection alias "GetProfileSectionA"(byval lpAppName as LPCSTR, byval lpReturnedString as LPSTR, byval nSize as DWORD) as DWORD
 declare function WriteProfileSection alias "WriteProfileSectionA"(byval lpAppName as LPCSTR, byval lpString as LPCSTR) as WINBOOL
 declare function GetPrivateProfileInt alias "GetPrivateProfileIntA"(byval lpAppName as LPCSTR, byval lpKeyName as LPCSTR, byval nDefault as INT_, byval lpFileName as LPCSTR) as UINT
 declare function GetPrivateProfileString alias "GetPrivateProfileStringA"(byval lpAppName as LPCSTR, byval lpKeyName as LPCSTR, byval lpDefault as LPCSTR, byval lpReturnedString as LPSTR, byval nSize as DWORD, byval lpFileName as LPCSTR) as DWORD
 declare function WritePrivateProfileString alias "WritePrivateProfileStringA"(byval lpAppName as LPCSTR, byval lpKeyName as LPCSTR, byval lpString as LPCSTR, byval lpFileName as LPCSTR) as WINBOOL
 declare function GetPrivateProfileSection alias "GetPrivateProfileSectionA"(byval lpAppName as LPCSTR, byval lpReturnedString as LPSTR, byval nSize as DWORD, byval lpFileName as LPCSTR) as DWORD
 declare function WritePrivateProfileSection alias "WritePrivateProfileSectionA"(byval lpAppName as LPCSTR, byval lpString as LPCSTR, byval lpFileName as LPCSTR) as WINBOOL
 declare function GetPrivateProfileSectionNames alias "GetPrivateProfileSectionNamesA"(byval lpszReturnBuffer as LPSTR, byval nSize as DWORD, byval lpFileName as LPCSTR) as DWORD
 declare function GetPrivateProfileStruct alias "GetPrivateProfileStructA"(byval lpszSection as LPCSTR, byval lpszKey as LPCSTR, byval lpStruct as LPVOID, byval uSizeStruct as UINT, byval szFile as LPCSTR) as WINBOOL
 declare function WritePrivateProfileStruct alias "WritePrivateProfileStructA"(byval lpszSection as LPCSTR, byval lpszKey as LPCSTR, byval lpStruct as LPVOID, byval uSizeStruct as UINT, byval szFile as LPCSTR) as WINBOOL


declare function GetSystemWow64DirectoryA(byval lpBuffer as LPSTR, byval uSize as UINT) as UINT
declare function GetSystemWow64DirectoryW(byval lpBuffer as LPWSTR, byval uSize as UINT) as UINT

 declare function GetSystemWow64Directory alias "GetSystemWow64DirectoryA"(byval lpBuffer as LPSTR, byval uSize as UINT) as UINT

declare function Wow64EnableWow64FsRedirection(byval Wow64FsEnableRedirection as WINBOOLEAN) as WINBOOLEAN
type PGET_SYSTEM_WOW64_DIRECTORY_A as function(byval lpBuffer as LPSTR, byval uSize as UINT) as UINT
type PGET_SYSTEM_WOW64_DIRECTORY_W as function(byval lpBuffer as LPWSTR, byval uSize as UINT) as UINT


declare function SetDllDirectoryA(byval lpPathName as LPCSTR) as WINBOOL
declare function SetDllDirectoryW(byval lpPathName as LPCWSTR) as WINBOOL
declare function GetDllDirectoryA(byval nBufferLength as DWORD, byval lpBuffer as LPSTR) as DWORD
declare function GetDllDirectoryW(byval nBufferLength as DWORD, byval lpBuffer as LPWSTR) as DWORD

 declare function SetDllDirectory alias "SetDllDirectoryA"(byval lpPathName as LPCSTR) as WINBOOL
 declare function GetDllDirectory alias "GetDllDirectoryA"(byval nBufferLength as DWORD, byval lpBuffer as LPSTR) as DWORD

const BASE_SEARCH_PATH_ENABLE_SAFE_SEARCHMODE = &h1
const BASE_SEARCH_PATH_DISABLE_SAFE_SEARCHMODE = &h10000
const BASE_SEARCH_PATH_PERMANENT = &h8000
const BASE_SEARCH_PATH_INVALID_FLAGS = not &h18001

declare function SetSearchPathMode(byval Flags as DWORD) as WINBOOL
declare function CreateDirectoryExA(byval lpTemplateDirectory as LPCSTR, byval lpNewDirectory as LPCSTR, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES) as WINBOOL
declare function CreateDirectoryExW(byval lpTemplateDirectory as LPCWSTR, byval lpNewDirectory as LPCWSTR, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES) as WINBOOL



 declare function CreateDirectoryEx alias "CreateDirectoryExA"(byval lpTemplateDirectory as LPCSTR, byval lpNewDirectory as LPCSTR, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES) as WINBOOL

const DDD_RAW_TARGET_PATH = &h00000001
const DDD_REMOVE_DEFINITION = &h00000002
const DDD_EXACT_MATCH_ON_REMOVE = &h00000004
const DDD_NO_BROADCAST_SYSTEM = &h00000008
const DDD_LUID_BROADCAST_DRIVE = &h00000010
declare function DefineDosDeviceA(byval dwFlags as DWORD, byval lpDeviceName as LPCSTR, byval lpTargetPath as LPCSTR) as WINBOOL
declare function QueryDosDeviceA(byval lpDeviceName as LPCSTR, byval lpTargetPath as LPSTR, byval ucchMax as DWORD) as DWORD

 declare function DefineDosDevice alias "DefineDosDeviceA"(byval dwFlags as DWORD, byval lpDeviceName as LPCSTR, byval lpTargetPath as LPCSTR) as WINBOOL
 declare function QueryDosDevice alias "QueryDosDeviceA"(byval lpDeviceName as LPCSTR, byval lpTargetPath as LPSTR, byval ucchMax as DWORD) as DWORD




declare function ReOpenFile(byval hOriginalFile as HANDLE, byval dwDesiredAccess as DWORD, byval dwShareMode as DWORD, byval dwFlagsAndAttributes as DWORD) as HANDLE



declare function GetCompressedFileSizeA(byval lpFileName as LPCSTR, byval lpFileSizeHigh as LPDWORD) as DWORD
declare function GetCompressedFileSizeW(byval lpFileName as LPCWSTR, byval lpFileSizeHigh as LPDWORD) as DWORD



 declare function GetCompressedFileSize alias "GetCompressedFileSizeA"(byval lpFileName as LPCSTR, byval lpFileSizeHigh as LPDWORD) as DWORD

type LPPROGRESS_ROUTINE as function(byval TotalFileSize as LARGE_INTEGER, byval TotalBytesTransferred as LARGE_INTEGER, byval StreamSize as LARGE_INTEGER, byval StreamBytesTransferred as LARGE_INTEGER, byval dwStreamNumber as DWORD, byval dwCallbackReason as DWORD, byval hSourceFile as HANDLE, byval hDestinationFile as HANDLE, byval lpData as LPVOID) as DWORD
declare function CheckNameLegalDOS8Dot3A(byval lpName as LPCSTR, byval lpOemName as LPSTR, byval OemNameSize as DWORD, byval pbNameContainsSpaces as PBOOL, byval pbNameLegal as PBOOL) as WINBOOL
declare function CheckNameLegalDOS8Dot3W(byval lpName as LPCWSTR, byval lpOemName as LPSTR, byval OemNameSize as DWORD, byval pbNameContainsSpaces as PBOOL, byval pbNameLegal as PBOOL) as WINBOOL
declare function CopyFileA(byval lpExistingFileName as LPCSTR, byval lpNewFileName as LPCSTR, byval bFailIfExists as WINBOOL) as WINBOOL
declare function CopyFileW(byval lpExistingFileName as LPCWSTR, byval lpNewFileName as LPCWSTR, byval bFailIfExists as WINBOOL) as WINBOOL
declare function CopyFileExA(byval lpExistingFileName as LPCSTR, byval lpNewFileName as LPCSTR, byval lpProgressRoutine as LPPROGRESS_ROUTINE, byval lpData as LPVOID, byval pbCancel as LPBOOL, byval dwCopyFlags as DWORD) as WINBOOL
declare function CopyFileExW(byval lpExistingFileName as LPCWSTR, byval lpNewFileName as LPCWSTR, byval lpProgressRoutine as LPPROGRESS_ROUTINE, byval lpData as LPVOID, byval pbCancel as LPBOOL, byval dwCopyFlags as DWORD) as WINBOOL



 declare function CheckNameLegalDOS8Dot3 alias "CheckNameLegalDOS8Dot3A"(byval lpName as LPCSTR, byval lpOemName as LPSTR, byval OemNameSize as DWORD, byval pbNameContainsSpaces as PBOOL, byval pbNameLegal as PBOOL) as WINBOOL
 declare function CopyFile alias "CopyFileA"(byval lpExistingFileName as LPCSTR, byval lpNewFileName as LPCSTR, byval bFailIfExists as WINBOOL) as WINBOOL
 declare function CopyFileEx alias "CopyFileExA"(byval lpExistingFileName as LPCSTR, byval lpNewFileName as LPCSTR, byval lpProgressRoutine as LPPROGRESS_ROUTINE, byval lpData as LPVOID, byval pbCancel as LPBOOL, byval dwCopyFlags as DWORD) as WINBOOL

declare function MoveFileA(byval lpExistingFileName as LPCSTR, byval lpNewFileName as LPCSTR) as WINBOOL
declare function MoveFileW(byval lpExistingFileName as LPCWSTR, byval lpNewFileName as LPCWSTR) as WINBOOL

 declare function MoveFile alias "MoveFileA"(byval lpExistingFileName as LPCSTR, byval lpNewFileName as LPCSTR) as WINBOOL

declare function MoveFileExA(byval lpExistingFileName as LPCSTR, byval lpNewFileName as LPCSTR, byval dwFlags as DWORD) as WINBOOL
declare function MoveFileExW(byval lpExistingFileName as LPCWSTR, byval lpNewFileName as LPCWSTR, byval dwFlags as DWORD) as WINBOOL

 declare function MoveFileEx alias "MoveFileExA"(byval lpExistingFileName as LPCSTR, byval lpNewFileName as LPCSTR, byval dwFlags as DWORD) as WINBOOL

declare function MoveFileWithProgressA(byval lpExistingFileName as LPCSTR, byval lpNewFileName as LPCSTR, byval lpProgressRoutine as LPPROGRESS_ROUTINE, byval lpData as LPVOID, byval dwFlags as DWORD) as WINBOOL
declare function MoveFileWithProgressW(byval lpExistingFileName as LPCWSTR, byval lpNewFileName as LPCWSTR, byval lpProgressRoutine as LPPROGRESS_ROUTINE, byval lpData as LPVOID, byval dwFlags as DWORD) as WINBOOL



 declare function MoveFileWithProgress alias "MoveFileWithProgressA"(byval lpExistingFileName as LPCSTR, byval lpNewFileName as LPCSTR, byval lpProgressRoutine as LPPROGRESS_ROUTINE, byval lpData as LPVOID, byval dwFlags as DWORD) as WINBOOL

const MOVEFILE_REPLACE_EXISTING = &h00000001
const MOVEFILE_COPY_ALLOWED = &h00000002
const MOVEFILE_DELAY_UNTIL_REBOOT = &h00000004
const MOVEFILE_WRITE_THROUGH = &h00000008
const MOVEFILE_CREATE_HARDLINK = &h00000010
const MOVEFILE_FAIL_IF_NOT_TRACKABLE = &h00000020

declare function ReplaceFileA(byval lpReplacedFileName as LPCSTR, byval lpReplacementFileName as LPCSTR, byval lpBackupFileName as LPCSTR, byval dwReplaceFlags as DWORD, byval lpExclude as LPVOID, byval lpReserved as LPVOID) as WINBOOL
declare function ReplaceFileW(byval lpReplacedFileName as LPCWSTR, byval lpReplacementFileName as LPCWSTR, byval lpBackupFileName as LPCWSTR, byval dwReplaceFlags as DWORD, byval lpExclude as LPVOID, byval lpReserved as LPVOID) as WINBOOL
declare function CreateHardLinkA(byval lpFileName as LPCSTR, byval lpExistingFileName as LPCSTR, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES) as WINBOOL
declare function CreateHardLinkW(byval lpFileName as LPCWSTR, byval lpExistingFileName as LPCWSTR, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES) as WINBOOL



 declare function ReplaceFile alias "ReplaceFileA"(byval lpReplacedFileName as LPCSTR, byval lpReplacementFileName as LPCSTR, byval lpBackupFileName as LPCSTR, byval dwReplaceFlags as DWORD, byval lpExclude as LPVOID, byval lpReserved as LPVOID) as WINBOOL
 declare function CreateHardLink alias "CreateHardLinkA"(byval lpFileName as LPCSTR, byval lpExistingFileName as LPCSTR, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES) as WINBOOL

type _STREAM_INFO_LEVELS as long
enum
 FindStreamInfoStandard
 FindStreamInfoMaxInfoLevel
end enum

type STREAM_INFO_LEVELS as _STREAM_INFO_LEVELS

type _WIN32_FIND_STREAM_DATA
 StreamSize as LARGE_INTEGER
 cStreamName as wstring * 260 + 36
end type

type WIN32_FIND_STREAM_DATA as _WIN32_FIND_STREAM_DATA
type PWIN32_FIND_STREAM_DATA as _WIN32_FIND_STREAM_DATA ptr
declare function FindFirstStreamW(byval lpFileName as LPCWSTR, byval InfoLevel as STREAM_INFO_LEVELS, byval lpFindStreamData as LPVOID, byval dwFlags as DWORD) as HANDLE
declare function FindNextStreamW(byval hFindStream as HANDLE, byval lpFindStreamData as LPVOID) as WINBOOL


declare function CreateNamedPipeA(byval lpName as LPCSTR, byval dwOpenMode as DWORD, byval dwPipeMode as DWORD, byval nMaxInstances as DWORD, byval nOutBufferSize as DWORD, byval nInBufferSize as DWORD, byval nDefaultTimeOut as DWORD, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES) as HANDLE
declare function GetNamedPipeHandleStateA(byval hNamedPipe as HANDLE, byval lpState as LPDWORD, byval lpCurInstances as LPDWORD, byval lpMaxCollectionCount as LPDWORD, byval lpCollectDataTimeout as LPDWORD, byval lpUserName as LPSTR, byval nMaxUserNameSize as DWORD) as WINBOOL
declare function GetNamedPipeHandleStateW(byval hNamedPipe as HANDLE, byval lpState as LPDWORD, byval lpCurInstances as LPDWORD, byval lpMaxCollectionCount as LPDWORD, byval lpCollectDataTimeout as LPDWORD, byval lpUserName as LPWSTR, byval nMaxUserNameSize as DWORD) as WINBOOL
declare function CallNamedPipeA(byval lpNamedPipeName as LPCSTR, byval lpInBuffer as LPVOID, byval nInBufferSize as DWORD, byval lpOutBuffer as LPVOID, byval nOutBufferSize as DWORD, byval lpBytesRead as LPDWORD, byval nTimeOut as DWORD) as WINBOOL
declare function CallNamedPipeW(byval lpNamedPipeName as LPCWSTR, byval lpInBuffer as LPVOID, byval nInBufferSize as DWORD, byval lpOutBuffer as LPVOID, byval nOutBufferSize as DWORD, byval lpBytesRead as LPDWORD, byval nTimeOut as DWORD) as WINBOOL
declare function WaitNamedPipeA(byval lpNamedPipeName as LPCSTR, byval nTimeOut as DWORD) as WINBOOL
declare function SetVolumeLabelA(byval lpRootPathName as LPCSTR, byval lpVolumeName as LPCSTR) as WINBOOL
declare function SetVolumeLabelW(byval lpRootPathName as LPCWSTR, byval lpVolumeName as LPCWSTR) as WINBOOL
declare sub SetFileApisToOEM()
declare sub SetFileApisToANSI()
declare function AreFileApisANSI() as WINBOOL
declare function GetVolumeInformationA(byval lpRootPathName as LPCSTR, byval lpVolumeNameBuffer as LPSTR, byval nVolumeNameSize as DWORD, byval lpVolumeSerialNumber as LPDWORD, byval lpMaximumComponentLength as LPDWORD, byval lpFileSystemFlags as LPDWORD, byval lpFileSystemNameBuffer as LPSTR, byval nFileSystemNameSize as DWORD) as WINBOOL
declare function ClearEventLogA(byval hEventLog as HANDLE, byval lpBackupFileName as LPCSTR) as WINBOOL
declare function ClearEventLogW(byval hEventLog as HANDLE, byval lpBackupFileName as LPCWSTR) as WINBOOL
declare function BackupEventLogA(byval hEventLog as HANDLE, byval lpBackupFileName as LPCSTR) as WINBOOL
declare function BackupEventLogW(byval hEventLog as HANDLE, byval lpBackupFileName as LPCWSTR) as WINBOOL
declare function CloseEventLog(byval hEventLog as HANDLE) as WINBOOL
declare function DeregisterEventSource(byval hEventLog as HANDLE) as WINBOOL
declare function NotifyChangeEventLog(byval hEventLog as HANDLE, byval hEvent as HANDLE) as WINBOOL
declare function GetNumberOfEventLogRecords(byval hEventLog as HANDLE, byval NumberOfRecords as PDWORD) as WINBOOL
declare function GetOldestEventLogRecord(byval hEventLog as HANDLE, byval OldestRecord as PDWORD) as WINBOOL
declare function OpenEventLogA(byval lpUNCServerName as LPCSTR, byval lpSourceName as LPCSTR) as HANDLE
declare function OpenEventLogW(byval lpUNCServerName as LPCWSTR, byval lpSourceName as LPCWSTR) as HANDLE
declare function RegisterEventSourceA(byval lpUNCServerName as LPCSTR, byval lpSourceName as LPCSTR) as HANDLE
declare function RegisterEventSourceW(byval lpUNCServerName as LPCWSTR, byval lpSourceName as LPCWSTR) as HANDLE
declare function OpenBackupEventLogA(byval lpUNCServerName as LPCSTR, byval lpFileName as LPCSTR) as HANDLE
declare function OpenBackupEventLogW(byval lpUNCServerName as LPCWSTR, byval lpFileName as LPCWSTR) as HANDLE
declare function ReadEventLogA(byval hEventLog as HANDLE, byval dwReadFlags as DWORD, byval dwRecordOffset as DWORD, byval lpBuffer as LPVOID, byval nNumberOfBytesToRead as DWORD, byval pnBytesRead as DWORD ptr, byval pnMinNumberOfBytesNeeded as DWORD ptr) as WINBOOL
declare function ReadEventLogW(byval hEventLog as HANDLE, byval dwReadFlags as DWORD, byval dwRecordOffset as DWORD, byval lpBuffer as LPVOID, byval nNumberOfBytesToRead as DWORD, byval pnBytesRead as DWORD ptr, byval pnMinNumberOfBytesNeeded as DWORD ptr) as WINBOOL
declare function ReportEventA(byval hEventLog as HANDLE, byval wType as WORD, byval wCategory as WORD, byval dwEventID as DWORD, byval lpUserSid as PSID, byval wNumStrings as WORD, byval dwDataSize as DWORD, byval lpStrings as LPCSTR ptr, byval lpRawData as LPVOID) as WINBOOL
declare function ReportEventW(byval hEventLog as HANDLE, byval wType as WORD, byval wCategory as WORD, byval dwEventID as DWORD, byval lpUserSid as PSID, byval wNumStrings as WORD, byval dwDataSize as DWORD, byval lpStrings as LPCWSTR ptr, byval lpRawData as LPVOID) as WINBOOL

 declare function CreateNamedPipe alias "CreateNamedPipeA"(byval lpName as LPCSTR, byval dwOpenMode as DWORD, byval dwPipeMode as DWORD, byval nMaxInstances as DWORD, byval nOutBufferSize as DWORD, byval nInBufferSize as DWORD, byval nDefaultTimeOut as DWORD, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES) as HANDLE
 declare function WaitNamedPipe alias "WaitNamedPipeA"(byval lpNamedPipeName as LPCSTR, byval nTimeOut as DWORD) as WINBOOL
 declare function GetVolumeInformation alias "GetVolumeInformationA"(byval lpRootPathName as LPCSTR, byval lpVolumeNameBuffer as LPSTR, byval nVolumeNameSize as DWORD, byval lpVolumeSerialNumber as LPDWORD, byval lpMaximumComponentLength as LPDWORD, byval lpFileSystemFlags as LPDWORD, byval lpFileSystemNameBuffer as LPSTR, byval nFileSystemNameSize as DWORD) as WINBOOL
 declare function GetNamedPipeHandleState alias "GetNamedPipeHandleStateA"(byval hNamedPipe as HANDLE, byval lpState as LPDWORD, byval lpCurInstances as LPDWORD, byval lpMaxCollectionCount as LPDWORD, byval lpCollectDataTimeout as LPDWORD, byval lpUserName as LPSTR, byval nMaxUserNameSize as DWORD) as WINBOOL
 declare function CallNamedPipe alias "CallNamedPipeA"(byval lpNamedPipeName as LPCSTR, byval lpInBuffer as LPVOID, byval nInBufferSize as DWORD, byval lpOutBuffer as LPVOID, byval nOutBufferSize as DWORD, byval lpBytesRead as LPDWORD, byval nTimeOut as DWORD) as WINBOOL
 declare function SetVolumeLabel alias "SetVolumeLabelA"(byval lpRootPathName as LPCSTR, byval lpVolumeName as LPCSTR) as WINBOOL
 declare function ClearEventLog alias "ClearEventLogA"(byval hEventLog as HANDLE, byval lpBackupFileName as LPCSTR) as WINBOOL
 declare function BackupEventLog alias "BackupEventLogA"(byval hEventLog as HANDLE, byval lpBackupFileName as LPCSTR) as WINBOOL
 declare function OpenEventLog alias "OpenEventLogA"(byval lpUNCServerName as LPCSTR, byval lpSourceName as LPCSTR) as HANDLE
 declare function RegisterEventSource alias "RegisterEventSourceA"(byval lpUNCServerName as LPCSTR, byval lpSourceName as LPCSTR) as HANDLE
 declare function OpenBackupEventLog alias "OpenBackupEventLogA"(byval lpUNCServerName as LPCSTR, byval lpFileName as LPCSTR) as HANDLE
 declare function ReadEventLog alias "ReadEventLogA"(byval hEventLog as HANDLE, byval dwReadFlags as DWORD, byval dwRecordOffset as DWORD, byval lpBuffer as LPVOID, byval nNumberOfBytesToRead as DWORD, byval pnBytesRead as DWORD ptr, byval pnMinNumberOfBytesNeeded as DWORD ptr) as WINBOOL
 declare function ReportEvent alias "ReportEventA"(byval hEventLog as HANDLE, byval wType as WORD, byval wCategory as WORD, byval dwEventID as DWORD, byval lpUserSid as PSID, byval wNumStrings as WORD, byval dwDataSize as DWORD, byval lpStrings as LPCSTR ptr, byval lpRawData as LPVOID) as WINBOOL


const EVENTLOG_FULL_INFO = 0

type _EVENTLOG_FULL_INFORMATION
 dwFull as DWORD
end type

type EVENTLOG_FULL_INFORMATION as _EVENTLOG_FULL_INFORMATION
type LPEVENTLOG_FULL_INFORMATION as _EVENTLOG_FULL_INFORMATION ptr
declare function GetEventLogInformation(byval hEventLog as HANDLE, byval dwInfoLevel as DWORD, byval lpBuffer as LPVOID, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD) as WINBOOL


declare function AccessCheckAndAuditAlarmA(byval SubsystemName as LPCSTR, byval HandleId as LPVOID, byval ObjectTypeName as LPSTR, byval ObjectName as LPSTR, byval SecurityDescriptor as PSECURITY_DESCRIPTOR, byval DesiredAccess as DWORD, byval GenericMapping as PGENERIC_MAPPING, byval ObjectCreation as WINBOOL, byval GrantedAccess as LPDWORD, byval AccessStatus as LPBOOL, byval pfGenerateOnClose as LPBOOL) as WINBOOL
declare function AccessCheckByTypeAndAuditAlarmA(byval SubsystemName as LPCSTR, byval HandleId as LPVOID, byval ObjectTypeName as LPCSTR, byval ObjectName as LPCSTR, byval SecurityDescriptor as PSECURITY_DESCRIPTOR, byval PrincipalSelfSid as PSID, byval DesiredAccess as DWORD, byval AuditType as AUDIT_EVENT_TYPE, byval Flags as DWORD, byval ObjectTypeList as POBJECT_TYPE_LIST, byval ObjectTypeListLength as DWORD, byval GenericMapping as PGENERIC_MAPPING, byval ObjectCreation as WINBOOL, byval GrantedAccess as LPDWORD, byval AccessStatus as LPBOOL, byval pfGenerateOnClose as LPBOOL) as WINBOOL
declare function AccessCheckByTypeResultListAndAuditAlarmA(byval SubsystemName as LPCSTR, byval HandleId as LPVOID, byval ObjectTypeName as LPCSTR, byval ObjectName as LPCSTR, byval SecurityDescriptor as PSECURITY_DESCRIPTOR, byval PrincipalSelfSid as PSID, byval DesiredAccess as DWORD, byval AuditType as AUDIT_EVENT_TYPE, byval Flags as DWORD, byval ObjectTypeList as POBJECT_TYPE_LIST, byval ObjectTypeListLength as DWORD, byval GenericMapping as PGENERIC_MAPPING, byval ObjectCreation as WINBOOL, byval GrantedAccess as LPDWORD, byval AccessStatusList as LPDWORD, byval pfGenerateOnClose as LPBOOL) as WINBOOL
declare function AccessCheckByTypeResultListAndAuditAlarmByHandleA(byval SubsystemName as LPCSTR, byval HandleId as LPVOID, byval ClientToken as HANDLE, byval ObjectTypeName as LPCSTR, byval ObjectName as LPCSTR, byval SecurityDescriptor as PSECURITY_DESCRIPTOR, byval PrincipalSelfSid as PSID, byval DesiredAccess as DWORD, byval AuditType as AUDIT_EVENT_TYPE, byval Flags as DWORD, byval ObjectTypeList as POBJECT_TYPE_LIST, byval ObjectTypeListLength as DWORD, byval GenericMapping as PGENERIC_MAPPING, byval ObjectCreation as WINBOOL, byval GrantedAccess as LPDWORD, byval AccessStatusList as LPDWORD, byval pfGenerateOnClose as LPBOOL) as WINBOOL
declare function ObjectOpenAuditAlarmA(byval SubsystemName as LPCSTR, byval HandleId as LPVOID, byval ObjectTypeName as LPSTR, byval ObjectName as LPSTR, byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval ClientToken as HANDLE, byval DesiredAccess as DWORD, byval GrantedAccess as DWORD, byval Privileges as PPRIVILEGE_SET, byval ObjectCreation as WINBOOL, byval AccessGranted as WINBOOL, byval GenerateOnClose as LPBOOL) as WINBOOL
declare function ObjectPrivilegeAuditAlarmA(byval SubsystemName as LPCSTR, byval HandleId as LPVOID, byval ClientToken as HANDLE, byval DesiredAccess as DWORD, byval Privileges as PPRIVILEGE_SET, byval AccessGranted as WINBOOL) as WINBOOL
declare function ObjectCloseAuditAlarmA(byval SubsystemName as LPCSTR, byval HandleId as LPVOID, byval GenerateOnClose as WINBOOL) as WINBOOL
declare function ObjectDeleteAuditAlarmA(byval SubsystemName as LPCSTR, byval HandleId as LPVOID, byval GenerateOnClose as WINBOOL) as WINBOOL
declare function PrivilegedServiceAuditAlarmA(byval SubsystemName as LPCSTR, byval ServiceName as LPCSTR, byval ClientToken as HANDLE, byval Privileges as PPRIVILEGE_SET, byval AccessGranted as WINBOOL) as WINBOOL
declare function SetFileSecurityA(byval lpFileName as LPCSTR, byval SecurityInformation as SECURITY_INFORMATION, byval pSecurityDescriptor as PSECURITY_DESCRIPTOR) as WINBOOL
declare function GetFileSecurityA(byval lpFileName as LPCSTR, byval RequestedInformation as SECURITY_INFORMATION, byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval nLength as DWORD, byval lpnLengthNeeded as LPDWORD) as WINBOOL
declare function ReadDirectoryChangesW(byval hDirectory as HANDLE, byval lpBuffer as LPVOID, byval nBufferLength as DWORD, byval bWatchSubtree as WINBOOL, byval dwNotifyFilter as DWORD, byval lpBytesReturned as LPDWORD, byval lpOverlapped as LPOVERLAPPED, byval lpCompletionRoutine as LPOVERLAPPED_COMPLETION_ROUTINE) as WINBOOL
declare function IsBadReadPtr(byval lp as const any ptr, byval ucb as UINT_PTR) as WINBOOL
declare function IsBadWritePtr(byval lp as LPVOID, byval ucb as UINT_PTR) as WINBOOL
declare function IsBadHugeReadPtr(byval lp as const any ptr, byval ucb as UINT_PTR) as WINBOOL
declare function IsBadHugeWritePtr(byval lp as LPVOID, byval ucb as UINT_PTR) as WINBOOL
declare function IsBadCodePtr(byval lpfn as FARPROC) as WINBOOL
declare function IsBadStringPtrA(byval lpsz as LPCSTR, byval ucchMax as UINT_PTR) as WINBOOL
declare function IsBadStringPtrW(byval lpsz as LPCWSTR, byval ucchMax as UINT_PTR) as WINBOOL


declare function LookupAccountSidA(byval lpSystemName as LPCSTR, byval Sid as PSID, byval Name as LPSTR, byval cchName as LPDWORD, byval ReferencedDomainName as LPSTR, byval cchReferencedDomainName as LPDWORD, byval peUse as PSID_NAME_USE) as WINBOOL
declare function LookupAccountSidW(byval lpSystemName as LPCWSTR, byval Sid as PSID, byval Name as LPWSTR, byval cchName as LPDWORD, byval ReferencedDomainName as LPWSTR, byval cchReferencedDomainName as LPDWORD, byval peUse as PSID_NAME_USE) as WINBOOL
declare function LookupAccountNameA(byval lpSystemName as LPCSTR, byval lpAccountName as LPCSTR, byval Sid as PSID, byval cbSid as LPDWORD, byval ReferencedDomainName as LPSTR, byval cchReferencedDomainName as LPDWORD, byval peUse as PSID_NAME_USE) as WINBOOL
declare function LookupAccountNameW(byval lpSystemName as LPCWSTR, byval lpAccountName as LPCWSTR, byval Sid as PSID, byval cbSid as LPDWORD, byval ReferencedDomainName as LPWSTR, byval cchReferencedDomainName as LPDWORD, byval peUse as PSID_NAME_USE) as WINBOOL

 declare function AccessCheckAndAuditAlarm alias "AccessCheckAndAuditAlarmA"(byval SubsystemName as LPCSTR, byval HandleId as LPVOID, byval ObjectTypeName as LPSTR, byval ObjectName as LPSTR, byval SecurityDescriptor as PSECURITY_DESCRIPTOR, byval DesiredAccess as DWORD, byval GenericMapping as PGENERIC_MAPPING, byval ObjectCreation as WINBOOL, byval GrantedAccess as LPDWORD, byval AccessStatus as LPBOOL, byval pfGenerateOnClose as LPBOOL) as WINBOOL
 declare function AccessCheckByTypeAndAuditAlarm alias "AccessCheckByTypeAndAuditAlarmA"(byval SubsystemName as LPCSTR, byval HandleId as LPVOID, byval ObjectTypeName as LPCSTR, byval ObjectName as LPCSTR, byval SecurityDescriptor as PSECURITY_DESCRIPTOR, byval PrincipalSelfSid as PSID, byval DesiredAccess as DWORD, byval AuditType as AUDIT_EVENT_TYPE, byval Flags as DWORD, byval ObjectTypeList as POBJECT_TYPE_LIST, byval ObjectTypeListLength as DWORD, byval GenericMapping as PGENERIC_MAPPING, byval ObjectCreation as WINBOOL, byval GrantedAccess as LPDWORD, byval AccessStatus as LPBOOL, byval pfGenerateOnClose as LPBOOL) as WINBOOL
 declare function AccessCheckByTypeResultListAndAuditAlarm alias "AccessCheckByTypeResultListAndAuditAlarmA"(byval SubsystemName as LPCSTR, byval HandleId as LPVOID, byval ObjectTypeName as LPCSTR, byval ObjectName as LPCSTR, byval SecurityDescriptor as PSECURITY_DESCRIPTOR, byval PrincipalSelfSid as PSID, byval DesiredAccess as DWORD, byval AuditType as AUDIT_EVENT_TYPE, byval Flags as DWORD, byval ObjectTypeList as POBJECT_TYPE_LIST, byval ObjectTypeListLength as DWORD, byval GenericMapping as PGENERIC_MAPPING, byval ObjectCreation as WINBOOL, byval GrantedAccess as LPDWORD, byval AccessStatusList as LPDWORD, byval pfGenerateOnClose as LPBOOL) as WINBOOL
 declare function AccessCheckByTypeResultListAndAuditAlarmByHandle alias "AccessCheckByTypeResultListAndAuditAlarmByHandleA"(byval SubsystemName as LPCSTR, byval HandleId as LPVOID, byval ClientToken as HANDLE, byval ObjectTypeName as LPCSTR, byval ObjectName as LPCSTR, byval SecurityDescriptor as PSECURITY_DESCRIPTOR, byval PrincipalSelfSid as PSID, byval DesiredAccess as DWORD, byval AuditType as AUDIT_EVENT_TYPE, byval Flags as DWORD, byval ObjectTypeList as POBJECT_TYPE_LIST, byval ObjectTypeListLength as DWORD, byval GenericMapping as PGENERIC_MAPPING, byval ObjectCreation as WINBOOL, byval GrantedAccess as LPDWORD, byval AccessStatusList as LPDWORD, byval pfGenerateOnClose as LPBOOL) as WINBOOL
 declare function ObjectOpenAuditAlarm alias "ObjectOpenAuditAlarmA"(byval SubsystemName as LPCSTR, byval HandleId as LPVOID, byval ObjectTypeName as LPSTR, byval ObjectName as LPSTR, byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval ClientToken as HANDLE, byval DesiredAccess as DWORD, byval GrantedAccess as DWORD, byval Privileges as PPRIVILEGE_SET, byval ObjectCreation as WINBOOL, byval AccessGranted as WINBOOL, byval GenerateOnClose as LPBOOL) as WINBOOL
 declare function ObjectPrivilegeAuditAlarm alias "ObjectPrivilegeAuditAlarmA"(byval SubsystemName as LPCSTR, byval HandleId as LPVOID, byval ClientToken as HANDLE, byval DesiredAccess as DWORD, byval Privileges as PPRIVILEGE_SET, byval AccessGranted as WINBOOL) as WINBOOL
 declare function ObjectCloseAuditAlarm alias "ObjectCloseAuditAlarmA"(byval SubsystemName as LPCSTR, byval HandleId as LPVOID, byval GenerateOnClose as WINBOOL) as WINBOOL
 declare function ObjectDeleteAuditAlarm alias "ObjectDeleteAuditAlarmA"(byval SubsystemName as LPCSTR, byval HandleId as LPVOID, byval GenerateOnClose as WINBOOL) as WINBOOL
 declare function PrivilegedServiceAuditAlarm alias "PrivilegedServiceAuditAlarmA"(byval SubsystemName as LPCSTR, byval ServiceName as LPCSTR, byval ClientToken as HANDLE, byval Privileges as PPRIVILEGE_SET, byval AccessGranted as WINBOOL) as WINBOOL
 declare function SetFileSecurity alias "SetFileSecurityA"(byval lpFileName as LPCSTR, byval SecurityInformation as SECURITY_INFORMATION, byval pSecurityDescriptor as PSECURITY_DESCRIPTOR) as WINBOOL
 declare function GetFileSecurity alias "GetFileSecurityA"(byval lpFileName as LPCSTR, byval RequestedInformation as SECURITY_INFORMATION, byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval nLength as DWORD, byval lpnLengthNeeded as LPDWORD) as WINBOOL
 declare function IsBadStringPtr alias "IsBadStringPtrA"(byval lpsz as LPCSTR, byval ucchMax as UINT_PTR) as WINBOOL
 declare function LookupAccountSid alias "LookupAccountSidA"(byval lpSystemName as LPCSTR, byval Sid as PSID, byval Name as LPSTR, byval cchName as LPDWORD, byval ReferencedDomainName as LPSTR, byval cchReferencedDomainName as LPDWORD, byval peUse as PSID_NAME_USE) as WINBOOL
 declare function LookupAccountName alias "LookupAccountNameA"(byval lpSystemName as LPCSTR, byval lpAccountName as LPCSTR, byval Sid as PSID, byval cbSid as LPDWORD, byval ReferencedDomainName as LPSTR, byval cchReferencedDomainName as LPDWORD, byval peUse as PSID_NAME_USE) as WINBOOL






declare function LookupPrivilegeValueA(byval lpSystemName as LPCSTR, byval lpName as LPCSTR, byval lpLuid as PLUID) as WINBOOL
declare function LookupPrivilegeValueW(byval lpSystemName as LPCWSTR, byval lpName as LPCWSTR, byval lpLuid as PLUID) as WINBOOL
declare function LookupPrivilegeNameA(byval lpSystemName as LPCSTR, byval lpLuid as PLUID, byval lpName as LPSTR, byval cchName as LPDWORD) as WINBOOL
declare function LookupPrivilegeNameW(byval lpSystemName as LPCWSTR, byval lpLuid as PLUID, byval lpName as LPWSTR, byval cchName as LPDWORD) as WINBOOL
declare function LookupPrivilegeDisplayNameA(byval lpSystemName as LPCSTR, byval lpName as LPCSTR, byval lpDisplayName as LPSTR, byval cchDisplayName as LPDWORD, byval lpLanguageId as LPDWORD) as WINBOOL
declare function LookupPrivilegeDisplayNameW(byval lpSystemName as LPCWSTR, byval lpName as LPCWSTR, byval lpDisplayName as LPWSTR, byval cchDisplayName as LPDWORD, byval lpLanguageId as LPDWORD) as WINBOOL
declare function BuildCommDCBA(byval lpDef as LPCSTR, byval lpDCB as LPDCB) as WINBOOL
declare function BuildCommDCBW(byval lpDef as LPCWSTR, byval lpDCB as LPDCB) as WINBOOL
declare function BuildCommDCBAndTimeoutsA(byval lpDef as LPCSTR, byval lpDCB as LPDCB, byval lpCommTimeouts as LPCOMMTIMEOUTS) as WINBOOL
declare function BuildCommDCBAndTimeoutsW(byval lpDef as LPCWSTR, byval lpDCB as LPDCB, byval lpCommTimeouts as LPCOMMTIMEOUTS) as WINBOOL
declare function CommConfigDialogA(byval lpszName as LPCSTR, byval hWnd as HWND, byval lpCC as LPCOMMCONFIG) as WINBOOL
declare function CommConfigDialogW(byval lpszName as LPCWSTR, byval hWnd as HWND, byval lpCC as LPCOMMCONFIG) as WINBOOL
declare function GetDefaultCommConfigA(byval lpszName as LPCSTR, byval lpCC as LPCOMMCONFIG, byval lpdwSize as LPDWORD) as WINBOOL
declare function GetDefaultCommConfigW(byval lpszName as LPCWSTR, byval lpCC as LPCOMMCONFIG, byval lpdwSize as LPDWORD) as WINBOOL
declare function SetDefaultCommConfigA(byval lpszName as LPCSTR, byval lpCC as LPCOMMCONFIG, byval dwSize as DWORD) as WINBOOL
declare function SetDefaultCommConfigW(byval lpszName as LPCWSTR, byval lpCC as LPCOMMCONFIG, byval dwSize as DWORD) as WINBOOL

 declare function LookupPrivilegeValue alias "LookupPrivilegeValueA"(byval lpSystemName as LPCSTR, byval lpName as LPCSTR, byval lpLuid as PLUID) as WINBOOL
 declare function LookupPrivilegeName alias "LookupPrivilegeNameA"(byval lpSystemName as LPCSTR, byval lpLuid as PLUID, byval lpName as LPSTR, byval cchName as LPDWORD) as WINBOOL
 declare function LookupPrivilegeDisplayName alias "LookupPrivilegeDisplayNameA"(byval lpSystemName as LPCSTR, byval lpName as LPCSTR, byval lpDisplayName as LPSTR, byval cchDisplayName as LPDWORD, byval lpLanguageId as LPDWORD) as WINBOOL
 declare function BuildCommDCB alias "BuildCommDCBA"(byval lpDef as LPCSTR, byval lpDCB as LPDCB) as WINBOOL
 declare function BuildCommDCBAndTimeouts alias "BuildCommDCBAndTimeoutsA"(byval lpDef as LPCSTR, byval lpDCB as LPDCB, byval lpCommTimeouts as LPCOMMTIMEOUTS) as WINBOOL
 declare function CommConfigDialog alias "CommConfigDialogA"(byval lpszName as LPCSTR, byval hWnd as HWND, byval lpCC as LPCOMMCONFIG) as WINBOOL
 declare function GetDefaultCommConfig alias "GetDefaultCommConfigA"(byval lpszName as LPCSTR, byval lpCC as LPCOMMCONFIG, byval lpdwSize as LPDWORD) as WINBOOL
 declare function SetDefaultCommConfig alias "SetDefaultCommConfigA"(byval lpszName as LPCSTR, byval lpCC as LPCOMMCONFIG, byval dwSize as DWORD) as WINBOOL

const MAX_COMPUTERNAME_LENGTH = 15
declare function GetComputerNameA(byval lpBuffer as LPSTR, byval nSize as LPDWORD) as WINBOOL
declare function GetComputerNameW(byval lpBuffer as LPWSTR, byval nSize as LPDWORD) as WINBOOL
declare function SetComputerNameA(byval lpComputerName as LPCSTR) as WINBOOL
declare function SetComputerNameW(byval lpComputerName as LPCWSTR) as WINBOOL
declare function SetComputerNameExA(byval NameType as COMPUTER_NAME_FORMAT, byval lpBuffer as LPCTSTR) as WINBOOL
declare function DnsHostnameToComputerNameA(byval Hostname as LPCSTR, byval ComputerName as LPSTR, byval nSize as LPDWORD) as WINBOOL
declare function DnsHostnameToComputerNameW(byval Hostname as LPCWSTR, byval ComputerName as LPWSTR, byval nSize as LPDWORD) as WINBOOL
declare function GetUserNameA(byval lpBuffer as LPSTR, byval pcbBuffer as LPDWORD) as WINBOOL
declare function GetUserNameW(byval lpBuffer as LPWSTR, byval pcbBuffer as LPDWORD) as WINBOOL

 declare function SetComputerNameEx alias "SetComputerNameExA"(byval NameType as COMPUTER_NAME_FORMAT, byval lpBuffer as LPCTSTR) as WINBOOL
 declare function GetComputerName alias "GetComputerNameA"(byval lpBuffer as LPSTR, byval nSize as LPDWORD) as WINBOOL
 declare function SetComputerName alias "SetComputerNameA"(byval lpComputerName as LPCSTR) as WINBOOL
 declare function DnsHostnameToComputerName alias "DnsHostnameToComputerNameA"(byval Hostname as LPCSTR, byval ComputerName as LPSTR, byval nSize as LPDWORD) as WINBOOL
 declare function GetUserName alias "GetUserNameA"(byval lpBuffer as LPSTR, byval pcbBuffer as LPDWORD) as WINBOOL

const LOGON32_LOGON_INTERACTIVE = 2
const LOGON32_LOGON_NETWORK = 3
const LOGON32_LOGON_BATCH = 4
const LOGON32_LOGON_SERVICE = 5
const LOGON32_LOGON_UNLOCK = 7
const LOGON32_LOGON_NETWORK_CLEARTEXT = 8
const LOGON32_LOGON_NEW_CREDENTIALS = 9
const LOGON32_PROVIDER_DEFAULT = 0
const LOGON32_PROVIDER_WINNT35 = 1
const LOGON32_PROVIDER_WINNT40 = 2
const LOGON32_PROVIDER_WINNT50 = 3


declare function LogonUserA(byval lpszUsername as LPCSTR, byval lpszDomain as LPCSTR, byval lpszPassword as LPCSTR, byval dwLogonType as DWORD, byval dwLogonProvider as DWORD, byval phToken as PHANDLE) as WINBOOL
declare function LogonUserW(byval lpszUsername as LPCWSTR, byval lpszDomain as LPCWSTR, byval lpszPassword as LPCWSTR, byval dwLogonType as DWORD, byval dwLogonProvider as DWORD, byval phToken as PHANDLE) as WINBOOL
declare function LogonUserExA(byval lpszUsername as LPCSTR, byval lpszDomain as LPCSTR, byval lpszPassword as LPCSTR, byval dwLogonType as DWORD, byval dwLogonProvider as DWORD, byval phToken as PHANDLE, byval ppLogonSid as PSID ptr, byval ppProfileBuffer as PVOID ptr, byval pdwProfileLength as LPDWORD, byval pQuotaLimits as PQUOTA_LIMITS) as WINBOOL
declare function LogonUserExW(byval lpszUsername as LPCWSTR, byval lpszDomain as LPCWSTR, byval lpszPassword as LPCWSTR, byval dwLogonType as DWORD, byval dwLogonProvider as DWORD, byval phToken as PHANDLE, byval ppLogonSid as PSID ptr, byval ppProfileBuffer as PVOID ptr, byval pdwProfileLength as LPDWORD, byval pQuotaLimits as PQUOTA_LIMITS) as WINBOOL
declare function CreateProcessAsUserA(byval hToken as HANDLE, byval lpApplicationName as LPCSTR, byval lpCommandLine as LPSTR, byval lpProcessAttributes as LPSECURITY_ATTRIBUTES, byval lpThreadAttributes as LPSECURITY_ATTRIBUTES, byval bInheritHandles as WINBOOL, byval dwCreationFlags as DWORD, byval lpEnvironment as LPVOID, byval lpCurrentDirectory as LPCSTR, byval lpStartupInfo as LPSTARTUPINFOA, byval lpProcessInformation as LPPROCESS_INFORMATION) as WINBOOL

 declare function CreateProcessAsUser alias "CreateProcessAsUserA"(byval hToken as HANDLE, byval lpApplicationName as LPCSTR, byval lpCommandLine as LPSTR, byval lpProcessAttributes as LPSECURITY_ATTRIBUTES, byval lpThreadAttributes as LPSECURITY_ATTRIBUTES, byval bInheritHandles as WINBOOL, byval dwCreationFlags as DWORD, byval lpEnvironment as LPVOID, byval lpCurrentDirectory as LPCSTR, byval lpStartupInfo as LPSTARTUPINFOA, byval lpProcessInformation as LPPROCESS_INFORMATION) as WINBOOL
 declare function LogonUser alias "LogonUserA"(byval lpszUsername as LPCSTR, byval lpszDomain as LPCSTR, byval lpszPassword as LPCSTR, byval dwLogonType as DWORD, byval dwLogonProvider as DWORD, byval phToken as PHANDLE) as WINBOOL
 declare function LogonUserEx alias "LogonUserExA"(byval lpszUsername as LPCSTR, byval lpszDomain as LPCSTR, byval lpszPassword as LPCSTR, byval dwLogonType as DWORD, byval dwLogonProvider as DWORD, byval phToken as PHANDLE, byval ppLogonSid as PSID ptr, byval ppProfileBuffer as PVOID ptr, byval pdwProfileLength as LPDWORD, byval pQuotaLimits as PQUOTA_LIMITS) as WINBOOL

const LOGON_WITH_PROFILE = &h00000001
const LOGON_NETCREDENTIALS_ONLY = &h00000002
const LOGON_ZERO_PASSWORD_BUFFER = &h80000000

declare function CreateProcessWithLogonW(byval lpUsername as LPCWSTR, byval lpDomain as LPCWSTR, byval lpPassword as LPCWSTR, byval dwLogonFlags as DWORD, byval lpApplicationName as LPCWSTR, byval lpCommandLine as LPWSTR, byval dwCreationFlags as DWORD, byval lpEnvironment as LPVOID, byval lpCurrentDirectory as LPCWSTR, byval lpStartupInfo as LPSTARTUPINFOW, byval lpProcessInformation as LPPROCESS_INFORMATION) as WINBOOL
declare function CreateProcessWithTokenW(byval hToken as HANDLE, byval dwLogonFlags as DWORD, byval lpApplicationName as LPCWSTR, byval lpCommandLine as LPWSTR, byval dwCreationFlags as DWORD, byval lpEnvironment as LPVOID, byval lpCurrentDirectory as LPCWSTR, byval lpStartupInfo as LPSTARTUPINFOW, byval lpProcessInformation as LPPROCESS_INFORMATION) as WINBOOL
declare function IsTokenUntrusted(byval TokenHandle as HANDLE) as WINBOOL
declare function RegisterWaitForSingleObject(byval phNewWaitObject as PHANDLE, byval hObject as HANDLE, byval Callback as WAITORTIMERCALLBACK, byval Context as PVOID, byval dwMilliseconds as ULONG, byval dwFlags as ULONG) as WINBOOL
declare function UnregisterWait(byval WaitHandle as HANDLE) as WINBOOL
declare function BindIoCompletionCallback(byval FileHandle as HANDLE, byval Function as LPOVERLAPPED_COMPLETION_ROUTINE, byval Flags as ULONG) as WINBOOL
declare function SetTimerQueueTimer(byval TimerQueue as HANDLE, byval Callback as WAITORTIMERCALLBACK, byval Parameter as PVOID, byval DueTime as DWORD, byval Period as DWORD, byval PreferIo as WINBOOL) as HANDLE
declare function CancelTimerQueueTimer(byval TimerQueue as HANDLE, byval Timer as HANDLE) as WINBOOL
declare function DeleteTimerQueue(byval TimerQueue as HANDLE) as WINBOOL
declare function CreatePrivateNamespaceA(byval lpPrivateNamespaceAttributes as LPSECURITY_ATTRIBUTES, byval lpBoundaryDescriptor as LPVOID, byval lpAliasPrefix as LPCSTR) as HANDLE
declare function OpenPrivateNamespaceA(byval lpBoundaryDescriptor as LPVOID, byval lpAliasPrefix as LPCSTR) as HANDLE
declare function CreateBoundaryDescriptorA(byval Name as LPCSTR, byval Flags as ULONG) as HANDLE
declare function AddIntegrityLabelToBoundaryDescriptor(byval BoundaryDescriptor as HANDLE ptr, byval IntegrityLabel as PSID) as WINBOOL

 declare function CreatePrivateNamespace alias "CreatePrivateNamespaceA"(byval lpPrivateNamespaceAttributes as LPSECURITY_ATTRIBUTES, byval lpBoundaryDescriptor as LPVOID, byval lpAliasPrefix as LPCSTR) as HANDLE
 declare function OpenPrivateNamespace alias "OpenPrivateNamespaceA"(byval lpBoundaryDescriptor as LPVOID, byval lpAliasPrefix as LPCSTR) as HANDLE
 declare function CreateBoundaryDescriptor alias "CreateBoundaryDescriptorA"(byval Name as LPCSTR, byval Flags as ULONG) as HANDLE

const HW_PROFILE_GUIDLEN = 39
const MAX_PROFILE_LEN = 80
const DOCKINFO_UNDOCKED = &h1
const DOCKINFO_DOCKED = &h2
const DOCKINFO_USER_SUPPLIED = &h4
const DOCKINFO_USER_UNDOCKED = DOCKINFO_USER_SUPPLIED or DOCKINFO_UNDOCKED
const DOCKINFO_USER_DOCKED = DOCKINFO_USER_SUPPLIED or DOCKINFO_DOCKED

type tagHW_PROFILE_INFOA
 dwDockInfo as DWORD
 szHwProfileGuid as zstring * 39
 szHwProfileName as zstring * 80
end type

type HW_PROFILE_INFOA as tagHW_PROFILE_INFOA
type LPHW_PROFILE_INFOA as tagHW_PROFILE_INFOA ptr

type tagHW_PROFILE_INFOW
 dwDockInfo as DWORD
 szHwProfileGuid as wstring * 39
 szHwProfileName as wstring * 80
end type

type HW_PROFILE_INFOW as tagHW_PROFILE_INFOW
type LPHW_PROFILE_INFOW as tagHW_PROFILE_INFOW ptr

 type HW_PROFILE_INFO as HW_PROFILE_INFOA
 type LPHW_PROFILE_INFO as LPHW_PROFILE_INFOA

declare function GetCurrentHwProfileA(byval lpHwProfileInfo as LPHW_PROFILE_INFOA) as WINBOOL
declare function GetCurrentHwProfileW(byval lpHwProfileInfo as LPHW_PROFILE_INFOW) as WINBOOL
declare function VerifyVersionInfoA(byval lpVersionInformation as LPOSVERSIONINFOEXA, byval dwTypeMask as DWORD, byval dwlConditionMask as DWORDLONG) as WINBOOL
declare function VerifyVersionInfoW(byval lpVersionInformation as LPOSVERSIONINFOEXW, byval dwTypeMask as DWORD, byval dwlConditionMask as DWORDLONG) as WINBOOL

 declare function GetCurrentHwProfile alias "GetCurrentHwProfileA"(byval lpHwProfileInfo as LPHW_PROFILE_INFOA) as WINBOOL
 declare function VerifyVersionInfo alias "VerifyVersionInfoA"(byval lpVersionInformation as LPOSVERSIONINFOEXA, byval dwTypeMask as DWORD, byval dwlConditionMask as DWORDLONG) as WINBOOL

const TIME_ZONE_ID_INVALID = cast(DWORD, &hffffffff)

type _TIME_ZONE_INFORMATION
 Bias as LONG
 StandardName as wstring * 32
 StandardDate as SYSTEMTIME
 StandardBias as LONG
 DaylightName as wstring * 32
 DaylightDate as SYSTEMTIME
 DaylightBias as LONG
end type

type TIME_ZONE_INFORMATION as _TIME_ZONE_INFORMATION
type PTIME_ZONE_INFORMATION as _TIME_ZONE_INFORMATION ptr
type LPTIME_ZONE_INFORMATION as _TIME_ZONE_INFORMATION ptr

type _TIME_DYNAMIC_ZONE_INFORMATION
 Bias as LONG
 StandardName as wstring * 32
 StandardDate as SYSTEMTIME
 StandardBias as LONG
 DaylightName as wstring * 32
 DaylightDate as SYSTEMTIME
 DaylightBias as LONG
 TimeZoneKeyName as wstring * 128
 DynamicDaylightTimeDisabled as WINBOOLEAN
end type

type DYNAMIC_TIME_ZONE_INFORMATION as _TIME_DYNAMIC_ZONE_INFORMATION
type PDYNAMIC_TIME_ZONE_INFORMATION as _TIME_DYNAMIC_ZONE_INFORMATION ptr
declare function SystemTimeToTzSpecificLocalTime(byval lpTimeZoneInformation as const TIME_ZONE_INFORMATION ptr, byval lpUniversalTime as const SYSTEMTIME ptr, byval lpLocalTime as LPSYSTEMTIME) as WINBOOL
declare function TzSpecificLocalTimeToSystemTime(byval lpTimeZoneInformation as const TIME_ZONE_INFORMATION ptr, byval lpLocalTime as const SYSTEMTIME ptr, byval lpUniversalTime as LPSYSTEMTIME) as WINBOOL
declare function FileTimeToSystemTime(byval lpFileTime as const FILETIME ptr, byval lpSystemTime as LPSYSTEMTIME) as WINBOOL
declare function SystemTimeToFileTime(byval lpSystemTime as const SYSTEMTIME ptr, byval lpFileTime as LPFILETIME) as WINBOOL
declare function GetTimeZoneInformation(byval lpTimeZoneInformation as LPTIME_ZONE_INFORMATION) as DWORD


declare function SetTimeZoneInformation(byval lpTimeZoneInformation as const TIME_ZONE_INFORMATION ptr) as WINBOOL


const TC_NORMAL = 0
const TC_HARDERR = 1
const TC_GP_TRAP = 2
const TC_SIGNAL = 3
const AC_LINE_OFFLINE = &h000
const AC_LINE_ONLINE = &h01
const AC_LINE_BACKUP_POWER = &h02
const AC_LINE_UNKNOWN = &hff
const BATTERY_FLAG_HIGH = &h01
const BATTERY_FLAG_LOW = &h02
const BATTERY_FLAG_CRITICAL = &h04
const BATTERY_FLAG_CHARGING = &h08
const BATTERY_FLAG_NO_BATTERY = &h80
const BATTERY_FLAG_UNKNOWN = &hff
const BATTERY_PERCENTAGE_UNKNOWN = &hff
const BATTERY_LIFE_UNKNOWN = &hffffffff

type _SYSTEM_POWER_STATUS
 ACLineStatus as UBYTE
 BatteryFlag as UBYTE
 BatteryLifePercent as UBYTE
 Reserved1 as UBYTE
 BatteryLifeTime as DWORD
 BatteryFullLifeTime as DWORD
end type

type SYSTEM_POWER_STATUS as _SYSTEM_POWER_STATUS
type LPSYSTEM_POWER_STATUS as _SYSTEM_POWER_STATUS ptr
declare function GetSystemPowerStatus(byval lpSystemPowerStatus as LPSYSTEM_POWER_STATUS) as WINBOOL
declare function SetSystemPowerState(byval fSuspend as WINBOOL, byval fForce as WINBOOL) as WINBOOL


declare function AllocateUserPhysicalPages(byval hProcess as HANDLE, byval NumberOfPages as PULONG_PTR, byval PageArray as PULONG_PTR) as WINBOOL
declare function FreeUserPhysicalPages(byval hProcess as HANDLE, byval NumberOfPages as PULONG_PTR, byval PageArray as PULONG_PTR) as WINBOOL
declare function MapUserPhysicalPages(byval VirtualAddress as PVOID, byval NumberOfPages as ULONG_PTR, byval PageArray as PULONG_PTR) as WINBOOL
declare function MapUserPhysicalPagesScatter(byval VirtualAddresses as PVOID ptr, byval NumberOfPages as ULONG_PTR, byval PageArray as PULONG_PTR) as WINBOOL
declare function CreateJobObjectA(byval lpJobAttributes as LPSECURITY_ATTRIBUTES, byval lpName as LPCSTR) as HANDLE
declare function CreateJobObjectW(byval lpJobAttributes as LPSECURITY_ATTRIBUTES, byval lpName as LPCWSTR) as HANDLE
declare function OpenJobObjectA(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval lpName as LPCSTR) as HANDLE
declare function OpenJobObjectW(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval lpName as LPCWSTR) as HANDLE
declare function AssignProcessToJobObject(byval hJob as HANDLE, byval hProcess as HANDLE) as WINBOOL
declare function TerminateJobObject(byval hJob as HANDLE, byval uExitCode as UINT) as WINBOOL
declare function QueryInformationJobObject(byval hJob as HANDLE, byval JobObjectInformationClass as JOBOBJECTINFOCLASS, byval lpJobObjectInformation as LPVOID, byval cbJobObjectInformationLength as DWORD, byval lpReturnLength as LPDWORD) as WINBOOL
declare function SetInformationJobObject(byval hJob as HANDLE, byval JobObjectInformationClass as JOBOBJECTINFOCLASS, byval lpJobObjectInformation as LPVOID, byval cbJobObjectInformationLength as DWORD) as WINBOOL
declare function CreateJobSet(byval NumJob as ULONG, byval UserJobSet as PJOB_SET_ARRAY, byval Flags as ULONG) as WINBOOL
declare function FindFirstVolumeA(byval lpszVolumeName as LPSTR, byval cchBufferLength as DWORD) as HANDLE
declare function FindNextVolumeA(byval hFindVolume as HANDLE, byval lpszVolumeName as LPSTR, byval cchBufferLength as DWORD) as WINBOOL
declare function FindFirstVolumeMountPointA(byval lpszRootPathName as LPCSTR, byval lpszVolumeMountPoint as LPSTR, byval cchBufferLength as DWORD) as HANDLE
declare function FindFirstVolumeMountPointW(byval lpszRootPathName as LPCWSTR, byval lpszVolumeMountPoint as LPWSTR, byval cchBufferLength as DWORD) as HANDLE
declare function FindNextVolumeMountPointA(byval hFindVolumeMountPoint as HANDLE, byval lpszVolumeMountPoint as LPSTR, byval cchBufferLength as DWORD) as WINBOOL
declare function FindNextVolumeMountPointW(byval hFindVolumeMountPoint as HANDLE, byval lpszVolumeMountPoint as LPWSTR, byval cchBufferLength as DWORD) as WINBOOL
declare function FindVolumeMountPointClose(byval hFindVolumeMountPoint as HANDLE) as WINBOOL
declare function SetVolumeMountPointA(byval lpszVolumeMountPoint as LPCSTR, byval lpszVolumeName as LPCSTR) as WINBOOL
declare function SetVolumeMountPointW(byval lpszVolumeMountPoint as LPCWSTR, byval lpszVolumeName as LPCWSTR) as WINBOOL
declare function DeleteVolumeMountPointA(byval lpszVolumeMountPoint as LPCSTR) as WINBOOL
declare function GetVolumeNameForVolumeMountPointA(byval lpszVolumeMountPoint as LPCSTR, byval lpszVolumeName as LPSTR, byval cchBufferLength as DWORD) as WINBOOL
declare function GetVolumePathNameA(byval lpszFileName as LPCSTR, byval lpszVolumePathName as LPSTR, byval cchBufferLength as DWORD) as WINBOOL
declare function GetVolumePathNamesForVolumeNameA(byval lpszVolumeName as LPCSTR, byval lpszVolumePathNames as LPCH, byval cchBufferLength as DWORD, byval lpcchReturnLength as PDWORD) as WINBOOL


 declare function FindFirstVolume alias "FindFirstVolumeA"(byval lpszVolumeName as LPSTR, byval cchBufferLength as DWORD) as HANDLE
 declare function FindNextVolume alias "FindNextVolumeA"(byval hFindVolume as HANDLE, byval lpszVolumeName as LPSTR, byval cchBufferLength as DWORD) as WINBOOL
 declare function DeleteVolumeMountPoint alias "DeleteVolumeMountPointA"(byval lpszVolumeMountPoint as LPCSTR) as WINBOOL
 declare function GetVolumeNameForVolumeMountPoint alias "GetVolumeNameForVolumeMountPointA"(byval lpszVolumeMountPoint as LPCSTR, byval lpszVolumeName as LPSTR, byval cchBufferLength as DWORD) as WINBOOL
 declare function GetVolumePathName alias "GetVolumePathNameA"(byval lpszFileName as LPCSTR, byval lpszVolumePathName as LPSTR, byval cchBufferLength as DWORD) as WINBOOL
 declare function GetVolumePathNamesForVolumeName alias "GetVolumePathNamesForVolumeNameA"(byval lpszVolumeName as LPCSTR, byval lpszVolumePathNames as LPCH, byval cchBufferLength as DWORD, byval lpcchReturnLength as PDWORD) as WINBOOL
 declare function CreateJobObject alias "CreateJobObjectA"(byval lpJobAttributes as LPSECURITY_ATTRIBUTES, byval lpName as LPCSTR) as HANDLE
 declare function OpenJobObject alias "OpenJobObjectA"(byval dwDesiredAccess as DWORD, byval bInheritHandle as WINBOOL, byval lpName as LPCSTR) as HANDLE
 declare function FindFirstVolumeMountPoint alias "FindFirstVolumeMountPointA"(byval lpszRootPathName as LPCSTR, byval lpszVolumeMountPoint as LPSTR, byval cchBufferLength as DWORD) as HANDLE
 declare function FindNextVolumeMountPoint alias "FindNextVolumeMountPointA"(byval hFindVolumeMountPoint as HANDLE, byval lpszVolumeMountPoint as LPSTR, byval cchBufferLength as DWORD) as WINBOOL
 declare function SetVolumeMountPoint alias "SetVolumeMountPointA"(byval lpszVolumeMountPoint as LPCSTR, byval lpszVolumeName as LPCSTR) as WINBOOL

const ACTCTX_FLAG_PROCESSOR_ARCHITECTURE_VALID = &h00000001
const ACTCTX_FLAG_LANGID_VALID = &h00000002
const ACTCTX_FLAG_ASSEMBLY_DIRECTORY_VALID = &h00000004
const ACTCTX_FLAG_RESOURCE_NAME_VALID = &h00000008
const ACTCTX_FLAG_SET_PROCESS_DEFAULT = &h00000010
const ACTCTX_FLAG_APPLICATION_NAME_VALID = &h00000020
const ACTCTX_FLAG_SOURCE_IS_ASSEMBLYREF = &h00000040
const ACTCTX_FLAG_HMODULE_VALID = &h00000080

type tagACTCTXA
 cbSize as ULONG
 dwFlags as DWORD
 lpSource as LPCSTR
 wProcessorArchitecture as USHORT
 wLangId as LANGID
 lpAssemblyDirectory as LPCSTR
 lpResourceName as LPCSTR
 lpApplicationName as LPCSTR
 hModule as HMODULE
end type

type ACTCTXA as tagACTCTXA
type PACTCTXA as tagACTCTXA ptr

type tagACTCTXW
 cbSize as ULONG
 dwFlags as DWORD
 lpSource as LPCWSTR
 wProcessorArchitecture as USHORT
 wLangId as LANGID
 lpAssemblyDirectory as LPCWSTR
 lpResourceName as LPCWSTR
 lpApplicationName as LPCWSTR
 hModule as HMODULE
end type

type ACTCTXW as tagACTCTXW
type PACTCTXW as tagACTCTXW ptr

 type ACTCTX as ACTCTXA
 type PACTCTX as PACTCTXA

type PCACTCTXA as const ACTCTXA ptr
type PCACTCTXW as const ACTCTXW ptr

 type PCACTCTX as PCACTCTXA

declare function CreateActCtxA(byval pActCtx as PCACTCTXA) as HANDLE
declare function CreateActCtxW(byval pActCtx as PCACTCTXW) as HANDLE
declare sub AddRefActCtx(byval hActCtx as HANDLE)
declare sub ReleaseActCtx(byval hActCtx as HANDLE)
declare function ZombifyActCtx(byval hActCtx as HANDLE) as WINBOOL
declare function ActivateActCtx(byval hActCtx as HANDLE, byval lpCookie as ULONG_PTR ptr) as WINBOOL
declare function DeactivateActCtx(byval dwFlags as DWORD, byval ulCookie as ULONG_PTR) as WINBOOL
declare function GetCurrentActCtx(byval lphActCtx as HANDLE ptr) as WINBOOL

 declare function CreateActCtx alias "CreateActCtxA"(byval pActCtx as PCACTCTXA) as HANDLE

const DEACTIVATE_ACTCTX_FLAG_FORCE_EARLY_DEACTIVATION = &h00000001

type tagACTCTX_SECTION_KEYED_DATA_2600
 cbSize as ULONG
 ulDataFormatVersion as ULONG
 lpData as PVOID
 ulLength as ULONG
 lpSectionGlobalData as PVOID
 ulSectionGlobalDataLength as ULONG
 lpSectionBase as PVOID
 ulSectionTotalLength as ULONG
 hActCtx as HANDLE
 ulAssemblyRosterIndex as ULONG
end type

type ACTCTX_SECTION_KEYED_DATA_2600 as tagACTCTX_SECTION_KEYED_DATA_2600
type PACTCTX_SECTION_KEYED_DATA_2600 as tagACTCTX_SECTION_KEYED_DATA_2600 ptr
type PCACTCTX_SECTION_KEYED_DATA_2600 as const ACTCTX_SECTION_KEYED_DATA_2600 ptr

type tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA
 lpInformation as PVOID
 lpSectionBase as PVOID
 ulSectionLength as ULONG
 lpSectionGlobalDataBase as PVOID
 ulSectionGlobalDataLength as ULONG
end type

type ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA as tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA
type PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA as tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA ptr
type PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA as const ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA ptr

type tagACTCTX_SECTION_KEYED_DATA
 cbSize as ULONG
 ulDataFormatVersion as ULONG
 lpData as PVOID
 ulLength as ULONG
 lpSectionGlobalData as PVOID
 ulSectionGlobalDataLength as ULONG
 lpSectionBase as PVOID
 ulSectionTotalLength as ULONG
 hActCtx as HANDLE
 ulAssemblyRosterIndex as ULONG
 ulFlags as ULONG
 AssemblyMetadata as ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA
end type

type ACTCTX_SECTION_KEYED_DATA as tagACTCTX_SECTION_KEYED_DATA
type PACTCTX_SECTION_KEYED_DATA as tagACTCTX_SECTION_KEYED_DATA ptr
type PCACTCTX_SECTION_KEYED_DATA as const ACTCTX_SECTION_KEYED_DATA ptr

const FIND_ACTCTX_SECTION_KEY_RETURN_HACTCTX = &h00000001
const FIND_ACTCTX_SECTION_KEY_RETURN_FLAGS = &h00000002
const FIND_ACTCTX_SECTION_KEY_RETURN_ASSEMBLY_METADATA = &h00000004

declare function FindActCtxSectionStringA(byval dwFlags as DWORD, byval lpExtensionGuid as const GUID ptr, byval ulSectionId as ULONG, byval lpStringToFind as LPCSTR, byval ReturnedData as PACTCTX_SECTION_KEYED_DATA) as WINBOOL
declare function FindActCtxSectionStringW(byval dwFlags as DWORD, byval lpExtensionGuid as const GUID ptr, byval ulSectionId as ULONG, byval lpStringToFind as LPCWSTR, byval ReturnedData as PACTCTX_SECTION_KEYED_DATA) as WINBOOL
declare function FindActCtxSectionGuid(byval dwFlags as DWORD, byval lpExtensionGuid as const GUID ptr, byval ulSectionId as ULONG, byval lpGuidToFind as const GUID ptr, byval ReturnedData as PACTCTX_SECTION_KEYED_DATA) as WINBOOL

 declare function FindActCtxSectionString alias "FindActCtxSectionStringA"(byval dwFlags as DWORD, byval lpExtensionGuid as const GUID ptr, byval ulSectionId as ULONG, byval lpStringToFind as LPCSTR, byval ReturnedData as PACTCTX_SECTION_KEYED_DATA) as WINBOOL

type _ACTIVATION_CONTEXT_BASIC_INFORMATION
 hActCtx as HANDLE
 dwFlags as DWORD
end type

type ACTIVATION_CONTEXT_BASIC_INFORMATION as _ACTIVATION_CONTEXT_BASIC_INFORMATION
type PACTIVATION_CONTEXT_BASIC_INFORMATION as _ACTIVATION_CONTEXT_BASIC_INFORMATION ptr
type PCACTIVATION_CONTEXT_BASIC_INFORMATION as const _ACTIVATION_CONTEXT_BASIC_INFORMATION ptr

const ACTIVATION_CONTEXT_BASIC_INFORMATION_DEFINED = 1
const QUERY_ACTCTX_FLAG_USE_ACTIVE_ACTCTX = &h00000004
const QUERY_ACTCTX_FLAG_ACTCTX_IS_HMODULE = &h00000008
const QUERY_ACTCTX_FLAG_ACTCTX_IS_ADDRESS = &h00000010
const QUERY_ACTCTX_FLAG_NO_ADDREF = &h80000000
declare function QueryActCtxW(byval dwFlags as DWORD, byval hActCtx as HANDLE, byval pvSubInstance as PVOID, byval ulInfoClass as ULONG, byval pvBuffer as PVOID, byval cbBuffer as SIZE_T_, byval pcbWrittenOrRequired as SIZE_T_ ptr) as WINBOOL
type PQUERYACTCTXW_FUNC as function(byval dwFlags as DWORD, byval hActCtx as HANDLE, byval pvSubInstance as PVOID, byval ulInfoClass as ULONG, byval pvBuffer as PVOID, byval cbBuffer as SIZE_T_, byval pcbWrittenOrRequired as SIZE_T_ ptr) as WINBOOL

declare function WTSGetActiveConsoleSessionId() as DWORD
declare function GetNumaProcessorNode(byval Processor as UCHAR, byval NodeNumber as PUCHAR) as WINBOOL
declare function GetNumaNodeProcessorMask(byval Node as UCHAR, byval ProcessorMask as PULONGLONG) as WINBOOL
declare function GetNumaAvailableMemoryNode(byval Node as UCHAR, byval AvailableBytes as PULONGLONG) as WINBOOL


type APPLICATION_RECOVERY_CALLBACK as function(byval pvParameter as PVOID) as DWORD
const RESTART_MAX_CMD_LINE = 1024
const RESTART_NO_CRASH = 1
const RESTART_NO_HANG = 2
const RESTART_NO_PATCH = 4
const RESTART_NO_REBOOT = 8
const RECOVERY_DEFAULT_PING_INTERVAL = 5000
const RECOVERY_MAX_PING_INTERVAL = (5 * 60) * 1000



declare function CopyContext(byval Destination as PCONTEXT, byval ContextFlags as DWORD, byval Source as PCONTEXT) as WINBOOL
declare function InitializeContext(byval Buffer as PVOID, byval ContextFlags as DWORD, byval Context as PCONTEXT ptr, byval ContextLength as PDWORD) as WINBOOL
declare function GetEnabledXStateFeatures() as DWORD64
declare function GetXStateFeaturesMask(byval Context as PCONTEXT, byval FeatureMask as PDWORD64) as WINBOOL
declare function LocateXStateFeature(byval Context as PCONTEXT, byval FeatureId as DWORD, byval Length as PDWORD) as PVOID
declare function SetXStateFeaturesMask(byval Context as PCONTEXT, byval FeatureMask as DWORD64) as WINBOOL


const MICROSOFT_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS = 0

end extern


#inclib "gdi32"
#inclib "msimg32"



extern "Windows"

const R2_BLACK = 1
const R2_NOTMERGEPEN = 2
const R2_MASKNOTPEN = 3
const R2_NOTCOPYPEN = 4
const R2_MASKPENNOT = 5
const R2_NOT = 6
const R2_XORPEN = 7
const R2_NOTMASKPEN = 8
const R2_MASKPEN = 9
const R2_NOTXORPEN = 10
const R2_NOP = 11
const R2_MERGENOTPEN = 12
const R2_COPYPEN = 13
const R2_MERGEPENNOT = 14
const R2_MERGEPEN = 15
const R2_WHITE = 16
const R2_LAST = 16
const SRCCOPY = cast(DWORD, &h00CC0020)
const SRCPAINT = cast(DWORD, &h00EE0086)
const SRCAND = cast(DWORD, &h008800C6)
const SRCINVERT = cast(DWORD, &h00660046)
const SRCERASE = cast(DWORD, &h00440328)
const NOTSRCCOPY = cast(DWORD, &h00330008)
const NOTSRCERASE = cast(DWORD, &h001100A6)
const MERGECOPY = cast(DWORD, &h00C000CA)
const MERGEPAINT = cast(DWORD, &h00BB0226)
const PATCOPY = cast(DWORD, &h00F00021)
const PATPAINT = cast(DWORD, &h00FB0A09)
const PATINVERT = cast(DWORD, &h005A0049)
const DSTINVERT = cast(DWORD, &h00550009)
const BLACKNESS = cast(DWORD, &h00000042)
const WHITENESS = cast(DWORD, &h00FF0062)
const NOMIRRORBITMAP = cast(DWORD, &h80000000)
const CAPTUREBLT = cast(DWORD, &h40000000)
const GDI_ERROR = &hFFFFFFFF
const ERROR_ = 0
const NULLREGION = 1
const SIMPLEREGION = 2
const COMPLEXREGION = 3
const RGN_ERROR = ERROR_
const RGN_AND = 1
const RGN_OR = 2
const RGN_XOR = 3
const RGN_DIFF = 4
const RGN_COPY = 5
const RGN_MIN = RGN_AND
const RGN_MAX = RGN_COPY
const BLACKONWHITE = 1
const WHITEONBLACK = 2
const COLORONCOLOR = 3
const HALFTONE = 4
const MAXSTRETCHBLTMODE = 4
const STRETCH_ANDSCANS = BLACKONWHITE
const STRETCH_ORSCANS = WHITEONBLACK
const STRETCH_DELETESCANS = COLORONCOLOR
const STRETCH_HALFTONE = HALFTONE
const ALTERNATE = 1
const WINDING = 2
const POLYFILL_LAST = 2
const LAYOUT_RTL = &h00000001
const LAYOUT_BTT = &h00000002
const LAYOUT_VBH = &h00000004
const LAYOUT_ORIENTATIONMASK = (LAYOUT_RTL or LAYOUT_BTT) or LAYOUT_VBH
const LAYOUT_BITMAPORIENTATIONPRESERVED = &h00000008
const TA_NOUPDATECP = 0
const TA_UPDATECP = 1
const TA_LEFT = 0
const TA_RIGHT = 2
const TA_CENTER = 6
const TA_TOP = 0
const TA_BOTTOM = 8
const TA_BASELINE = 24
const TA_RTLREADING = 256
const TA_MASK = ((TA_BASELINE + TA_CENTER) + TA_UPDATECP) + TA_RTLREADING
const VTA_BASELINE = TA_BASELINE
const VTA_LEFT = TA_BOTTOM
const VTA_RIGHT = TA_TOP
const VTA_CENTER = TA_CENTER
const VTA_BOTTOM = TA_RIGHT
const VTA_TOP = TA_LEFT
const ETO_OPAQUE = &h0002
const ETO_CLIPPED = &h0004
const ETO_GLYPH_INDEX = &h0010
const ETO_RTLREADING = &h0080
const ETO_NUMERICSLOCAL = &h0400
const ETO_NUMERICSLATIN = &h0800
const ETO_IGNORELANGUAGE = &h1000
const ETO_PDY = &h2000


const ASPECT_FILTERING = &h0001
const DCB_RESET = &h0001
const DCB_ACCUMULATE = &h0002
const DCB_DIRTY = DCB_ACCUMULATE
const DCB_SET = DCB_RESET or DCB_ACCUMULATE
const DCB_ENABLE = &h0004
const DCB_DISABLE = &h0008
const META_SETBKCOLOR = &h0201
const META_SETBKMODE = &h0102
const META_SETMAPMODE = &h0103
const META_SETROP2 = &h0104
const META_SETRELABS = &h0105
const META_SETPOLYFILLMODE = &h0106
const META_SETSTRETCHBLTMODE = &h0107
const META_SETTEXTCHAREXTRA = &h0108
const META_SETTEXTCOLOR = &h0209
const META_SETTEXTJUSTIFICATION = &h020A
const META_SETWINDOWORG = &h020B
const META_SETWINDOWEXT = &h020C
const META_SETVIEWPORTORG = &h020D
const META_SETVIEWPORTEXT = &h020E
const META_OFFSETWINDOWORG = &h020F
const META_SCALEWINDOWEXT = &h0410
const META_OFFSETVIEWPORTORG = &h0211
const META_SCALEVIEWPORTEXT = &h0412
const META_LINETO = &h0213
const META_MOVETO = &h0214
const META_EXCLUDECLIPRECT = &h0415
const META_INTERSECTCLIPRECT = &h0416
const META_ARC = &h0817
const META_ELLIPSE = &h0418
const META_FLOODFILL = &h0419
const META_PIE = &h081A
const META_RECTANGLE = &h041B
const META_ROUNDRECT = &h061C
const META_PATBLT = &h061D
const META_SAVEDC = &h001E
const META_SETPIXEL = &h041F
const META_OFFSETCLIPRGN = &h0220
const META_TEXTOUT = &h0521
const META_BITBLT = &h0922
const META_STRETCHBLT = &h0B23
const META_POLYGON = &h0324
const META_POLYLINE = &h0325
const META_ESCAPE = &h0626
const META_RESTOREDC = &h0127
const META_FILLREGION = &h0228
const META_FRAMEREGION = &h0429
const META_INVERTREGION = &h012A
const META_PAINTREGION = &h012B
const META_SELECTCLIPREGION = &h012C
const META_SELECTOBJECT = &h012D
const META_SETTEXTALIGN = &h012E
const META_CHORD = &h0830
const META_SETMAPPERFLAGS = &h0231
const META_EXTTEXTOUT = &h0a32
const META_SETDIBTODEV = &h0d33
const META_SELECTPALETTE = &h0234
const META_REALIZEPALETTE = &h0035
const META_ANIMATEPALETTE = &h0436
const META_SETPALENTRIES = &h0037
const META_POLYPOLYGON = &h0538
const META_RESIZEPALETTE = &h0139
const META_DIBBITBLT = &h0940
const META_DIBSTRETCHBLT = &h0b41
const META_DIBCREATEPATTERNBRUSH = &h0142
const META_STRETCHDIB = &h0f43
const META_EXTFLOODFILL = &h0548
const META_SETLAYOUT = &h0149
const META_DELETEOBJECT = &h01f0
const META_CREATEPALETTE = &h00f7
const META_CREATEPATTERNBRUSH = &h01F9
const META_CREATEPENINDIRECT = &h02FA
const META_CREATEFONTINDIRECT = &h02FB
const META_CREATEBRUSHINDIRECT = &h02FC
const META_CREATEREGION = &h06FF

type _DRAWPATRECT
 ptPosition as POINT
 ptSize as POINT
 wStyle as WORD
 wPattern as WORD
end type

type DRAWPATRECT as _DRAWPATRECT
type PDRAWPATRECT as _DRAWPATRECT ptr
const NEWFRAME = 1
const ABORTDOC_ = 2
const NEXTBAND = 3
const SETCOLORTABLE = 4
const GETCOLORTABLE = 5
const FLUSHOUTPUT = 6
const DRAFTMODE = 7
const QUERYESCSUPPORT = 8
const SETABORTPROC_ = 9
const STARTDOC_ = 10
const ENDDOC_ = 11
const GETPHYSPAGESIZE = 12
const GETPRINTINGOFFSET = 13
const GETSCALINGFACTOR = 14
const MFCOMMENT = 15
const GETPENWIDTH = 16
const SETCOPYCOUNT = 17
const SELECTPAPERSOURCE = 18
const DEVICEDATA = 19
const PASSTHROUGH = 19
const GETTECHNOLGY = 20
const GETTECHNOLOGY = 20
const SETLINECAP = 21
const SETLINEJOIN = 22
const SETMITERLIMIT_ = 23
const BANDINFO = 24
const DRAWPATTERNRECT = 25
const GETVECTORPENSIZE = 26
const GETVECTORBRUSHSIZE = 27
const ENABLEDUPLEX = 28
const GETSETPAPERBINS = 29
const GETSETPRINTORIENT = 30
const ENUMPAPERBINS = 31
const SETDIBSCALING = 32
const EPSPRINTING = 33
const ENUMPAPERMETRICS = 34
const GETSETPAPERMETRICS = 35
const POSTSCRIPT_DATA = 37
const POSTSCRIPT_IGNORE = 38
const MOUSETRAILS = 39
const GETDEVICEUNITS = 42
const GETEXTENDEDTEXTMETRICS = 256
const GETEXTENTTABLE = 257
const GETPAIRKERNTABLE = 258
const GETTRACKKERNTABLE = 259
const EXTTEXTOUT_ = 512
const GETFACENAME = 513
const DOWNLOADFACE = 514
const ENABLERELATIVEWIDTHS = 768
const ENABLEPAIRKERNING = 769
const SETKERNTRACK = 770
const SETALLJUSTVALUES = 771
const SETCHARSET = 772
const STRETCHBLT_ = 2048
const METAFILE_DRIVER = 2049
const GETSETSCREENPARAMS = 3072
const QUERYDIBSUPPORT = 3073
const BEGIN_PATH = 4096
const CLIP_TO_PATH = 4097
const END_PATH = 4098
const EXT_DEVICE_CAPS = 4099
const RESTORE_CTM = 4100
const SAVE_CTM = 4101
const SET_ARC_DIRECTION = 4102
const SET_BACKGROUND_COLOR = 4103
const SET_POLY_MODE = 4104
const SET_SCREEN_ANGLE = 4105
const SET_SPREAD = 4106
const TRANSFORM_CTM = 4107
const SET_CLIP_BOX = 4108
const SET_BOUNDS = 4109
const SET_MIRROR_MODE = 4110
const OPENCHANNEL = 4110
const DOWNLOADHEADER = 4111
const CLOSECHANNEL = 4112
const POSTSCRIPT_PASSTHROUGH = 4115
const ENCAPSULATED_POSTSCRIPT = 4116
const POSTSCRIPT_IDENTIFY = 4117
const POSTSCRIPT_INJECTION = 4118
const CHECKJPEGFORMAT = 4119
const CHECKPNGFORMAT = 4120
const GET_PS_FEATURESETTING = 4121
const GDIPLUS_TS_QUERYVER = 4122
const GDIPLUS_TS_RECORD = 4123


const SPCLPASSTHROUGH2 = 4568
const PSIDENT_GDICENTRIC = 0
const PSIDENT_PSCENTRIC = 1

type _PSINJECTDATA
 DataBytes as DWORD
 InjectionPoint as WORD
 PageNumber as WORD
end type

type PSINJECTDATA as _PSINJECTDATA
type PPSINJECTDATA as _PSINJECTDATA ptr
const PSINJECT_BEGINSTREAM = 1
const PSINJECT_PSADOBE = 2
const PSINJECT_PAGESATEND = 3
const PSINJECT_PAGES = 4
const PSINJECT_DOCNEEDEDRES = 5
const PSINJECT_DOCSUPPLIEDRES = 6
const PSINJECT_PAGEORDER = 7
const PSINJECT_ORIENTATION = 8
const PSINJECT_BOUNDINGBOX = 9
const PSINJECT_DOCUMENTPROCESSCOLORS = 10
const PSINJECT_COMMENTS = 11
const PSINJECT_BEGINDEFAULTS = 12
const PSINJECT_ENDDEFAULTS = 13
const PSINJECT_BEGINPROLOG = 14
const PSINJECT_ENDPROLOG = 15
const PSINJECT_BEGINSETUP = 16
const PSINJECT_ENDSETUP = 17
const PSINJECT_TRAILER = 18
const PSINJECT_EOF = 19
const PSINJECT_ENDSTREAM = 20
const PSINJECT_DOCUMENTPROCESSCOLORSATEND = 21
const PSINJECT_PAGENUMBER = 100
const PSINJECT_BEGINPAGESETUP = 101
const PSINJECT_ENDPAGESETUP = 102
const PSINJECT_PAGETRAILER = 103
const PSINJECT_PLATECOLOR = 104
const PSINJECT_SHOWPAGE = 105
const PSINJECT_PAGEBBOX = 106
const PSINJECT_ENDPAGECOMMENTS = 107
const PSINJECT_VMSAVE = 200
const PSINJECT_VMRESTORE = 201
const FEATURESETTING_NUP = 0
const FEATURESETTING_OUTPUT = 1
const FEATURESETTING_PSLEVEL = 2
const FEATURESETTING_CUSTPAPER = 3
const FEATURESETTING_MIRROR = 4
const FEATURESETTING_NEGATIVE = 5
const FEATURESETTING_PROTOCOL = 6
const FEATURESETTING_PRIVATE_BEGIN = &h1000
const FEATURESETTING_PRIVATE_END = &h1FFF

type _PSFEATURE_OUTPUT
 bPageIndependent as WINBOOL
 bSetPageDevice as WINBOOL
end type

type PSFEATURE_OUTPUT as _PSFEATURE_OUTPUT
type PPSFEATURE_OUTPUT as _PSFEATURE_OUTPUT ptr

type _PSFEATURE_CUSTPAPER
 lOrientation as LONG
 lWidth as LONG
 lHeight as LONG
 lWidthOffset as LONG
 lHeightOffset as LONG
end type

type PSFEATURE_CUSTPAPER as _PSFEATURE_CUSTPAPER
type PPSFEATURE_CUSTPAPER as _PSFEATURE_CUSTPAPER ptr
const PSPROTOCOL_ASCII = 0
const PSPROTOCOL_BCP = 1
const PSPROTOCOL_TBCP = 2
const PSPROTOCOL_BINARY = 3
const QDI_SETDIBITS = 1
const QDI_GETDIBITS = 2
const QDI_DIBTOSCREEN = 4
const QDI_STRETCHDIB = 8
const SP_NOTREPORTED = &h4000
const SP_ERROR = -1
const SP_APPABORT = -2
const SP_USERABORT = -3
const SP_OUTOFDISK = -4
const SP_OUTOFMEMORY = -5
const PR_JOBSTATUS = &h00000
const OBJ_PEN = 1
const OBJ_BRUSH = 2
const OBJ_DC = 3
const OBJ_METADC = 4
const OBJ_PAL = 5
const OBJ_FONT = 6
const OBJ_BITMAP = 7
const OBJ_REGION = 8
const OBJ_METAFILE = 9
const OBJ_MEMDC = 10
const OBJ_EXTPEN = 11
const OBJ_ENHMETADC = 12
const OBJ_ENHMETAFILE = 13
const OBJ_COLORSPACE = 14
const GDI_OBJ_LAST = OBJ_COLORSPACE
const MWT_IDENTITY = 1
const MWT_LEFTMULTIPLY = 2
const MWT_RIGHTMULTIPLY = 3
const MWT_MIN = MWT_IDENTITY
const MWT_MAX = MWT_RIGHTMULTIPLY

type tagXFORM
 eM11 as FLOAT
 eM12 as FLOAT
 eM21 as FLOAT
 eM22 as FLOAT
 eDx as FLOAT
 eDy as FLOAT
end type

type XFORM as tagXFORM
type PXFORM as tagXFORM ptr
type LPXFORM as tagXFORM ptr

type tagBITMAP
 bmType as LONG
 bmWidth as LONG
 bmHeight as LONG
 bmWidthBytes as LONG
 bmPlanes as WORD
 bmBitsPixel as WORD
 bmBits as LPVOID
end type

type BITMAP as tagBITMAP
type PBITMAP as tagBITMAP ptr
type NPBITMAP as tagBITMAP ptr
type LPBITMAP as tagBITMAP ptr

type tagRGBTRIPLE field = 1
 rgbtBlue as UBYTE
 rgbtGreen as UBYTE
 rgbtRed as UBYTE
end type

type RGBTRIPLE as tagRGBTRIPLE

type tagRGBQUAD
 rgbBlue as UBYTE
 rgbGreen as UBYTE
 rgbRed as UBYTE
 rgbReserved as UBYTE
end type

type RGBQUAD as tagRGBQUAD
type LPRGBQUAD as RGBQUAD ptr
const CS_ENABLE = &h00000001
const CS_DISABLE = &h00000002
const CS_DELETE_TRANSFORM = &h00000003
type LCSCSTYPE as LONG
const LCS_CALIBRATED_RGB = &h000000000
type LCSGAMUTMATCH as LONG
const LCS_GM_BUSINESS = &h00000001
const LCS_GM_GRAPHICS = &h00000002
const LCS_GM_IMAGES = &h00000004
const LCS_GM_ABS_COLORIMETRIC = &h00000008
const CM_OUT_OF_GAMUT = 255
const CM_IN_GAMUT = 0
const ICM_ADDPROFILE = 1
const ICM_DELETEPROFILE = 2
const ICM_QUERYPROFILE = 3
const ICM_SETDEFAULTPROFILE = 4
const ICM_REGISTERICMATCHER = 5
const ICM_UNREGISTERICMATCHER = 6
const ICM_QUERYMATCH = 7

type FXPT16DOT16 as long
type LPFXPT16DOT16 as long ptr
type FXPT2DOT30 as long
type LPFXPT2DOT30 as long ptr

type tagCIEXYZ
 ciexyzX as FXPT2DOT30
 ciexyzY as FXPT2DOT30
 ciexyzZ as FXPT2DOT30
end type

type CIEXYZ as tagCIEXYZ
type LPCIEXYZ as CIEXYZ ptr

type tagICEXYZTRIPLE
 ciexyzRed as CIEXYZ
 ciexyzGreen as CIEXYZ
 ciexyzBlue as CIEXYZ
end type

type CIEXYZTRIPLE as tagICEXYZTRIPLE
type LPCIEXYZTRIPLE as CIEXYZTRIPLE ptr

type tagLOGCOLORSPACEA
 lcsSignature as DWORD
 lcsVersion as DWORD
 lcsSize as DWORD
 lcsCSType as LCSCSTYPE
 lcsIntent as LCSGAMUTMATCH
 lcsEndpoints as CIEXYZTRIPLE
 lcsGammaRed as DWORD
 lcsGammaGreen as DWORD
 lcsGammaBlue as DWORD
 lcsFilename as zstring * 260
end type

type LOGCOLORSPACEA as tagLOGCOLORSPACEA
type LPLOGCOLORSPACEA as tagLOGCOLORSPACEA ptr

type tagLOGCOLORSPACEW
 lcsSignature as DWORD
 lcsVersion as DWORD
 lcsSize as DWORD
 lcsCSType as LCSCSTYPE
 lcsIntent as LCSGAMUTMATCH
 lcsEndpoints as CIEXYZTRIPLE
 lcsGammaRed as DWORD
 lcsGammaGreen as DWORD
 lcsGammaBlue as DWORD
 lcsFilename as wstring * 260
end type

type LOGCOLORSPACEW as tagLOGCOLORSPACEW
type LPLOGCOLORSPACEW as tagLOGCOLORSPACEW ptr

 type LOGCOLORSPACE as LOGCOLORSPACEA
 type LPLOGCOLORSPACE as LPLOGCOLORSPACEA

type tagBITMAPCOREHEADER
 bcSize as DWORD
 bcWidth as WORD
 bcHeight as WORD
 bcPlanes as WORD
 bcBitCount as WORD
end type

type BITMAPCOREHEADER as tagBITMAPCOREHEADER
type LPBITMAPCOREHEADER as tagBITMAPCOREHEADER ptr
type PBITMAPCOREHEADER as tagBITMAPCOREHEADER ptr

type tagBITMAPINFOHEADER
 biSize as DWORD
 biWidth as LONG
 biHeight as LONG
 biPlanes as WORD
 biBitCount as WORD
 biCompression as DWORD
 biSizeImage as DWORD
 biXPelsPerMeter as LONG
 biYPelsPerMeter as LONG
 biClrUsed as DWORD
 biClrImportant as DWORD
end type

type BITMAPINFOHEADER as tagBITMAPINFOHEADER
type LPBITMAPINFOHEADER as tagBITMAPINFOHEADER ptr
type PBITMAPINFOHEADER as tagBITMAPINFOHEADER ptr

type BITMAPV4HEADER
 bV4Size as DWORD
 bV4Width as LONG
 bV4Height as LONG
 bV4Planes as WORD
 bV4BitCount as WORD
 bV4V4Compression as DWORD
 bV4SizeImage as DWORD
 bV4XPelsPerMeter as LONG
 bV4YPelsPerMeter as LONG
 bV4ClrUsed as DWORD
 bV4ClrImportant as DWORD
 bV4RedMask as DWORD
 bV4GreenMask as DWORD
 bV4BlueMask as DWORD
 bV4AlphaMask as DWORD
 bV4CSType as DWORD
 bV4Endpoints as CIEXYZTRIPLE
 bV4GammaRed as DWORD
 bV4GammaGreen as DWORD
 bV4GammaBlue as DWORD
end type

type LPBITMAPV4HEADER as BITMAPV4HEADER ptr
type PBITMAPV4HEADER as BITMAPV4HEADER ptr

type BITMAPV5HEADER
 bV5Size as DWORD
 bV5Width as LONG
 bV5Height as LONG
 bV5Planes as WORD
 bV5BitCount as WORD
 bV5Compression as DWORD
 bV5SizeImage as DWORD
 bV5XPelsPerMeter as LONG
 bV5YPelsPerMeter as LONG
 bV5ClrUsed as DWORD
 bV5ClrImportant as DWORD
 bV5RedMask as DWORD
 bV5GreenMask as DWORD
 bV5BlueMask as DWORD
 bV5AlphaMask as DWORD
 bV5CSType as DWORD
 bV5Endpoints as CIEXYZTRIPLE
 bV5GammaRed as DWORD
 bV5GammaGreen as DWORD
 bV5GammaBlue as DWORD
 bV5Intent as DWORD
 bV5ProfileData as DWORD
 bV5ProfileSize as DWORD
 bV5Reserved as DWORD
end type

type LPBITMAPV5HEADER as BITMAPV5HEADER ptr
type PBITMAPV5HEADER as BITMAPV5HEADER ptr
const BI_RGB = 0
const BI_RLE8 = 1
const BI_RLE4 = 2
const BI_BITFIELDS = 3
const BI_JPEG = 4
const BI_PNG = 5

type tagBITMAPINFO
 bmiHeader as BITMAPINFOHEADER
 bmiColors(0 to 0) as RGBQUAD
end type

type BITMAPINFO as tagBITMAPINFO
type LPBITMAPINFO as tagBITMAPINFO ptr
type PBITMAPINFO as tagBITMAPINFO ptr

type tagBITMAPCOREINFO
 bmciHeader as BITMAPCOREHEADER
 bmciColors(0 to 0) as RGBTRIPLE
end type

type BITMAPCOREINFO as tagBITMAPCOREINFO
type LPBITMAPCOREINFO as tagBITMAPCOREINFO ptr
type PBITMAPCOREINFO as tagBITMAPCOREINFO ptr

type tagBITMAPFILEHEADER field = 2
 bfType as WORD
 bfSize as DWORD
 bfReserved1 as WORD
 bfReserved2 as WORD
 bfOffBits as DWORD
end type

type BITMAPFILEHEADER as tagBITMAPFILEHEADER
type LPBITMAPFILEHEADER as tagBITMAPFILEHEADER ptr
type PBITMAPFILEHEADER as tagBITMAPFILEHEADER ptr

type tagFONTSIGNATURE
 fsUsb(0 to 3) as DWORD
 fsCsb(0 to 1) as DWORD
end type

type FONTSIGNATURE as tagFONTSIGNATURE
type PFONTSIGNATURE as tagFONTSIGNATURE ptr
type LPFONTSIGNATURE as tagFONTSIGNATURE ptr

type tagCHARSETINFO
 ciCharset as UINT
 ciACP as UINT
 fs as FONTSIGNATURE
end type

type CHARSETINFO as tagCHARSETINFO
type PCHARSETINFO as tagCHARSETINFO ptr
type NPCHARSETINFO as tagCHARSETINFO ptr
type LPCHARSETINFO as tagCHARSETINFO ptr

const TCI_SRCCHARSET = 1
const TCI_SRCCODEPAGE = 2
const TCI_SRCFONTSIG = 3
const TCI_SRCLOCALE = &h1000

type tagLOCALESIGNATURE
 lsUsb(0 to 3) as DWORD
 lsCsbDefault(0 to 1) as DWORD
 lsCsbSupported(0 to 1) as DWORD
end type

type LOCALESIGNATURE as tagLOCALESIGNATURE
type PLOCALESIGNATURE as tagLOCALESIGNATURE ptr
type LPLOCALESIGNATURE as tagLOCALESIGNATURE ptr

type tagHANDLETABLE
 objectHandle(0 to 0) as HGDIOBJ
end type

type HANDLETABLE as tagHANDLETABLE
type PHANDLETABLE as tagHANDLETABLE ptr
type LPHANDLETABLE as tagHANDLETABLE ptr

type tagMETARECORD
 rdSize as DWORD
 rdFunction as WORD
 rdParm(0 to 0) as WORD
end type

type METARECORD as tagMETARECORD
type PMETARECORD as tagMETARECORD ptr
type LPMETARECORD as tagMETARECORD ptr

type tagMETAFILEPICT
 mm as LONG
 xExt as LONG
 yExt as LONG
 hMF as HMETAFILE
end type

type METAFILEPICT as tagMETAFILEPICT
type LPMETAFILEPICT as tagMETAFILEPICT ptr

type tagMETAHEADER field = 2
 mtType as WORD
 mtHeaderSize as WORD
 mtVersion as WORD
 mtSize as DWORD
 mtNoObjects as WORD
 mtMaxRecord as DWORD
 mtNoParameters as WORD
end type

type METAHEADER as tagMETAHEADER
type PMETAHEADER as tagMETAHEADER ptr
type LPMETAHEADER as tagMETAHEADER ptr

type tagENHMETARECORD
 iType as DWORD
 nSize as DWORD
 dParm(0 to 0) as DWORD
end type

type ENHMETARECORD as tagENHMETARECORD
type PENHMETARECORD as tagENHMETARECORD ptr
type LPENHMETARECORD as tagENHMETARECORD ptr

type tagENHMETAHEADER
 iType as DWORD
 nSize as DWORD
 rclBounds as RECTL
 rclFrame as RECTL
 dSignature as DWORD
 nVersion as DWORD
 nBytes as DWORD
 nRecords as DWORD
 nHandles as WORD
 sReserved as WORD
 nDescription as DWORD
 offDescription as DWORD
 nPalEntries as DWORD
 szlDevice as SIZEL
 szlMillimeters as SIZEL
 cbPixelFormat as DWORD
 offPixelFormat as DWORD
 bOpenGL as DWORD
 szlMicrometers as SIZEL
end type

type ENHMETAHEADER as tagENHMETAHEADER
type PENHMETAHEADER as tagENHMETAHEADER ptr
type LPENHMETAHEADER as tagENHMETAHEADER ptr

const TMPF_FIXED_PITCH = &h01
const TMPF_VECTOR = &h02
const TMPF_DEVICE = &h08
const TMPF_TRUETYPE = &h04

 type BCHAR as UBYTE


type tagTEXTMETRICA field = 4
 tmHeight as LONG
 tmAscent as LONG
 tmDescent as LONG
 tmInternalLeading as LONG
 tmExternalLeading as LONG
 tmAveCharWidth as LONG
 tmMaxCharWidth as LONG
 tmWeight as LONG
 tmOverhang as LONG
 tmDigitizedAspectX as LONG
 tmDigitizedAspectY as LONG
 tmFirstChar as UBYTE
 tmLastChar as UBYTE
 tmDefaultChar as UBYTE
 tmBreakChar as UBYTE
 tmItalic as UBYTE
 tmUnderlined as UBYTE
 tmStruckOut as UBYTE
 tmPitchAndFamily as UBYTE
 tmCharSet as UBYTE
end type

type TEXTMETRICA as tagTEXTMETRICA
type PTEXTMETRICA as tagTEXTMETRICA ptr
type NPTEXTMETRICA as tagTEXTMETRICA ptr
type LPTEXTMETRICA as tagTEXTMETRICA ptr

type tagTEXTMETRICW field = 4
 tmHeight as LONG
 tmAscent as LONG
 tmDescent as LONG
 tmInternalLeading as LONG
 tmExternalLeading as LONG
 tmAveCharWidth as LONG
 tmMaxCharWidth as LONG
 tmWeight as LONG
 tmOverhang as LONG
 tmDigitizedAspectX as LONG
 tmDigitizedAspectY as LONG
 tmFirstChar as WCHAR
 tmLastChar as WCHAR
 tmDefaultChar as WCHAR
 tmBreakChar as WCHAR
 tmItalic as UBYTE
 tmUnderlined as UBYTE
 tmStruckOut as UBYTE
 tmPitchAndFamily as UBYTE
 tmCharSet as UBYTE
end type

type TEXTMETRICW as tagTEXTMETRICW
type PTEXTMETRICW as tagTEXTMETRICW ptr
type NPTEXTMETRICW as tagTEXTMETRICW ptr
type LPTEXTMETRICW as tagTEXTMETRICW ptr

 type TEXTMETRIC as TEXTMETRICA
 type PTEXTMETRIC as PTEXTMETRICA
 type NPTEXTMETRIC as NPTEXTMETRICA
 type LPTEXTMETRIC as LPTEXTMETRICA

const NTM_REGULAR = &h00000040
const NTM_BOLD = &h00000020
const NTM_ITALIC = &h00000001
const NTM_NONNEGATIVE_AC = &h00010000
const NTM_PS_OPENTYPE = &h00020000
const NTM_TT_OPENTYPE = &h00040000
const NTM_MULTIPLEMASTER = &h00080000
const NTM_TYPE1 = &h00100000
const NTM_DSIG = &h00200000

type tagNEWTEXTMETRICA field = 4
 tmHeight as LONG
 tmAscent as LONG
 tmDescent as LONG
 tmInternalLeading as LONG
 tmExternalLeading as LONG
 tmAveCharWidth as LONG
 tmMaxCharWidth as LONG
 tmWeight as LONG
 tmOverhang as LONG
 tmDigitizedAspectX as LONG
 tmDigitizedAspectY as LONG
 tmFirstChar as UBYTE
 tmLastChar as UBYTE
 tmDefaultChar as UBYTE
 tmBreakChar as UBYTE
 tmItalic as UBYTE
 tmUnderlined as UBYTE
 tmStruckOut as UBYTE
 tmPitchAndFamily as UBYTE
 tmCharSet as UBYTE
 ntmFlags as DWORD
 ntmSizeEM as UINT
 ntmCellHeight as UINT
 ntmAvgWidth as UINT
end type

type NEWTEXTMETRICA as tagNEWTEXTMETRICA
type PNEWTEXTMETRICA as tagNEWTEXTMETRICA ptr
type NPNEWTEXTMETRICA as tagNEWTEXTMETRICA ptr
type LPNEWTEXTMETRICA as tagNEWTEXTMETRICA ptr

type tagNEWTEXTMETRICW field = 4
 tmHeight as LONG
 tmAscent as LONG
 tmDescent as LONG
 tmInternalLeading as LONG
 tmExternalLeading as LONG
 tmAveCharWidth as LONG
 tmMaxCharWidth as LONG
 tmWeight as LONG
 tmOverhang as LONG
 tmDigitizedAspectX as LONG
 tmDigitizedAspectY as LONG
 tmFirstChar as WCHAR
 tmLastChar as WCHAR
 tmDefaultChar as WCHAR
 tmBreakChar as WCHAR
 tmItalic as UBYTE
 tmUnderlined as UBYTE
 tmStruckOut as UBYTE
 tmPitchAndFamily as UBYTE
 tmCharSet as UBYTE
 ntmFlags as DWORD
 ntmSizeEM as UINT
 ntmCellHeight as UINT
 ntmAvgWidth as UINT
end type

type NEWTEXTMETRICW as tagNEWTEXTMETRICW
type PNEWTEXTMETRICW as tagNEWTEXTMETRICW ptr
type NPNEWTEXTMETRICW as tagNEWTEXTMETRICW ptr
type LPNEWTEXTMETRICW as tagNEWTEXTMETRICW ptr

 type NEWTEXTMETRIC as NEWTEXTMETRICA
 type PNEWTEXTMETRIC as PNEWTEXTMETRICA
 type NPNEWTEXTMETRIC as NPNEWTEXTMETRICA
 type LPNEWTEXTMETRIC as LPNEWTEXTMETRICA

type tagNEWTEXTMETRICEXA
 ntmTm as NEWTEXTMETRICA
 ntmFontSig as FONTSIGNATURE
end type

type NEWTEXTMETRICEXA as tagNEWTEXTMETRICEXA

type tagNEWTEXTMETRICEXW
 ntmTm as NEWTEXTMETRICW
 ntmFontSig as FONTSIGNATURE
end type

type NEWTEXTMETRICEXW as tagNEWTEXTMETRICEXW

 type NEWTEXTMETRICEX as NEWTEXTMETRICEXA

type tagPELARRAY
 paXCount as LONG
 paYCount as LONG
 paXExt as LONG
 paYExt as LONG
 paRGBs as UBYTE
end type

type PELARRAY as tagPELARRAY
type PPELARRAY as tagPELARRAY ptr
type NPPELARRAY as tagPELARRAY ptr
type LPPELARRAY as tagPELARRAY ptr

type tagLOGBRUSH
 lbStyle as UINT
 lbColor as COLORREF
 lbHatch as ULONG_PTR
end type

type LOGBRUSH as tagLOGBRUSH
type PLOGBRUSH as tagLOGBRUSH ptr
type NPLOGBRUSH as tagLOGBRUSH ptr
type LPLOGBRUSH as tagLOGBRUSH ptr

type tagLOGBRUSH32
 lbStyle as UINT
 lbColor as COLORREF
 lbHatch as ULONG
end type

type LOGBRUSH32 as tagLOGBRUSH32
type PLOGBRUSH32 as tagLOGBRUSH32 ptr
type NPLOGBRUSH32 as tagLOGBRUSH32 ptr
type LPLOGBRUSH32 as tagLOGBRUSH32 ptr
type PATTERN as LOGBRUSH
type PPATTERN as PATTERN ptr
type NPPATTERN as PATTERN ptr
type LPPATTERN as PATTERN ptr

type tagLOGPEN
 lopnStyle as UINT
 lopnWidth as POINT
 lopnColor as COLORREF
end type

type LOGPEN as tagLOGPEN
type PLOGPEN as tagLOGPEN ptr
type NPLOGPEN as tagLOGPEN ptr
type LPLOGPEN as tagLOGPEN ptr

type tagEXTLOGPEN
 elpPenStyle as DWORD
 elpWidth as DWORD
 elpBrushStyle as UINT
 elpColor as COLORREF
 elpHatch as ULONG_PTR
 elpNumEntries as DWORD
 elpStyleEntry(0 to 0) as DWORD
end type

type EXTLOGPEN as tagEXTLOGPEN
type PEXTLOGPEN as tagEXTLOGPEN ptr
type NPEXTLOGPEN as tagEXTLOGPEN ptr
type LPEXTLOGPEN as tagEXTLOGPEN ptr

type tagEXTLOGPEN32
 elpPenStyle as DWORD
 elpWidth as DWORD
 elpBrushStyle as UINT
 elpColor as COLORREF
 elpHatch as ULONG
 elpNumEntries as DWORD
 elpStyleEntry(0 to 0) as DWORD
end type

type EXTLOGPEN32 as tagEXTLOGPEN32
type PEXTLOGPEN32 as tagEXTLOGPEN32 ptr
type NPEXTLOGPEN32 as tagEXTLOGPEN32 ptr
type LPEXTLOGPEN32 as tagEXTLOGPEN32 ptr

type tagPALETTEENTRY
 peRed as UBYTE
 peGreen as UBYTE
 peBlue as UBYTE
 peFlags as UBYTE
end type

type PALETTEENTRY as tagPALETTEENTRY
type PPALETTEENTRY as tagPALETTEENTRY ptr
type LPPALETTEENTRY as tagPALETTEENTRY ptr

type tagLOGPALETTE
 palVersion as WORD
 palNumEntries as WORD
 palPalEntry(0 to 0) as PALETTEENTRY
end type

type LOGPALETTE as tagLOGPALETTE
type PLOGPALETTE as tagLOGPALETTE ptr
type NPLOGPALETTE as tagLOGPALETTE ptr
type LPLOGPALETTE as tagLOGPALETTE ptr
const LF_FACESIZE = 32

type tagLOGFONTA
 lfHeight as LONG
 lfWidth as LONG
 lfEscapement as LONG
 lfOrientation as LONG
 lfWeight as LONG
 lfItalic as UBYTE
 lfUnderline as UBYTE
 lfStrikeOut as UBYTE
 lfCharSet as UBYTE
 lfOutPrecision as UBYTE
 lfClipPrecision as UBYTE
 lfQuality as UBYTE
 lfPitchAndFamily as UBYTE
 lfFaceName as zstring * 32
end type

type LOGFONTA as tagLOGFONTA
type PLOGFONTA as tagLOGFONTA ptr
type NPLOGFONTA as tagLOGFONTA ptr
type LPLOGFONTA as tagLOGFONTA ptr

type tagLOGFONTW
 lfHeight as LONG
 lfWidth as LONG
 lfEscapement as LONG
 lfOrientation as LONG
 lfWeight as LONG
 lfItalic as UBYTE
 lfUnderline as UBYTE
 lfStrikeOut as UBYTE
 lfCharSet as UBYTE
 lfOutPrecision as UBYTE
 lfClipPrecision as UBYTE
 lfQuality as UBYTE
 lfPitchAndFamily as UBYTE
 lfFaceName as wstring * 32
end type

type LOGFONTW as tagLOGFONTW
type PLOGFONTW as tagLOGFONTW ptr
type NPLOGFONTW as tagLOGFONTW ptr
type LPLOGFONTW as tagLOGFONTW ptr

 type LOGFONT as LOGFONTA
 type PLOGFONT as PLOGFONTA
 type NPLOGFONT as NPLOGFONTA
 type LPLOGFONT as LPLOGFONTA

const LF_FULLFACESIZE = 64

type tagENUMLOGFONTA
 elfLogFont as LOGFONTA
 elfFullName as zstring * 64
 elfStyle as zstring * 32
end type

type ENUMLOGFONTA as tagENUMLOGFONTA
type LPENUMLOGFONTA as tagENUMLOGFONTA ptr

type tagENUMLOGFONTW
 elfLogFont as LOGFONTW
 elfFullName as wstring * 64
 elfStyle as wstring * 32
end type

type ENUMLOGFONTW as tagENUMLOGFONTW
type LPENUMLOGFONTW as tagENUMLOGFONTW ptr

 type ENUMLOGFONT as ENUMLOGFONTA
 type LPENUMLOGFONT as LPENUMLOGFONTA

type tagENUMLOGFONTEXA
 elfLogFont as LOGFONTA
 elfFullName as zstring * 64
 elfStyle as zstring * 32
 elfScript as zstring * 32
end type

type ENUMLOGFONTEXA as tagENUMLOGFONTEXA
type LPENUMLOGFONTEXA as tagENUMLOGFONTEXA ptr

type tagENUMLOGFONTEXW
 elfLogFont as LOGFONTW
 elfFullName as wstring * 64
 elfStyle as wstring * 32
 elfScript as wstring * 32
end type

type ENUMLOGFONTEXW as tagENUMLOGFONTEXW
type LPENUMLOGFONTEXW as tagENUMLOGFONTEXW ptr

 type ENUMLOGFONTEX as ENUMLOGFONTEXA
 type LPENUMLOGFONTEX as LPENUMLOGFONTEXA

const OUT_DEFAULT_PRECIS = 0
const OUT_STRING_PRECIS = 1
const OUT_CHARACTER_PRECIS = 2
const OUT_STROKE_PRECIS = 3
const OUT_TT_PRECIS = 4
const OUT_DEVICE_PRECIS = 5
const OUT_RASTER_PRECIS = 6
const OUT_TT_ONLY_PRECIS = 7
const OUT_OUTLINE_PRECIS = 8
const OUT_SCREEN_OUTLINE_PRECIS = 9
const OUT_PS_ONLY_PRECIS = 10
const CLIP_DEFAULT_PRECIS = 0
const CLIP_CHARACTER_PRECIS = 1
const CLIP_STROKE_PRECIS = 2
const CLIP_MASK = &hf
const CLIP_LH_ANGLES = 1 shl 4
const CLIP_TT_ALWAYS = 2 shl 4


const CLIP_EMBEDDED = 8 shl 4
const DEFAULT_QUALITY = 0
const DRAFT_QUALITY = 1
const PROOF_QUALITY = 2
const NONANTIALIASED_QUALITY = 3
const ANTIALIASED_QUALITY = 4
const CLEARTYPE_QUALITY = 5
const CLEARTYPE_NATURAL_QUALITY = 6
const DEFAULT_PITCH = 0
const FIXED_PITCH = 1
const VARIABLE_PITCH = 2
const MONO_FONT = 8
const ANSI_CHARSET = 0
const DEFAULT_CHARSET = 1
const SYMBOL_CHARSET = 2
const SHIFTJIS_CHARSET = 128
const HANGEUL_CHARSET = 129
const HANGUL_CHARSET = 129
const GB2312_CHARSET = 134
const CHINESEBIG5_CHARSET = 136
const OEM_CHARSET = 255
const JOHAB_CHARSET = 130
const HEBREW_CHARSET = 177
const ARABIC_CHARSET = 178
const GREEK_CHARSET = 161
const TURKISH_CHARSET = 162
const VIETNAMESE_CHARSET = 163
const THAI_CHARSET = 222
const EASTEUROPE_CHARSET = 238
const RUSSIAN_CHARSET = 204
const MAC_CHARSET = 77
const BALTIC_CHARSET = 186
const FS_LATIN1 = &h00000001
const FS_LATIN2 = &h00000002
const FS_CYRILLIC = &h00000004
const FS_GREEK = &h00000008
const FS_TURKISH = &h00000010
const FS_HEBREW = &h00000020
const FS_ARABIC = &h00000040
const FS_BALTIC = &h00000080
const FS_VIETNAMESE = &h00000100
const FS_THAI = &h00010000
const FS_JISJAPAN = &h00020000
const FS_CHINESESIMP = &h00040000
const FS_WANSUNG = &h00080000
const FS_CHINESETRAD = &h00100000
const FS_JOHAB = &h00200000
const FS_SYMBOL = &h80000000
const FF_DONTCARE = 0 shl 4
const FF_ROMAN = 1 shl 4
const FF_SWISS = 2 shl 4
const FF_MODERN = 3 shl 4
const FF_SCRIPT = 4 shl 4
const FF_DECORATIVE = 5 shl 4
const FW_DONTCARE = 0
const FW_THIN = 100
const FW_EXTRALIGHT = 200
const FW_LIGHT = 300
const FW_NORMAL = 400
const FW_MEDIUM = 500
const FW_SEMIBOLD = 600
const FW_BOLD = 700
const FW_EXTRABOLD = 800
const FW_HEAVY = 900
const FW_ULTRALIGHT = FW_EXTRALIGHT
const FW_REGULAR = FW_NORMAL
const FW_DEMIBOLD = FW_SEMIBOLD
const FW_ULTRABOLD = FW_EXTRABOLD
const FW_BLACK = FW_HEAVY
const PANOSE_COUNT = 10
const PAN_FAMILYTYPE_INDEX = 0
const PAN_SERIFSTYLE_INDEX = 1
const PAN_WEIGHT_INDEX = 2
const PAN_PROPORTION_INDEX = 3
const PAN_CONTRAST_INDEX = 4
const PAN_STROKEVARIATION_INDEX = 5
const PAN_ARMSTYLE_INDEX = 6
const PAN_LETTERFORM_INDEX = 7
const PAN_MIDLINE_INDEX = 8
const PAN_XHEIGHT_INDEX = 9
const PAN_CULTURE_LATIN = 0

type tagPANOSE
 bFamilyType as UBYTE
 bSerifStyle as UBYTE
 bWeight as UBYTE
 bProportion as UBYTE
 bContrast as UBYTE
 bStrokeVariation as UBYTE
 bArmStyle as UBYTE
 bLetterform as UBYTE
 bMidline as UBYTE
 bXHeight as UBYTE
end type

type PANOSE as tagPANOSE
type LPPANOSE as tagPANOSE ptr
const PAN_ANY = 0
const PAN_NO_FIT = 1
const PAN_FAMILY_TEXT_DISPLAY = 2
const PAN_FAMILY_SCRIPT = 3
const PAN_FAMILY_DECORATIVE = 4
const PAN_FAMILY_PICTORIAL = 5
const PAN_SERIF_COVE = 2
const PAN_SERIF_OBTUSE_COVE = 3
const PAN_SERIF_SQUARE_COVE = 4
const PAN_SERIF_OBTUSE_SQUARE_COVE = 5
const PAN_SERIF_SQUARE = 6
const PAN_SERIF_THIN = 7
const PAN_SERIF_BONE = 8
const PAN_SERIF_EXAGGERATED = 9
const PAN_SERIF_TRIANGLE = 10
const PAN_SERIF_NORMAL_SANS = 11
const PAN_SERIF_OBTUSE_SANS = 12
const PAN_SERIF_PERP_SANS = 13
const PAN_SERIF_FLARED = 14
const PAN_SERIF_ROUNDED = 15
const PAN_WEIGHT_VERY_LIGHT = 2
const PAN_WEIGHT_LIGHT = 3
const PAN_WEIGHT_THIN = 4
const PAN_WEIGHT_BOOK = 5
const PAN_WEIGHT_MEDIUM = 6
const PAN_WEIGHT_DEMI = 7
const PAN_WEIGHT_BOLD = 8
const PAN_WEIGHT_HEAVY = 9
const PAN_WEIGHT_BLACK = 10
const PAN_WEIGHT_NORD = 11
const PAN_PROP_OLD_STYLE = 2
const PAN_PROP_MODERN = 3
const PAN_PROP_EVEN_WIDTH = 4
const PAN_PROP_EXPANDED = 5
const PAN_PROP_CONDENSED = 6
const PAN_PROP_VERY_EXPANDED = 7
const PAN_PROP_VERY_CONDENSED = 8
const PAN_PROP_MONOSPACED = 9
const PAN_CONTRAST_NONE = 2
const PAN_CONTRAST_VERY_LOW = 3
const PAN_CONTRAST_LOW = 4
const PAN_CONTRAST_MEDIUM_LOW = 5
const PAN_CONTRAST_MEDIUM = 6
const PAN_CONTRAST_MEDIUM_HIGH = 7
const PAN_CONTRAST_HIGH = 8
const PAN_CONTRAST_VERY_HIGH = 9
const PAN_STROKE_GRADUAL_DIAG = 2
const PAN_STROKE_GRADUAL_TRAN = 3
const PAN_STROKE_GRADUAL_VERT = 4
const PAN_STROKE_GRADUAL_HORZ = 5
const PAN_STROKE_RAPID_VERT = 6
const PAN_STROKE_RAPID_HORZ = 7
const PAN_STROKE_INSTANT_VERT = 8
const PAN_STRAIGHT_ARMS_HORZ = 2
const PAN_STRAIGHT_ARMS_WEDGE = 3
const PAN_STRAIGHT_ARMS_VERT = 4
const PAN_STRAIGHT_ARMS_SINGLE_SERIF = 5
const PAN_STRAIGHT_ARMS_DOUBLE_SERIF = 6
const PAN_BENT_ARMS_HORZ = 7
const PAN_BENT_ARMS_WEDGE = 8
const PAN_BENT_ARMS_VERT = 9
const PAN_BENT_ARMS_SINGLE_SERIF = 10
const PAN_BENT_ARMS_DOUBLE_SERIF = 11
const PAN_LETT_NORMAL_CONTACT = 2
const PAN_LETT_NORMAL_WEIGHTED = 3
const PAN_LETT_NORMAL_BOXED = 4
const PAN_LETT_NORMAL_FLATTENED = 5
const PAN_LETT_NORMAL_ROUNDED = 6
const PAN_LETT_NORMAL_OFF_CENTER = 7
const PAN_LETT_NORMAL_SQUARE = 8
const PAN_LETT_OBLIQUE_CONTACT = 9
const PAN_LETT_OBLIQUE_WEIGHTED = 10
const PAN_LETT_OBLIQUE_BOXED = 11
const PAN_LETT_OBLIQUE_FLATTENED = 12
const PAN_LETT_OBLIQUE_ROUNDED = 13
const PAN_LETT_OBLIQUE_OFF_CENTER = 14
const PAN_LETT_OBLIQUE_SQUARE = 15
const PAN_MIDLINE_STANDARD_TRIMMED = 2
const PAN_MIDLINE_STANDARD_POINTED = 3
const PAN_MIDLINE_STANDARD_SERIFED = 4
const PAN_MIDLINE_HIGH_TRIMMED = 5
const PAN_MIDLINE_HIGH_POINTED = 6
const PAN_MIDLINE_HIGH_SERIFED = 7
const PAN_MIDLINE_CONSTANT_TRIMMED = 8
const PAN_MIDLINE_CONSTANT_POINTED = 9
const PAN_MIDLINE_CONSTANT_SERIFED = 10
const PAN_MIDLINE_LOW_TRIMMED = 11
const PAN_MIDLINE_LOW_POINTED = 12
const PAN_MIDLINE_LOW_SERIFED = 13
const PAN_XHEIGHT_CONSTANT_SMALL = 2
const PAN_XHEIGHT_CONSTANT_STD = 3
const PAN_XHEIGHT_CONSTANT_LARGE = 4
const PAN_XHEIGHT_DUCKING_SMALL = 5
const PAN_XHEIGHT_DUCKING_STD = 6
const PAN_XHEIGHT_DUCKING_LARGE = 7
const ELF_VENDOR_SIZE = 4

type tagEXTLOGFONTA
 elfLogFont as LOGFONTA
 elfFullName as zstring * 64
 elfStyle as zstring * 32
 elfVersion as DWORD
 elfStyleSize as DWORD
 elfMatch as DWORD
 elfReserved as DWORD
 elfVendorId(0 to 3) as UBYTE
 elfCulture as DWORD
 elfPanose as PANOSE
end type

type EXTLOGFONTA as tagEXTLOGFONTA
type PEXTLOGFONTA as tagEXTLOGFONTA ptr
type NPEXTLOGFONTA as tagEXTLOGFONTA ptr
type LPEXTLOGFONTA as tagEXTLOGFONTA ptr

type tagEXTLOGFONTW
 elfLogFont as LOGFONTW
 elfFullName as wstring * 64
 elfStyle as wstring * 32
 elfVersion as DWORD
 elfStyleSize as DWORD
 elfMatch as DWORD
 elfReserved as DWORD
 elfVendorId(0 to 3) as UBYTE
 elfCulture as DWORD
 elfPanose as PANOSE
end type

type EXTLOGFONTW as tagEXTLOGFONTW
type PEXTLOGFONTW as tagEXTLOGFONTW ptr
type NPEXTLOGFONTW as tagEXTLOGFONTW ptr
type LPEXTLOGFONTW as tagEXTLOGFONTW ptr

 type EXTLOGFONT as EXTLOGFONTA
 type PEXTLOGFONT as PEXTLOGFONTA
 type NPEXTLOGFONT as NPEXTLOGFONTA
 type LPEXTLOGFONT as LPEXTLOGFONTA

const ELF_VERSION = 0
const ELF_CULTURE_LATIN = 0
const RASTER_FONTTYPE = &h0001
const DEVICE_FONTTYPE = &h002
const TRUETYPE_FONTTYPE = &h004
const PC_RESERVED = &h01
const PC_EXPLICIT = &h02
const PC_NOCOLLAPSE = &h04
const TRANSPARENT = 1
const OPAQUE = 2
const BKMODE_LAST = 2
const GM_COMPATIBLE = 1
const GM_ADVANCED = 2
const GM_LAST = 2
const PT_CLOSEFIGURE = &h01
const PT_LINETO = &h02
const PT_BEZIERTO = &h04
const PT_MOVETO = &h06
const MM_TEXT = 1
const MM_LOMETRIC = 2
const MM_HIMETRIC = 3
const MM_LOENGLISH = 4
const MM_HIENGLISH = 5
const MM_TWIPS = 6
const MM_ISOTROPIC = 7
const MM_ANISOTROPIC = 8
const MM_MIN = MM_TEXT
const MM_MAX = MM_ANISOTROPIC
const MM_MAX_FIXEDSCALE = MM_TWIPS
const ABSOLUTE = 1
const RELATIVE = 2
const WHITE_BRUSH = 0
const LTGRAY_BRUSH = 1
const GRAY_BRUSH = 2
const DKGRAY_BRUSH = 3
const BLACK_BRUSH = 4
const NULL_BRUSH = 5
const HOLLOW_BRUSH = NULL_BRUSH
const WHITE_PEN = 6
const BLACK_PEN = 7
const NULL_PEN = 8
const OEM_FIXED_FONT = 10
const ANSI_FIXED_FONT = 11
const ANSI_VAR_FONT = 12
const SYSTEM_FONT = 13
const DEVICE_DEFAULT_FONT = 14
const DEFAULT_PALETTE = 15
const SYSTEM_FIXED_FONT = 16
const DEFAULT_GUI_FONT = 17
const DC_BRUSH = 18
const DC_PEN = 19
const STOCK_LAST = 19
const CLR_INVALID = &hFFFFFFFF
const BS_SOLID = 0
const BS_NULL = 1
const BS_HOLLOW = BS_NULL
const BS_HATCHED = 2
const BS_PATTERN = 3
const BS_INDEXED = 4
const BS_DIBPATTERN = 5
const BS_DIBPATTERNPT = 6
const BS_PATTERN8X8 = 7
const BS_DIBPATTERN8X8 = 8
const BS_MONOPATTERN = 9
const HS_HORIZONTAL = 0
const HS_VERTICAL = 1
const HS_FDIAGONAL = 2
const HS_BDIAGONAL = 3
const HS_CROSS = 4
const HS_DIAGCROSS = 5
const HS_API_MAX = 12
const PS_SOLID = 0
const PS_DASH = 1
const PS_DOT = 2
const PS_DASHDOT = 3
const PS_DASHDOTDOT = 4
const PS_NULL = 5
const PS_INSIDEFRAME = 6
const PS_USERSTYLE = 7
const PS_ALTERNATE = 8
const PS_STYLE_MASK = &h0000000F
const PS_ENDCAP_ROUND = &h000000000
const PS_ENDCAP_SQUARE = &h00000100
const PS_ENDCAP_FLAT = &h00000200
const PS_ENDCAP_MASK = &h00000F00
const PS_JOIN_ROUND = &h000000000
const PS_JOIN_BEVEL = &h00001000
const PS_JOIN_MITER = &h00002000
const PS_JOIN_MASK = &h0000F000
const PS_COSMETIC = &h000000000
const PS_GEOMETRIC = &h00010000
const PS_TYPE_MASK = &h000F0000
const AD_COUNTERCLOCKWISE = 1
const AD_CLOCKWISE = 2
const DRIVERVERSION = 0
const TECHNOLOGY = 2
const HORZSIZE = 4
const VERTSIZE = 6
const HORZRES = 8
const VERTRES = 10
const BITSPIXEL_ = 12
const PLANES_ = 14
const NUMBRUSHES = 16
const NUMPENS = 18
const NUMMARKERS = 20
const NUMFONTS = 22
const NUMCOLORS = 24
const PDEVICESIZE = 26
const CURVECAPS = 28
const LINECAPS = 30
const POLYGONALCAPS = 32
const TEXTCAPS = 34
const CLIPCAPS = 36
const RASTERCAPS = 38
const ASPECTX = 40
const ASPECTY = 42
const ASPECTXY = 44
const LOGPIXELSX = 88
const LOGPIXELSY = 90
const SIZEPALETTE = 104
const NUMRESERVED = 106
const COLORRES = 108
const PHYSICALWIDTH = 110
const PHYSICALHEIGHT = 111
const PHYSICALOFFSETX = 112
const PHYSICALOFFSETY = 113
const SCALINGFACTORX = 114
const SCALINGFACTORY = 115
const VREFRESH = 116
const DESKTOPVERTRES = 117
const DESKTOPHORZRES = 118
const BLTALIGNMENT = 119
const SHADEBLENDCAPS = 120
const COLORMGMTCAPS = 121
const DT_PLOTTER = 0
const DT_RASDISPLAY = 1
const DT_RASPRINTER = 2
const DT_RASCAMERA = 3
const DT_CHARSTREAM = 4
const DT_METAFILE = 5
const DT_DISPFILE = 6
const CC_NONE = 0
const CC_CIRCLES = 1
const CC_PIE = 2
const CC_CHORD = 4
const CC_ELLIPSES = 8
const CC_WIDE = 16
const CC_STYLED = 32
const CC_WIDESTYLED = 64
const CC_INTERIORS = 128
const CC_ROUNDRECT = 256
const LC_NONE = 0
const LC_POLYLINE = 2
const LC_MARKER = 4
const LC_POLYMARKER = 8
const LC_WIDE = 16
const LC_STYLED = 32
const LC_WIDESTYLED = 64
const LC_INTERIORS = 128
const PC_NONE = 0
const PC_POLYGON = 1
const PC_RECTANGLE = 2
const PC_WINDPOLYGON = 4
const PC_TRAPEZOID = 4
const PC_SCANLINE = 8
const PC_WIDE = 16
const PC_STYLED = 32
const PC_WIDESTYLED = 64
const PC_INTERIORS = 128
const PC_POLYPOLYGON = 256
const PC_PATHS = 512
const CP_NONE = 0
const CP_RECTANGLE = 1
const CP_REGION = 2
const TC_OP_CHARACTER = &h00000001
const TC_OP_STROKE = &h00000002
const TC_CP_STROKE = &h00000004
const TC_CR_90 = &h00000008
const TC_CR_ANY = &h00000010
const TC_SF_X_YINDEP = &h00000020
const TC_SA_DOUBLE = &h00000040
const TC_SA_INTEGER = &h00000080
const TC_SA_CONTIN = &h00000100
const TC_EA_DOUBLE = &h00000200
const TC_IA_ABLE = &h00000400
const TC_UA_ABLE = &h00000800
const TC_SO_ABLE = &h00001000
const TC_RA_ABLE = &h00002000
const TC_VA_ABLE = &h00004000
const TC_RESERVED = &h00008000
const TC_SCROLLBLT = &h00010000
const RC_BITBLT = 1
const RC_BANDING = 2
const RC_SCALING = 4
const RC_BITMAP64 = 8
const RC_GDI20_OUTPUT = &h0010
const RC_GDI20_STATE = &h0020
const RC_SAVEBITMAP = &h0040
const RC_DI_BITMAP = &h0080
const RC_PALETTE = &h0100
const RC_DIBTODEV = &h0200
const RC_BIGFONT = &h0400
const RC_STRETCHBLT = &h0800
const RC_FLOODFILL = &h1000
const RC_STRETCHDIB = &h2000
const RC_OP_DX_OUTPUT = &h4000
const RC_DEVBITS = &h8000
const SB_NONE = &h000000000
const SB_CONST_ALPHA = &h00000001
const SB_PIXEL_ALPHA = &h00000002
const SB_PREMULT_ALPHA = &h00000004
const SB_GRAD_RECT = &h00000010
const SB_GRAD_TRI = &h00000020
const CM_NONE = &h000000000
const CM_DEVICE_ICM = &h00000001
const CM_GAMMA_RAMP = &h00000002
const CM_CMYK_COLOR = &h00000004
const DIB_RGB_COLORS = 0
const DIB_PAL_COLORS = 1
const SYSPAL_ERROR = 0
const SYSPAL_STATIC = 1
const SYSPAL_NOSTATIC = 2
const SYSPAL_NOSTATIC256 = 3
const CBM_INIT = &h04
const FLOODFILLBORDER = 0
const FLOODFILLSURFACE = 1
const CCHDEVICENAME = 32
const CCHFORMNAME = 32

type _devicemodeA
 dmDeviceName as zstring * 32
 dmSpecVersion as WORD
 dmDriverVersion as WORD
 dmSize as WORD
 dmDriverExtra as WORD
 dmFields as DWORD

 union
 type
 dmOrientation as short
 dmPaperSize as short
 dmPaperLength as short
 dmPaperWidth as short
 dmScale as short
 dmCopies as short
 dmDefaultSource as short
 dmPrintQuality as short
 end type

 type
 dmPosition as POINTL
 dmDisplayOrientation as DWORD
 dmDisplayFixedOutput as DWORD
 end type
 end union

 dmColor as short
 dmDuplex as short
 dmYResolution as short
 dmTTOption as short
 dmCollate as short
 dmFormName as zstring * 32
 dmLogPixels as WORD
 dmBitsPerPel as DWORD
 dmPelsWidth as DWORD
 dmPelsHeight as DWORD

 union
 dmDisplayFlags as DWORD
 dmNup as DWORD
 end union

 dmDisplayFrequency as DWORD
 dmICMMethod as DWORD
 dmICMIntent as DWORD
 dmMediaType as DWORD
 dmDitherType as DWORD
 dmReserved1 as DWORD
 dmReserved2 as DWORD
 dmPanningWidth as DWORD
 dmPanningHeight as DWORD
end type

type DEVMODEA as _devicemodeA
type PDEVMODEA as _devicemodeA ptr
type NPDEVMODEA as _devicemodeA ptr
type LPDEVMODEA as _devicemodeA ptr

type _devicemodeW
 dmDeviceName as wstring * 32
 dmSpecVersion as WORD
 dmDriverVersion as WORD
 dmSize as WORD
 dmDriverExtra as WORD
 dmFields as DWORD

 union
 type
 dmOrientation as short
 dmPaperSize as short
 dmPaperLength as short
 dmPaperWidth as short
 dmScale as short
 dmCopies as short
 dmDefaultSource as short
 dmPrintQuality as short
 end type

 type
 dmPosition as POINTL
 dmDisplayOrientation as DWORD
 dmDisplayFixedOutput as DWORD
 end type
 end union

 dmColor as short
 dmDuplex as short
 dmYResolution as short
 dmTTOption as short
 dmCollate as short
 dmFormName as wstring * 32
 dmLogPixels as WORD
 dmBitsPerPel as DWORD
 dmPelsWidth as DWORD
 dmPelsHeight as DWORD

 union
 dmDisplayFlags as DWORD
 dmNup as DWORD
 end union

 dmDisplayFrequency as DWORD
 dmICMMethod as DWORD
 dmICMIntent as DWORD
 dmMediaType as DWORD
 dmDitherType as DWORD
 dmReserved1 as DWORD
 dmReserved2 as DWORD
 dmPanningWidth as DWORD
 dmPanningHeight as DWORD
end type

type DEVMODEW as _devicemodeW
type PDEVMODEW as _devicemodeW ptr
type NPDEVMODEW as _devicemodeW ptr
type LPDEVMODEW as _devicemodeW ptr

 type DEVMODE as DEVMODEA
 type PDEVMODE as PDEVMODEA
 type NPDEVMODE as NPDEVMODEA
 type LPDEVMODE as LPDEVMODEA

const DM_SPECVERSION = &h0401
const DM_ORIENTATION = &h00000001
const DM_PAPERSIZE = &h00000002
const DM_PAPERLENGTH = &h00000004
const DM_PAPERWIDTH = &h00000008
const DM_SCALE = &h00000010
const DM_POSITION = &h00000020
const DM_NUP = &h00000040
const DM_DISPLAYORIENTATION = &h00000080
const DM_COPIES = &h00000100
const DM_DEFAULTSOURCE = &h00000200
const DM_PRINTQUALITY = &h00000400
const DM_COLOR = &h00000800
const DM_DUPLEX = &h00001000
const DM_YRESOLUTION = &h00002000
const DM_TTOPTION = &h00004000
const DM_COLLATE = &h00008000
const DM_FORMNAME = &h00010000
const DM_LOGPIXELS = &h00020000
const DM_BITSPERPEL = &h00040000
const DM_PELSWIDTH = &h00080000
const DM_PELSHEIGHT = &h00100000
const DM_DISPLAYFLAGS = &h00200000
const DM_DISPLAYFREQUENCY = &h00400000
const DM_ICMMETHOD = &h00800000
const DM_ICMINTENT = &h01000000
const DM_MEDIATYPE = &h02000000
const DM_DITHERTYPE = &h04000000
const DM_PANNINGWIDTH = &h08000000
const DM_PANNINGHEIGHT = &h10000000
const DM_DISPLAYFIXEDOUTPUT = &h20000000
const DMORIENT_PORTRAIT = 1
const DMORIENT_LANDSCAPE = 2
const DMPAPER_LETTER = 1
const DMPAPER_FIRST = DMPAPER_LETTER
const DMPAPER_LETTERSMALL = 2
const DMPAPER_TABLOID = 3
const DMPAPER_LEDGER = 4
const DMPAPER_LEGAL = 5
const DMPAPER_STATEMENT = 6
const DMPAPER_EXECUTIVE = 7
const DMPAPER_A3 = 8
const DMPAPER_A4 = 9
const DMPAPER_A4SMALL = 10
const DMPAPER_A5 = 11
const DMPAPER_B4 = 12
const DMPAPER_B5 = 13
const DMPAPER_FOLIO = 14
const DMPAPER_QUARTO = 15
const DMPAPER_10X14 = 16
const DMPAPER_11X17 = 17
const DMPAPER_NOTE = 18
const DMPAPER_ENV_9 = 19
const DMPAPER_ENV_10 = 20
const DMPAPER_ENV_11 = 21
const DMPAPER_ENV_12 = 22
const DMPAPER_ENV_14 = 23
const DMPAPER_CSHEET = 24
const DMPAPER_DSHEET = 25
const DMPAPER_ESHEET = 26
const DMPAPER_ENV_DL = 27
const DMPAPER_ENV_C5 = 28
const DMPAPER_ENV_C3 = 29
const DMPAPER_ENV_C4 = 30
const DMPAPER_ENV_C6 = 31
const DMPAPER_ENV_C65 = 32
const DMPAPER_ENV_B4 = 33
const DMPAPER_ENV_B5 = 34
const DMPAPER_ENV_B6 = 35
const DMPAPER_ENV_ITALY = 36
const DMPAPER_ENV_MONARCH = 37
const DMPAPER_ENV_PERSONAL = 38
const DMPAPER_FANFOLD_US = 39
const DMPAPER_FANFOLD_STD_GERMAN = 40
const DMPAPER_FANFOLD_LGL_GERMAN = 41
const DMPAPER_ISO_B4 = 42
const DMPAPER_JAPANESE_POSTCARD = 43
const DMPAPER_9X11 = 44
const DMPAPER_10X11 = 45
const DMPAPER_15X11 = 46
const DMPAPER_ENV_INVITE = 47
const DMPAPER_RESERVED_48 = 48
const DMPAPER_RESERVED_49 = 49
const DMPAPER_LETTER_EXTRA = 50
const DMPAPER_LEGAL_EXTRA = 51
const DMPAPER_TABLOID_EXTRA = 52
const DMPAPER_A4_EXTRA = 53
const DMPAPER_LETTER_TRANSVERSE = 54
const DMPAPER_A4_TRANSVERSE = 55
const DMPAPER_LETTER_EXTRA_TRANSVERSE = 56
const DMPAPER_A_PLUS = 57
const DMPAPER_B_PLUS = 58
const DMPAPER_LETTER_PLUS = 59
const DMPAPER_A4_PLUS = 60
const DMPAPER_A5_TRANSVERSE = 61
const DMPAPER_B5_TRANSVERSE = 62
const DMPAPER_A3_EXTRA = 63
const DMPAPER_A5_EXTRA = 64
const DMPAPER_B5_EXTRA = 65
const DMPAPER_A2 = 66
const DMPAPER_A3_TRANSVERSE = 67
const DMPAPER_A3_EXTRA_TRANSVERSE = 68
const DMPAPER_DBL_JAPANESE_POSTCARD = 69
const DMPAPER_A6 = 70
const DMPAPER_JENV_KAKU2 = 71
const DMPAPER_JENV_KAKU3 = 72
const DMPAPER_JENV_CHOU3 = 73
const DMPAPER_JENV_CHOU4 = 74
const DMPAPER_LETTER_ROTATED = 75
const DMPAPER_A3_ROTATED = 76
const DMPAPER_A4_ROTATED = 77
const DMPAPER_A5_ROTATED = 78
const DMPAPER_B4_JIS_ROTATED = 79
const DMPAPER_B5_JIS_ROTATED = 80
const DMPAPER_JAPANESE_POSTCARD_ROTATED = 81
const DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED = 82
const DMPAPER_A6_ROTATED = 83
const DMPAPER_JENV_KAKU2_ROTATED = 84
const DMPAPER_JENV_KAKU3_ROTATED = 85
const DMPAPER_JENV_CHOU3_ROTATED = 86
const DMPAPER_JENV_CHOU4_ROTATED = 87
const DMPAPER_B6_JIS = 88
const DMPAPER_B6_JIS_ROTATED = 89
const DMPAPER_12X11 = 90
const DMPAPER_JENV_YOU4 = 91
const DMPAPER_JENV_YOU4_ROTATED = 92
const DMPAPER_P16K = 93
const DMPAPER_P32K = 94
const DMPAPER_P32KBIG = 95
const DMPAPER_PENV_1 = 96
const DMPAPER_PENV_2 = 97
const DMPAPER_PENV_3 = 98
const DMPAPER_PENV_4 = 99
const DMPAPER_PENV_5 = 100
const DMPAPER_PENV_6 = 101
const DMPAPER_PENV_7 = 102
const DMPAPER_PENV_8 = 103
const DMPAPER_PENV_9 = 104
const DMPAPER_PENV_10 = 105
const DMPAPER_P16K_ROTATED = 106
const DMPAPER_P32K_ROTATED = 107
const DMPAPER_P32KBIG_ROTATED = 108
const DMPAPER_PENV_1_ROTATED = 109
const DMPAPER_PENV_2_ROTATED = 110
const DMPAPER_PENV_3_ROTATED = 111
const DMPAPER_PENV_4_ROTATED = 112
const DMPAPER_PENV_5_ROTATED = 113
const DMPAPER_PENV_6_ROTATED = 114
const DMPAPER_PENV_7_ROTATED = 115
const DMPAPER_PENV_8_ROTATED = 116
const DMPAPER_PENV_9_ROTATED = 117
const DMPAPER_PENV_10_ROTATED = 118
const DMPAPER_LAST = DMPAPER_PENV_10_ROTATED
const DMPAPER_USER = 256
const DMBIN_UPPER = 1
const DMBIN_FIRST = DMBIN_UPPER
const DMBIN_ONLYONE = 1
const DMBIN_LOWER = 2
const DMBIN_MIDDLE = 3
const DMBIN_MANUAL = 4
const DMBIN_ENVELOPE = 5
const DMBIN_ENVMANUAL = 6
const DMBIN_AUTO = 7
const DMBIN_TRACTOR = 8
const DMBIN_SMALLFMT = 9
const DMBIN_LARGEFMT = 10
const DMBIN_LARGECAPACITY = 11
const DMBIN_CASSETTE = 14
const DMBIN_FORMSOURCE = 15
const DMBIN_LAST = DMBIN_FORMSOURCE
const DMBIN_USER = 256
const DMRES_DRAFT = -1
const DMRES_LOW = -2
const DMRES_MEDIUM = -3
const DMRES_HIGH = -4
const DMCOLOR_MONOCHROME = 1
const DMCOLOR_COLOR = 2
const DMDUP_SIMPLEX = 1
const DMDUP_VERTICAL = 2
const DMDUP_HORIZONTAL = 3
const DMTT_BITMAP = 1
const DMTT_DOWNLOAD = 2
const DMTT_SUBDEV = 3
const DMTT_DOWNLOAD_OUTLINE = 4
const DMCOLLATE_FALSE = 0
const DMCOLLATE_TRUE = 1
const DMDO_DEFAULT = 0
const DMDO_90 = 1
const DMDO_180 = 2
const DMDO_270 = 3
const DMDFO_DEFAULT = 0
const DMDFO_STRETCH = 1
const DMDFO_CENTER = 2
const DM_INTERLACED = &h00000002
const DMDISPLAYFLAGS_TEXTMODE = &h00000004
const DMNUP_SYSTEM = 1
const DMNUP_ONEUP = 2
const DMICMMETHOD_NONE = 1
const DMICMMETHOD_SYSTEM = 2
const DMICMMETHOD_DRIVER = 3
const DMICMMETHOD_DEVICE = 4
const DMICMMETHOD_USER = 256
const DMICM_SATURATE = 1
const DMICM_CONTRAST = 2
const DMICM_COLORIMETRIC = 3
const DMICM_ABS_COLORIMETRIC = 4
const DMICM_USER = 256
const DMMEDIA_STANDARD = 1
const DMMEDIA_TRANSPARENCY = 2
const DMMEDIA_GLOSSY = 3
const DMMEDIA_USER = 256
const DMDITHER_NONE = 1
const DMDITHER_COARSE = 2
const DMDITHER_FINE = 3
const DMDITHER_LINEART = 4
const DMDITHER_ERRORDIFFUSION = 5
const DMDITHER_RESERVED6 = 6
const DMDITHER_RESERVED7 = 7
const DMDITHER_RESERVED8 = 8
const DMDITHER_RESERVED9 = 9
const DMDITHER_GRAYSCALE = 10
const DMDITHER_USER = 256

type _DISPLAY_DEVICEA
 cb as DWORD
 DeviceName as zstring * 32
 DeviceString as zstring * 128
 StateFlags as DWORD
 DeviceID as zstring * 128
 DeviceKey as zstring * 128
end type

type DISPLAY_DEVICEA as _DISPLAY_DEVICEA
type PDISPLAY_DEVICEA as _DISPLAY_DEVICEA ptr
type LPDISPLAY_DEVICEA as _DISPLAY_DEVICEA ptr

type _DISPLAY_DEVICEW
 cb as DWORD
 DeviceName as wstring * 32
 DeviceString as wstring * 128
 StateFlags as DWORD
 DeviceID as wstring * 128
 DeviceKey as wstring * 128
end type

type DISPLAY_DEVICEW as _DISPLAY_DEVICEW
type PDISPLAY_DEVICEW as _DISPLAY_DEVICEW ptr
type LPDISPLAY_DEVICEW as _DISPLAY_DEVICEW ptr

 type DISPLAY_DEVICE as DISPLAY_DEVICEA
 type PDISPLAY_DEVICE as PDISPLAY_DEVICEA
 type LPDISPLAY_DEVICE as LPDISPLAY_DEVICEA

const DISPLAY_DEVICE_ATTACHED_TO_DESKTOP = &h00000001
const DISPLAY_DEVICE_MULTI_DRIVER = &h00000002
const DISPLAY_DEVICE_PRIMARY_DEVICE = &h00000004
const DISPLAY_DEVICE_MIRRORING_DRIVER = &h00000008
const DISPLAY_DEVICE_VGA_COMPATIBLE = &h00000010
const DISPLAY_DEVICE_REMOVABLE = &h00000020


const DISPLAY_DEVICE_TS_COMPATIBLE = &h00200000


const DISPLAY_DEVICE_MODESPRUNED = &h08000000
const DISPLAY_DEVICE_REMOTE = &h04000000
const DISPLAY_DEVICE_DISCONNECT = &h02000000
const DISPLAY_DEVICE_ACTIVE = &h00000001
const DISPLAY_DEVICE_ATTACHED = &h00000002


const RDH_RECTANGLES = 1

type _RGNDATAHEADER
 dwSize as DWORD
 iType as DWORD
 nCount as DWORD
 nRgnSize as DWORD
 rcBound as RECT
end type

type RGNDATAHEADER as _RGNDATAHEADER
type PRGNDATAHEADER as _RGNDATAHEADER ptr

type _RGNDATA
 rdh as RGNDATAHEADER
 Buffer as zstring * 1
end type

type RGNDATA as _RGNDATA
type PRGNDATA as _RGNDATA ptr
type NPRGNDATA as _RGNDATA ptr
type LPRGNDATA as _RGNDATA ptr
const SYSRGN = 4

type _ABC
 abcA as long
 abcB as UINT
 abcC as long
end type

type ABC as _ABC
type PABC as _ABC ptr
type NPABC as _ABC ptr
type LPABC as _ABC ptr

type _ABCFLOAT
 abcfA as FLOAT
 abcfB as FLOAT
 abcfC as FLOAT
end type

type ABCFLOAT as _ABCFLOAT
type PABCFLOAT as _ABCFLOAT ptr
type NPABCFLOAT as _ABCFLOAT ptr
type LPABCFLOAT as _ABCFLOAT ptr

type _OUTLINETEXTMETRICA
 otmSize as UINT
 otmTextMetrics as TEXTMETRICA
 otmFiller as UBYTE
 otmPanoseNumber as PANOSE
 otmfsSelection as UINT
 otmfsType as UINT
 otmsCharSlopeRise as long
 otmsCharSlopeRun as long
 otmItalicAngle as long
 otmEMSquare as UINT
 otmAscent as long
 otmDescent as long
 otmLineGap as UINT
 otmsCapEmHeight as UINT
 otmsXHeight as UINT
 otmrcFontBox as RECT
 otmMacAscent as long
 otmMacDescent as long
 otmMacLineGap as UINT
 otmusMinimumPPEM as UINT
 otmptSubscriptSize as POINT
 otmptSubscriptOffset as POINT
 otmptSuperscriptSize as POINT
 otmptSuperscriptOffset as POINT
 otmsStrikeoutSize as UINT
 otmsStrikeoutPosition as long
 otmsUnderscoreSize as long
 otmsUnderscorePosition as long
 otmpFamilyName as PSTR
 otmpFaceName as PSTR
 otmpStyleName as PSTR
 otmpFullName as PSTR
end type

type OUTLINETEXTMETRICA as _OUTLINETEXTMETRICA
type POUTLINETEXTMETRICA as _OUTLINETEXTMETRICA ptr
type NPOUTLINETEXTMETRICA as _OUTLINETEXTMETRICA ptr
type LPOUTLINETEXTMETRICA as _OUTLINETEXTMETRICA ptr

type _OUTLINETEXTMETRICW
 otmSize as UINT
 otmTextMetrics as TEXTMETRICW
 otmFiller as UBYTE
 otmPanoseNumber as PANOSE
 otmfsSelection as UINT
 otmfsType as UINT
 otmsCharSlopeRise as long
 otmsCharSlopeRun as long
 otmItalicAngle as long
 otmEMSquare as UINT
 otmAscent as long
 otmDescent as long
 otmLineGap as UINT
 otmsCapEmHeight as UINT
 otmsXHeight as UINT
 otmrcFontBox as RECT
 otmMacAscent as long
 otmMacDescent as long
 otmMacLineGap as UINT
 otmusMinimumPPEM as UINT
 otmptSubscriptSize as POINT
 otmptSubscriptOffset as POINT
 otmptSuperscriptSize as POINT
 otmptSuperscriptOffset as POINT
 otmsStrikeoutSize as UINT
 otmsStrikeoutPosition as long
 otmsUnderscoreSize as long
 otmsUnderscorePosition as long
 otmpFamilyName as PSTR
 otmpFaceName as PSTR
 otmpStyleName as PSTR
 otmpFullName as PSTR
end type

type OUTLINETEXTMETRICW as _OUTLINETEXTMETRICW
type POUTLINETEXTMETRICW as _OUTLINETEXTMETRICW ptr
type NPOUTLINETEXTMETRICW as _OUTLINETEXTMETRICW ptr
type LPOUTLINETEXTMETRICW as _OUTLINETEXTMETRICW ptr

 type OUTLINETEXTMETRIC as OUTLINETEXTMETRICA
 type POUTLINETEXTMETRIC as POUTLINETEXTMETRICA
 type NPOUTLINETEXTMETRIC as NPOUTLINETEXTMETRICA
 type LPOUTLINETEXTMETRIC as LPOUTLINETEXTMETRICA

type tagPOLYTEXTA
 x as long
 y as long
 n as UINT
 lpstr as LPCSTR
 uiFlags as UINT
 rcl as RECT
 pdx as long ptr
end type

type POLYTEXTA as tagPOLYTEXTA
type PPOLYTEXTA as tagPOLYTEXTA ptr
type NPPOLYTEXTA as tagPOLYTEXTA ptr
type LPPOLYTEXTA as tagPOLYTEXTA ptr

type tagPOLYTEXTW
 x as long
 y as long
 n as UINT
 lpstr as LPCWSTR
 uiFlags as UINT
 rcl as RECT
 pdx as long ptr
end type

type POLYTEXTW as tagPOLYTEXTW
type PPOLYTEXTW as tagPOLYTEXTW ptr
type NPPOLYTEXTW as tagPOLYTEXTW ptr
type LPPOLYTEXTW as tagPOLYTEXTW ptr

 type POLYTEXT as POLYTEXTA
 type PPOLYTEXT as PPOLYTEXTA
 type NPPOLYTEXT as NPPOLYTEXTA
 type LPPOLYTEXT as LPPOLYTEXTA

type _FIXED
 fract as WORD
 value as short
end type

type FIXED as _FIXED

type _MAT2
 eM11 as FIXED
 eM12 as FIXED
 eM21 as FIXED
 eM22 as FIXED
end type

type MAT2 as _MAT2
type LPMAT2 as _MAT2 ptr

type _GLYPHMETRICS
 gmBlackBoxX as UINT
 gmBlackBoxY as UINT
 gmptGlyphOrigin as POINT
 gmCellIncX as short
 gmCellIncY as short
end type

type GLYPHMETRICS as _GLYPHMETRICS
type LPGLYPHMETRICS as _GLYPHMETRICS ptr
const GGO_METRICS = 0
const GGO_BITMAP = 1
const GGO_NATIVE = 2
const GGO_BEZIER = 3
const GGO_GRAY2_BITMAP = 4
const GGO_GRAY4_BITMAP = 5
const GGO_GRAY8_BITMAP = 6
const GGO_GLYPH_INDEX = &h0080
const GGO_UNHINTED = &h0100
const TT_POLYGON_TYPE = 24
const TT_PRIM_LINE = 1
const TT_PRIM_QSPLINE = 2
const TT_PRIM_CSPLINE = 3

type tagPOINTFX
 x as FIXED
 y as FIXED
end type

type POINTFX as tagPOINTFX
type LPPOINTFX as tagPOINTFX ptr

type tagTTPOLYCURVE
 wType as WORD
 cpfx as WORD
 apfx(0 to 0) as POINTFX
end type

type TTPOLYCURVE as tagTTPOLYCURVE
type LPTTPOLYCURVE as tagTTPOLYCURVE ptr

type tagTTPOLYGONHEADER
 cb as DWORD
 dwType as DWORD
 pfxStart as POINTFX
end type

type TTPOLYGONHEADER as tagTTPOLYGONHEADER
type LPTTPOLYGONHEADER as tagTTPOLYGONHEADER ptr
const GCP_DBCS = &h0001
const GCP_REORDER = &h0002
const GCP_USEKERNING = &h0008
const GCP_GLYPHSHAPE = &h0010
const GCP_LIGATE = &h0020
const GCP_DIACRITIC = &h0100
const GCP_KASHIDA = &h0400
const GCP_ERROR = &h8000
const FLI_MASK = &h103B
const GCP_JUSTIFY = &h00010000
const FLI_GLYPHS = &h00040000
const GCP_CLASSIN = &h00080000
const GCP_MAXEXTENT = &h00100000
const GCP_JUSTIFYIN = &h00200000
const GCP_DISPLAYZWG = &h00400000
const GCP_SYMSWAPOFF = &h00800000
const GCP_NUMERICOVERRIDE = &h01000000
const GCP_NEUTRALOVERRIDE = &h02000000
const GCP_NUMERICSLATIN = &h04000000
const GCP_NUMERICSLOCAL = &h08000000
const GCPCLASS_LATIN = 1
const GCPCLASS_HEBREW = 2
const GCPCLASS_ARABIC = 2
const GCPCLASS_NEUTRAL = 3
const GCPCLASS_LOCALNUMBER = 4
const GCPCLASS_LATINNUMBER = 5
const GCPCLASS_LATINNUMERICTERMINATOR = 6
const GCPCLASS_LATINNUMERICSEPARATOR = 7
const GCPCLASS_NUMERICSEPARATOR = 8
const GCPCLASS_PREBOUNDLTR = &h80
const GCPCLASS_PREBOUNDRTL = &h40
const GCPCLASS_POSTBOUNDLTR = &h20
const GCPCLASS_POSTBOUNDRTL = &h10
const GCPGLYPH_LINKBEFORE = &h8000
const GCPGLYPH_LINKAFTER = &h4000

type tagGCP_RESULTSA
 lStructSize as DWORD
 lpOutString as LPSTR
 lpOrder as UINT ptr
 lpDx as long ptr
 lpCaretPos as long ptr
 lpClass as LPSTR
 lpGlyphs as LPWSTR
 nGlyphs as UINT
 nMaxFit as long
end type

type GCP_RESULTSA as tagGCP_RESULTSA
type LPGCP_RESULTSA as tagGCP_RESULTSA ptr

type tagGCP_RESULTSW
 lStructSize as DWORD
 lpOutString as LPWSTR
 lpOrder as UINT ptr
 lpDx as long ptr
 lpCaretPos as long ptr
 lpClass as LPSTR
 lpGlyphs as LPWSTR
 nGlyphs as UINT
 nMaxFit as long
end type

type GCP_RESULTSW as tagGCP_RESULTSW
type LPGCP_RESULTSW as tagGCP_RESULTSW ptr

 type GCP_RESULTS as GCP_RESULTSA
 type LPGCP_RESULTS as LPGCP_RESULTSA

type _RASTERIZER_STATUS
 nSize as short
 wFlags as short
 nLanguageID as short
end type

type RASTERIZER_STATUS as _RASTERIZER_STATUS
type LPRASTERIZER_STATUS as _RASTERIZER_STATUS ptr
const TT_AVAILABLE = &h0001
const TT_ENABLED = &h0002

type tagPIXELFORMATDESCRIPTOR
 nSize as WORD
 nVersion as WORD
 dwFlags as DWORD
 iPixelType as UBYTE
 cColorBits as UBYTE
 cRedBits as UBYTE
 cRedShift as UBYTE
 cGreenBits as UBYTE
 cGreenShift as UBYTE
 cBlueBits as UBYTE
 cBlueShift as UBYTE
 cAlphaBits as UBYTE
 cAlphaShift as UBYTE
 cAccumBits as UBYTE
 cAccumRedBits as UBYTE
 cAccumGreenBits as UBYTE
 cAccumBlueBits as UBYTE
 cAccumAlphaBits as UBYTE
 cDepthBits as UBYTE
 cStencilBits as UBYTE
 cAuxBuffers as UBYTE
 iLayerType as UBYTE
 bReserved as UBYTE
 dwLayerMask as DWORD
 dwVisibleMask as DWORD
 dwDamageMask as DWORD
end type

type PIXELFORMATDESCRIPTOR as tagPIXELFORMATDESCRIPTOR
type PPIXELFORMATDESCRIPTOR as tagPIXELFORMATDESCRIPTOR ptr
type LPPIXELFORMATDESCRIPTOR as tagPIXELFORMATDESCRIPTOR ptr

const PFD_TYPE_RGBA = 0
const PFD_TYPE_COLORINDEX = 1
const PFD_MAIN_PLANE = 0
const PFD_OVERLAY_PLANE = 1
const PFD_UNDERLAY_PLANE = -1
const PFD_DOUBLEBUFFER = &h00000001
const PFD_STEREO = &h00000002
const PFD_DRAW_TO_WINDOW = &h00000004
const PFD_DRAW_TO_BITMAP = &h00000008
const PFD_SUPPORT_GDI = &h00000010
const PFD_SUPPORT_OPENGL = &h00000020
const PFD_GENERIC_FORMAT = &h00000040
const PFD_NEED_PALETTE = &h00000080
const PFD_NEED_SYSTEM_PALETTE = &h00000100
const PFD_SWAP_EXCHANGE = &h00000200
const PFD_SWAP_COPY = &h00000400
const PFD_SWAP_LAYER_BUFFERS = &h00000800
const PFD_GENERIC_ACCELERATED = &h00001000
const PFD_SUPPORT_DIRECTDRAW = &h00002000
const PFD_DIRECT3D_ACCELERATED = &h00004000
const PFD_SUPPORT_COMPOSITION = &h00008000
const PFD_DEPTH_DONTCARE = &h20000000
const PFD_DOUBLEBUFFER_DONTCARE = &h40000000
const PFD_STEREO_DONTCARE = &h80000000
type OLDFONTENUMPROCA as function(byval as const LOGFONTA ptr, byval as const TEXTMETRICA ptr, byval as DWORD, byval as LPARAM) as long
type OLDFONTENUMPROCW as function(byval as const LOGFONTW ptr, byval as const TEXTMETRICW ptr, byval as DWORD, byval as LPARAM) as long

 type OLDFONTENUMPROC as OLDFONTENUMPROCA

type FONTENUMPROCA as OLDFONTENUMPROCA
type FONTENUMPROCW as OLDFONTENUMPROCW

 type FONTENUMPROC as FONTENUMPROCA

type GOBJENUMPROC as function(byval as LPVOID, byval as LPARAM) as long
type LINEDDAPROC as sub(byval as long, byval as long, byval as LPARAM)
declare function AddFontResourceA(byval as LPCSTR) as long

 declare function AddFontResource alias "AddFontResourceA"(byval as LPCSTR) as long

declare function AddFontResourceW(byval as LPCWSTR) as long


declare function AnimatePalette(byval hPal as HPALETTE, byval iStartIndex as UINT, byval cEntries as UINT, byval ppe as const PALETTEENTRY ptr) as WINBOOL
declare function Arc(byval hdc as HDC, byval x1 as long, byval y1 as long, byval x2 as long, byval y2 as long, byval x3 as long, byval y3 as long, byval x4 as long, byval y4 as long) as WINBOOL
declare function BitBlt(byval hdc as HDC, byval x as long, byval y as long, byval cx as long, byval cy as long, byval hdcSrc as HDC, byval x1 as long, byval y1 as long, byval rop as DWORD) as WINBOOL
declare function CancelDC(byval hdc as HDC) as WINBOOL
declare function Chord(byval hdc as HDC, byval x1 as long, byval y1 as long, byval x2 as long, byval y2 as long, byval x3 as long, byval y3 as long, byval x4 as long, byval y4 as long) as WINBOOL
declare function ChoosePixelFormat(byval hdc as HDC, byval ppfd as const PIXELFORMATDESCRIPTOR ptr) as long
declare function CloseMetaFile(byval hdc as HDC) as HMETAFILE
declare function CombineRgn(byval hrgnDst as HRGN, byval hrgnSrc1 as HRGN, byval hrgnSrc2 as HRGN, byval iMode as long) as long
declare function CopyMetaFileA(byval as HMETAFILE, byval as LPCSTR) as HMETAFILE

 declare function CopyMetaFile alias "CopyMetaFileA"(byval as HMETAFILE, byval as LPCSTR) as HMETAFILE

declare function CopyMetaFileW(byval as HMETAFILE, byval as LPCWSTR) as HMETAFILE


declare function CreateBitmap(byval nWidth as long, byval nHeight as long, byval nPlanes as UINT, byval nBitCount as UINT, byval lpBits as const any ptr) as HBITMAP
declare function CreateBitmapIndirect(byval pbm as const BITMAP ptr) as HBITMAP
declare function CreateBrushIndirect(byval plbrush as const LOGBRUSH ptr) as HBRUSH
declare function CreateCompatibleBitmap(byval hdc as HDC, byval cx as long, byval cy as long) as HBITMAP
declare function CreateDiscardableBitmap(byval hdc as HDC, byval cx as long, byval cy as long) as HBITMAP
declare function CreateCompatibleDC(byval hdc as HDC) as HDC
declare function CreateDCA(byval pwszDriver as LPCSTR, byval pwszDevice as LPCSTR, byval pszPort as LPCSTR, byval pdm as const DEVMODEA ptr) as HDC

 declare function CreateDC alias "CreateDCA"(byval pwszDriver as LPCSTR, byval pwszDevice as LPCSTR, byval pszPort as LPCSTR, byval pdm as const DEVMODEA ptr) as HDC

declare function CreateDCW(byval pwszDriver as LPCWSTR, byval pwszDevice as LPCWSTR, byval pszPort as LPCWSTR, byval pdm as const DEVMODEW ptr) as HDC


declare function CreateDIBitmap(byval hdc as HDC, byval pbmih as const BITMAPINFOHEADER ptr, byval flInit as DWORD, byval pjBits as const any ptr, byval pbmi as const BITMAPINFO ptr, byval iUsage as UINT) as HBITMAP
declare function CreateDIBPatternBrush(byval h as HGLOBAL, byval iUsage as UINT) as HBRUSH
declare function CreateDIBPatternBrushPt(byval lpPackedDIB as const any ptr, byval iUsage as UINT) as HBRUSH
declare function CreateEllipticRgn(byval x1 as long, byval y1 as long, byval x2 as long, byval y2 as long) as HRGN
declare function CreateEllipticRgnIndirect(byval lprect as const RECT ptr) as HRGN
declare function CreateFontIndirectA(byval lplf as const LOGFONTA ptr) as HFONT

 declare function CreateFontIndirect alias "CreateFontIndirectA"(byval lplf as const LOGFONTA ptr) as HFONT

declare function CreateFontIndirectW(byval lplf as const LOGFONTW ptr) as HFONT


declare function CreateFontA(byval cHeight as long, byval cWidth as long, byval cEscapement as long, byval cOrientation as long, byval cWeight as long, byval bItalic as DWORD, byval bUnderline as DWORD, byval bStrikeOut as DWORD, byval iCharSet as DWORD, byval iOutPrecision as DWORD, byval iClipPrecision as DWORD, byval iQuality as DWORD, byval iPitchAndFamily as DWORD, byval pszFaceName as LPCSTR) as HFONT

 declare function CreateFont alias "CreateFontA"(byval cHeight as long, byval cWidth as long, byval cEscapement as long, byval cOrientation as long, byval cWeight as long, byval bItalic as DWORD, byval bUnderline as DWORD, byval bStrikeOut as DWORD, byval iCharSet as DWORD, byval iOutPrecision as DWORD, byval iClipPrecision as DWORD, byval iQuality as DWORD, byval iPitchAndFamily as DWORD, byval pszFaceName as LPCSTR) as HFONT

declare function CreateFontW(byval cHeight as long, byval cWidth as long, byval cEscapement as long, byval cOrientation as long, byval cWeight as long, byval bItalic as DWORD, byval bUnderline as DWORD, byval bStrikeOut as DWORD, byval iCharSet as DWORD, byval iOutPrecision as DWORD, byval iClipPrecision as DWORD, byval iQuality as DWORD, byval iPitchAndFamily as DWORD, byval pszFaceName as LPCWSTR) as HFONT


declare function CreateHatchBrush(byval iHatch as long, byval color as COLORREF) as HBRUSH
declare function CreateICA(byval pszDriver as LPCSTR, byval pszDevice as LPCSTR, byval pszPort as LPCSTR, byval pdm as const DEVMODEA ptr) as HDC

 declare function CreateIC alias "CreateICA"(byval pszDriver as LPCSTR, byval pszDevice as LPCSTR, byval pszPort as LPCSTR, byval pdm as const DEVMODEA ptr) as HDC

declare function CreateICW(byval pszDriver as LPCWSTR, byval pszDevice as LPCWSTR, byval pszPort as LPCWSTR, byval pdm as const DEVMODEW ptr) as HDC


declare function CreateMetaFileA(byval pszFile as LPCSTR) as HDC

 declare function CreateMetaFile alias "CreateMetaFileA"(byval pszFile as LPCSTR) as HDC

declare function CreateMetaFileW(byval pszFile as LPCWSTR) as HDC


declare function CreatePalette(byval plpal as const LOGPALETTE ptr) as HPALETTE
declare function CreatePen(byval iStyle as long, byval cWidth as long, byval color as COLORREF) as HPEN
declare function CreatePenIndirect(byval plpen as const LOGPEN ptr) as HPEN
declare function CreatePolyPolygonRgn(byval pptl as const POINT ptr, byval pc as const INT_ ptr, byval cPoly as long, byval iMode as long) as HRGN
declare function CreatePatternBrush(byval hbm as HBITMAP) as HBRUSH
declare function CreateRectRgn(byval x1 as long, byval y1 as long, byval x2 as long, byval y2 as long) as HRGN
declare function CreateRectRgnIndirect(byval lprect as const RECT ptr) as HRGN
declare function CreateRoundRectRgn(byval x1 as long, byval y1 as long, byval x2 as long, byval y2 as long, byval w as long, byval h as long) as HRGN
declare function CreateScalableFontResourceA(byval fdwHidden as DWORD, byval lpszFont as LPCSTR, byval lpszFile as LPCSTR, byval lpszPath as LPCSTR) as WINBOOL

 declare function CreateScalableFontResource alias "CreateScalableFontResourceA"(byval fdwHidden as DWORD, byval lpszFont as LPCSTR, byval lpszFile as LPCSTR, byval lpszPath as LPCSTR) as WINBOOL

declare function CreateScalableFontResourceW(byval fdwHidden as DWORD, byval lpszFont as LPCWSTR, byval lpszFile as LPCWSTR, byval lpszPath as LPCWSTR) as WINBOOL


declare function CreateSolidBrush(byval color as COLORREF) as HBRUSH
declare function DeleteDC(byval hdc as HDC) as WINBOOL
declare function DeleteMetaFile(byval hmf as HMETAFILE) as WINBOOL
declare function DeleteObject(byval ho as HGDIOBJ) as WINBOOL
declare function DescribePixelFormat(byval hdc as HDC, byval iPixelFormat as long, byval nBytes as UINT, byval ppfd as LPPIXELFORMATDESCRIPTOR) as long
type LPFNDEVMODE as function(byval as HWND, byval as HMODULE, byval as LPDEVMODE, byval as LPSTR, byval as LPSTR, byval as LPDEVMODE, byval as LPSTR, byval as UINT) as UINT
type LPFNDEVCAPS as function(byval as LPSTR, byval as LPSTR, byval as UINT, byval as LPSTR, byval as LPDEVMODE) as DWORD

const DM_UPDATE = 1
const DM_COPY = 2
const DM_PROMPT = 4
const DM_MODIFY = 8
const DC_FIELDS = 1
const DC_PAPERS = 2
const DC_PAPERSIZE = 3
const DC_MINEXTENT = 4
const DC_MAXEXTENT = 5
const DC_BINS = 6
const DC_DUPLEX = 7
const DC_SIZE = 8
const DC_EXTRA = 9
const DC_VERSION = 10
const DC_DRIVER = 11
const DC_BINNAMES = 12
const DC_ENUMRESOLUTIONS = 13
const DC_FILEDEPENDENCIES = 14
const DC_TRUETYPE = 15
const DC_PAPERNAMES = 16
const DC_ORIENTATION = 17
const DC_COPIES = 18
const DC_BINADJUST = 19
const DC_EMF_COMPLIANT = 20
const DC_DATATYPE_PRODUCED = 21
const DC_COLLATE = 22
const DC_MANUFACTURER = 23
const DC_MODEL = 24
const DC_PERSONALITY = 25
const DC_PRINTRATE = 26
const DC_PRINTRATEUNIT = 27
const PRINTRATEUNIT_PPM = 1
const PRINTRATEUNIT_CPS = 2
const PRINTRATEUNIT_LPM = 3
const PRINTRATEUNIT_IPM = 4
const DC_PRINTERMEM = 28
const DC_MEDIAREADY = 29
const DC_STAPLE = 30
const DC_PRINTRATEPPM = 31
const DC_COLORDEVICE = 32
const DC_NUP = 33
const DC_MEDIATYPENAMES = 34
const DC_MEDIATYPES = 35
const DCTT_BITMAP = &h0000001
const DCTT_DOWNLOAD = &h0000002
const DCTT_SUBDEV = &h0000004
const DCTT_DOWNLOAD_OUTLINE = &h0000008
const DCBA_FACEUPNONE = &h00000
const DCBA_FACEUPCENTER = &h0001
const DCBA_FACEUPLEFT = &h0002
const DCBA_FACEUPRIGHT = &h0003
const DCBA_FACEDOWNNONE = &h0100
const DCBA_FACEDOWNCENTER = &h0101
const DCBA_FACEDOWNLEFT = &h0102
const DCBA_FACEDOWNRIGHT = &h0103
declare function DeviceCapabilitiesA(byval pDevice as LPCSTR, byval pPort as LPCSTR, byval fwCapability as WORD, byval pOutput as LPSTR, byval pDevMode as const DEVMODEA ptr) as long

 declare function DeviceCapabilities alias "DeviceCapabilitiesA"(byval pDevice as LPCSTR, byval pPort as LPCSTR, byval fwCapability as WORD, byval pOutput as LPSTR, byval pDevMode as const DEVMODEA ptr) as long

declare function DeviceCapabilitiesW(byval pDevice as LPCWSTR, byval pPort as LPCWSTR, byval fwCapability as WORD, byval pOutput as LPWSTR, byval pDevMode as const DEVMODEW ptr) as long


declare function DrawEscape(byval hdc as HDC, byval iEscape as long, byval cjIn as long, byval lpIn as LPCSTR) as long
declare function Ellipse(byval hdc as HDC, byval left as long, byval top as long, byval right as long, byval bottom as long) as WINBOOL
declare function EnumFontFamiliesExA(byval hdc as HDC, byval lpLogfont as LPLOGFONTA, byval lpProc as FONTENUMPROCA, byval lParam as LPARAM, byval dwFlags as DWORD) as long

 declare function EnumFontFamiliesEx alias "EnumFontFamiliesExA"(byval hdc as HDC, byval lpLogfont as LPLOGFONTA, byval lpProc as FONTENUMPROCA, byval lParam as LPARAM, byval dwFlags as DWORD) as long

declare function EnumFontFamiliesExW(byval hdc as HDC, byval lpLogfont as LPLOGFONTW, byval lpProc as FONTENUMPROCW, byval lParam as LPARAM, byval dwFlags as DWORD) as long


declare function EnumFontFamiliesA(byval hdc as HDC, byval lpLogfont as LPCSTR, byval lpProc as FONTENUMPROCA, byval lParam as LPARAM) as long

 declare function EnumFontFamilies alias "EnumFontFamiliesA"(byval hdc as HDC, byval lpLogfont as LPCSTR, byval lpProc as FONTENUMPROCA, byval lParam as LPARAM) as long

declare function EnumFontFamiliesW(byval hdc as HDC, byval lpLogfont as LPCWSTR, byval lpProc as FONTENUMPROCW, byval lParam as LPARAM) as long


declare function EnumFontsA(byval hdc as HDC, byval lpLogfont as LPCSTR, byval lpProc as FONTENUMPROCA, byval lParam as LPARAM) as long

 declare function EnumFonts alias "EnumFontsA"(byval hdc as HDC, byval lpLogfont as LPCSTR, byval lpProc as FONTENUMPROCA, byval lParam as LPARAM) as long

declare function EnumFontsW(byval hdc as HDC, byval lpLogfont as LPCWSTR, byval lpProc as FONTENUMPROCW, byval lParam as LPARAM) as long


declare function EnumObjects(byval hdc as HDC, byval nType as long, byval lpFunc as GOBJENUMPROC, byval lParam as LPARAM) as long
declare function EqualRgn(byval hrgn1 as HRGN, byval hrgn2 as HRGN) as WINBOOL
declare function Escape(byval hdc as HDC, byval iEscape as long, byval cjIn as long, byval pvIn as LPCSTR, byval pvOut as LPVOID) as long
declare function ExtEscape(byval hdc as HDC, byval iEscape as long, byval cjInput as long, byval lpInData as LPCSTR, byval cjOutput as long, byval lpOutData as LPSTR) as long
declare function ExcludeClipRect(byval hdc as HDC, byval left as long, byval top as long, byval right as long, byval bottom as long) as long
declare function ExtCreateRegion(byval lpx as const XFORM ptr, byval nCount as DWORD, byval lpData as const RGNDATA ptr) as HRGN
declare function ExtFloodFill(byval hdc as HDC, byval x as long, byval y as long, byval color as COLORREF, byval type as UINT) as WINBOOL
declare function FillRgn(byval hdc as HDC, byval hrgn as HRGN, byval hbr as HBRUSH) as WINBOOL
declare function FloodFill(byval hdc as HDC, byval x as long, byval y as long, byval color as COLORREF) as WINBOOL
declare function FrameRgn(byval hdc as HDC, byval hrgn as HRGN, byval hbr as HBRUSH, byval w as long, byval h as long) as WINBOOL
declare function GetROP2(byval hdc as HDC) as long
declare function GetAspectRatioFilterEx(byval hdc as HDC, byval lpsize as LPSIZE) as WINBOOL
declare function GetBkColor(byval hdc as HDC) as COLORREF
declare function GetDCBrushColor(byval hdc as HDC) as COLORREF
declare function GetDCPenColor(byval hdc as HDC) as COLORREF
declare function GetBkMode(byval hdc as HDC) as long
declare function GetBitmapBits(byval hbit as HBITMAP, byval cb as LONG, byval lpvBits as LPVOID) as LONG
declare function GetBitmapDimensionEx(byval hbit as HBITMAP, byval lpsize as LPSIZE) as WINBOOL
declare function GetBoundsRect(byval hdc as HDC, byval lprect as LPRECT, byval flags as UINT) as UINT
declare function GetBrushOrgEx(byval hdc as HDC, byval lppt as LPPOINT) as WINBOOL
declare function GetCharWidthA(byval hdc as HDC, byval iFirst as UINT, byval iLast as UINT, byval lpBuffer as LPINT) as WINBOOL

 declare function GetCharWidth alias "GetCharWidthA"(byval hdc as HDC, byval iFirst as UINT, byval iLast as UINT, byval lpBuffer as LPINT) as WINBOOL

declare function GetCharWidthW(byval hdc as HDC, byval iFirst as UINT, byval iLast as UINT, byval lpBuffer as LPINT) as WINBOOL


declare function GetCharWidth32A(byval hdc as HDC, byval iFirst as UINT, byval iLast as UINT, byval lpBuffer as LPINT) as WINBOOL

 declare function GetCharWidth32 alias "GetCharWidth32A"(byval hdc as HDC, byval iFirst as UINT, byval iLast as UINT, byval lpBuffer as LPINT) as WINBOOL

declare function GetCharWidth32W(byval hdc as HDC, byval iFirst as UINT, byval iLast as UINT, byval lpBuffer as LPINT) as WINBOOL


declare function GetCharWidthFloatA(byval hdc as HDC, byval iFirst as UINT, byval iLast as UINT, byval lpBuffer as PFLOAT) as WINBOOL

 declare function GetCharWidthFloat alias "GetCharWidthFloatA"(byval hdc as HDC, byval iFirst as UINT, byval iLast as UINT, byval lpBuffer as PFLOAT) as WINBOOL

declare function GetCharWidthFloatW(byval hdc as HDC, byval iFirst as UINT, byval iLast as UINT, byval lpBuffer as PFLOAT) as WINBOOL


declare function GetCharABCWidthsA(byval hdc as HDC, byval wFirst as UINT, byval wLast as UINT, byval lpABC as LPABC) as WINBOOL

 declare function GetCharABCWidths alias "GetCharABCWidthsA"(byval hdc as HDC, byval wFirst as UINT, byval wLast as UINT, byval lpABC as LPABC) as WINBOOL

declare function GetCharABCWidthsW(byval hdc as HDC, byval wFirst as UINT, byval wLast as UINT, byval lpABC as LPABC) as WINBOOL


declare function GetCharABCWidthsFloatA(byval hdc as HDC, byval iFirst as UINT, byval iLast as UINT, byval lpABC as LPABCFLOAT) as WINBOOL

 declare function GetCharABCWidthsFloat alias "GetCharABCWidthsFloatA"(byval hdc as HDC, byval iFirst as UINT, byval iLast as UINT, byval lpABC as LPABCFLOAT) as WINBOOL

declare function GetCharABCWidthsFloatW(byval hdc as HDC, byval iFirst as UINT, byval iLast as UINT, byval lpABC as LPABCFLOAT) as WINBOOL


declare function GetClipBox(byval hdc as HDC, byval lprect as LPRECT) as long
declare function GetClipRgn(byval hdc as HDC, byval hrgn as HRGN) as long
declare function GetMetaRgn(byval hdc as HDC, byval hrgn as HRGN) as long
declare function GetCurrentObject(byval hdc as HDC, byval type as UINT) as HGDIOBJ
declare function GetCurrentPositionEx(byval hdc as HDC, byval lppt as LPPOINT) as WINBOOL
declare function GetDeviceCaps(byval hdc as HDC, byval index as long) as long
declare function GetDIBits(byval hdc as HDC, byval hbm as HBITMAP, byval start as UINT, byval cLines as UINT, byval lpvBits as LPVOID, byval lpbmi as LPBITMAPINFO, byval usage as UINT) as long
declare function GetFontData(byval hdc as HDC, byval dwTable as DWORD, byval dwOffset as DWORD, byval pvBuffer as PVOID, byval cjBuffer as DWORD) as DWORD
declare function GetGlyphOutlineA(byval hdc as HDC, byval uChar as UINT, byval fuFormat as UINT, byval lpgm as LPGLYPHMETRICS, byval cjBuffer as DWORD, byval pvBuffer as LPVOID, byval lpmat2 as const MAT2 ptr) as DWORD

 declare function GetGlyphOutline alias "GetGlyphOutlineA"(byval hdc as HDC, byval uChar as UINT, byval fuFormat as UINT, byval lpgm as LPGLYPHMETRICS, byval cjBuffer as DWORD, byval pvBuffer as LPVOID, byval lpmat2 as const MAT2 ptr) as DWORD

declare function GetGlyphOutlineW(byval hdc as HDC, byval uChar as UINT, byval fuFormat as UINT, byval lpgm as LPGLYPHMETRICS, byval cjBuffer as DWORD, byval pvBuffer as LPVOID, byval lpmat2 as const MAT2 ptr) as DWORD


declare function GetGraphicsMode(byval hdc as HDC) as long
declare function GetMapMode(byval hdc as HDC) as long
declare function GetMetaFileBitsEx(byval hMF as HMETAFILE, byval cbBuffer as UINT, byval lpData as LPVOID) as UINT
declare function GetMetaFileA(byval lpName as LPCSTR) as HMETAFILE

 declare function GetMetaFile alias "GetMetaFileA"(byval lpName as LPCSTR) as HMETAFILE

declare function GetMetaFileW(byval lpName as LPCWSTR) as HMETAFILE


declare function GetNearestColor(byval hdc as HDC, byval color as COLORREF) as COLORREF
declare function GetNearestPaletteIndex(byval h as HPALETTE, byval color as COLORREF) as UINT
declare function GetObjectType(byval h as HGDIOBJ) as DWORD
declare function GetOutlineTextMetricsA(byval hdc as HDC, byval cjCopy as UINT, byval potm as LPOUTLINETEXTMETRICA) as UINT

 declare function GetOutlineTextMetrics alias "GetOutlineTextMetricsA"(byval hdc as HDC, byval cjCopy as UINT, byval potm as LPOUTLINETEXTMETRICA) as UINT

declare function GetOutlineTextMetricsW(byval hdc as HDC, byval cjCopy as UINT, byval potm as LPOUTLINETEXTMETRICW) as UINT


declare function GetPaletteEntries(byval hpal as HPALETTE, byval iStart as UINT, byval cEntries as UINT, byval pPalEntries as LPPALETTEENTRY) as UINT
declare function GetPixel(byval hdc as HDC, byval x as long, byval y as long) as COLORREF
declare function GetPixelFormat(byval hdc as HDC) as long
declare function GetPolyFillMode(byval hdc as HDC) as long
declare function GetRasterizerCaps(byval lpraststat as LPRASTERIZER_STATUS, byval cjBytes as UINT) as WINBOOL
declare function GetRandomRgn(byval hdc as HDC, byval hrgn as HRGN, byval i as INT_) as long
declare function GetRegionData(byval hrgn as HRGN, byval nCount as DWORD, byval lpRgnData as LPRGNDATA) as DWORD
declare function GetRgnBox(byval hrgn as HRGN, byval lprc as LPRECT) as long
declare function GetStockObject(byval i as long) as HGDIOBJ
declare function GetStretchBltMode(byval hdc as HDC) as long
declare function GetSystemPaletteEntries(byval hdc as HDC, byval iStart as UINT, byval cEntries as UINT, byval pPalEntries as LPPALETTEENTRY) as UINT
declare function GetSystemPaletteUse(byval hdc as HDC) as UINT
declare function GetTextCharacterExtra(byval hdc as HDC) as long
declare function GetTextAlign(byval hdc as HDC) as UINT
declare function GetTextColor(byval hdc as HDC) as COLORREF
declare function GetTextExtentPointA(byval hdc as HDC, byval lpString as LPCSTR, byval c as long, byval lpsz as LPSIZE) as WINBOOL

 declare function GetTextExtentPoint alias "GetTextExtentPointA"(byval hdc as HDC, byval lpString as LPCSTR, byval c as long, byval lpsz as LPSIZE) as WINBOOL

declare function GetTextExtentPointW(byval hdc as HDC, byval lpString as LPCWSTR, byval c as long, byval lpsz as LPSIZE) as WINBOOL


declare function GetTextExtentPoint32A(byval hdc as HDC, byval lpString as LPCSTR, byval c as long, byval psizl as LPSIZE) as WINBOOL

 declare function GetTextExtentPoint32 alias "GetTextExtentPoint32A"(byval hdc as HDC, byval lpString as LPCSTR, byval c as long, byval psizl as LPSIZE) as WINBOOL

declare function GetTextExtentPoint32W(byval hdc as HDC, byval lpString as LPCWSTR, byval c as long, byval psizl as LPSIZE) as WINBOOL


declare function GetTextExtentExPointA(byval hdc as HDC, byval lpszString as LPCSTR, byval cchString as long, byval nMaxExtent as long, byval lpnFit as LPINT, byval lpnDx as LPINT, byval lpSize as LPSIZE) as WINBOOL

 declare function GetTextExtentExPoint alias "GetTextExtentExPointA"(byval hdc as HDC, byval lpszString as LPCSTR, byval cchString as long, byval nMaxExtent as long, byval lpnFit as LPINT, byval lpnDx as LPINT, byval lpSize as LPSIZE) as WINBOOL

declare function GetTextExtentExPointW(byval hdc as HDC, byval lpszString as LPCWSTR, byval cchString as long, byval nMaxExtent as long, byval lpnFit as LPINT, byval lpnDx as LPINT, byval lpSize as LPSIZE) as WINBOOL


declare function GetTextCharset(byval hdc as HDC) as long
declare function GetTextCharsetInfo(byval hdc as HDC, byval lpSig as LPFONTSIGNATURE, byval dwFlags as DWORD) as long
declare function TranslateCharsetInfo(byval lpSrc as DWORD ptr, byval lpCs as LPCHARSETINFO, byval dwFlags as DWORD) as WINBOOL
declare function GetFontLanguageInfo(byval hdc as HDC) as DWORD
declare function GetCharacterPlacementA(byval hdc as HDC, byval lpString as LPCSTR, byval nCount as long, byval nMexExtent as long, byval lpResults as LPGCP_RESULTSA, byval dwFlags as DWORD) as DWORD

 declare function GetCharacterPlacement alias "GetCharacterPlacementA"(byval hdc as HDC, byval lpString as LPCSTR, byval nCount as long, byval nMexExtent as long, byval lpResults as LPGCP_RESULTSA, byval dwFlags as DWORD) as DWORD

declare function GetCharacterPlacementW(byval hdc as HDC, byval lpString as LPCWSTR, byval nCount as long, byval nMexExtent as long, byval lpResults as LPGCP_RESULTSW, byval dwFlags as DWORD) as DWORD


type tagWCRANGE
 wcLow as WCHAR
 cGlyphs as USHORT
end type

type WCRANGE as tagWCRANGE
type PWCRANGE as tagWCRANGE ptr
type LPWCRANGE as tagWCRANGE ptr

type tagGLYPHSET
 cbThis as DWORD
 flAccel as DWORD
 cGlyphsSupported as DWORD
 cRanges as DWORD
 ranges(0 to 0) as WCRANGE
end type

type GLYPHSET as tagGLYPHSET
type PGLYPHSET as tagGLYPHSET ptr
type LPGLYPHSET as tagGLYPHSET ptr
const GS_8BIT_INDICES = &h00000001
const GGI_MARK_NONEXISTING_GLYPHS = &h0001
declare function GetFontUnicodeRanges(byval hdc as HDC, byval lpgs as LPGLYPHSET) as DWORD
declare function GetGlyphIndicesA(byval hdc as HDC, byval lpstr as LPCSTR, byval c as long, byval pgi as LPWORD, byval fl as DWORD) as DWORD

 declare function GetGlyphIndices alias "GetGlyphIndicesA"(byval hdc as HDC, byval lpstr as LPCSTR, byval c as long, byval pgi as LPWORD, byval fl as DWORD) as DWORD

declare function GetGlyphIndicesW(byval hdc as HDC, byval lpstr as LPCWSTR, byval c as long, byval pgi as LPWORD, byval fl as DWORD) as DWORD


declare function GetTextExtentPointI(byval hdc as HDC, byval pgiIn as LPWORD, byval cgi as long, byval psize as LPSIZE) as WINBOOL
declare function GetTextExtentExPointI(byval hdc as HDC, byval lpwszString as LPWORD, byval cwchString as long, byval nMaxExtent as long, byval lpnFit as LPINT, byval lpnDx as LPINT, byval lpSize as LPSIZE) as WINBOOL
declare function GetCharWidthI(byval hdc as HDC, byval giFirst as UINT, byval cgi as UINT, byval pgi as LPWORD, byval piWidths as LPINT) as WINBOOL
declare function GetCharABCWidthsI(byval hdc as HDC, byval giFirst as UINT, byval cgi as UINT, byval pgi as LPWORD, byval pabc as LPABC) as WINBOOL

const MM_MAX_NUMAXES = 16

type tagDESIGNVECTOR
 dvReserved as DWORD
 dvNumAxes as DWORD
 dvValues(0 to 15) as LONG
end type

type DESIGNVECTOR as tagDESIGNVECTOR
type PDESIGNVECTOR as tagDESIGNVECTOR ptr
type LPDESIGNVECTOR as tagDESIGNVECTOR ptr
declare function AddFontResourceExA(byval name as LPCSTR, byval fl as DWORD, byval res as PVOID) as long

 declare function AddFontResourceEx alias "AddFontResourceExA"(byval name as LPCSTR, byval fl as DWORD, byval res as PVOID) as long

declare function AddFontResourceExW(byval name as LPCWSTR, byval fl as DWORD, byval res as PVOID) as long


declare function RemoveFontResourceExA(byval name as LPCSTR, byval fl as DWORD, byval pdv as PVOID) as WINBOOL

 declare function RemoveFontResourceEx alias "RemoveFontResourceExA"(byval name as LPCSTR, byval fl as DWORD, byval pdv as PVOID) as WINBOOL

declare function RemoveFontResourceExW(byval name as LPCWSTR, byval fl as DWORD, byval pdv as PVOID) as WINBOOL


declare function AddFontMemResourceEx(byval pFileView as PVOID, byval cjSize as DWORD, byval pvResrved as PVOID, byval pNumFonts as DWORD ptr) as HANDLE
declare function RemoveFontMemResourceEx(byval h as HANDLE) as WINBOOL
const FR_PRIVATE = &h10
const FR_NOT_ENUM = &h20
const MM_MAX_AXES_NAMELEN = 16

type tagAXISINFOA
 axMinValue as LONG
 axMaxValue as LONG
 axAxisName as zstring * 16
end type

type AXISINFOA as tagAXISINFOA
type PAXISINFOA as tagAXISINFOA ptr
type LPAXISINFOA as tagAXISINFOA ptr

type tagAXISINFOW
 axMinValue as LONG
 axMaxValue as LONG
 axAxisName as wstring * 16
end type

type AXISINFOW as tagAXISINFOW
type PAXISINFOW as tagAXISINFOW ptr
type LPAXISINFOW as tagAXISINFOW ptr

 type AXISINFO as AXISINFOA
 type PAXISINFO as PAXISINFOA
 type LPAXISINFO as LPAXISINFOA

type tagAXESLISTA
 axlReserved as DWORD
 axlNumAxes as DWORD
 axlAxisInfo(0 to 15) as AXISINFOA
end type

type AXESLISTA as tagAXESLISTA
type PAXESLISTA as tagAXESLISTA ptr
type LPAXESLISTA as tagAXESLISTA ptr

type tagAXESLISTW
 axlReserved as DWORD
 axlNumAxes as DWORD
 axlAxisInfo(0 to 15) as AXISINFOW
end type

type AXESLISTW as tagAXESLISTW
type PAXESLISTW as tagAXESLISTW ptr
type LPAXESLISTW as tagAXESLISTW ptr

 type AXESLIST as AXESLISTA
 type PAXESLIST as PAXESLISTA
 type LPAXESLIST as LPAXESLISTA

type tagENUMLOGFONTEXDVA
 elfEnumLogfontEx as ENUMLOGFONTEXA
 elfDesignVector as DESIGNVECTOR
end type

type ENUMLOGFONTEXDVA as tagENUMLOGFONTEXDVA
type PENUMLOGFONTEXDVA as tagENUMLOGFONTEXDVA ptr
type LPENUMLOGFONTEXDVA as tagENUMLOGFONTEXDVA ptr

type tagENUMLOGFONTEXDVW
 elfEnumLogfontEx as ENUMLOGFONTEXW
 elfDesignVector as DESIGNVECTOR
end type

type ENUMLOGFONTEXDVW as tagENUMLOGFONTEXDVW
type PENUMLOGFONTEXDVW as tagENUMLOGFONTEXDVW ptr
type LPENUMLOGFONTEXDVW as tagENUMLOGFONTEXDVW ptr

 type ENUMLOGFONTEXDV as ENUMLOGFONTEXDVA
 type PENUMLOGFONTEXDV as PENUMLOGFONTEXDVA
 type LPENUMLOGFONTEXDV as LPENUMLOGFONTEXDVA

declare function CreateFontIndirectExA(byval as const ENUMLOGFONTEXDVA ptr) as HFONT

 declare function CreateFontIndirectEx alias "CreateFontIndirectExA"(byval as const ENUMLOGFONTEXDVA ptr) as HFONT

declare function CreateFontIndirectExW(byval as const ENUMLOGFONTEXDVW ptr) as HFONT


type tagENUMTEXTMETRICA
 etmNewTextMetricEx as NEWTEXTMETRICEXA
 etmAxesList as AXESLISTA
end type

type ENUMTEXTMETRICA as tagENUMTEXTMETRICA
type PENUMTEXTMETRICA as tagENUMTEXTMETRICA ptr
type LPENUMTEXTMETRICA as tagENUMTEXTMETRICA ptr

type tagENUMTEXTMETRICW
 etmNewTextMetricEx as NEWTEXTMETRICEXW
 etmAxesList as AXESLISTW
end type

type ENUMTEXTMETRICW as tagENUMTEXTMETRICW
type PENUMTEXTMETRICW as tagENUMTEXTMETRICW ptr
type LPENUMTEXTMETRICW as tagENUMTEXTMETRICW ptr

 type ENUMTEXTMETRIC as ENUMTEXTMETRICA
 type PENUMTEXTMETRIC as PENUMTEXTMETRICA
 type LPENUMTEXTMETRIC as LPENUMTEXTMETRICA

declare function GetViewportExtEx(byval hdc as HDC, byval lpsize as LPSIZE) as WINBOOL
declare function GetViewportOrgEx(byval hdc as HDC, byval lppoint as LPPOINT) as WINBOOL
declare function GetWindowExtEx(byval hdc as HDC, byval lpsize as LPSIZE) as WINBOOL
declare function GetWindowOrgEx(byval hdc as HDC, byval lppoint as LPPOINT) as WINBOOL
declare function IntersectClipRect(byval hdc as HDC, byval left as long, byval top as long, byval right as long, byval bottom as long) as long
declare function InvertRgn(byval hdc as HDC, byval hrgn as HRGN) as WINBOOL
declare function LineDDA(byval xStart as long, byval yStart as long, byval xEnd as long, byval yEnd as long, byval lpProc as LINEDDAPROC, byval data as LPARAM) as WINBOOL
declare function LineTo(byval hdc as HDC, byval x as long, byval y as long) as WINBOOL
declare function MaskBlt(byval hdcDest as HDC, byval xDest as long, byval yDest as long, byval width as long, byval height as long, byval hdcSrc as HDC, byval xSrc as long, byval ySrc as long, byval hbmMask as HBITMAP, byval xMask as long, byval yMask as long, byval rop as DWORD) as WINBOOL
declare function PlgBlt(byval hdcDest as HDC, byval lpPoint as const POINT ptr, byval hdcSrc as HDC, byval xSrc as long, byval ySrc as long, byval width as long, byval height as long, byval hbmMask as HBITMAP, byval xMask as long, byval yMask as long) as WINBOOL
declare function OffsetClipRgn(byval hdc as HDC, byval x as long, byval y as long) as long
declare function OffsetRgn(byval hrgn as HRGN, byval x as long, byval y as long) as long
declare function PatBlt(byval hdc as HDC, byval x as long, byval y as long, byval w as long, byval h as long, byval rop as DWORD) as WINBOOL
declare function Pie(byval hdc as HDC, byval left as long, byval top as long, byval right as long, byval bottom as long, byval xr1 as long, byval yr1 as long, byval xr2 as long, byval yr2 as long) as WINBOOL
declare function PlayMetaFile(byval hdc as HDC, byval hmf as HMETAFILE) as WINBOOL
declare function PaintRgn(byval hdc as HDC, byval hrgn as HRGN) as WINBOOL
declare function PolyPolygon(byval hdc as HDC, byval apt as const POINT ptr, byval asz as const INT_ ptr, byval csz as long) as WINBOOL
declare function PtInRegion(byval hrgn as HRGN, byval x as long, byval y as long) as WINBOOL
declare function PtVisible(byval hdc as HDC, byval x as long, byval y as long) as WINBOOL
declare function RectInRegion(byval hrgn as HRGN, byval lprect as const RECT ptr) as WINBOOL
declare function RectVisible(byval hdc as HDC, byval lprect as const RECT ptr) as WINBOOL
declare function Rectangle(byval hdc as HDC, byval left as long, byval top as long, byval right as long, byval bottom as long) as WINBOOL
declare function RestoreDC(byval hdc as HDC, byval nSavedDC as long) as WINBOOL
declare function ResetDCA(byval hdc as HDC, byval lpdm as const DEVMODEA ptr) as HDC

 declare function ResetDC alias "ResetDCA"(byval hdc as HDC, byval lpdm as const DEVMODEA ptr) as HDC

declare function ResetDCW(byval hdc as HDC, byval lpdm as const DEVMODEW ptr) as HDC


declare function RealizePalette(byval hdc as HDC) as UINT
declare function RemoveFontResourceA(byval lpFileName as LPCSTR) as WINBOOL

 declare function RemoveFontResource alias "RemoveFontResourceA"(byval lpFileName as LPCSTR) as WINBOOL

declare function RemoveFontResourceW(byval lpFileName as LPCWSTR) as WINBOOL


declare function RoundRect(byval hdc as HDC, byval left as long, byval top as long, byval right as long, byval bottom as long, byval width as long, byval height as long) as WINBOOL
declare function ResizePalette(byval hpal as HPALETTE, byval n as UINT) as WINBOOL
declare function SaveDC(byval hdc as HDC) as long
declare function SelectClipRgn(byval hdc as HDC, byval hrgn as HRGN) as long
declare function ExtSelectClipRgn(byval hdc as HDC, byval hrgn as HRGN, byval mode as long) as long
declare function SetMetaRgn(byval hdc as HDC) as long
declare function SelectObject(byval hdc as HDC, byval h as HGDIOBJ) as HGDIOBJ
declare function SelectPalette(byval hdc as HDC, byval hPal as HPALETTE, byval bForceBkgd as WINBOOL) as HPALETTE
declare function SetBkColor(byval hdc as HDC, byval color as COLORREF) as COLORREF
declare function SetDCBrushColor(byval hdc as HDC, byval color as COLORREF) as COLORREF
declare function SetDCPenColor(byval hdc as HDC, byval color as COLORREF) as COLORREF
declare function SetBkMode(byval hdc as HDC, byval mode as long) as long
declare function SetBitmapBits(byval hbm as HBITMAP, byval cb as DWORD, byval pvBits as const any ptr) as LONG
declare function SetBoundsRect(byval hdc as HDC, byval lprect as const RECT ptr, byval flags as UINT) as UINT
declare function SetDIBits(byval hdc as HDC, byval hbm as HBITMAP, byval start as UINT, byval cLines as UINT, byval lpBits as const any ptr, byval lpbmi as const BITMAPINFO ptr, byval ColorUse as UINT) as long
declare function SetDIBitsToDevice(byval hdc as HDC, byval xDest as long, byval yDest as long, byval w as DWORD, byval h as DWORD, byval xSrc as long, byval ySrc as long, byval StartScan as UINT, byval cLines as UINT, byval lpvBits as const any ptr, byval lpbmi as const BITMAPINFO ptr, byval ColorUse as UINT) as long
declare function SetMapperFlags(byval hdc as HDC, byval flags as DWORD) as DWORD
declare function SetGraphicsMode(byval hdc as HDC, byval iMode as long) as long
declare function SetMapMode(byval hdc as HDC, byval iMode as long) as long
declare function SetLayout(byval hdc as HDC, byval l as DWORD) as DWORD
declare function GetLayout(byval hdc as HDC) as DWORD
declare function SetMetaFileBitsEx(byval cbBuffer as UINT, byval lpData as const UBYTE ptr) as HMETAFILE
declare function SetPaletteEntries(byval hpal as HPALETTE, byval iStart as UINT, byval cEntries as UINT, byval pPalEntries as const PALETTEENTRY ptr) as UINT
declare function SetPixel(byval hdc as HDC, byval x as long, byval y as long, byval color as COLORREF) as COLORREF
declare function SetPixelV(byval hdc as HDC, byval x as long, byval y as long, byval color as COLORREF) as WINBOOL
declare function SetPixelFormat(byval hdc as HDC, byval format as long, byval ppfd as const PIXELFORMATDESCRIPTOR ptr) as WINBOOL
declare function SetPolyFillMode(byval hdc as HDC, byval mode as long) as long
declare function StretchBlt(byval hdcDest as HDC, byval xDest as long, byval yDest as long, byval wDest as long, byval hDest as long, byval hdcSrc as HDC, byval xSrc as long, byval ySrc as long, byval wSrc as long, byval hSrc as long, byval rop as DWORD) as WINBOOL
declare function SetRectRgn(byval hrgn as HRGN, byval left as long, byval top as long, byval right as long, byval bottom as long) as WINBOOL
declare function StretchDIBits(byval hdc as HDC, byval xDest as long, byval yDest as long, byval DestWidth as long, byval DestHeight as long, byval xSrc as long, byval ySrc as long, byval SrcWidth as long, byval SrcHeight as long, byval lpBits as const any ptr, byval lpbmi as const BITMAPINFO ptr, byval iUsage as UINT, byval rop as DWORD) as long
declare function SetROP2(byval hdc as HDC, byval rop2 as long) as long
declare function SetStretchBltMode(byval hdc as HDC, byval mode as long) as long
declare function SetSystemPaletteUse(byval hdc as HDC, byval use as UINT) as UINT
declare function SetTextCharacterExtra(byval hdc as HDC, byval extra as long) as long
declare function SetTextColor(byval hdc as HDC, byval color as COLORREF) as COLORREF
declare function SetTextAlign(byval hdc as HDC, byval align as UINT) as UINT
declare function SetTextJustification(byval hdc as HDC, byval extra as long, byval count as long) as WINBOOL
declare function UpdateColors(byval hdc as HDC) as WINBOOL
type COLOR16 as USHORT

type _TRIVERTEX
 x as LONG
 y as LONG
 Red as COLOR16
 Green as COLOR16
 Blue as COLOR16
 Alpha as COLOR16
end type

type TRIVERTEX as _TRIVERTEX
type PTRIVERTEX as _TRIVERTEX ptr
type LPTRIVERTEX as _TRIVERTEX ptr

type _GRADIENT_TRIANGLE
 Vertex1 as ULONG
 Vertex2 as ULONG
 Vertex3 as ULONG
end type

type GRADIENT_TRIANGLE as _GRADIENT_TRIANGLE
type PGRADIENT_TRIANGLE as _GRADIENT_TRIANGLE ptr
type LPGRADIENT_TRIANGLE as _GRADIENT_TRIANGLE ptr

type _GRADIENT_RECT
 UpperLeft as ULONG
 LowerRight as ULONG
end type

type GRADIENT_RECT as _GRADIENT_RECT
type PGRADIENT_RECT as _GRADIENT_RECT ptr
type LPGRADIENT_RECT as _GRADIENT_RECT ptr

type _BLENDFUNCTION
 BlendOp as UBYTE
 BlendFlags as UBYTE
 SourceConstantAlpha as UBYTE
 AlphaFormat as UBYTE
end type

type BLENDFUNCTION as _BLENDFUNCTION
type PBLENDFUNCTION as _BLENDFUNCTION ptr
const AC_SRC_OVER = &h000
const AC_SRC_ALPHA = &h01
declare function AlphaBlend(byval hdcDest as HDC, byval xoriginDest as long, byval yoriginDest as long, byval wDest as long, byval hDest as long, byval hdcSrc as HDC, byval xoriginSrc as long, byval yoriginSrc as long, byval wSrc as long, byval hSrc as long, byval ftn as BLENDFUNCTION) as WINBOOL
declare function GdiAlphaBlend(byval hdcDest as HDC, byval xoriginDest as long, byval yoriginDest as long, byval wDest as long, byval hDest as long, byval hdcSrc as HDC, byval xoriginSrc as long, byval yoriginSrc as long, byval wSrc as long, byval hSrc as long, byval ftn as BLENDFUNCTION) as WINBOOL
declare function TransparentBlt(byval hdcDest as HDC, byval xoriginDest as long, byval yoriginDest as long, byval wDest as long, byval hDest as long, byval hdcSrc as HDC, byval xoriginSrc as long, byval yoriginSrc as long, byval wSrc as long, byval hSrc as long, byval crTransparent as UINT) as WINBOOL
declare function GdiTransparentBlt(byval hdcDest as HDC, byval xoriginDest as long, byval yoriginDest as long, byval wDest as long, byval hDest as long, byval hdcSrc as HDC, byval xoriginSrc as long, byval yoriginSrc as long, byval wSrc as long, byval hSrc as long, byval crTransparent as UINT) as WINBOOL

const GRADIENT_FILL_RECT_H = &h000000000
const GRADIENT_FILL_RECT_V = &h00000001
const GRADIENT_FILL_TRIANGLE = &h00000002
const GRADIENT_FILL_OP_FLAG = &h000000ff

declare function GradientFill(byval hdc as HDC, byval pVertex as PTRIVERTEX, byval nVertex as ULONG, byval pMesh as PVOID, byval nMesh as ULONG, byval ulMode as ULONG) as WINBOOL
declare function GdiGradientFill(byval hdc as HDC, byval pVertex as PTRIVERTEX, byval nVertex as ULONG, byval pMesh as PVOID, byval nMesh as ULONG, byval ulMode as ULONG) as WINBOOL
declare function PlayMetaFileRecord(byval hdc as HDC, byval lpHandleTable as LPHANDLETABLE, byval lpMR as LPMETARECORD, byval noObjs as UINT) as WINBOOL
type MFENUMPROC as function(byval hdc as HDC, byval lpht as HANDLETABLE ptr, byval lpMR as METARECORD ptr, byval nObj as long, byval lParam as LPARAM) as long
declare function EnumMetaFile(byval hdc as HDC, byval hmf as HMETAFILE, byval lpProc as MFENUMPROC, byval lParam as LPARAM) as WINBOOL
type ENHMFENUMPROC as function(byval hdc as HDC, byval lpht as HANDLETABLE ptr, byval lpmr as const ENHMETARECORD ptr, byval hHandles as long, byval data as LPARAM) as long
declare function CloseEnhMetaFile(byval hdc as HDC) as HENHMETAFILE
declare function CopyEnhMetaFileA(byval hEnh as HENHMETAFILE, byval lpFileName as LPCSTR) as HENHMETAFILE

 declare function CopyEnhMetaFile alias "CopyEnhMetaFileA"(byval hEnh as HENHMETAFILE, byval lpFileName as LPCSTR) as HENHMETAFILE

declare function CopyEnhMetaFileW(byval hEnh as HENHMETAFILE, byval lpFileName as LPCWSTR) as HENHMETAFILE


declare function CreateEnhMetaFileA(byval hdc as HDC, byval lpFilename as LPCSTR, byval lprc as const RECT ptr, byval lpDesc as LPCSTR) as HDC

 declare function CreateEnhMetaFile alias "CreateEnhMetaFileA"(byval hdc as HDC, byval lpFilename as LPCSTR, byval lprc as const RECT ptr, byval lpDesc as LPCSTR) as HDC

declare function CreateEnhMetaFileW(byval hdc as HDC, byval lpFilename as LPCWSTR, byval lprc as const RECT ptr, byval lpDesc as LPCWSTR) as HDC


declare function DeleteEnhMetaFile(byval hmf as HENHMETAFILE) as WINBOOL
declare function EnumEnhMetaFile(byval hdc as HDC, byval hmf as HENHMETAFILE, byval lpProc as ENHMFENUMPROC, byval lpParam as LPVOID, byval lpRect as const RECT ptr) as WINBOOL
declare function GetEnhMetaFileA(byval lpName as LPCSTR) as HENHMETAFILE

 declare function GetEnhMetaFile alias "GetEnhMetaFileA"(byval lpName as LPCSTR) as HENHMETAFILE

declare function GetEnhMetaFileW(byval lpName as LPCWSTR) as HENHMETAFILE


declare function GetEnhMetaFileBits(byval hEMF as HENHMETAFILE, byval nSize as UINT, byval lpData as LPBYTE) as UINT
declare function GetEnhMetaFileDescriptionA(byval hemf as HENHMETAFILE, byval cchBuffer as UINT, byval lpDescription as LPSTR) as UINT

 declare function GetEnhMetaFileDescription alias "GetEnhMetaFileDescriptionA"(byval hemf as HENHMETAFILE, byval cchBuffer as UINT, byval lpDescription as LPSTR) as UINT

declare function GetEnhMetaFileDescriptionW(byval hemf as HENHMETAFILE, byval cchBuffer as UINT, byval lpDescription as LPWSTR) as UINT


declare function GetEnhMetaFileHeader(byval hemf as HENHMETAFILE, byval nSize as UINT, byval lpEnhMetaHeader as LPENHMETAHEADER) as UINT
declare function GetEnhMetaFilePaletteEntries(byval hemf as HENHMETAFILE, byval nNumEntries as UINT, byval lpPaletteEntries as LPPALETTEENTRY) as UINT
declare function GetEnhMetaFilePixelFormat(byval hemf as HENHMETAFILE, byval cbBuffer as UINT, byval ppfd as PIXELFORMATDESCRIPTOR ptr) as UINT
declare function GetWinMetaFileBits(byval hemf as HENHMETAFILE, byval cbData16 as UINT, byval pData16 as LPBYTE, byval iMapMode as INT_, byval hdcRef as HDC) as UINT
declare function PlayEnhMetaFile(byval hdc as HDC, byval hmf as HENHMETAFILE, byval lprect as const RECT ptr) as WINBOOL
declare function PlayEnhMetaFileRecord(byval hdc as HDC, byval pht as LPHANDLETABLE, byval pmr as const ENHMETARECORD ptr, byval cht as UINT) as WINBOOL
declare function SetEnhMetaFileBits(byval nSize as UINT, byval pb as const UBYTE ptr) as HENHMETAFILE
declare function SetWinMetaFileBits(byval nSize as UINT, byval lpMeta16Data as const UBYTE ptr, byval hdcRef as HDC, byval lpMFP as const METAFILEPICT ptr) as HENHMETAFILE
declare function GdiComment(byval hdc as HDC, byval nSize as UINT, byval lpData as const UBYTE ptr) as WINBOOL
declare function GetTextMetricsA(byval hdc as HDC, byval lptm as LPTEXTMETRICA) as WINBOOL

 declare function GetTextMetrics alias "GetTextMetricsA"(byval hdc as HDC, byval lptm as LPTEXTMETRICA) as WINBOOL

declare function GetTextMetricsW(byval hdc as HDC, byval lptm as LPTEXTMETRICW) as WINBOOL


type tagDIBSECTION
 dsBm as BITMAP
 dsBmih as BITMAPINFOHEADER
 dsBitfields(0 to 2) as DWORD
 dshSection as HANDLE
 dsOffset as DWORD
end type

type DIBSECTION as tagDIBSECTION
type LPDIBSECTION as tagDIBSECTION ptr
type PDIBSECTION as tagDIBSECTION ptr

declare function AngleArc(byval hdc as HDC, byval x as long, byval y as long, byval r as DWORD, byval StartAngle as FLOAT, byval SweepAngle as FLOAT) as WINBOOL
declare function PolyPolyline(byval hdc as HDC, byval apt as const POINT ptr, byval asz as const DWORD ptr, byval csz as DWORD) as WINBOOL
declare function GetWorldTransform(byval hdc as HDC, byval lpxf as LPXFORM) as WINBOOL
declare function SetWorldTransform(byval hdc as HDC, byval lpxf as const XFORM ptr) as WINBOOL
declare function ModifyWorldTransform(byval hdc as HDC, byval lpxf as const XFORM ptr, byval mode as DWORD) as WINBOOL
declare function CombineTransform(byval lpxfOut as LPXFORM, byval lpxf1 as const XFORM ptr, byval lpxf2 as const XFORM ptr) as WINBOOL
declare function CreateDIBSection(byval hdc as HDC, byval lpbmi as const BITMAPINFO ptr, byval usage as UINT, byval ppvBits as any ptr ptr, byval hSection as HANDLE, byval offset as DWORD) as HBITMAP
declare function GetDIBColorTable(byval hdc as HDC, byval iStart as UINT, byval cEntries as UINT, byval prgbq as RGBQUAD ptr) as UINT
declare function SetDIBColorTable(byval hdc as HDC, byval iStart as UINT, byval cEntries as UINT, byval prgbq as const RGBQUAD ptr) as UINT

const CA_NEGATIVE = &h0001
const CA_LOG_FILTER = &h0002
const ILLUMINANT_DEVICE_DEFAULT = 0
const ILLUMINANT_A = 1
const ILLUMINANT_B = 2
const ILLUMINANT_C = 3
const ILLUMINANT_D50 = 4
const ILLUMINANT_D55 = 5
const ILLUMINANT_D65 = 6
const ILLUMINANT_D75 = 7
const ILLUMINANT_F2 = 8
const ILLUMINANT_MAX_INDEX = ILLUMINANT_F2
const ILLUMINANT_TUNGSTEN = ILLUMINANT_A
const ILLUMINANT_DAYLIGHT = ILLUMINANT_C
const ILLUMINANT_FLUORESCENT = ILLUMINANT_F2
const ILLUMINANT_NTSC = ILLUMINANT_C
const RGB_GAMMA_MIN = cast(WORD, &o2500)
const RGB_GAMMA_MAX = cast(WORD, 65000)
const REFERENCE_WHITE_MIN = cast(WORD, 6000)
const REFERENCE_WHITE_MAX = cast(WORD, 10000)
const REFERENCE_BLACK_MIN = cast(WORD, 0)
const REFERENCE_BLACK_MAX = cast(WORD, 4000)

type tagCOLORADJUSTMENT
 caSize as WORD
 caFlags as WORD
 caIlluminantIndex as WORD
 caRedGamma as WORD
 caGreenGamma as WORD
 caBlueGamma as WORD
 caReferenceBlack as WORD
 caReferenceWhite as WORD
 caContrast as SHORT
 caBrightness as SHORT
 caColorfulness as SHORT
 caRedGreenTint as SHORT
end type

type COLORADJUSTMENT as tagCOLORADJUSTMENT
type PCOLORADJUSTMENT as tagCOLORADJUSTMENT ptr
type LPCOLORADJUSTMENT as tagCOLORADJUSTMENT ptr

declare function SetColorAdjustment(byval hdc as HDC, byval lpca as const COLORADJUSTMENT ptr) as WINBOOL
declare function GetColorAdjustment(byval hdc as HDC, byval lpca as LPCOLORADJUSTMENT) as WINBOOL
declare function CreateHalftonePalette(byval hdc as HDC) as HPALETTE
type ABORTPROC as function(byval as HDC, byval as long) as WINBOOL

type _DOCINFOA
 cbSize as long
 lpszDocName as LPCSTR
 lpszOutput as LPCSTR
 lpszDatatype as LPCSTR
 fwType as DWORD
end type

type DOCINFOA as _DOCINFOA
type LPDOCINFOA as _DOCINFOA ptr

type _DOCINFOW
 cbSize as long
 lpszDocName as LPCWSTR
 lpszOutput as LPCWSTR
 lpszDatatype as LPCWSTR
 fwType as DWORD
end type

type DOCINFOW as _DOCINFOW
type LPDOCINFOW as _DOCINFOW ptr

 type DOCINFO as DOCINFOA
 type LPDOCINFO as LPDOCINFOA

const DI_APPBANDING = &h00000001
const DI_ROPS_READ_DESTINATION = &h00000002
declare function StartDocA(byval hdc as HDC, byval lpdi as const DOCINFOA ptr) as long

 declare function StartDoc alias "StartDocA"(byval hdc as HDC, byval lpdi as const DOCINFOA ptr) as long

declare function StartDocW(byval hdc as HDC, byval lpdi as const DOCINFOW ptr) as long


declare function EndDoc(byval hdc as HDC) as long
declare function StartPage(byval hdc as HDC) as long
declare function EndPage(byval hdc as HDC) as long
declare function AbortDoc(byval hdc as HDC) as long
declare function SetAbortProc(byval hdc as HDC, byval lpProc as ABORTPROC) as long
declare function AbortPath(byval hdc as HDC) as WINBOOL
declare function ArcTo(byval hdc as HDC, byval left as long, byval top as long, byval right as long, byval bottom as long, byval xr1 as long, byval yr1 as long, byval xr2 as long, byval yr2 as long) as WINBOOL
declare function BeginPath(byval hdc as HDC) as WINBOOL
declare function CloseFigure(byval hdc as HDC) as WINBOOL
declare function EndPath(byval hdc as HDC) as WINBOOL
declare function FillPath(byval hdc as HDC) as WINBOOL
declare function FlattenPath(byval hdc as HDC) as WINBOOL
declare function GetPath(byval hdc as HDC, byval apt as LPPOINT, byval aj as LPBYTE, byval cpt as long) as long
declare function PathToRegion(byval hdc as HDC) as HRGN
declare function PolyDraw(byval hdc as HDC, byval apt as const POINT ptr, byval aj as const UBYTE ptr, byval cpt as long) as WINBOOL
declare function SelectClipPath(byval hdc as HDC, byval mode as long) as WINBOOL
declare function SetArcDirection(byval hdc as HDC, byval dir as long) as long
declare function SetMiterLimit(byval hdc as HDC, byval limit as FLOAT, byval old as PFLOAT) as WINBOOL
declare function StrokeAndFillPath(byval hdc as HDC) as WINBOOL
declare function StrokePath(byval hdc as HDC) as WINBOOL
declare function WidenPath(byval hdc as HDC) as WINBOOL
declare function ExtCreatePen(byval iPenStyle as DWORD, byval cWidth as DWORD, byval plbrush as const LOGBRUSH ptr, byval cStyle as DWORD, byval pstyle as const DWORD ptr) as HPEN
declare function GetMiterLimit(byval hdc as HDC, byval plimit as PFLOAT) as WINBOOL
declare function GetArcDirection(byval hdc as HDC) as long
declare function GetObjectA(byval h as HANDLE, byval c as long, byval pv as LPVOID) as long

 declare function GetObject alias "GetObjectA"(byval h as HANDLE, byval c as long, byval pv as LPVOID) as long

declare function GetObjectW(byval h as HANDLE, byval c as long, byval pv as LPVOID) as long


declare function MoveToEx(byval hdc as HDC, byval x as long, byval y as long, byval lppt as LPPOINT) as WINBOOL
declare function TextOutA(byval hdc as HDC, byval x as long, byval y as long, byval lpString as LPCSTR, byval c as long) as WINBOOL

 declare function TextOut alias "TextOutA"(byval hdc as HDC, byval x as long, byval y as long, byval lpString as LPCSTR, byval c as long) as WINBOOL

declare function TextOutW(byval hdc as HDC, byval x as long, byval y as long, byval lpString as LPCWSTR, byval c as long) as WINBOOL


declare function ExtTextOutA(byval hdc as HDC, byval x as long, byval y as long, byval options as UINT, byval lprect as const RECT ptr, byval lpString as LPCSTR, byval c as UINT, byval lpDx as const INT_ ptr) as WINBOOL

 declare function ExtTextOut alias "ExtTextOutA"(byval hdc as HDC, byval x as long, byval y as long, byval options as UINT, byval lprect as const RECT ptr, byval lpString as LPCSTR, byval c as UINT, byval lpDx as const INT_ ptr) as WINBOOL

declare function ExtTextOutW(byval hdc as HDC, byval x as long, byval y as long, byval options as UINT, byval lprect as const RECT ptr, byval lpString as LPCWSTR, byval c as UINT, byval lpDx as const INT_ ptr) as WINBOOL


declare function PolyTextOutA(byval hdc as HDC, byval ppt as const POLYTEXTA ptr, byval nstrings as long) as WINBOOL

 declare function PolyTextOut alias "PolyTextOutA"(byval hdc as HDC, byval ppt as const POLYTEXTA ptr, byval nstrings as long) as WINBOOL

declare function PolyTextOutW(byval hdc as HDC, byval ppt as const POLYTEXTW ptr, byval nstrings as long) as WINBOOL


declare function CreatePolygonRgn(byval pptl as const POINT ptr, byval cPoint as long, byval iMode as long) as HRGN
declare function DPtoLP(byval hdc as HDC, byval lppt as LPPOINT, byval c as long) as WINBOOL
declare function LPtoDP(byval hdc as HDC, byval lppt as LPPOINT, byval c as long) as WINBOOL
declare function Polygon(byval hdc as HDC, byval apt as const POINT ptr, byval cpt as long) as WINBOOL
declare function Polyline(byval hdc as HDC, byval apt as const POINT ptr, byval cpt as long) as WINBOOL
declare function PolyBezier(byval hdc as HDC, byval apt as const POINT ptr, byval cpt as DWORD) as WINBOOL
declare function PolyBezierTo(byval hdc as HDC, byval apt as const POINT ptr, byval cpt as DWORD) as WINBOOL
declare function PolylineTo(byval hdc as HDC, byval apt as const POINT ptr, byval cpt as DWORD) as WINBOOL
declare function SetViewportExtEx(byval hdc as HDC, byval x as long, byval y as long, byval lpsz as LPSIZE) as WINBOOL
declare function SetViewportOrgEx(byval hdc as HDC, byval x as long, byval y as long, byval lppt as LPPOINT) as WINBOOL
declare function SetWindowExtEx(byval hdc as HDC, byval x as long, byval y as long, byval lpsz as LPSIZE) as WINBOOL
declare function SetWindowOrgEx(byval hdc as HDC, byval x as long, byval y as long, byval lppt as LPPOINT) as WINBOOL
declare function OffsetViewportOrgEx(byval hdc as HDC, byval x as long, byval y as long, byval lppt as LPPOINT) as WINBOOL
declare function OffsetWindowOrgEx(byval hdc as HDC, byval x as long, byval y as long, byval lppt as LPPOINT) as WINBOOL
declare function ScaleViewportExtEx(byval hdc as HDC, byval xn as long, byval dx as long, byval yn as long, byval yd as long, byval lpsz as LPSIZE) as WINBOOL
declare function ScaleWindowExtEx(byval hdc as HDC, byval xn as long, byval xd as long, byval yn as long, byval yd as long, byval lpsz as LPSIZE) as WINBOOL
declare function SetBitmapDimensionEx(byval hbm as HBITMAP, byval w as long, byval h as long, byval lpsz as LPSIZE) as WINBOOL
declare function SetBrushOrgEx(byval hdc as HDC, byval x as long, byval y as long, byval lppt as LPPOINT) as WINBOOL
declare function GetTextFaceA(byval hdc as HDC, byval c as long, byval lpName as LPSTR) as long

 declare function GetTextFace alias "GetTextFaceA"(byval hdc as HDC, byval c as long, byval lpName as LPSTR) as long

declare function GetTextFaceW(byval hdc as HDC, byval c as long, byval lpName as LPWSTR) as long


const FONTMAPPER_MAX = 10

type tagKERNINGPAIR
 wFirst as WORD
 wSecond as WORD
 iKernAmount as long
end type

type KERNINGPAIR as tagKERNINGPAIR
type LPKERNINGPAIR as tagKERNINGPAIR ptr
declare function GetKerningPairsA(byval hdc as HDC, byval nPairs as DWORD, byval lpKernPair as LPKERNINGPAIR) as DWORD

 declare function GetKerningPairs alias "GetKerningPairsA"(byval hdc as HDC, byval nPairs as DWORD, byval lpKernPair as LPKERNINGPAIR) as DWORD

declare function GetKerningPairsW(byval hdc as HDC, byval nPairs as DWORD, byval lpKernPair as LPKERNINGPAIR) as DWORD


declare function GetDCOrgEx(byval hdc as HDC, byval lppt as LPPOINT) as WINBOOL
declare function FixBrushOrgEx(byval hdc as HDC, byval x as long, byval y as long, byval ptl as LPPOINT) as WINBOOL
declare function UnrealizeObject(byval h as HGDIOBJ) as WINBOOL
declare function GdiFlush() as WINBOOL
declare function GdiSetBatchLimit(byval dw as DWORD) as DWORD
declare function GdiGetBatchLimit() as DWORD

const ICM_OFF = 1
const ICM_ON = 2
const ICM_QUERY = 3
const ICM_DONE_OUTSIDEDC = 4
type ICMENUMPROCA as function(byval as LPSTR, byval as LPARAM) as long
type ICMENUMPROCW as function(byval as LPWSTR, byval as LPARAM) as long

 type ICMENUMPROC as ICMENUMPROCA

declare function SetICMMode(byval hdc as HDC, byval mode as long) as long
declare function CheckColorsInGamut(byval hdc as HDC, byval lpRGBTriple as LPVOID, byval dlpBuffer as LPVOID, byval nCount as DWORD) as WINBOOL
declare function GetColorSpace(byval hdc as HDC) as HCOLORSPACE
declare function GetLogColorSpaceA(byval hColorSpace as HCOLORSPACE, byval lpBuffer as LPLOGCOLORSPACEA, byval nSize as DWORD) as WINBOOL

 declare function GetLogColorSpace alias "GetLogColorSpaceA"(byval hColorSpace as HCOLORSPACE, byval lpBuffer as LPLOGCOLORSPACEA, byval nSize as DWORD) as WINBOOL

declare function GetLogColorSpaceW(byval hColorSpace as HCOLORSPACE, byval lpBuffer as LPLOGCOLORSPACEW, byval nSize as DWORD) as WINBOOL


declare function CreateColorSpaceA(byval lplcs as LPLOGCOLORSPACEA) as HCOLORSPACE

 declare function CreateColorSpace alias "CreateColorSpaceA"(byval lplcs as LPLOGCOLORSPACEA) as HCOLORSPACE

declare function CreateColorSpaceW(byval lplcs as LPLOGCOLORSPACEW) as HCOLORSPACE


declare function SetColorSpace(byval hdc as HDC, byval hcs as HCOLORSPACE) as HCOLORSPACE
declare function DeleteColorSpace(byval hcs as HCOLORSPACE) as WINBOOL
declare function GetICMProfileA(byval hdc as HDC, byval pBufSize as LPDWORD, byval pszFilename as LPSTR) as WINBOOL

 declare function GetICMProfile alias "GetICMProfileA"(byval hdc as HDC, byval pBufSize as LPDWORD, byval pszFilename as LPSTR) as WINBOOL

declare function GetICMProfileW(byval hdc as HDC, byval pBufSize as LPDWORD, byval pszFilename as LPWSTR) as WINBOOL


declare function SetICMProfileA(byval hdc as HDC, byval lpFileName as LPSTR) as WINBOOL

 declare function SetICMProfile alias "SetICMProfileA"(byval hdc as HDC, byval lpFileName as LPSTR) as WINBOOL

declare function SetICMProfileW(byval hdc as HDC, byval lpFileName as LPWSTR) as WINBOOL


declare function GetDeviceGammaRamp(byval hdc as HDC, byval lpRamp as LPVOID) as WINBOOL
declare function SetDeviceGammaRamp(byval hdc as HDC, byval lpRamp as LPVOID) as WINBOOL
declare function ColorMatchToTarget(byval hdc as HDC, byval hdcTarget as HDC, byval action as DWORD) as WINBOOL
declare function EnumICMProfilesA(byval hdc as HDC, byval lpProc as ICMENUMPROCA, byval lParam as LPARAM) as long

 declare function EnumICMProfiles alias "EnumICMProfilesA"(byval hdc as HDC, byval lpProc as ICMENUMPROCA, byval lParam as LPARAM) as long

declare function EnumICMProfilesW(byval hdc as HDC, byval lpProc as ICMENUMPROCW, byval lParam as LPARAM) as long


declare function UpdateICMRegKeyA(byval reserved as DWORD, byval lpszCMID as LPSTR, byval lpszFileName as LPSTR, byval command as UINT) as WINBOOL

 declare function UpdateICMRegKey alias "UpdateICMRegKeyA"(byval reserved as DWORD, byval lpszCMID as LPSTR, byval lpszFileName as LPSTR, byval command as UINT) as WINBOOL

declare function UpdateICMRegKeyW(byval reserved as DWORD, byval lpszCMID as LPWSTR, byval lpszFileName as LPWSTR, byval command as UINT) as WINBOOL


declare function ColorCorrectPalette(byval hdc as HDC, byval hPal as HPALETTE, byval deFirst as DWORD, byval num as DWORD) as WINBOOL
const ENHMETA_SIGNATURE = &h464D4520
const ENHMETA_STOCK_OBJECT = &h80000000
const EMR_HEADER = 1
const EMR_POLYBEZIER = 2
const EMR_POLYGON = 3
const EMR_POLYLINE = 4
const EMR_POLYBEZIERTO = 5
const EMR_POLYLINETO = 6
const EMR_POLYPOLYLINE = 7
const EMR_POLYPOLYGON = 8
const EMR_SETWINDOWEXTEX = 9
const EMR_SETWINDOWORGEX = 10
const EMR_SETVIEWPORTEXTEX = 11
const EMR_SETVIEWPORTORGEX = 12
const EMR_SETBRUSHORGEX = 13
const EMR_EOF = 14
const EMR_SETPIXELV = 15
const EMR_SETMAPPERFLAGS = 16
const EMR_SETMAPMODE = 17
const EMR_SETBKMODE = 18
const EMR_SETPOLYFILLMODE = 19
const EMR_SETROP2 = 20
const EMR_SETSTRETCHBLTMODE = 21
const EMR_SETTEXTALIGN = 22
const EMR_SETCOLORADJUSTMENT = 23
const EMR_SETTEXTCOLOR = 24
const EMR_SETBKCOLOR = 25
const EMR_OFFSETCLIPRGN = 26
const EMR_MOVETOEX = 27
const EMR_SETMETARGN = 28
const EMR_EXCLUDECLIPRECT = 29
const EMR_INTERSECTCLIPRECT = 30
const EMR_SCALEVIEWPORTEXTEX = 31
const EMR_SCALEWINDOWEXTEX = 32
const EMR_SAVEDC = 33
const EMR_RESTOREDC = 34
const EMR_SETWORLDTRANSFORM = 35
const EMR_MODIFYWORLDTRANSFORM = 36
const EMR_SELECTOBJECT = 37
const EMR_CREATEPEN = 38
const EMR_CREATEBRUSHINDIRECT = 39
const EMR_DELETEOBJECT = 40
const EMR_ANGLEARC = 41
const EMR_ELLIPSE = 42
const EMR_RECTANGLE = 43
const EMR_ROUNDRECT = 44
const EMR_ARC = 45
const EMR_CHORD = 46
const EMR_PIE = 47
const EMR_SELECTPALETTE = 48
const EMR_CREATEPALETTE = 49
const EMR_SETPALETTEENTRIES = 50
const EMR_RESIZEPALETTE = 51
const EMR_REALIZEPALETTE = 52
const EMR_EXTFLOODFILL = 53
const EMR_LINETO = 54
const EMR_ARCTO = 55
const EMR_POLYDRAW = 56
const EMR_SETARCDIRECTION = 57
const EMR_SETMITERLIMIT = 58
const EMR_BEGINPATH = 59
const EMR_ENDPATH = 60
const EMR_CLOSEFIGURE = 61
const EMR_FILLPATH = 62
const EMR_STROKEANDFILLPATH = 63
const EMR_STROKEPATH = 64
const EMR_FLATTENPATH = 65
const EMR_WIDENPATH = 66
const EMR_SELECTCLIPPATH = 67
const EMR_ABORTPATH = 68
const EMR_GDICOMMENT = 70
const EMR_FILLRGN = 71
const EMR_FRAMERGN = 72
const EMR_INVERTRGN = 73
const EMR_PAINTRGN = 74
const EMR_EXTSELECTCLIPRGN = 75
const EMR_BITBLT = 76
const EMR_STRETCHBLT = 77
const EMR_MASKBLT = 78
const EMR_PLGBLT = 79
const EMR_SETDIBITSTODEVICE = 80
const EMR_STRETCHDIBITS = 81
const EMR_EXTCREATEFONTINDIRECTW = 82
const EMR_EXTTEXTOUTA = 83
const EMR_EXTTEXTOUTW = 84
const EMR_POLYBEZIER16 = 85
const EMR_POLYGON16 = 86
const EMR_POLYLINE16 = 87
const EMR_POLYBEZIERTO16 = 88
const EMR_POLYLINETO16 = 89
const EMR_POLYPOLYLINE16 = 90
const EMR_POLYPOLYGON16 = 91
const EMR_POLYDRAW16 = 92
const EMR_CREATEMONOBRUSH = 93
const EMR_CREATEDIBPATTERNBRUSHPT = 94
const EMR_EXTCREATEPEN = 95
const EMR_POLYTEXTOUTA = 96
const EMR_POLYTEXTOUTW = 97
const EMR_SETICMMODE = 98
const EMR_CREATECOLORSPACE = 99
const EMR_SETCOLORSPACE = 100
const EMR_DELETECOLORSPACE = 101
const EMR_GLSRECORD = 102
const EMR_GLSBOUNDEDRECORD = 103
const EMR_PIXELFORMAT = 104
const EMR_RESERVED_105 = 105
const EMR_RESERVED_106 = 106
const EMR_RESERVED_107 = 107
const EMR_RESERVED_108 = 108
const EMR_RESERVED_109 = 109
const EMR_RESERVED_110 = 110
const EMR_COLORCORRECTPALETTE = 111
const EMR_SETICMPROFILEA = 112
const EMR_SETICMPROFILEW = 113
const EMR_ALPHABLEND = 114
const EMR_SETLAYOUT = 115
const EMR_TRANSPARENTBLT = 116
const EMR_RESERVED_117 = 117
const EMR_GRADIENTFILL = 118
const EMR_RESERVED_119 = 119
const EMR_RESERVED_120 = 120
const EMR_COLORMATCHTOTARGETW = 121
const EMR_CREATECOLORSPACEW = 122
const EMR_MIN = 1
const EMR_MAX = 122

type tagEMR
 iType as DWORD
 nSize as DWORD
end type

type EMR as tagEMR
type PEMR as tagEMR ptr

type tagEMRTEXT
 ptlReference as POINTL
 nChars as DWORD
 offString as DWORD
 fOptions as DWORD
 rcl as RECTL
 offDx as DWORD
end type

type EMRTEXT as tagEMRTEXT
type PEMRTEXT as tagEMRTEXT ptr

type tagABORTPATH
 emr as EMR
end type

type EMRABORTPATH as tagABORTPATH
type PEMRABORTPATH as tagABORTPATH ptr
type EMRBEGINPATH as tagABORTPATH
type PEMRBEGINPATH as tagABORTPATH ptr
type EMRENDPATH as tagABORTPATH
type PEMRENDPATH as tagABORTPATH ptr
type EMRCLOSEFIGURE as tagABORTPATH
type PEMRCLOSEFIGURE as tagABORTPATH ptr
type EMRFLATTENPATH as tagABORTPATH
type PEMRFLATTENPATH as tagABORTPATH ptr
type EMRWIDENPATH as tagABORTPATH
type PEMRWIDENPATH as tagABORTPATH ptr
type EMRSETMETARGN as tagABORTPATH
type PEMRSETMETARGN as tagABORTPATH ptr
type EMRSAVEDC as tagABORTPATH
type PEMRSAVEDC as tagABORTPATH ptr
type EMRREALIZEPALETTE as tagABORTPATH
type PEMRREALIZEPALETTE as tagABORTPATH ptr

type tagEMRSELECTCLIPPATH
 emr as EMR
 iMode as DWORD
end type

type EMRSELECTCLIPPATH as tagEMRSELECTCLIPPATH
type PEMRSELECTCLIPPATH as tagEMRSELECTCLIPPATH ptr
type EMRSETBKMODE as tagEMRSELECTCLIPPATH
type PEMRSETBKMODE as tagEMRSELECTCLIPPATH ptr
type EMRSETMAPMODE as tagEMRSELECTCLIPPATH
type PEMRSETMAPMODE as tagEMRSELECTCLIPPATH ptr
type EMRSETLAYOUT as tagEMRSELECTCLIPPATH
type PEMRSETLAYOUT as tagEMRSELECTCLIPPATH ptr
type EMRSETPOLYFILLMODE as tagEMRSELECTCLIPPATH
type PEMRSETPOLYFILLMODE as tagEMRSELECTCLIPPATH ptr
type EMRSETROP2 as tagEMRSELECTCLIPPATH
type PEMRSETROP2 as tagEMRSELECTCLIPPATH ptr
type EMRSETSTRETCHBLTMODE as tagEMRSELECTCLIPPATH
type PEMRSETSTRETCHBLTMODE as tagEMRSELECTCLIPPATH ptr
type EMRSETICMMODE as tagEMRSELECTCLIPPATH
type PEMRSETICMMODE as tagEMRSELECTCLIPPATH ptr
type EMRSETTEXTALIGN as tagEMRSELECTCLIPPATH
type PEMRSETTEXTALIGN as tagEMRSELECTCLIPPATH ptr

type tagEMRSETMITERLIMIT
 emr as EMR
 eMiterLimit as FLOAT
end type

type EMRSETMITERLIMIT as tagEMRSETMITERLIMIT
type PEMRSETMITERLIMIT as tagEMRSETMITERLIMIT ptr

type tagEMRRESTOREDC
 emr as EMR
 iRelative as LONG
end type

type EMRRESTOREDC as tagEMRRESTOREDC
type PEMRRESTOREDC as tagEMRRESTOREDC ptr

type tagEMRSETARCDIRECTION
 emr as EMR
 iArcDirection as DWORD
end type

type EMRSETARCDIRECTION as tagEMRSETARCDIRECTION
type PEMRSETARCDIRECTION as tagEMRSETARCDIRECTION ptr

type tagEMRSETMAPPERFLAGS
 emr as EMR
 dwFlags as DWORD
end type

type EMRSETMAPPERFLAGS as tagEMRSETMAPPERFLAGS
type PEMRSETMAPPERFLAGS as tagEMRSETMAPPERFLAGS ptr

type tagEMRSETTEXTCOLOR
 emr as EMR
 crColor as COLORREF
end type

type EMRSETBKCOLOR as tagEMRSETTEXTCOLOR
type PEMRSETBKCOLOR as tagEMRSETTEXTCOLOR ptr
type EMRSETTEXTCOLOR as tagEMRSETTEXTCOLOR
type PEMRSETTEXTCOLOR as tagEMRSETTEXTCOLOR ptr

type tagEMRSELECTOBJECT
 emr as EMR
 ihObject as DWORD
end type

type EMRSELECTOBJECT as tagEMRSELECTOBJECT
type PEMRSELECTOBJECT as tagEMRSELECTOBJECT ptr
type EMRDELETEOBJECT as tagEMRSELECTOBJECT
type PEMRDELETEOBJECT as tagEMRSELECTOBJECT ptr

type tagEMRSELECTPALETTE
 emr as EMR
 ihPal as DWORD
end type

type EMRSELECTPALETTE as tagEMRSELECTPALETTE
type PEMRSELECTPALETTE as tagEMRSELECTPALETTE ptr

type tagEMRRESIZEPALETTE
 emr as EMR
 ihPal as DWORD
 cEntries as DWORD
end type

type EMRRESIZEPALETTE as tagEMRRESIZEPALETTE
type PEMRRESIZEPALETTE as tagEMRRESIZEPALETTE ptr

type tagEMRSETPALETTEENTRIES
 emr as EMR
 ihPal as DWORD
 iStart as DWORD
 cEntries as DWORD
 aPalEntries(0 to 0) as PALETTEENTRY
end type

type EMRSETPALETTEENTRIES as tagEMRSETPALETTEENTRIES
type PEMRSETPALETTEENTRIES as tagEMRSETPALETTEENTRIES ptr

type tagEMRSETCOLORADJUSTMENT
 emr as EMR
 ColorAdjustment as COLORADJUSTMENT
end type

type EMRSETCOLORADJUSTMENT as tagEMRSETCOLORADJUSTMENT
type PEMRSETCOLORADJUSTMENT as tagEMRSETCOLORADJUSTMENT ptr

type tagEMRGDICOMMENT
 emr as EMR
 cbData as DWORD
 Data(0 to 0) as UBYTE
end type

type EMRGDICOMMENT as tagEMRGDICOMMENT
type PEMRGDICOMMENT as tagEMRGDICOMMENT ptr

type tagEMREOF
 emr as EMR
 nPalEntries as DWORD
 offPalEntries as DWORD
 nSizeLast as DWORD
end type

type EMREOF as tagEMREOF
type PEMREOF as tagEMREOF ptr

type tagEMRLINETO
 emr as EMR
 ptl as POINTL
end type

type EMRLINETO as tagEMRLINETO
type PEMRLINETO as tagEMRLINETO ptr
type EMRMOVETOEX as tagEMRLINETO
type PEMRMOVETOEX as tagEMRLINETO ptr

type tagEMROFFSETCLIPRGN
 emr as EMR
 ptlOffset as POINTL
end type

type EMROFFSETCLIPRGN as tagEMROFFSETCLIPRGN
type PEMROFFSETCLIPRGN as tagEMROFFSETCLIPRGN ptr

type tagEMRFILLPATH
 emr as EMR
 rclBounds as RECTL
end type

type EMRFILLPATH as tagEMRFILLPATH
type PEMRFILLPATH as tagEMRFILLPATH ptr
type EMRSTROKEANDFILLPATH as tagEMRFILLPATH
type PEMRSTROKEANDFILLPATH as tagEMRFILLPATH ptr
type EMRSTROKEPATH as tagEMRFILLPATH
type PEMRSTROKEPATH as tagEMRFILLPATH ptr

type tagEMREXCLUDECLIPRECT
 emr as EMR
 rclClip as RECTL
end type

type EMREXCLUDECLIPRECT as tagEMREXCLUDECLIPRECT
type PEMREXCLUDECLIPRECT as tagEMREXCLUDECLIPRECT ptr
type EMRINTERSECTCLIPRECT as tagEMREXCLUDECLIPRECT
type PEMRINTERSECTCLIPRECT as tagEMREXCLUDECLIPRECT ptr

type tagEMRSETVIEWPORTORGEX
 emr as EMR
 ptlOrigin as POINTL
end type

type EMRSETVIEWPORTORGEX as tagEMRSETVIEWPORTORGEX
type PEMRSETVIEWPORTORGEX as tagEMRSETVIEWPORTORGEX ptr
type EMRSETWINDOWORGEX as tagEMRSETVIEWPORTORGEX
type PEMRSETWINDOWORGEX as tagEMRSETVIEWPORTORGEX ptr
type EMRSETBRUSHORGEX as tagEMRSETVIEWPORTORGEX
type PEMRSETBRUSHORGEX as tagEMRSETVIEWPORTORGEX ptr

type tagEMRSETVIEWPORTEXTEX
 emr as EMR
 szlExtent as SIZEL
end type

type EMRSETVIEWPORTEXTEX as tagEMRSETVIEWPORTEXTEX
type PEMRSETVIEWPORTEXTEX as tagEMRSETVIEWPORTEXTEX ptr
type EMRSETWINDOWEXTEX as tagEMRSETVIEWPORTEXTEX
type PEMRSETWINDOWEXTEX as tagEMRSETVIEWPORTEXTEX ptr

type tagEMRSCALEVIEWPORTEXTEX
 emr as EMR
 xNum as LONG
 xDenom as LONG
 yNum as LONG
 yDenom as LONG
end type

type EMRSCALEVIEWPORTEXTEX as tagEMRSCALEVIEWPORTEXTEX
type PEMRSCALEVIEWPORTEXTEX as tagEMRSCALEVIEWPORTEXTEX ptr
type EMRSCALEWINDOWEXTEX as tagEMRSCALEVIEWPORTEXTEX
type PEMRSCALEWINDOWEXTEX as tagEMRSCALEVIEWPORTEXTEX ptr

type tagEMRSETWORLDTRANSFORM
 emr as EMR
 xform as XFORM
end type

type EMRSETWORLDTRANSFORM as tagEMRSETWORLDTRANSFORM
type PEMRSETWORLDTRANSFORM as tagEMRSETWORLDTRANSFORM ptr

type tagEMRMODIFYWORLDTRANSFORM
 emr as EMR
 xform as XFORM
 iMode as DWORD
end type

type EMRMODIFYWORLDTRANSFORM as tagEMRMODIFYWORLDTRANSFORM
type PEMRMODIFYWORLDTRANSFORM as tagEMRMODIFYWORLDTRANSFORM ptr

type tagEMRSETPIXELV
 emr as EMR
 ptlPixel as POINTL
 crColor as COLORREF
end type

type EMRSETPIXELV as tagEMRSETPIXELV
type PEMRSETPIXELV as tagEMRSETPIXELV ptr

type tagEMREXTFLOODFILL
 emr as EMR
 ptlStart as POINTL
 crColor as COLORREF
 iMode as DWORD
end type

type EMREXTFLOODFILL as tagEMREXTFLOODFILL
type PEMREXTFLOODFILL as tagEMREXTFLOODFILL ptr

type tagEMRELLIPSE
 emr as EMR
 rclBox as RECTL
end type

type EMRELLIPSE as tagEMRELLIPSE
type PEMRELLIPSE as tagEMRELLIPSE ptr
type EMRRECTANGLE as tagEMRELLIPSE
type PEMRRECTANGLE as tagEMRELLIPSE ptr

type tagEMRROUNDRECT
 emr as EMR
 rclBox as RECTL
 szlCorner as SIZEL
end type

type EMRROUNDRECT as tagEMRROUNDRECT
type PEMRROUNDRECT as tagEMRROUNDRECT ptr

type tagEMRARC
 emr as EMR
 rclBox as RECTL
 ptlStart as POINTL
 ptlEnd as POINTL
end type

type EMRARC as tagEMRARC
type PEMRARC as tagEMRARC ptr
type EMRARCTO as tagEMRARC
type PEMRARCTO as tagEMRARC ptr
type EMRCHORD as tagEMRARC
type PEMRCHORD as tagEMRARC ptr
type EMRPIE as tagEMRARC
type PEMRPIE as tagEMRARC ptr

type tagEMRANGLEARC
 emr as EMR
 ptlCenter as POINTL
 nRadius as DWORD
 eStartAngle as FLOAT
 eSweepAngle as FLOAT
end type

type EMRANGLEARC as tagEMRANGLEARC
type PEMRANGLEARC as tagEMRANGLEARC ptr

type tagEMRPOLYLINE
 emr as EMR
 rclBounds as RECTL
 cptl as DWORD
 aptl(0 to 0) as POINTL
end type

type EMRPOLYLINE as tagEMRPOLYLINE
type PEMRPOLYLINE as tagEMRPOLYLINE ptr
type EMRPOLYBEZIER as tagEMRPOLYLINE
type PEMRPOLYBEZIER as tagEMRPOLYLINE ptr
type EMRPOLYGON as tagEMRPOLYLINE
type PEMRPOLYGON as tagEMRPOLYLINE ptr
type EMRPOLYBEZIERTO as tagEMRPOLYLINE
type PEMRPOLYBEZIERTO as tagEMRPOLYLINE ptr
type EMRPOLYLINETO as tagEMRPOLYLINE
type PEMRPOLYLINETO as tagEMRPOLYLINE ptr

type tagEMRPOLYLINE16
 emr as EMR
 rclBounds as RECTL
 cpts as DWORD
 apts(0 to 0) as POINTS
end type

type EMRPOLYLINE16 as tagEMRPOLYLINE16
type PEMRPOLYLINE16 as tagEMRPOLYLINE16 ptr
type EMRPOLYBEZIER16 as tagEMRPOLYLINE16
type PEMRPOLYBEZIER16 as tagEMRPOLYLINE16 ptr
type EMRPOLYGON16 as tagEMRPOLYLINE16
type PEMRPOLYGON16 as tagEMRPOLYLINE16 ptr
type EMRPOLYBEZIERTO16 as tagEMRPOLYLINE16
type PEMRPOLYBEZIERTO16 as tagEMRPOLYLINE16 ptr
type EMRPOLYLINETO16 as tagEMRPOLYLINE16
type PEMRPOLYLINETO16 as tagEMRPOLYLINE16 ptr

type tagEMRPOLYDRAW
 emr as EMR
 rclBounds as RECTL
 cptl as DWORD
 aptl(0 to 0) as POINTL
 abTypes(0 to 0) as UBYTE
end type

type EMRPOLYDRAW as tagEMRPOLYDRAW
type PEMRPOLYDRAW as tagEMRPOLYDRAW ptr

type tagEMRPOLYDRAW16
 emr as EMR
 rclBounds as RECTL
 cpts as DWORD
 apts(0 to 0) as POINTS
 abTypes(0 to 0) as UBYTE
end type

type EMRPOLYDRAW16 as tagEMRPOLYDRAW16
type PEMRPOLYDRAW16 as tagEMRPOLYDRAW16 ptr

type tagEMRPOLYPOLYLINE
 emr as EMR
 rclBounds as RECTL
 nPolys as DWORD
 cptl as DWORD
 aPolyCounts(0 to 0) as DWORD
 aptl(0 to 0) as POINTL
end type

type EMRPOLYPOLYLINE as tagEMRPOLYPOLYLINE
type PEMRPOLYPOLYLINE as tagEMRPOLYPOLYLINE ptr
type EMRPOLYPOLYGON as tagEMRPOLYPOLYLINE
type PEMRPOLYPOLYGON as tagEMRPOLYPOLYLINE ptr

type tagEMRPOLYPOLYLINE16
 emr as EMR
 rclBounds as RECTL
 nPolys as DWORD
 cpts as DWORD
 aPolyCounts(0 to 0) as DWORD
 apts(0 to 0) as POINTS
end type

type EMRPOLYPOLYLINE16 as tagEMRPOLYPOLYLINE16
type PEMRPOLYPOLYLINE16 as tagEMRPOLYPOLYLINE16 ptr
type EMRPOLYPOLYGON16 as tagEMRPOLYPOLYLINE16
type PEMRPOLYPOLYGON16 as tagEMRPOLYPOLYLINE16 ptr

type tagEMRINVERTRGN
 emr as EMR
 rclBounds as RECTL
 cbRgnData as DWORD
 RgnData(0 to 0) as UBYTE
end type

type EMRINVERTRGN as tagEMRINVERTRGN
type PEMRINVERTRGN as tagEMRINVERTRGN ptr
type EMRPAINTRGN as tagEMRINVERTRGN
type PEMRPAINTRGN as tagEMRINVERTRGN ptr

type tagEMRFILLRGN
 emr as EMR
 rclBounds as RECTL
 cbRgnData as DWORD
 ihBrush as DWORD
 RgnData(0 to 0) as UBYTE
end type

type EMRFILLRGN as tagEMRFILLRGN
type PEMRFILLRGN as tagEMRFILLRGN ptr

type tagEMRFRAMERGN
 emr as EMR
 rclBounds as RECTL
 cbRgnData as DWORD
 ihBrush as DWORD
 szlStroke as SIZEL
 RgnData(0 to 0) as UBYTE
end type

type EMRFRAMERGN as tagEMRFRAMERGN
type PEMRFRAMERGN as tagEMRFRAMERGN ptr

type tagEMREXTSELECTCLIPRGN
 emr as EMR
 cbRgnData as DWORD
 iMode as DWORD
 RgnData(0 to 0) as UBYTE
end type

type EMREXTSELECTCLIPRGN as tagEMREXTSELECTCLIPRGN
type PEMREXTSELECTCLIPRGN as tagEMREXTSELECTCLIPRGN ptr

type tagEMREXTTEXTOUTA
 emr as EMR
 rclBounds as RECTL
 iGraphicsMode as DWORD
 exScale as FLOAT
 eyScale as FLOAT
 emrtext as EMRTEXT
end type

type EMREXTTEXTOUTA as tagEMREXTTEXTOUTA
type PEMREXTTEXTOUTA as tagEMREXTTEXTOUTA ptr
type EMREXTTEXTOUTW as tagEMREXTTEXTOUTA
type PEMREXTTEXTOUTW as tagEMREXTTEXTOUTA ptr

type tagEMRPOLYTEXTOUTA
 emr as EMR
 rclBounds as RECTL
 iGraphicsMode as DWORD
 exScale as FLOAT
 eyScale as FLOAT
 cStrings as LONG
 aemrtext(0 to 0) as EMRTEXT
end type

type EMRPOLYTEXTOUTA as tagEMRPOLYTEXTOUTA
type PEMRPOLYTEXTOUTA as tagEMRPOLYTEXTOUTA ptr
type EMRPOLYTEXTOUTW as tagEMRPOLYTEXTOUTA
type PEMRPOLYTEXTOUTW as tagEMRPOLYTEXTOUTA ptr

type tagEMRBITBLT
 emr as EMR
 rclBounds as RECTL
 xDest as LONG
 yDest as LONG
 cxDest as LONG
 cyDest as LONG
 dwRop as DWORD
 xSrc as LONG
 ySrc as LONG
 xformSrc as XFORM
 crBkColorSrc as COLORREF
 iUsageSrc as DWORD
 offBmiSrc as DWORD
 cbBmiSrc as DWORD
 offBitsSrc as DWORD
 cbBitsSrc as DWORD
end type

type EMRBITBLT as tagEMRBITBLT
type PEMRBITBLT as tagEMRBITBLT ptr

type tagEMRSTRETCHBLT
 emr as EMR
 rclBounds as RECTL
 xDest as LONG
 yDest as LONG
 cxDest as LONG
 cyDest as LONG
 dwRop as DWORD
 xSrc as LONG
 ySrc as LONG
 xformSrc as XFORM
 crBkColorSrc as COLORREF
 iUsageSrc as DWORD
 offBmiSrc as DWORD
 cbBmiSrc as DWORD
 offBitsSrc as DWORD
 cbBitsSrc as DWORD
 cxSrc as LONG
 cySrc as LONG
end type

type EMRSTRETCHBLT as tagEMRSTRETCHBLT
type PEMRSTRETCHBLT as tagEMRSTRETCHBLT ptr

type tagEMRMASKBLT
 emr as EMR
 rclBounds as RECTL
 xDest as LONG
 yDest as LONG
 cxDest as LONG
 cyDest as LONG
 dwRop as DWORD
 xSrc as LONG
 ySrc as LONG
 xformSrc as XFORM
 crBkColorSrc as COLORREF
 iUsageSrc as DWORD
 offBmiSrc as DWORD
 cbBmiSrc as DWORD
 offBitsSrc as DWORD
 cbBitsSrc as DWORD
 xMask as LONG
 yMask as LONG
 iUsageMask as DWORD
 offBmiMask as DWORD
 cbBmiMask as DWORD
 offBitsMask as DWORD
 cbBitsMask as DWORD
end type

type EMRMASKBLT as tagEMRMASKBLT
type PEMRMASKBLT as tagEMRMASKBLT ptr

type tagEMRPLGBLT
 emr as EMR
 rclBounds as RECTL
 aptlDest(0 to 2) as POINTL
 xSrc as LONG
 ySrc as LONG
 cxSrc as LONG
 cySrc as LONG
 xformSrc as XFORM
 crBkColorSrc as COLORREF
 iUsageSrc as DWORD
 offBmiSrc as DWORD
 cbBmiSrc as DWORD
 offBitsSrc as DWORD
 cbBitsSrc as DWORD
 xMask as LONG
 yMask as LONG
 iUsageMask as DWORD
 offBmiMask as DWORD
 cbBmiMask as DWORD
 offBitsMask as DWORD
 cbBitsMask as DWORD
end type

type EMRPLGBLT as tagEMRPLGBLT
type PEMRPLGBLT as tagEMRPLGBLT ptr

type tagEMRSETDIBITSTODEVICE
 emr as EMR
 rclBounds as RECTL
 xDest as LONG
 yDest as LONG
 xSrc as LONG
 ySrc as LONG
 cxSrc as LONG
 cySrc as LONG
 offBmiSrc as DWORD
 cbBmiSrc as DWORD
 offBitsSrc as DWORD
 cbBitsSrc as DWORD
 iUsageSrc as DWORD
 iStartScan as DWORD
 cScans as DWORD
end type

type EMRSETDIBITSTODEVICE as tagEMRSETDIBITSTODEVICE
type PEMRSETDIBITSTODEVICE as tagEMRSETDIBITSTODEVICE ptr

type tagEMRSTRETCHDIBITS
 emr as EMR
 rclBounds as RECTL
 xDest as LONG
 yDest as LONG
 xSrc as LONG
 ySrc as LONG
 cxSrc as LONG
 cySrc as LONG
 offBmiSrc as DWORD
 cbBmiSrc as DWORD
 offBitsSrc as DWORD
 cbBitsSrc as DWORD
 iUsageSrc as DWORD
 dwRop as DWORD
 cxDest as LONG
 cyDest as LONG
end type

type EMRSTRETCHDIBITS as tagEMRSTRETCHDIBITS
type PEMRSTRETCHDIBITS as tagEMRSTRETCHDIBITS ptr

type tagEMREXTCREATEFONTINDIRECTW
 emr as EMR
 ihFont as DWORD
 elfw as EXTLOGFONTW
end type

type EMREXTCREATEFONTINDIRECTW as tagEMREXTCREATEFONTINDIRECTW
type PEMREXTCREATEFONTINDIRECTW as tagEMREXTCREATEFONTINDIRECTW ptr

type tagEMRCREATEPALETTE
 emr as EMR
 ihPal as DWORD
 lgpl as LOGPALETTE
end type

type EMRCREATEPALETTE as tagEMRCREATEPALETTE
type PEMRCREATEPALETTE as tagEMRCREATEPALETTE ptr

type tagEMRCREATEPEN
 emr as EMR
 ihPen as DWORD
 lopn as LOGPEN
end type

type EMRCREATEPEN as tagEMRCREATEPEN
type PEMRCREATEPEN as tagEMRCREATEPEN ptr

type tagEMREXTCREATEPEN
 emr as EMR
 ihPen as DWORD
 offBmi as DWORD
 cbBmi as DWORD
 offBits as DWORD
 cbBits as DWORD
 elp as EXTLOGPEN
end type

type EMREXTCREATEPEN as tagEMREXTCREATEPEN
type PEMREXTCREATEPEN as tagEMREXTCREATEPEN ptr

type tagEMRCREATEBRUSHINDIRECT
 emr as EMR
 ihBrush as DWORD
 lb as LOGBRUSH32
end type

type EMRCREATEBRUSHINDIRECT as tagEMRCREATEBRUSHINDIRECT
type PEMRCREATEBRUSHINDIRECT as tagEMRCREATEBRUSHINDIRECT ptr

type tagEMRCREATEMONOBRUSH
 emr as EMR
 ihBrush as DWORD
 iUsage as DWORD
 offBmi as DWORD
 cbBmi as DWORD
 offBits as DWORD
 cbBits as DWORD
end type

type EMRCREATEMONOBRUSH as tagEMRCREATEMONOBRUSH
type PEMRCREATEMONOBRUSH as tagEMRCREATEMONOBRUSH ptr

type tagEMRCREATEDIBPATTERNBRUSHPT
 emr as EMR
 ihBrush as DWORD
 iUsage as DWORD
 offBmi as DWORD
 cbBmi as DWORD
 offBits as DWORD
 cbBits as DWORD
end type

type EMRCREATEDIBPATTERNBRUSHPT as tagEMRCREATEDIBPATTERNBRUSHPT
type PEMRCREATEDIBPATTERNBRUSHPT as tagEMRCREATEDIBPATTERNBRUSHPT ptr

type tagEMRFORMAT
 dSignature as DWORD
 nVersion as DWORD
 cbData as DWORD
 offData as DWORD
end type

type EMRFORMAT as tagEMRFORMAT
type PEMRFORMAT as tagEMRFORMAT ptr

type tagEMRGLSRECORD
 emr as EMR
 cbData as DWORD
 Data(0 to 0) as UBYTE
end type

type EMRGLSRECORD as tagEMRGLSRECORD
type PEMRGLSRECORD as tagEMRGLSRECORD ptr

type tagEMRGLSBOUNDEDRECORD
 emr as EMR
 rclBounds as RECTL
 cbData as DWORD
 Data(0 to 0) as UBYTE
end type

type EMRGLSBOUNDEDRECORD as tagEMRGLSBOUNDEDRECORD
type PEMRGLSBOUNDEDRECORD as tagEMRGLSBOUNDEDRECORD ptr

type tagEMRPIXELFORMAT
 emr as EMR
 pfd as PIXELFORMATDESCRIPTOR
end type

type EMRPIXELFORMAT as tagEMRPIXELFORMAT
type PEMRPIXELFORMAT as tagEMRPIXELFORMAT ptr

type tagEMRCREATECOLORSPACE
 emr as EMR
 ihCS as DWORD
 lcs as LOGCOLORSPACEA
end type

type EMRCREATECOLORSPACE as tagEMRCREATECOLORSPACE
type PEMRCREATECOLORSPACE as tagEMRCREATECOLORSPACE ptr

type tagEMRSETCOLORSPACE
 emr as EMR
 ihCS as DWORD
end type

type EMRSETCOLORSPACE as tagEMRSETCOLORSPACE
type PEMRSETCOLORSPACE as tagEMRSETCOLORSPACE ptr
type EMRSELECTCOLORSPACE as tagEMRSETCOLORSPACE
type PEMRSELECTCOLORSPACE as tagEMRSETCOLORSPACE ptr
type EMRDELETECOLORSPACE as tagEMRSETCOLORSPACE
type PEMRDELETECOLORSPACE as tagEMRSETCOLORSPACE ptr

type tagEMREXTESCAPE
 emr as EMR
 iEscape as INT_
 cbEscData as INT_
 EscData(0 to 0) as UBYTE
end type

type EMREXTESCAPE as tagEMREXTESCAPE
type PEMREXTESCAPE as tagEMREXTESCAPE ptr
type EMRDRAWESCAPE as tagEMREXTESCAPE
type PEMRDRAWESCAPE as tagEMREXTESCAPE ptr

type tagEMRNAMEDESCAPE
 emr as EMR
 iEscape as INT_
 cbDriver as INT_
 cbEscData as INT_
 EscData(0 to 0) as UBYTE
end type

type EMRNAMEDESCAPE as tagEMRNAMEDESCAPE
type PEMRNAMEDESCAPE as tagEMRNAMEDESCAPE ptr
const SETICMPROFILE_EMBEDED = &h00000001

type tagEMRSETICMPROFILE
 emr as EMR
 dwFlags as DWORD
 cbName as DWORD
 cbData as DWORD
 Data(0 to 0) as UBYTE
end type

type EMRSETICMPROFILE as tagEMRSETICMPROFILE
type PEMRSETICMPROFILE as tagEMRSETICMPROFILE ptr
type EMRSETICMPROFILEA as tagEMRSETICMPROFILE
type PEMRSETICMPROFILEA as tagEMRSETICMPROFILE ptr
type EMRSETICMPROFILEW as tagEMRSETICMPROFILE
type PEMRSETICMPROFILEW as tagEMRSETICMPROFILE ptr
const CREATECOLORSPACE_EMBEDED = &h00000001

type tagEMRCREATECOLORSPACEW
 emr as EMR
 ihCS as DWORD
 lcs as LOGCOLORSPACEW
 dwFlags as DWORD
 cbData as DWORD
 Data(0 to 0) as UBYTE
end type

type EMRCREATECOLORSPACEW as tagEMRCREATECOLORSPACEW
type PEMRCREATECOLORSPACEW as tagEMRCREATECOLORSPACEW ptr
const COLORMATCHTOTARGET_EMBEDED = &h00000001

type tagCOLORMATCHTOTARGET
 emr as EMR
 dwAction as DWORD
 dwFlags as DWORD
 cbName as DWORD
 cbData as DWORD
 Data(0 to 0) as UBYTE
end type

type EMRCOLORMATCHTOTARGET as tagCOLORMATCHTOTARGET
type PEMRCOLORMATCHTOTARGET as tagCOLORMATCHTOTARGET ptr

type tagCOLORCORRECTPALETTE
 emr as EMR
 ihPalette as DWORD
 nFirstEntry as DWORD
 nPalEntries as DWORD
 nReserved as DWORD
end type

type EMRCOLORCORRECTPALETTE as tagCOLORCORRECTPALETTE
type PEMRCOLORCORRECTPALETTE as tagCOLORCORRECTPALETTE ptr

type tagEMRALPHABLEND
 emr as EMR
 rclBounds as RECTL
 xDest as LONG
 yDest as LONG
 cxDest as LONG
 cyDest as LONG
 dwRop as DWORD
 xSrc as LONG
 ySrc as LONG
 xformSrc as XFORM
 crBkColorSrc as COLORREF
 iUsageSrc as DWORD
 offBmiSrc as DWORD
 cbBmiSrc as DWORD
 offBitsSrc as DWORD
 cbBitsSrc as DWORD
 cxSrc as LONG
 cySrc as LONG
end type

type EMRALPHABLEND as tagEMRALPHABLEND
type PEMRALPHABLEND as tagEMRALPHABLEND ptr

type tagEMRGRADIENTFILL
 emr as EMR
 rclBounds as RECTL
 nVer as DWORD
 nTri as DWORD
 ulMode as ULONG
 Ver(0 to 0) as TRIVERTEX
end type

type EMRGRADIENTFILL as tagEMRGRADIENTFILL
type PEMRGRADIENTFILL as tagEMRGRADIENTFILL ptr

type tagEMRTRANSPARENTBLT
 emr as EMR
 rclBounds as RECTL
 xDest as LONG
 yDest as LONG
 cxDest as LONG
 cyDest as LONG
 dwRop as DWORD
 xSrc as LONG
 ySrc as LONG
 xformSrc as XFORM
 crBkColorSrc as COLORREF
 iUsageSrc as DWORD
 offBmiSrc as DWORD
 cbBmiSrc as DWORD
 offBitsSrc as DWORD
 cbBitsSrc as DWORD
 cxSrc as LONG
 cySrc as LONG
end type

type EMRTRANSPARENTBLT as tagEMRTRANSPARENTBLT
type PEMRTRANSPARENTBLT as tagEMRTRANSPARENTBLT ptr
const GDICOMMENT_IDENTIFIER = &h43494447
const GDICOMMENT_WINDOWS_METAFILE = &h80000001
const GDICOMMENT_BEGINGROUP = &h00000002
const GDICOMMENT_ENDGROUP = &h00000003
const GDICOMMENT_MULTIFORMATS = &h40000004
const EPS_SIGNATURE = &h46535045
const GDICOMMENT_UNICODE_STRING = &h00000040
const GDICOMMENT_UNICODE_END = &h00000080

declare function wglCopyContext(byval as HGLRC, byval as HGLRC, byval as UINT) as WINBOOL
declare function wglCreateContext(byval as HDC) as HGLRC
declare function wglCreateLayerContext(byval as HDC, byval as long) as HGLRC
declare function wglDeleteContext(byval as HGLRC) as WINBOOL
declare function wglGetCurrentContext() as HGLRC
declare function wglGetCurrentDC() as HDC
declare function wglGetProcAddress(byval as LPCSTR) as PROC
declare function wglMakeCurrent(byval as HDC, byval as HGLRC) as WINBOOL
declare function wglShareLists(byval as HGLRC, byval as HGLRC) as WINBOOL
declare function wglUseFontBitmapsA(byval as HDC, byval as DWORD, byval as DWORD, byval as DWORD) as WINBOOL

 declare function wglUseFontBitmaps alias "wglUseFontBitmapsA"(byval as HDC, byval as DWORD, byval as DWORD, byval as DWORD) as WINBOOL

declare function wglUseFontBitmapsW(byval as HDC, byval as DWORD, byval as DWORD, byval as DWORD) as WINBOOL


declare function SwapBuffers(byval as HDC) as WINBOOL

type _POINTFLOAT
 x as FLOAT
 y as FLOAT
end type

type POINTFLOAT as _POINTFLOAT
type PPOINTFLOAT as _POINTFLOAT ptr

type _GLYPHMETRICSFLOAT
 gmfBlackBoxX as FLOAT
 gmfBlackBoxY as FLOAT
 gmfptGlyphOrigin as POINTFLOAT
 gmfCellIncX as FLOAT
 gmfCellIncY as FLOAT
end type

type GLYPHMETRICSFLOAT as _GLYPHMETRICSFLOAT
type PGLYPHMETRICSFLOAT as _GLYPHMETRICSFLOAT ptr
type LPGLYPHMETRICSFLOAT as _GLYPHMETRICSFLOAT ptr
const WGL_FONT_LINES = 0
const WGL_FONT_POLYGONS = 1
declare function wglUseFontOutlinesA(byval as HDC, byval as DWORD, byval as DWORD, byval as DWORD, byval as FLOAT, byval as FLOAT, byval as long, byval as LPGLYPHMETRICSFLOAT) as WINBOOL

 declare function wglUseFontOutlines alias "wglUseFontOutlinesA"(byval as HDC, byval as DWORD, byval as DWORD, byval as DWORD, byval as FLOAT, byval as FLOAT, byval as long, byval as LPGLYPHMETRICSFLOAT) as WINBOOL

declare function wglUseFontOutlinesW(byval as HDC, byval as DWORD, byval as DWORD, byval as DWORD, byval as FLOAT, byval as FLOAT, byval as long, byval as LPGLYPHMETRICSFLOAT) as WINBOOL


type tagLAYERPLANEDESCRIPTOR
 nSize as WORD
 nVersion as WORD
 dwFlags as DWORD
 iPixelType as UBYTE
 cColorBits as UBYTE
 cRedBits as UBYTE
 cRedShift as UBYTE
 cGreenBits as UBYTE
 cGreenShift as UBYTE
 cBlueBits as UBYTE
 cBlueShift as UBYTE
 cAlphaBits as UBYTE
 cAlphaShift as UBYTE
 cAccumBits as UBYTE
 cAccumRedBits as UBYTE
 cAccumGreenBits as UBYTE
 cAccumBlueBits as UBYTE
 cAccumAlphaBits as UBYTE
 cDepthBits as UBYTE
 cStencilBits as UBYTE
 cAuxBuffers as UBYTE
 iLayerPlane as UBYTE
 bReserved as UBYTE
 crTransparent as COLORREF
end type

type LAYERPLANEDESCRIPTOR as tagLAYERPLANEDESCRIPTOR
type PLAYERPLANEDESCRIPTOR as tagLAYERPLANEDESCRIPTOR ptr
type LPLAYERPLANEDESCRIPTOR as tagLAYERPLANEDESCRIPTOR ptr

const LPD_DOUBLEBUFFER = &h00000001
const LPD_STEREO = &h00000002
const LPD_SUPPORT_GDI = &h00000010
const LPD_SUPPORT_OPENGL = &h00000020
const LPD_SHARE_DEPTH = &h00000040
const LPD_SHARE_STENCIL = &h00000080
const LPD_SHARE_ACCUM = &h00000100
const LPD_SWAP_EXCHANGE = &h00000200
const LPD_SWAP_COPY = &h00000400
const LPD_TRANSPARENT = &h00001000
const LPD_TYPE_RGBA = 0
const LPD_TYPE_COLORINDEX = 1
const WGL_SWAP_MAIN_PLANE = &h00000001
const WGL_SWAP_OVERLAY1 = &h00000002
const WGL_SWAP_OVERLAY2 = &h00000004
const WGL_SWAP_OVERLAY3 = &h00000008
const WGL_SWAP_OVERLAY4 = &h00000010
const WGL_SWAP_OVERLAY5 = &h00000020
const WGL_SWAP_OVERLAY6 = &h00000040
const WGL_SWAP_OVERLAY7 = &h00000080
const WGL_SWAP_OVERLAY8 = &h00000100
const WGL_SWAP_OVERLAY9 = &h00000200
const WGL_SWAP_OVERLAY10 = &h00000400
const WGL_SWAP_OVERLAY11 = &h00000800
const WGL_SWAP_OVERLAY12 = &h00001000
const WGL_SWAP_OVERLAY13 = &h00002000
const WGL_SWAP_OVERLAY14 = &h00004000
const WGL_SWAP_OVERLAY15 = &h00008000
const WGL_SWAP_UNDERLAY1 = &h00010000
const WGL_SWAP_UNDERLAY2 = &h00020000
const WGL_SWAP_UNDERLAY3 = &h00040000
const WGL_SWAP_UNDERLAY4 = &h00080000
const WGL_SWAP_UNDERLAY5 = &h00100000
const WGL_SWAP_UNDERLAY6 = &h00200000
const WGL_SWAP_UNDERLAY7 = &h00400000
const WGL_SWAP_UNDERLAY8 = &h00800000
const WGL_SWAP_UNDERLAY9 = &h01000000
const WGL_SWAP_UNDERLAY10 = &h02000000
const WGL_SWAP_UNDERLAY11 = &h04000000
const WGL_SWAP_UNDERLAY12 = &h08000000
const WGL_SWAP_UNDERLAY13 = &h10000000
const WGL_SWAP_UNDERLAY14 = &h20000000
const WGL_SWAP_UNDERLAY15 = &h40000000

declare function wglDescribeLayerPlane(byval as HDC, byval as long, byval as long, byval as UINT, byval as LPLAYERPLANEDESCRIPTOR) as WINBOOL
declare function wglSetLayerPaletteEntries(byval as HDC, byval as long, byval as long, byval as long, byval as const COLORREF ptr) as long
declare function wglGetLayerPaletteEntries(byval as HDC, byval as long, byval as long, byval as long, byval as COLORREF ptr) as long
declare function wglRealizeLayerPalette(byval as HDC, byval as long, byval as WINBOOL) as WINBOOL
declare function wglSwapLayerBuffers(byval as HDC, byval as UINT) as WINBOOL

type _WGLSWAP
 hdc as HDC
 uiFlags as UINT
end type

type WGLSWAP as _WGLSWAP
type PWGLSWAP as _WGLSWAP ptr
type LPWGLSWAP as _WGLSWAP ptr
const WGL_SWAPMULTIPLE_MAX = 16
declare function wglSwapMultipleBuffers(byval as UINT, byval as const WGLSWAP ptr) as DWORD

end extern


#inclib "user32"



extern "Windows"

type HDWP as HANDLE
type MENUTEMPLATEA as any
type MENUTEMPLATEW as any
type LPMENUTEMPLATEA as PVOID
type LPMENUTEMPLATEW as PVOID

 type MENUTEMPLATE as MENUTEMPLATEA
 type LPMENUTEMPLATE as LPMENUTEMPLATEA

type WNDPROC as function(byval as HWND, byval as UINT, byval as WPARAM, byval as LPARAM) as LRESULT
type DLGPROC as function(byval as HWND, byval as UINT, byval as WPARAM, byval as LPARAM) as INT_PTR
type TIMERPROC as sub(byval as HWND, byval as UINT, byval as UINT_PTR, byval as DWORD)
type GRAYSTRINGPROC as function(byval as HDC, byval as LPARAM, byval as long) as WINBOOL
type WNDENUMPROC as function(byval as HWND, byval as LPARAM) as WINBOOL
type ENUMWINDOWSPROC as WNDENUMPROC
type HOOKPROC as function(byval code as long, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT
type SENDASYNCPROC as sub(byval as HWND, byval as UINT, byval as ULONG_PTR, byval as LRESULT)
type PROPENUMPROCA as function(byval as HWND, byval as LPCSTR, byval as HANDLE) as WINBOOL
type PROPENUMPROCW as function(byval as HWND, byval as LPCWSTR, byval as HANDLE) as WINBOOL
type PROPENUMPROCEXA as function(byval as HWND, byval as LPSTR, byval as HANDLE, byval as ULONG_PTR) as WINBOOL
type PROPENUMPROCEXW as function(byval as HWND, byval as LPWSTR, byval as HANDLE, byval as ULONG_PTR) as WINBOOL
type EDITWORDBREAKPROCA as function(byval lpch as LPSTR, byval ichCurrent as long, byval cch as long, byval code as long) as long
type EDITWORDBREAKPROCW as function(byval lpch as LPWSTR, byval ichCurrent as long, byval cch as long, byval code as long) as long
type DRAWSTATEPROC as function(byval hdc as HDC, byval lData as LPARAM, byval wData as WPARAM, byval cx as long, byval cy as long) as WINBOOL

 type PROPENUMPROC as PROPENUMPROCA
 type PROPENUMPROCEX as PROPENUMPROCEXA
 type EDITWORDBREAKPROC as EDITWORDBREAKPROCA

type NAMEENUMPROCA as function(byval as LPSTR, byval as LPARAM) as WINBOOL
type NAMEENUMPROCW as function(byval as LPWSTR, byval as LPARAM) as WINBOOL
type WINSTAENUMPROCA as NAMEENUMPROCA
type WINSTAENUMPROCW as NAMEENUMPROCW
type DESKTOPENUMPROCA as NAMEENUMPROCA
type DESKTOPENUMPROCW as NAMEENUMPROCW

 type WINSTAENUMPROC as WINSTAENUMPROCA
 type DESKTOPENUMPROC as DESKTOPENUMPROCA



const DIFFERENCE = 11


declare function wvsprintfA(byval as LPSTR, byval as LPCSTR, byval arglist as va_list) as long
declare function wvsprintfW(byval as LPWSTR, byval as LPCWSTR, byval arglist as va_list) as long
declare function wsprintfA cdecl(byval as LPSTR, byval as LPCSTR, ...) as long
declare function wsprintfW cdecl(byval as LPWSTR, byval as LPCWSTR, ...) as long

const SETWALLPAPER_DEFAULT = cast(LPWSTR, -1)
const SB_HORZ = 0
const SB_VERT = 1
const SB_CTL = 2
const SB_BOTH = 3
const SB_LINEUP = 0
const SB_LINELEFT = 0
const SB_LINEDOWN = 1
const SB_LINERIGHT = 1
const SB_PAGEUP = 2
const SB_PAGELEFT = 2
const SB_PAGEDOWN = 3
const SB_PAGERIGHT = 3
const SB_THUMBPOSITION = 4
const SB_THUMBTRACK = 5
const SB_TOP = 6
const SB_LEFT = 6
const SB_BOTTOM = 7
const SB_RIGHT = 7
const SB_ENDSCROLL = 8
const SW_HIDE = 0
const SW_SHOWNORMAL = 1
const SW_NORMAL = 1
const SW_SHOWMINIMIZED = 2
const SW_SHOWMAXIMIZED = 3
const SW_MAXIMIZE = 3
const SW_SHOWNOACTIVATE = 4
const SW_SHOW = 5
const SW_MINIMIZE = 6
const SW_SHOWMINNOACTIVE = 7
const SW_SHOWNA = 8
const SW_RESTORE = 9
const SW_SHOWDEFAULT = 10
const SW_FORCEMINIMIZE = 11
const SW_MAX = 11
const HIDE_WINDOW = 0
const SHOW_OPENWINDOW = 1
const SHOW_ICONWINDOW = 2
const SHOW_FULLSCREEN = 3
const SHOW_OPENNOACTIVATE = 4
const SW_PARENTCLOSING = 1
const SW_OTHERZOOM = 2
const SW_PARENTOPENING = 3
const SW_OTHERUNZOOM = 4
const AW_HOR_POSITIVE = &h00000001
const AW_HOR_NEGATIVE = &h00000002
const AW_VER_POSITIVE = &h00000004
const AW_VER_NEGATIVE = &h00000008
const AW_CENTER = &h00000010
const AW_HIDE = &h00010000
const AW_ACTIVATE = &h00020000
const AW_SLIDE = &h00040000
const AW_BLEND = &h00080000
const KF_EXTENDED = &h0100
const KF_DLGMODE = &h0800
const KF_MENUMODE = &h1000
const KF_ALTDOWN = &h2000
const KF_REPEAT = &h4000
const KF_UP = &h8000
const VK_LBUTTON = &h01
const VK_RBUTTON = &h02
const VK_CANCEL = &h03
const VK_MBUTTON = &h04
const VK_XBUTTON1 = &h05
const VK_XBUTTON2 = &h06
const VK_BACK = &h08
const VK_TAB = &h09
const VK_CLEAR = &h0C
const VK_RETURN = &h0D
const VK_SHIFT = &h10
const VK_CONTROL = &h11
const VK_MENU = &h12
const VK_PAUSE = &h13
const VK_CAPITAL = &h14
const VK_KANA = &h15
const VK_HANGEUL = &h15
const VK_HANGUL = &h15
const VK_JUNJA = &h17
const VK_FINAL = &h18
const VK_HANJA = &h19
const VK_KANJI = &h19
const VK_ESCAPE = &h1B
const VK_CONVERT = &h1C
const VK_NONCONVERT = &h1D
const VK_ACCEPT = &h1E
const VK_MODECHANGE = &h1F
const VK_SPACE = &h20
const VK_PRIOR = &h21
const VK_NEXT = &h22
const VK_END = &h23
const VK_HOME = &h24
const VK_LEFT = &h25
const VK_UP = &h26
const VK_RIGHT = &h27
const VK_DOWN = &h28
const VK_SELECT = &h29
const VK_PRINT = &h2A
const VK_EXECUTE = &h2B
const VK_SNAPSHOT = &h2C
const VK_INSERT = &h2D
const VK_DELETE = &h2E
const VK_HELP = &h2F
const VK_0 = &h30
const VK_1 = &h31
const VK_2 = &h32
const VK_3 = &h33
const VK_4 = &h34
const VK_5 = &h35
const VK_6 = &h36
const VK_7 = &h37
const VK_8 = &h38
const VK_9 = &h39
const VK_A = &h41
const VK_B = &h42
const VK_C = &h43
const VK_D = &h44
const VK_E = &h45
const VK_F = &h46
const VK_G = &h47
const VK_H = &h48
const VK_I = &h49
const VK_J = &h4A
const VK_K = &h4B
const VK_L = &h4C
const VK_M = &h4D
const VK_N = &h4E
const VK_O = &h4F
const VK_P = &h50
const VK_Q = &h51
const VK_R = &h52
const VK_S = &h53
const VK_T = &h54
const VK_U = &h55
const VK_V = &h56
const VK_W = &h57
const VK_X = &h58
const VK_Y = &h59
const VK_Z = &h5A
const VK_LWIN = &h5B
const VK_RWIN = &h5C
const VK_APPS = &h5D
const VK_SLEEP = &h5F
const VK_NUMPAD0 = &h60
const VK_NUMPAD1 = &h61
const VK_NUMPAD2 = &h62
const VK_NUMPAD3 = &h63
const VK_NUMPAD4 = &h64
const VK_NUMPAD5 = &h65
const VK_NUMPAD6 = &h66
const VK_NUMPAD7 = &h67
const VK_NUMPAD8 = &h68
const VK_NUMPAD9 = &h69
const VK_MULTIPLY = &h6A
const VK_ADD = &h6B
const VK_SEPARATOR = &h6C
const VK_SUBTRACT = &h6D
const VK_DECIMAL = &h6E
const VK_DIVIDE = &h6F
const VK_F1 = &h70
const VK_F2 = &h71
const VK_F3 = &h72
const VK_F4 = &h73
const VK_F5 = &h74
const VK_F6 = &h75
const VK_F7 = &h76
const VK_F8 = &h77
const VK_F9 = &h78
const VK_F10 = &h79
const VK_F11 = &h7A
const VK_F12 = &h7B
const VK_F13 = &h7C
const VK_F14 = &h7D
const VK_F15 = &h7E
const VK_F16 = &h7F
const VK_F17 = &h80
const VK_F18 = &h81
const VK_F19 = &h82
const VK_F20 = &h83
const VK_F21 = &h84
const VK_F22 = &h85
const VK_F23 = &h86
const VK_F24 = &h87
const VK_NUMLOCK = &h90
const VK_SCROLL = &h91
const VK_OEM_NEC_EQUAL = &h92
const VK_OEM_FJ_JISHO = &h92
const VK_OEM_FJ_MASSHOU = &h93
const VK_OEM_FJ_TOUROKU = &h94
const VK_OEM_FJ_LOYA = &h95
const VK_OEM_FJ_ROYA = &h96
const VK_LSHIFT = &hA0
const VK_RSHIFT = &hA1
const VK_LCONTROL = &hA2
const VK_RCONTROL = &hA3
const VK_LMENU = &hA4
const VK_RMENU = &hA5
const VK_BROWSER_BACK = &hA6
const VK_BROWSER_FORWARD = &hA7
const VK_BROWSER_REFRESH = &hA8
const VK_BROWSER_STOP = &hA9
const VK_BROWSER_SEARCH = &hAA
const VK_BROWSER_FAVORITES = &hAB
const VK_BROWSER_HOME = &hAC
const VK_VOLUME_MUTE = &hAD
const VK_VOLUME_DOWN = &hAE
const VK_VOLUME_UP = &hAF
const VK_MEDIA_NEXT_TRACK = &hB0
const VK_MEDIA_PREV_TRACK = &hB1
const VK_MEDIA_STOP = &hB2
const VK_MEDIA_PLAY_PAUSE = &hB3
const VK_LAUNCH_MAIL = &hB4
const VK_LAUNCH_MEDIA_SELECT = &hB5
const VK_LAUNCH_APP1 = &hB6
const VK_LAUNCH_APP2 = &hB7
const VK_OEM_1 = &hBA
const VK_OEM_PLUS = &hBB
const VK_OEM_COMMA = &hBC
const VK_OEM_MINUS = &hBD
const VK_OEM_PERIOD = &hBE
const VK_OEM_2 = &hBF
const VK_OEM_3 = &hC0
const VK_OEM_4 = &hDB
const VK_OEM_5 = &hDC
const VK_OEM_6 = &hDD
const VK_OEM_7 = &hDE
const VK_OEM_8 = &hDF
const VK_OEM_AX = &hE1
const VK_OEM_102 = &hE2
const VK_ICO_HELP = &hE3
const VK_ICO_00 = &hE4
const VK_PROCESSKEY = &hE5
const VK_ICO_CLEAR = &hE6
const VK_PACKET = &hE7
const VK_OEM_RESET = &hE9
const VK_OEM_JUMP = &hEA
const VK_OEM_PA1 = &hEB
const VK_OEM_PA2 = &hEC
const VK_OEM_PA3 = &hED
const VK_OEM_WSCTRL = &hEE
const VK_OEM_CUSEL = &hEF
const VK_OEM_ATTN = &hF0
const VK_OEM_FINISH = &hF1
const VK_OEM_COPY = &hF2
const VK_OEM_AUTO = &hF3
const VK_OEM_ENLW = &hF4
const VK_OEM_BACKTAB = &hF5
const VK_ATTN = &hF6
const VK_CRSEL = &hF7
const VK_EXSEL = &hF8
const VK_EREOF = &hF9
const VK_PLAY = &hFA
const VK_ZOOM = &hFB
const VK_NONAME = &hFC
const VK_PA1 = &hFD
const VK_OEM_CLEAR = &hFE
const WH_MIN = -1
const WH_MSGFILTER = -1
const WH_JOURNALRECORD = 0
const WH_JOURNALPLAYBACK = 1
const WH_KEYBOARD = 2
const WH_GETMESSAGE = 3
const WH_CALLWNDPROC = 4
const WH_CBT = 5
const WH_SYSMSGFILTER = 6
const WH_MOUSE = 7
const WH_HARDWARE = 8
const WH_DEBUG = 9
const WH_SHELL = 10
const WH_FOREGROUNDIDLE = 11
const WH_CALLWNDPROCRET = 12
const WH_KEYBOARD_LL = 13
const WH_MOUSE_LL = 14
const WH_MAX = 14
const WH_MINHOOK = WH_MIN
const WH_MAXHOOK = WH_MAX
const HC_ACTION = 0
const HC_GETNEXT = 1
const HC_SKIP = 2
const HC_NOREMOVE = 3
const HC_NOREM = HC_NOREMOVE
const HC_SYSMODALON = 4
const HC_SYSMODALOFF = 5
const HCBT_MOVESIZE = 0
const HCBT_MINMAX = 1
const HCBT_QS = 2
const HCBT_CREATEWND = 3
const HCBT_DESTROYWND = 4
const HCBT_ACTIVATE = 5
const HCBT_CLICKSKIPPED = 6
const HCBT_KEYSKIPPED = 7
const HCBT_SYSCOMMAND = 8
const HCBT_SETFOCUS = 9
type tagCREATESTRUCTA as tagCREATESTRUCTA_

type tagCBT_CREATEWNDA
 lpcs as tagCREATESTRUCTA ptr
 hwndInsertAfter as HWND
end type

type CBT_CREATEWNDA as tagCBT_CREATEWNDA
type LPCBT_CREATEWNDA as tagCBT_CREATEWNDA ptr
type tagCREATESTRUCTW as tagCREATESTRUCTW_

type tagCBT_CREATEWNDW
 lpcs as tagCREATESTRUCTW ptr
 hwndInsertAfter as HWND
end type

type CBT_CREATEWNDW as tagCBT_CREATEWNDW
type LPCBT_CREATEWNDW as tagCBT_CREATEWNDW ptr

 type CBT_CREATEWND as CBT_CREATEWNDA
 type LPCBT_CREATEWND as LPCBT_CREATEWNDA

type tagCBTACTIVATESTRUCT
 fMouse as WINBOOL
 hWndActive as HWND
end type

type CBTACTIVATESTRUCT as tagCBTACTIVATESTRUCT
type LPCBTACTIVATESTRUCT as tagCBTACTIVATESTRUCT ptr

type tagWTSSESSION_NOTIFICATION
 cbSize as DWORD
 dwSessionId as DWORD
end type

type WTSSESSION_NOTIFICATION as tagWTSSESSION_NOTIFICATION
type PWTSSESSION_NOTIFICATION as tagWTSSESSION_NOTIFICATION ptr
const WTS_CONSOLE_CONNECT = &h1
const WTS_CONSOLE_DISCONNECT = &h2
const WTS_REMOTE_CONNECT = &h3
const WTS_REMOTE_DISCONNECT = &h4
const WTS_SESSION_LOGON = &h5
const WTS_SESSION_LOGOFF = &h6
const WTS_SESSION_LOCK = &h7
const WTS_SESSION_UNLOCK = &h8
const WTS_SESSION_REMOTE_CONTROL = &h9
const WTS_SESSION_CREATE = &ha
const WTS_SESSION_TERMINATE = &hb
const MSGF_DIALOGBOX = 0
const MSGF_MESSAGEBOX = 1
const MSGF_MENU = 2
const MSGF_SCROLLBAR = 5
const MSGF_NEXTWINDOW = 6
const MSGF_MAX = 8
const MSGF_USER = 4096
const HSHELL_WINDOWCREATED = 1
const HSHELL_WINDOWDESTROYED = 2
const HSHELL_ACTIVATESHELLWINDOW = 3
const HSHELL_WINDOWACTIVATED = 4
const HSHELL_GETMINRECT = 5
const HSHELL_REDRAW = 6
const HSHELL_TASKMAN = 7
const HSHELL_LANGUAGE = 8
const HSHELL_SYSMENU = 9
const HSHELL_ENDTASK = 10
const HSHELL_ACCESSIBILITYSTATE = 11
const HSHELL_APPCOMMAND = 12
const HSHELL_WINDOWREPLACED = 13
const HSHELL_WINDOWREPLACING = 14


const HSHELL_HIGHBIT = &h8000
const HSHELL_FLASH = HSHELL_REDRAW or HSHELL_HIGHBIT
const HSHELL_RUDEAPPACTIVATED = HSHELL_WINDOWACTIVATED or HSHELL_HIGHBIT
const ACCESS_STICKYKEYS = &h0001
const ACCESS_FILTERKEYS = &h0002
const ACCESS_MOUSEKEYS = &h0003
const APPCOMMAND_BROWSER_BACKWARD = 1
const APPCOMMAND_BROWSER_FORWARD = 2
const APPCOMMAND_BROWSER_REFRESH = 3
const APPCOMMAND_BROWSER_STOP = 4
const APPCOMMAND_BROWSER_SEARCH = 5
const APPCOMMAND_BROWSER_FAVORITES = 6
const APPCOMMAND_BROWSER_HOME = 7
const APPCOMMAND_VOLUME_MUTE = 8
const APPCOMMAND_VOLUME_DOWN = 9
const APPCOMMAND_VOLUME_UP = 10
const APPCOMMAND_MEDIA_NEXTTRACK = 11
const APPCOMMAND_MEDIA_PREVIOUSTRACK = 12
const APPCOMMAND_MEDIA_STOP = 13
const APPCOMMAND_MEDIA_PLAY_PAUSE = 14
const APPCOMMAND_LAUNCH_MAIL = 15
const APPCOMMAND_LAUNCH_MEDIA_SELECT = 16
const APPCOMMAND_LAUNCH_APP1 = 17
const APPCOMMAND_LAUNCH_APP2 = 18
const APPCOMMAND_BASS_DOWN = 19
const APPCOMMAND_BASS_BOOST = 20
const APPCOMMAND_BASS_UP = 21
const APPCOMMAND_TREBLE_DOWN = 22
const APPCOMMAND_TREBLE_UP = 23
const APPCOMMAND_MICROPHONE_VOLUME_MUTE = 24
const APPCOMMAND_MICROPHONE_VOLUME_DOWN = 25
const APPCOMMAND_MICROPHONE_VOLUME_UP = 26
const APPCOMMAND_HELP = 27
const APPCOMMAND_FIND = 28
const APPCOMMAND_NEW = 29
const APPCOMMAND_OPEN = 30
const APPCOMMAND_CLOSE = 31
const APPCOMMAND_SAVE = 32
const APPCOMMAND_PRINT = 33
const APPCOMMAND_UNDO = 34
const APPCOMMAND_REDO = 35
const APPCOMMAND_COPY = 36
const APPCOMMAND_CUT = 37
const APPCOMMAND_PASTE = 38
const APPCOMMAND_REPLY_TO_MAIL = 39
const APPCOMMAND_FORWARD_MAIL = 40
const APPCOMMAND_SEND_MAIL = 41
const APPCOMMAND_SPELL_CHECK = 42
const APPCOMMAND_DICTATE_OR_COMMAND_CONTROL_TOGGLE = 43
const APPCOMMAND_MIC_ON_OFF_TOGGLE = 44
const APPCOMMAND_CORRECTION_LIST = 45
const APPCOMMAND_MEDIA_PLAY = 46
const APPCOMMAND_MEDIA_PAUSE = 47
const APPCOMMAND_MEDIA_RECORD = 48
const APPCOMMAND_MEDIA_FAST_FORWARD = 49
const APPCOMMAND_MEDIA_REWIND = 50
const APPCOMMAND_MEDIA_CHANNEL_UP = 51
const APPCOMMAND_MEDIA_CHANNEL_DOWN = 52


const FAPPCOMMAND_MOUSE = &h8000
const FAPPCOMMAND_KEY = 0
const FAPPCOMMAND_OEM = &h1000
const FAPPCOMMAND_MASK = &hF000

type SHELLHOOKINFO
 hwnd as HWND
 rc as RECT
end type

type LPSHELLHOOKINFO as SHELLHOOKINFO ptr

type tagEVENTMSG
 message as UINT
 paramL as UINT
 paramH as UINT
 time as DWORD
 hwnd as HWND
end type

type EVENTMSG as tagEVENTMSG
type PEVENTMSGMSG as tagEVENTMSG ptr
type NPEVENTMSGMSG as tagEVENTMSG ptr
type LPEVENTMSGMSG as tagEVENTMSG ptr
type PEVENTMSG as tagEVENTMSG ptr
type NPEVENTMSG as tagEVENTMSG ptr
type LPEVENTMSG as tagEVENTMSG ptr

type tagCWPSTRUCT
 lParam as LPARAM
 wParam as WPARAM
 message as UINT
 hwnd as HWND
end type

type CWPSTRUCT as tagCWPSTRUCT
type PCWPSTRUCT as tagCWPSTRUCT ptr
type NPCWPSTRUCT as tagCWPSTRUCT ptr
type LPCWPSTRUCT as tagCWPSTRUCT ptr

type tagCWPRETSTRUCT
 lResult as LRESULT
 lParam as LPARAM
 wParam as WPARAM
 message as UINT
 hwnd as HWND
end type

type CWPRETSTRUCT as tagCWPRETSTRUCT
type PCWPRETSTRUCT as tagCWPRETSTRUCT ptr
type NPCWPRETSTRUCT as tagCWPRETSTRUCT ptr
type LPCWPRETSTRUCT as tagCWPRETSTRUCT ptr

const LLKHF_EXTENDED = KF_EXTENDED shr 8
const LLKHF_INJECTED = &h00000010
const LLKHF_ALTDOWN = KF_ALTDOWN shr 8
const LLKHF_UP = KF_UP shr 8
const LLMHF_INJECTED = &h00000001

type tagKBDLLHOOKSTRUCT
 vkCode as DWORD
 scanCode as DWORD
 flags as DWORD
 time as DWORD
 dwExtraInfo as ULONG_PTR
end type

type KBDLLHOOKSTRUCT as tagKBDLLHOOKSTRUCT
type LPKBDLLHOOKSTRUCT as tagKBDLLHOOKSTRUCT ptr
type PKBDLLHOOKSTRUCT as tagKBDLLHOOKSTRUCT ptr

type tagMSLLHOOKSTRUCT
 pt as POINT
 mouseData as DWORD
 flags as DWORD
 time as DWORD
 dwExtraInfo as ULONG_PTR
end type

type MSLLHOOKSTRUCT as tagMSLLHOOKSTRUCT
type LPMSLLHOOKSTRUCT as tagMSLLHOOKSTRUCT ptr
type PMSLLHOOKSTRUCT as tagMSLLHOOKSTRUCT ptr

type tagDEBUGHOOKINFO
 idThread as DWORD
 idThreadInstaller as DWORD
 lParam as LPARAM
 wParam as WPARAM
 code as long
end type

type DEBUGHOOKINFO as tagDEBUGHOOKINFO
type PDEBUGHOOKINFO as tagDEBUGHOOKINFO ptr
type NPDEBUGHOOKINFO as tagDEBUGHOOKINFO ptr
type LPDEBUGHOOKINFO as tagDEBUGHOOKINFO ptr

type tagMOUSEHOOKSTRUCT
 pt as POINT
 hwnd as HWND
 wHitTestCode as UINT
 dwExtraInfo as ULONG_PTR
end type

type MOUSEHOOKSTRUCT as tagMOUSEHOOKSTRUCT
type LPMOUSEHOOKSTRUCT as tagMOUSEHOOKSTRUCT ptr
type PMOUSEHOOKSTRUCT as tagMOUSEHOOKSTRUCT ptr

type tagMOUSEHOOKSTRUCTEX
 __unnamed as MOUSEHOOKSTRUCT
 mouseData as DWORD
end type

type MOUSEHOOKSTRUCTEX as tagMOUSEHOOKSTRUCTEX
type LPMOUSEHOOKSTRUCTEX as tagMOUSEHOOKSTRUCTEX ptr
type PMOUSEHOOKSTRUCTEX as tagMOUSEHOOKSTRUCTEX ptr

type tagHARDWAREHOOKSTRUCT
 hwnd as HWND
 message as UINT
 wParam as WPARAM
 lParam as LPARAM
end type

type HARDWAREHOOKSTRUCT as tagHARDWAREHOOKSTRUCT
type LPHARDWAREHOOKSTRUCT as tagHARDWAREHOOKSTRUCT ptr
type PHARDWAREHOOKSTRUCT as tagHARDWAREHOOKSTRUCT ptr

const HKL_PREV = 0
const HKL_NEXT = 1
const KLF_ACTIVATE = &h00000001
const KLF_SUBSTITUTE_OK = &h00000002
const KLF_REORDER = &h00000008
const KLF_REPLACELANG = &h00000010
const KLF_NOTELLSHELL = &h00000080
const KLF_SETFORPROCESS = &h00000100
const KLF_SHIFTLOCK = &h00010000
const KLF_RESET = &h40000000
const INPUTLANGCHANGE_SYSCHARSET = &h0001
const INPUTLANGCHANGE_FORWARD = &h0002
const INPUTLANGCHANGE_BACKWARD = &h0004
const KL_NAMELENGTH = 9
declare function LoadKeyboardLayoutA(byval pwszKLID as LPCSTR, byval Flags as UINT) as HKL

 declare function LoadKeyboardLayout alias "LoadKeyboardLayoutA"(byval pwszKLID as LPCSTR, byval Flags as UINT) as HKL

declare function LoadKeyboardLayoutW(byval pwszKLID as LPCWSTR, byval Flags as UINT) as HKL


declare function ActivateKeyboardLayout(byval hkl as HKL, byval Flags as UINT) as HKL
declare function ToUnicodeEx(byval wVirtKey as UINT, byval wScanCode as UINT, byval lpKeyState as const UBYTE ptr, byval pwszBuff as LPWSTR, byval cchBuff as long, byval wFlags as UINT, byval dwhkl as HKL) as long
declare function UnloadKeyboardLayout(byval hkl as HKL) as WINBOOL
declare function GetKeyboardLayoutNameA(byval pwszKLID as LPSTR) as WINBOOL

 declare function GetKeyboardLayoutName alias "GetKeyboardLayoutNameA"(byval pwszKLID as LPSTR) as WINBOOL

declare function GetKeyboardLayoutNameW(byval pwszKLID as LPWSTR) as WINBOOL


declare function GetKeyboardLayoutList(byval nBuff as long, byval lpList as HKL ptr) as long
declare function GetKeyboardLayout(byval idThread as DWORD) as HKL

type tagMOUSEMOVEPOINT
 x as long
 y as long
 time as DWORD
 dwExtraInfo as ULONG_PTR
end type

type MOUSEMOVEPOINT as tagMOUSEMOVEPOINT
type PMOUSEMOVEPOINT as tagMOUSEMOVEPOINT ptr
type LPMOUSEMOVEPOINT as tagMOUSEMOVEPOINT ptr
declare function GetMouseMovePointsEx(byval cbSize as UINT, byval lppt as LPMOUSEMOVEPOINT, byval lpptBuf as LPMOUSEMOVEPOINT, byval nBufPoints as long, byval resolution as DWORD) as long

const GMMP_USE_DISPLAY_POINTS = 1
const GMMP_USE_HIGH_RESOLUTION_POINTS = 2
const DESKTOP_READOBJECTS = &h0001
const DESKTOP_CREATEWINDOW = &h0002
const DESKTOP_CREATEMENU = &h0004
const DESKTOP_HOOKCONTROL = &h0008
const DESKTOP_JOURNALRECORD = &h0010
const DESKTOP_JOURNALPLAYBACK = &h0020
const DESKTOP_ENUMERATE = &h0040
const DESKTOP_WRITEOBJECTS = &h0080
const DESKTOP_SWITCHDESKTOP = &h0100
const DF_ALLOWOTHERACCOUNTHOOK = &h0001
declare function CreateDesktopA(byval lpszDesktop as LPCSTR, byval lpszDevice as LPCSTR, byval pDevmode as LPDEVMODEA, byval dwFlags as DWORD, byval dwDesiredAccess as ACCESS_MASK, byval lpsa as LPSECURITY_ATTRIBUTES) as HDESK

 declare function CreateDesktop alias "CreateDesktopA"(byval lpszDesktop as LPCSTR, byval lpszDevice as LPCSTR, byval pDevmode as LPDEVMODEA, byval dwFlags as DWORD, byval dwDesiredAccess as ACCESS_MASK, byval lpsa as LPSECURITY_ATTRIBUTES) as HDESK

declare function CreateDesktopW(byval lpszDesktop as LPCWSTR, byval lpszDevice as LPCWSTR, byval pDevmode as LPDEVMODEW, byval dwFlags as DWORD, byval dwDesiredAccess as ACCESS_MASK, byval lpsa as LPSECURITY_ATTRIBUTES) as HDESK


declare function CreateDesktopExA(byval lpszDesktop as LPCSTR, byval lpszDevice as LPCSTR, byval pDevmode as DEVMODEA ptr, byval dwFlags as DWORD, byval dwDesiredAccess as ACCESS_MASK, byval lpsa as LPSECURITY_ATTRIBUTES, byval ulHeapSize as ULONG, byval pvoid as PVOID) as HDESK

 declare function CreateDesktopEx alias "CreateDesktopExA"(byval lpszDesktop as LPCSTR, byval lpszDevice as LPCSTR, byval pDevmode as DEVMODEA ptr, byval dwFlags as DWORD, byval dwDesiredAccess as ACCESS_MASK, byval lpsa as LPSECURITY_ATTRIBUTES, byval ulHeapSize as ULONG, byval pvoid as PVOID) as HDESK

declare function CreateDesktopExW(byval lpszDesktop as LPCWSTR, byval lpszDevice as LPCWSTR, byval pDevmode as DEVMODEW ptr, byval dwFlags as DWORD, byval dwDesiredAccess as ACCESS_MASK, byval lpsa as LPSECURITY_ATTRIBUTES, byval ulHeapSize as ULONG, byval pvoid as PVOID) as HDESK


declare function OpenDesktopA(byval lpszDesktop as LPCSTR, byval dwFlags as DWORD, byval fInherit as WINBOOL, byval dwDesiredAccess as ACCESS_MASK) as HDESK

 declare function OpenDesktop alias "OpenDesktopA"(byval lpszDesktop as LPCSTR, byval dwFlags as DWORD, byval fInherit as WINBOOL, byval dwDesiredAccess as ACCESS_MASK) as HDESK

declare function OpenDesktopW(byval lpszDesktop as LPCWSTR, byval dwFlags as DWORD, byval fInherit as WINBOOL, byval dwDesiredAccess as ACCESS_MASK) as HDESK


declare function OpenInputDesktop(byval dwFlags as DWORD, byval fInherit as WINBOOL, byval dwDesiredAccess as ACCESS_MASK) as HDESK
declare function EnumDesktopsA(byval hwinsta as HWINSTA, byval lpEnumFunc as DESKTOPENUMPROCA, byval lParam as LPARAM) as WINBOOL

 declare function EnumDesktops alias "EnumDesktopsA"(byval hwinsta as HWINSTA, byval lpEnumFunc as DESKTOPENUMPROCA, byval lParam as LPARAM) as WINBOOL

declare function EnumDesktopsW(byval hwinsta as HWINSTA, byval lpEnumFunc as DESKTOPENUMPROCW, byval lParam as LPARAM) as WINBOOL


declare function EnumDesktopWindows(byval hDesktop as HDESK, byval lpfn as WNDENUMPROC, byval lParam as LPARAM) as WINBOOL
declare function SwitchDesktop(byval hDesktop as HDESK) as WINBOOL
declare function SetThreadDesktop(byval hDesktop as HDESK) as WINBOOL
declare function CloseDesktop(byval hDesktop as HDESK) as WINBOOL
declare function GetThreadDesktop(byval dwThreadId as DWORD) as HDESK

const WINSTA_ENUMDESKTOPS = &h0001
const WINSTA_READATTRIBUTES = &h0002
const WINSTA_ACCESSCLIPBOARD = &h0004
const WINSTA_CREATEDESKTOP = &h0008
const WINSTA_WRITEATTRIBUTES = &h0010
const WINSTA_ACCESSGLOBALATOMS = &h0020
const WINSTA_EXITWINDOWS = &h0040
const WINSTA_ENUMERATE = &h0100
const WINSTA_READSCREEN = &h0200
const WINSTA_ALL_ACCESS = (((((((WINSTA_ENUMDESKTOPS or WINSTA_READATTRIBUTES) or WINSTA_ACCESSCLIPBOARD) or WINSTA_CREATEDESKTOP) or WINSTA_WRITEATTRIBUTES) or WINSTA_ACCESSGLOBALATOMS) or WINSTA_EXITWINDOWS) or WINSTA_ENUMERATE) or WINSTA_READSCREEN
const CWF_CREATE_ONLY = &h00000001
const WSF_VISIBLE = &h0001
declare function CreateWindowStationA(byval lpwinsta as LPCSTR, byval dwFlags as DWORD, byval dwDesiredAccess as ACCESS_MASK, byval lpsa as LPSECURITY_ATTRIBUTES) as HWINSTA

 declare function CreateWindowStation alias "CreateWindowStationA"(byval lpwinsta as LPCSTR, byval dwFlags as DWORD, byval dwDesiredAccess as ACCESS_MASK, byval lpsa as LPSECURITY_ATTRIBUTES) as HWINSTA

declare function CreateWindowStationW(byval lpwinsta as LPCWSTR, byval dwFlags as DWORD, byval dwDesiredAccess as ACCESS_MASK, byval lpsa as LPSECURITY_ATTRIBUTES) as HWINSTA


declare function OpenWindowStationA(byval lpszWinSta as LPCSTR, byval fInherit as WINBOOL, byval dwDesiredAccess as ACCESS_MASK) as HWINSTA

 declare function OpenWindowStation alias "OpenWindowStationA"(byval lpszWinSta as LPCSTR, byval fInherit as WINBOOL, byval dwDesiredAccess as ACCESS_MASK) as HWINSTA

declare function OpenWindowStationW(byval lpszWinSta as LPCWSTR, byval fInherit as WINBOOL, byval dwDesiredAccess as ACCESS_MASK) as HWINSTA


declare function EnumWindowStationsA(byval lpEnumFunc as WINSTAENUMPROCA, byval lParam as LPARAM) as WINBOOL

 declare function EnumWindowStations alias "EnumWindowStationsA"(byval lpEnumFunc as WINSTAENUMPROCA, byval lParam as LPARAM) as WINBOOL

declare function EnumWindowStationsW(byval lpEnumFunc as WINSTAENUMPROCW, byval lParam as LPARAM) as WINBOOL


declare function CloseWindowStation(byval hWinSta as HWINSTA) as WINBOOL
declare function SetProcessWindowStation(byval hWinSta as HWINSTA) as WINBOOL
declare function GetProcessWindowStation() as HWINSTA
declare function SetUserObjectSecurity(byval hObj as HANDLE, byval pSIRequested as PSECURITY_INFORMATION, byval pSID as PSECURITY_DESCRIPTOR) as WINBOOL
declare function GetUserObjectSecurity(byval hObj as HANDLE, byval pSIRequested as PSECURITY_INFORMATION, byval pSID as PSECURITY_DESCRIPTOR, byval nLength as DWORD, byval lpnLengthNeeded as LPDWORD) as WINBOOL

const UOI_FLAGS = 1
const UOI_NAME = 2
const UOI_TYPE = 3
const UOI_USER_SID = 4


type tagUSEROBJECTFLAGS
 fInherit as WINBOOL
 fReserved as WINBOOL
 dwFlags as DWORD
end type

type USEROBJECTFLAGS as tagUSEROBJECTFLAGS
type PUSEROBJECTFLAGS as tagUSEROBJECTFLAGS ptr
declare function GetUserObjectInformationA(byval hObj as HANDLE, byval nIndex as long, byval pvInfo as PVOID, byval nLength as DWORD, byval lpnLengthNeeded as LPDWORD) as WINBOOL

 declare function GetUserObjectInformation alias "GetUserObjectInformationA"(byval hObj as HANDLE, byval nIndex as long, byval pvInfo as PVOID, byval nLength as DWORD, byval lpnLengthNeeded as LPDWORD) as WINBOOL

declare function GetUserObjectInformationW(byval hObj as HANDLE, byval nIndex as long, byval pvInfo as PVOID, byval nLength as DWORD, byval lpnLengthNeeded as LPDWORD) as WINBOOL


declare function SetUserObjectInformationA(byval hObj as HANDLE, byval nIndex as long, byval pvInfo as PVOID, byval nLength as DWORD) as WINBOOL

 declare function SetUserObjectInformation alias "SetUserObjectInformationA"(byval hObj as HANDLE, byval nIndex as long, byval pvInfo as PVOID, byval nLength as DWORD) as WINBOOL

declare function SetUserObjectInformationW(byval hObj as HANDLE, byval nIndex as long, byval pvInfo as PVOID, byval nLength as DWORD) as WINBOOL


type tagWNDCLASSEXA
 cbSize as UINT
 style as UINT
 lpfnWndProc as WNDPROC
 cbClsExtra as long
 cbWndExtra as long
 hInstance as HINSTANCE
 hIcon as HICON
 hCursor as HCURSOR
 hbrBackground as HBRUSH
 lpszMenuName as LPCSTR
 lpszClassName as LPCSTR
 hIconSm as HICON
end type

type WNDCLASSEXA as tagWNDCLASSEXA
type PWNDCLASSEXA as tagWNDCLASSEXA ptr
type NPWNDCLASSEXA as tagWNDCLASSEXA ptr
type LPWNDCLASSEXA as tagWNDCLASSEXA ptr

type tagWNDCLASSEXW
 cbSize as UINT
 style as UINT
 lpfnWndProc as WNDPROC
 cbClsExtra as long
 cbWndExtra as long
 hInstance as HINSTANCE
 hIcon as HICON
 hCursor as HCURSOR
 hbrBackground as HBRUSH
 lpszMenuName as LPCWSTR
 lpszClassName as LPCWSTR
 hIconSm as HICON
end type

type WNDCLASSEXW as tagWNDCLASSEXW
type PWNDCLASSEXW as tagWNDCLASSEXW ptr
type NPWNDCLASSEXW as tagWNDCLASSEXW ptr
type LPWNDCLASSEXW as tagWNDCLASSEXW ptr

 type WNDCLASSEX as WNDCLASSEXA
 type PWNDCLASSEX as PWNDCLASSEXA
 type NPWNDCLASSEX as NPWNDCLASSEXA
 type LPWNDCLASSEX as LPWNDCLASSEXA

type tagWNDCLASSA
 style as UINT
 lpfnWndProc as WNDPROC
 cbClsExtra as long
 cbWndExtra as long
 hInstance as HINSTANCE
 hIcon as HICON
 hCursor as HCURSOR
 hbrBackground as HBRUSH
 lpszMenuName as LPCSTR
 lpszClassName as LPCSTR
end type

type WNDCLASSA as tagWNDCLASSA
type PWNDCLASSA as tagWNDCLASSA ptr
type NPWNDCLASSA as tagWNDCLASSA ptr
type LPWNDCLASSA as tagWNDCLASSA ptr

type tagWNDCLASSW
 style as UINT
 lpfnWndProc as WNDPROC
 cbClsExtra as long
 cbWndExtra as long
 hInstance as HINSTANCE
 hIcon as HICON
 hCursor as HCURSOR
 hbrBackground as HBRUSH
 lpszMenuName as LPCWSTR
 lpszClassName as LPCWSTR
end type

type WNDCLASSW as tagWNDCLASSW
type PWNDCLASSW as tagWNDCLASSW ptr
type NPWNDCLASSW as tagWNDCLASSW ptr
type LPWNDCLASSW as tagWNDCLASSW ptr

 type WNDCLASS as WNDCLASSA
 type PWNDCLASS as PWNDCLASSA
 type NPWNDCLASS as NPWNDCLASSA
 type LPWNDCLASS as LPWNDCLASSA

declare function IsHungAppWindow(byval hwnd as HWND) as WINBOOL
declare sub DisableProcessWindowsGhosting()

type tagMSG
 hwnd as HWND
 message as UINT
 wParam as WPARAM
 lParam as LPARAM
 time as DWORD
 pt as POINT
end type

type MSG as tagMSG
type PMSG as tagMSG ptr
type NPMSG as tagMSG ptr
type LPMSG as tagMSG ptr

const GWL_WNDPROC = -4
const GWL_HINSTANCE = -6
const GWL_HWNDPARENT = -8
const GWL_STYLE = -16
const GWL_EXSTYLE = -20
const GWL_USERDATA = -21
const GWL_ID = -12


const GWLP_WNDPROC = -4
const GWLP_HINSTANCE = -6
const GWLP_HWNDPARENT = -8
const GWLP_USERDATA = -21
const GWLP_ID = -12
const GCL_MENUNAME = -8
const GCL_HBRBACKGROUND = -10
const GCL_HCURSOR = -12
const GCL_HICON = -14
const GCL_HMODULE = -16
const GCL_CBWNDEXTRA = -18
const GCL_CBCLSEXTRA = -20
const GCL_WNDPROC = -24
const GCL_STYLE = -26
const GCW_ATOM = -32
const GCL_HICONSM = -34


const GCLP_MENUNAME = -8
const GCLP_HBRBACKGROUND = -10
const GCLP_HCURSOR = -12
const GCLP_HICON = -14
const GCLP_HMODULE = -16
const GCLP_WNDPROC = -24
const GCLP_HICONSM = -34
const WM_NULL = &h00000
const WM_CREATE = &h0001
const WM_DESTROY = &h0002
const WM_MOVE = &h0003
const WM_SIZE = &h0005
const WM_ACTIVATE = &h0006
const WA_INACTIVE = 0
const WA_ACTIVE = 1
const WA_CLICKACTIVE = 2
const WM_SETFOCUS = &h0007
const WM_KILLFOCUS = &h0008
const WM_ENABLE = &h000A
const WM_SETREDRAW = &h000B
const WM_SETTEXT = &h000C
const WM_GETTEXT = &h000D
const WM_GETTEXTLENGTH = &h000E
const WM_PAINT = &h000F
const WM_CLOSE = &h0010
const WM_QUERYENDSESSION = &h0011
const WM_QUERYOPEN = &h0013
const WM_ENDSESSION = &h0016
const WM_QUIT = &h0012
const WM_ERASEBKGND = &h0014
const WM_SYSCOLORCHANGE = &h0015
const WM_SHOWWINDOW = &h0018
const WM_WININICHANGE = &h001A
const WM_SETTINGCHANGE = WM_WININICHANGE
const WM_DEVMODECHANGE = &h001B
const WM_ACTIVATEAPP = &h001C
const WM_FONTCHANGE = &h001D
const WM_TIMECHANGE = &h001E
const WM_CANCELMODE = &h001F
const WM_SETCURSOR = &h0020
const WM_MOUSEACTIVATE = &h0021
const WM_CHILDACTIVATE = &h0022
const WM_QUEUESYNC = &h0023
const WM_GETMINMAXINFO = &h0024

type tagMINMAXINFO
 ptReserved as POINT
 ptMaxSize as POINT
 ptMaxPosition as POINT
 ptMinTrackSize as POINT
 ptMaxTrackSize as POINT
end type

type MINMAXINFO as tagMINMAXINFO
type PMINMAXINFO as tagMINMAXINFO ptr
type LPMINMAXINFO as tagMINMAXINFO ptr

const WM_PAINTICON = &h0026
const WM_ICONERASEBKGND = &h0027
const WM_NEXTDLGCTL = &h0028
const WM_SPOOLERSTATUS = &h002A
const WM_DRAWITEM = &h002B
const WM_MEASUREITEM = &h002C
const WM_DELETEITEM = &h002D
const WM_VKEYTOITEM = &h002E
const WM_CHARTOITEM = &h002F
const WM_SETFONT = &h0030
const WM_GETFONT = &h0031
const WM_SETHOTKEY = &h0032
const WM_GETHOTKEY = &h0033
const WM_QUERYDRAGICON = &h0037
const WM_COMPAREITEM = &h0039
const WM_GETOBJECT = &h003D
const WM_COMPACTING = &h0041
const WM_COMMNOTIFY = &h0044
const WM_WINDOWPOSCHANGING = &h0046
const WM_WINDOWPOSCHANGED = &h0047
const WM_POWER = &h0048
const PWR_OK = 1
const PWR_FAIL = -1
const PWR_SUSPENDREQUEST = 1
const PWR_SUSPENDRESUME = 2
const PWR_CRITICALRESUME = 3
const WM_COPYDATA = &h004A
const WM_CANCELJOURNAL = &h004B

type tagCOPYDATASTRUCT
 dwData as ULONG_PTR
 cbData as DWORD
 lpData as PVOID
end type

type COPYDATASTRUCT as tagCOPYDATASTRUCT
type PCOPYDATASTRUCT as tagCOPYDATASTRUCT ptr

type tagMDINEXTMENU
 hmenuIn as HMENU
 hmenuNext as HMENU
 hwndNext as HWND
end type

type MDINEXTMENU as tagMDINEXTMENU
type PMDINEXTMENU as tagMDINEXTMENU ptr
type LPMDINEXTMENU as tagMDINEXTMENU ptr

const WM_NOTIFY = &h004E
const WM_INPUTLANGCHANGEREQUEST = &h0050
const WM_INPUTLANGCHANGE = &h0051
const WM_TCARD = &h0052
const WM_HELP = &h0053
const WM_USERCHANGED = &h0054
const WM_NOTIFYFORMAT = &h0055
const NFR_ANSI = 1
const NFR_UNICODE = 2
const NF_QUERY = 3
const NF_REQUERY = 4
const WM_CONTEXTMENU = &h007B
const WM_STYLECHANGING = &h007C
const WM_STYLECHANGED = &h007D
const WM_DISPLAYCHANGE = &h007E
const WM_GETICON = &h007F
const WM_SETICON = &h0080
const WM_NCCREATE = &h0081
const WM_NCDESTROY = &h0082
const WM_NCCALCSIZE = &h0083
const WM_NCHITTEST = &h0084
const WM_NCPAINT = &h0085
const WM_NCACTIVATE = &h0086
const WM_GETDLGCODE = &h0087
const WM_SYNCPAINT = &h0088
const WM_NCMOUSEMOVE = &h00A0
const WM_NCLBUTTONDOWN = &h00A1
const WM_NCLBUTTONUP = &h00A2
const WM_NCLBUTTONDBLCLK = &h00A3
const WM_NCRBUTTONDOWN = &h00A4
const WM_NCRBUTTONUP = &h00A5
const WM_NCRBUTTONDBLCLK = &h00A6
const WM_NCMBUTTONDOWN = &h00A7
const WM_NCMBUTTONUP = &h00A8
const WM_NCMBUTTONDBLCLK = &h00A9
const WM_NCXBUTTONDOWN = &h00AB
const WM_NCXBUTTONUP = &h00AC
const WM_NCXBUTTONDBLCLK = &h00AD
const WM_INPUT_DEVICE_CHANGE = &h00fe
const WM_INPUT = &h00FF
const WM_KEYFIRST = &h0100
const WM_KEYDOWN = &h0100
const WM_KEYUP = &h0101
const WM_CHAR = &h0102
const WM_DEADCHAR = &h0103
const WM_SYSKEYDOWN = &h0104
const WM_SYSKEYUP = &h0105
const WM_SYSCHAR = &h0106
const WM_SYSDEADCHAR = &h0107
const WM_UNICHAR = &h0109
const WM_KEYLAST = &h0109
const UNICODE_NOCHAR = &hFFFF
const WM_IME_STARTCOMPOSITION = &h010D
const WM_IME_ENDCOMPOSITION = &h010E
const WM_IME_COMPOSITION = &h010F
const WM_IME_KEYLAST = &h010F
const WM_INITDIALOG = &h0110
const WM_COMMAND = &h0111
const WM_SYSCOMMAND = &h0112
const WM_TIMER = &h0113
const WM_HSCROLL = &h0114
const WM_VSCROLL = &h0115
const WM_INITMENU = &h0116
const WM_INITMENUPOPUP = &h0117
const WM_MENUSELECT = &h011F


const WM_MENUCHAR = &h0120
const WM_ENTERIDLE = &h0121
const WM_MENURBUTTONUP = &h0122
const WM_MENUDRAG = &h0123
const WM_MENUGETOBJECT = &h0124
const WM_UNINITMENUPOPUP = &h0125
const WM_MENUCOMMAND = &h0126
const WM_CHANGEUISTATE = &h0127
const WM_UPDATEUISTATE = &h0128
const WM_QUERYUISTATE = &h0129
const UIS_SET = 1
const UIS_CLEAR = 2
const UIS_INITIALIZE = 3
const UISF_HIDEFOCUS = &h1
const UISF_HIDEACCEL = &h2
const UISF_ACTIVE = &h4
const WM_CTLCOLORMSGBOX = &h0132
const WM_CTLCOLOREDIT = &h0133
const WM_CTLCOLORLISTBOX = &h0134
const WM_CTLCOLORBTN = &h0135
const WM_CTLCOLORDLG = &h0136
const WM_CTLCOLORSCROLLBAR = &h0137
const WM_CTLCOLORSTATIC = &h0138
const MN_GETHMENU = &h01E1
const WM_MOUSEFIRST = &h0200
const WM_MOUSEMOVE = &h0200
const WM_LBUTTONDOWN = &h0201
const WM_LBUTTONUP = &h0202
const WM_LBUTTONDBLCLK = &h0203
const WM_RBUTTONDOWN = &h0204
const WM_RBUTTONUP = &h0205
const WM_RBUTTONDBLCLK = &h0206
const WM_MBUTTONDOWN = &h0207
const WM_MBUTTONUP = &h0208
const WM_MBUTTONDBLCLK = &h0209
const WM_MOUSEWHEEL = &h020A
const WM_XBUTTONDOWN = &h020B
const WM_XBUTTONUP = &h020C
const WM_XBUTTONDBLCLK = &h020D

 const WM_MOUSELAST = &h020d

const WHEEL_DELTA = 120
const XBUTTON1 = &h0001
const XBUTTON2 = &h0002
const WM_PARENTNOTIFY = &h0210
const WM_ENTERMENULOOP = &h0211
const WM_EXITMENULOOP = &h0212
const WM_NEXTMENU = &h0213
const WM_SIZING = &h0214
const WM_CAPTURECHANGED = &h0215
const WM_MOVING = &h0216
const WM_POWERBROADCAST = &h0218
const PBT_APMQUERYSUSPEND = &h00000
const PBT_APMQUERYSTANDBY = &h0001
const PBT_APMQUERYSUSPENDFAILED = &h0002
const PBT_APMQUERYSTANDBYFAILED = &h0003
const PBT_APMSUSPEND = &h0004
const PBT_APMSTANDBY = &h0005
const PBT_APMRESUMECRITICAL = &h0006
const PBT_APMRESUMESUSPEND = &h0007
const PBT_APMRESUMESTANDBY = &h0008
const PBTF_APMRESUMEFROMFAILURE = &h00000001
const PBT_APMBATTERYLOW = &h0009
const PBT_APMPOWERSTATUSCHANGE = &h000A
const PBT_APMOEMEVENT = &h000B
const PBT_APMRESUMEAUTOMATIC = &h0012

 const PBT_POWERSETTINGCHANGE = 32787

 type POWERBROADCAST_SETTING
 PowerSetting as GUID
 DataLength as DWORD
 Data(0 to 0) as UCHAR
 end type

 type PPOWERBROADCAST_SETTING as POWERBROADCAST_SETTING ptr

const WM_DEVICECHANGE = &h0219
const WM_MDICREATE = &h0220
const WM_MDIDESTROY = &h0221
const WM_MDIACTIVATE = &h0222
const WM_MDIRESTORE = &h0223
const WM_MDINEXT = &h0224
const WM_MDIMAXIMIZE = &h0225
const WM_MDITILE = &h0226
const WM_MDICASCADE = &h0227
const WM_MDIICONARRANGE = &h0228
const WM_MDIGETACTIVE = &h0229
const WM_MDISETMENU = &h0230
const WM_ENTERSIZEMOVE = &h0231
const WM_EXITSIZEMOVE = &h0232
const WM_DROPFILES = &h0233
const WM_MDIREFRESHMENU = &h0234


const WM_IME_SETCONTEXT = &h0281
const WM_IME_NOTIFY = &h0282
const WM_IME_CONTROL = &h0283
const WM_IME_COMPOSITIONFULL = &h0284
const WM_IME_SELECT = &h0285
const WM_IME_CHAR = &h0286
const WM_IME_REQUEST = &h0288
const WM_IME_KEYDOWN = &h0290
const WM_IME_KEYUP = &h0291
const WM_MOUSEHOVER = &h02A1
const WM_MOUSELEAVE = &h02A3
const WM_NCMOUSEHOVER = &h02A0
const WM_NCMOUSELEAVE = &h02A2
const WM_WTSSESSION_CHANGE = &h02B1
const WM_TABLET_FIRST = &h02c0
const WM_TABLET_LAST = &h02df
const WM_CUT = &h0300
const WM_COPY = &h0301
const WM_PASTE = &h0302
const WM_CLEAR = &h0303
const WM_UNDO = &h0304
const WM_RENDERFORMAT = &h0305
const WM_RENDERALLFORMATS = &h0306
const WM_DESTROYCLIPBOARD = &h0307
const WM_DRAWCLIPBOARD = &h0308
const WM_PAINTCLIPBOARD = &h0309
const WM_VSCROLLCLIPBOARD = &h030A
const WM_SIZECLIPBOARD = &h030B
const WM_ASKCBFORMATNAME = &h030C
const WM_CHANGECBCHAIN = &h030D
const WM_HSCROLLCLIPBOARD = &h030E
const WM_QUERYNEWPALETTE = &h030F
const WM_PALETTEISCHANGING = &h0310
const WM_PALETTECHANGED = &h0311
const WM_HOTKEY = &h0312
const WM_PRINT = &h0317
const WM_PRINTCLIENT = &h0318
const WM_APPCOMMAND = &h0319
const WM_THEMECHANGED = &h031A
const WM_CLIPBOARDUPDATE = &h031d


const WM_HANDHELDFIRST = &h0358
const WM_HANDHELDLAST = &h035F
const WM_AFXFIRST = &h0360
const WM_AFXLAST = &h037F
const WM_PENWINFIRST = &h0380
const WM_PENWINLAST = &h038F
const WM_APP = &h8000
const WM_USER = &h0400
const WMSZ_LEFT = 1
const WMSZ_RIGHT = 2
const WMSZ_TOP = 3
const WMSZ_TOPLEFT = 4
const WMSZ_TOPRIGHT = 5
const WMSZ_BOTTOM = 6
const WMSZ_BOTTOMLEFT = 7
const WMSZ_BOTTOMRIGHT = 8
const HTERROR = -2
const HTTRANSPARENT = -1
const HTNOWHERE = 0
const HTCLIENT = 1
const HTCAPTION = 2
const HTSYSMENU = 3
const HTGROWBOX = 4
const HTSIZE = HTGROWBOX
const HTMENU = 5
const HTHSCROLL = 6
const HTVSCROLL = 7
const HTMINBUTTON = 8
const HTMAXBUTTON = 9
const HTLEFT = 10
const HTRIGHT = 11
const HTTOP = 12
const HTTOPLEFT = 13
const HTTOPRIGHT = 14
const HTBOTTOM = 15
const HTBOTTOMLEFT = 16
const HTBOTTOMRIGHT = 17
const HTBORDER = 18
const HTREDUCE = HTMINBUTTON
const HTZOOM = HTMAXBUTTON
const HTSIZEFIRST = HTLEFT
const HTSIZELAST = HTBOTTOMRIGHT
const HTOBJECT = 19
const HTCLOSE = 20
const HTHELP = 21
const SMTO_NORMAL = &h00000
const SMTO_BLOCK = &h0001
const SMTO_ABORTIFHUNG = &h0002
const SMTO_NOTIMEOUTIFNOTHUNG = &h0008


const MA_ACTIVATE = 1
const MA_ACTIVATEANDEAT = 2
const MA_NOACTIVATE = 3
const MA_NOACTIVATEANDEAT = 4
const ICON_SMALL = 0
const ICON_BIG = 1
const ICON_SMALL2 = 2
declare function RegisterWindowMessageA(byval lpString as LPCSTR) as UINT

 declare function RegisterWindowMessage alias "RegisterWindowMessageA"(byval lpString as LPCSTR) as UINT

declare function RegisterWindowMessageW(byval lpString as LPCWSTR) as UINT


const SIZE_RESTORED = 0
const SIZE_MINIMIZED = 1
const SIZE_MAXIMIZED = 2
const SIZE_MAXSHOW = 3
const SIZE_MAXHIDE = 4
const SIZENORMAL = SIZE_RESTORED
const SIZEICONIC = SIZE_MINIMIZED
const SIZEFULLSCREEN = SIZE_MAXIMIZED
const SIZEZOOMSHOW = SIZE_MAXSHOW
const SIZEZOOMHIDE = SIZE_MAXHIDE

type tagWINDOWPOS
 hwnd as HWND
 hwndInsertAfter as HWND
 x as long
 y as long
 cx as long
 cy as long
 flags as UINT
end type

type WINDOWPOS as tagWINDOWPOS
type LPWINDOWPOS as tagWINDOWPOS ptr
type PWINDOWPOS as tagWINDOWPOS ptr

type tagNCCALCSIZE_PARAMS
 rgrc(0 to 2) as RECT
 lppos as PWINDOWPOS
end type

type NCCALCSIZE_PARAMS as tagNCCALCSIZE_PARAMS
type LPNCCALCSIZE_PARAMS as tagNCCALCSIZE_PARAMS ptr
const WVR_ALIGNTOP = &h0010
const WVR_ALIGNLEFT = &h0020
const WVR_ALIGNBOTTOM = &h0040
const WVR_ALIGNRIGHT = &h0080
const WVR_HREDRAW = &h0100
const WVR_VREDRAW = &h0200
const WVR_REDRAW = WVR_HREDRAW or WVR_VREDRAW
const WVR_VALIDRECTS = &h0400
const MK_LBUTTON = &h0001
const MK_RBUTTON = &h0002
const MK_SHIFT = &h0004
const MK_CONTROL = &h0008
const MK_MBUTTON = &h0010
const MK_XBUTTON1 = &h0020
const MK_XBUTTON2 = &h0040
const TME_HOVER = &h00000001
const TME_LEAVE = &h00000002
const TME_NONCLIENT = &h00000010
const TME_QUERY = &h40000000
const TME_CANCEL = &h80000000
const HOVER_DEFAULT = &hFFFFFFFF

type tagTRACKMOUSEEVENT
 cbSize as DWORD
 dwFlags as DWORD
 hwndTrack as HWND
 dwHoverTime as DWORD
end type

type TRACKMOUSEEVENT as tagTRACKMOUSEEVENT
type LPTRACKMOUSEEVENT as tagTRACKMOUSEEVENT ptr
declare function TrackMouseEvent(byval lpEventTrack as LPTRACKMOUSEEVENT) as WINBOOL
const WS_OVERLAPPED = &h000000000
const WS_POPUP = &h80000000
const WS_CHILD = &h40000000
const WS_MINIMIZE = &h20000000
const WS_VISIBLE = &h10000000
const WS_DISABLED = &h08000000
const WS_CLIPSIBLINGS = &h04000000
const WS_CLIPCHILDREN = &h02000000
const WS_MAXIMIZE = &h01000000
const WS_CAPTION = &h00C00000
const WS_BORDER = &h00800000
const WS_DLGFRAME = &h00400000
const WS_VSCROLL = &h00200000
const WS_HSCROLL = &h00100000
const WS_SYSMENU = &h00080000
const WS_THICKFRAME = &h00040000
const WS_GROUP = &h00020000
const WS_TABSTOP = &h00010000
const WS_MINIMIZEBOX = &h00020000
const WS_MAXIMIZEBOX = &h00010000
const WS_TILED = WS_OVERLAPPED
const WS_ICONIC = WS_MINIMIZE
const WS_SIZEBOX = WS_THICKFRAME
const WS_OVERLAPPEDWINDOW = ((((WS_OVERLAPPED or WS_CAPTION) or WS_SYSMENU) or WS_THICKFRAME) or WS_MINIMIZEBOX) or WS_MAXIMIZEBOX
const WS_TILEDWINDOW = WS_OVERLAPPEDWINDOW
const WS_POPUPWINDOW = (WS_POPUP or WS_BORDER) or WS_SYSMENU
const WS_CHILDWINDOW = WS_CHILD
const WS_EX_DLGMODALFRAME = &h00000001
const WS_EX_NOPARENTNOTIFY = &h00000004
const WS_EX_TOPMOST = &h00000008
const WS_EX_ACCEPTFILES = &h00000010
const WS_EX_TRANSPARENT = &h00000020
const WS_EX_MDICHILD = &h00000040
const WS_EX_TOOLWINDOW = &h00000080
const WS_EX_WINDOWEDGE = &h00000100
const WS_EX_CLIENTEDGE = &h00000200
const WS_EX_CONTEXTHELP = &h00000400
const WS_EX_RIGHT = &h00001000
const WS_EX_LEFT = &h000000000
const WS_EX_RTLREADING = &h00002000
const WS_EX_LTRREADING = &h000000000
const WS_EX_LEFTSCROLLBAR = &h00004000
const WS_EX_RIGHTSCROLLBAR = &h000000000
const WS_EX_CONTROLPARENT = &h00010000
const WS_EX_STATICEDGE = &h00020000
const WS_EX_APPWINDOW = &h00040000
const WS_EX_OVERLAPPEDWINDOW = WS_EX_WINDOWEDGE or WS_EX_CLIENTEDGE
const WS_EX_PALETTEWINDOW = (WS_EX_WINDOWEDGE or WS_EX_TOOLWINDOW) or WS_EX_TOPMOST
const WS_EX_LAYERED = &h00080000
const WS_EX_NOINHERITLAYOUT = &h00100000


const WS_EX_LAYOUTRTL = &h00400000
const WS_EX_COMPOSITED = &h02000000
const WS_EX_NOACTIVATE = &h08000000
const CS_VREDRAW = &h0001
const CS_HREDRAW = &h0002
const CS_DBLCLKS = &h0008
const CS_OWNDC = &h0020
const CS_CLASSDC = &h0040
const CS_PARENTDC = &h0080
const CS_NOCLOSE = &h0200
const CS_SAVEBITS = &h0800
const CS_BYTEALIGNCLIENT = &h1000
const CS_BYTEALIGNWINDOW = &h2000
const CS_GLOBALCLASS = &h4000
const CS_IME = &h00010000
const CS_DROPSHADOW = &h00020000
const PRF_CHECKVISIBLE = &h00000001
const PRF_NONCLIENT = &h00000002
const PRF_CLIENT = &h00000004
const PRF_ERASEBKGND = &h00000008
const PRF_CHILDREN = &h00000010
const PRF_OWNED = &h00000020
const BDR_RAISEDOUTER = &h0001
const BDR_SUNKENOUTER = &h0002
const BDR_RAISEDINNER = &h0004
const BDR_SUNKENINNER = &h0008
const BDR_OUTER = BDR_RAISEDOUTER or BDR_SUNKENOUTER
const BDR_INNER = BDR_RAISEDINNER or BDR_SUNKENINNER
const BDR_RAISED = BDR_RAISEDOUTER or BDR_RAISEDINNER
const BDR_SUNKEN = BDR_SUNKENOUTER or BDR_SUNKENINNER
const EDGE_RAISED = BDR_RAISEDOUTER or BDR_RAISEDINNER
const EDGE_SUNKEN = BDR_SUNKENOUTER or BDR_SUNKENINNER
const EDGE_ETCHED = BDR_SUNKENOUTER or BDR_RAISEDINNER
const EDGE_BUMP = BDR_RAISEDOUTER or BDR_SUNKENINNER
const BF_LEFT = &h0001
const BF_TOP = &h0002
const BF_RIGHT = &h0004
const BF_BOTTOM = &h0008
const BF_TOPLEFT = BF_TOP or BF_LEFT
const BF_TOPRIGHT = BF_TOP or BF_RIGHT
const BF_BOTTOMLEFT = BF_BOTTOM or BF_LEFT
const BF_BOTTOMRIGHT = BF_BOTTOM or BF_RIGHT
const BF_RECT = ((BF_LEFT or BF_TOP) or BF_RIGHT) or BF_BOTTOM
const BF_DIAGONAL = &h0010
const BF_DIAGONAL_ENDTOPRIGHT = (BF_DIAGONAL or BF_TOP) or BF_RIGHT
const BF_DIAGONAL_ENDTOPLEFT = (BF_DIAGONAL or BF_TOP) or BF_LEFT
const BF_DIAGONAL_ENDBOTTOMLEFT = (BF_DIAGONAL or BF_BOTTOM) or BF_LEFT
const BF_DIAGONAL_ENDBOTTOMRIGHT = (BF_DIAGONAL or BF_BOTTOM) or BF_RIGHT
const BF_MIDDLE = &h0800
const BF_SOFT = &h1000
const BF_ADJUST = &h2000
const BF_FLAT = &h4000
const BF_MONO = &h8000
declare function DrawEdge(byval hdc as HDC, byval qrc as LPRECT, byval edge as UINT, byval grfFlags as UINT) as WINBOOL
const DFC_CAPTION = 1
const DFC_MENU = 2
const DFC_SCROLL = 3
const DFC_BUTTON = 4
const DFC_POPUPMENU = 5
const DFCS_CAPTIONCLOSE = &h00000
const DFCS_CAPTIONMIN = &h0001
const DFCS_CAPTIONMAX = &h0002
const DFCS_CAPTIONRESTORE = &h0003
const DFCS_CAPTIONHELP = &h0004
const DFCS_MENUARROW = &h00000
const DFCS_MENUCHECK = &h0001
const DFCS_MENUBULLET = &h0002
const DFCS_MENUARROWRIGHT = &h0004
const DFCS_SCROLLUP = &h00000
const DFCS_SCROLLDOWN = &h0001
const DFCS_SCROLLLEFT = &h0002
const DFCS_SCROLLRIGHT = &h0003
const DFCS_SCROLLCOMBOBOX = &h0005
const DFCS_SCROLLSIZEGRIP = &h0008
const DFCS_SCROLLSIZEGRIPRIGHT = &h0010
const DFCS_BUTTONCHECK = &h00000
const DFCS_BUTTONRADIOIMAGE = &h0001
const DFCS_BUTTONRADIOMASK = &h0002
const DFCS_BUTTONRADIO = &h0004
const DFCS_BUTTON3STATE = &h0008
const DFCS_BUTTONPUSH = &h0010
const DFCS_INACTIVE = &h0100
const DFCS_PUSHED = &h0200
const DFCS_CHECKED = &h0400
const DFCS_TRANSPARENT = &h0800
const DFCS_HOT = &h1000
const DFCS_ADJUSTRECT = &h2000
const DFCS_FLAT = &h4000
const DFCS_MONO = &h8000
declare function DrawFrameControl(byval as HDC, byval as LPRECT, byval as UINT, byval as UINT) as WINBOOL
const DC_ACTIVE = &h0001
const DC_SMALLCAP = &h0002
const DC_ICON = &h0004
const DC_TEXT = &h0008
const DC_INBUTTON = &h0010
const DC_GRADIENT = &h0020
const DC_BUTTONS = &h1000
declare function DrawCaption(byval hwnd as HWND, byval hdc as HDC, byval lprect as const RECT ptr, byval flags as UINT) as WINBOOL
const IDANI_OPEN = 1
const IDANI_CAPTION = 3
declare function DrawAnimatedRects(byval hwnd as HWND, byval idAni as long, byval lprcFrom as const RECT ptr, byval lprcTo as const RECT ptr) as WINBOOL
const CF_TEXT = 1
const CF_BITMAP = 2
const CF_METAFILEPICT = 3
const CF_SYLK = 4
const CF_DIF = 5
const CF_TIFF = 6
const CF_OEMTEXT = 7
const CF_DIB = 8
const CF_PALETTE = 9
const CF_PENDATA = 10
const CF_RIFF = 11
const CF_WAVE = 12
const CF_UNICODETEXT = 13
const CF_ENHMETAFILE = 14
const CF_HDROP = 15
const CF_LOCALE = 16
const CF_DIBV5 = 17
const CF_MAX = 18
const CF_OWNERDISPLAY = &h0080
const CF_DSPTEXT = &h0081
const CF_DSPBITMAP = &h0082
const CF_DSPMETAFILEPICT = &h0083
const CF_DSPENHMETAFILE = &h008E
const CF_PRIVATEFIRST = &h0200
const CF_PRIVATELAST = &h02FF
const CF_GDIOBJFIRST = &h0300
const CF_GDIOBJLAST = &h03FF
const FVIRTKEY = CTRUE
const FNOINVERT = &h02
const FSHIFT = &h04
const FCONTROL = &h08
const FALT = &h10

type tagACCEL
 fVirt as UBYTE
 key as WORD
 cmd as WORD
end type

type ACCEL as tagACCEL
type LPACCEL as tagACCEL ptr

type tagPAINTSTRUCT
 hdc as HDC
 fErase as WINBOOL
 rcPaint as RECT
 fRestore as WINBOOL
 fIncUpdate as WINBOOL
 rgbReserved(0 to 31) as UBYTE
end type

type PAINTSTRUCT as tagPAINTSTRUCT
type PPAINTSTRUCT as tagPAINTSTRUCT ptr
type NPPAINTSTRUCT as tagPAINTSTRUCT ptr
type LPPAINTSTRUCT as tagPAINTSTRUCT ptr

type tagCREATESTRUCTA_
 lpCreateParams as LPVOID
 hInstance as HINSTANCE
 hMenu as HMENU
 hwndParent as HWND
 cy as long
 cx as long
 y as long
 x as long
 style as LONG
 lpszName as LPCSTR
 lpszClass as LPCSTR
 dwExStyle as DWORD
end type

type CREATESTRUCTA as tagCREATESTRUCTA
type LPCREATESTRUCTA as tagCREATESTRUCTA ptr

type tagCREATESTRUCTW_
 lpCreateParams as LPVOID
 hInstance as HINSTANCE
 hMenu as HMENU
 hwndParent as HWND
 cy as long
 cx as long
 y as long
 x as long
 style as LONG
 lpszName as LPCWSTR
 lpszClass as LPCWSTR
 dwExStyle as DWORD
end type

type CREATESTRUCTW as tagCREATESTRUCTW
type LPCREATESTRUCTW as tagCREATESTRUCTW ptr

 type CREATESTRUCT as CREATESTRUCTA
 type LPCREATESTRUCT as LPCREATESTRUCTA

type tagWINDOWPLACEMENT
 length as UINT
 flags as UINT
 showCmd as UINT
 ptMinPosition as POINT
 ptMaxPosition as POINT
 rcNormalPosition as RECT
end type

type WINDOWPLACEMENT as tagWINDOWPLACEMENT
type PWINDOWPLACEMENT as WINDOWPLACEMENT ptr
type LPWINDOWPLACEMENT as WINDOWPLACEMENT ptr

const WPF_SETMINPOSITION = &h0001
const WPF_RESTORETOMAXIMIZED = &h0002
const WPF_ASYNCWINDOWPLACEMENT = &h0004

type tagNMHDR
 hwndFrom as HWND
 idFrom as UINT_PTR
 code as UINT
end type

type NMHDR as tagNMHDR
type LPNMHDR as NMHDR ptr

type tagSTYLESTRUCT
 styleOld as DWORD
 styleNew as DWORD
end type

type STYLESTRUCT as tagSTYLESTRUCT
type LPSTYLESTRUCT as tagSTYLESTRUCT ptr
const ODT_MENU = 1
const ODT_LISTBOX = 2
const ODT_COMBOBOX = 3
const ODT_BUTTON = 4
const ODT_STATIC = 5
const ODA_DRAWENTIRE = &h0001
const ODA_SELECT = &h0002
const ODA_FOCUS = &h0004
const ODS_SELECTED = &h0001
const ODS_GRAYED = &h0002
const ODS_DISABLED = &h0004
const ODS_CHECKED = &h0008
const ODS_FOCUS = &h0010
const ODS_DEFAULT = &h0020
const ODS_COMBOBOXEDIT = &h1000
const ODS_HOTLIGHT = &h0040
const ODS_INACTIVE = &h0080
const ODS_NOACCEL = &h0100
const ODS_NOFOCUSRECT = &h0200

type tagMEASUREITEMSTRUCT
 CtlType as UINT
 CtlID as UINT
 itemID as UINT
 itemWidth as UINT
 itemHeight as UINT
 itemData as ULONG_PTR
end type

type MEASUREITEMSTRUCT as tagMEASUREITEMSTRUCT
type PMEASUREITEMSTRUCT as tagMEASUREITEMSTRUCT ptr
type LPMEASUREITEMSTRUCT as tagMEASUREITEMSTRUCT ptr

type tagDRAWITEMSTRUCT
 CtlType as UINT
 CtlID as UINT
 itemID as UINT
 itemAction as UINT
 itemState as UINT
 hwndItem as HWND
 hDC as HDC
 rcItem as RECT
 itemData as ULONG_PTR
end type

type DRAWITEMSTRUCT as tagDRAWITEMSTRUCT
type PDRAWITEMSTRUCT as tagDRAWITEMSTRUCT ptr
type LPDRAWITEMSTRUCT as tagDRAWITEMSTRUCT ptr

type tagDELETEITEMSTRUCT
 CtlType as UINT
 CtlID as UINT
 itemID as UINT
 hwndItem as HWND
 itemData as ULONG_PTR
end type

type DELETEITEMSTRUCT as tagDELETEITEMSTRUCT
type PDELETEITEMSTRUCT as tagDELETEITEMSTRUCT ptr
type LPDELETEITEMSTRUCT as tagDELETEITEMSTRUCT ptr

type tagCOMPAREITEMSTRUCT
 CtlType as UINT
 CtlID as UINT
 hwndItem as HWND
 itemID1 as UINT
 itemData1 as ULONG_PTR
 itemID2 as UINT
 itemData2 as ULONG_PTR
 dwLocaleId as DWORD
end type

type COMPAREITEMSTRUCT as tagCOMPAREITEMSTRUCT
type PCOMPAREITEMSTRUCT as tagCOMPAREITEMSTRUCT ptr
type LPCOMPAREITEMSTRUCT as tagCOMPAREITEMSTRUCT ptr
declare function GetMessageA(byval lpMsg as LPMSG, byval hWnd as HWND, byval wMsgFilterMin as UINT, byval wMsgFilterMax as UINT) as WINBOOL

 declare function GetMessage alias "GetMessageA"(byval lpMsg as LPMSG, byval hWnd as HWND, byval wMsgFilterMin as UINT, byval wMsgFilterMax as UINT) as WINBOOL

declare function GetMessageW(byval lpMsg as LPMSG, byval hWnd as HWND, byval wMsgFilterMin as UINT, byval wMsgFilterMax as UINT) as WINBOOL


declare function TranslateMessage(byval lpMsg as const MSG ptr) as WINBOOL
declare function DispatchMessageA(byval lpMsg as const MSG ptr) as LRESULT

 declare function DispatchMessage alias "DispatchMessageA"(byval lpMsg as const MSG ptr) as LRESULT

declare function DispatchMessageW(byval lpMsg as const MSG ptr) as LRESULT


declare function SetMessageQueue(byval cMessagesMax as long) as WINBOOL
declare function PeekMessageA(byval lpMsg as LPMSG, byval hWnd as HWND, byval wMsgFilterMin as UINT, byval wMsgFilterMax as UINT, byval wRemoveMsg as UINT) as WINBOOL

 declare function PeekMessage alias "PeekMessageA"(byval lpMsg as LPMSG, byval hWnd as HWND, byval wMsgFilterMin as UINT, byval wMsgFilterMax as UINT, byval wRemoveMsg as UINT) as WINBOOL

declare function PeekMessageW(byval lpMsg as LPMSG, byval hWnd as HWND, byval wMsgFilterMin as UINT, byval wMsgFilterMax as UINT, byval wRemoveMsg as UINT) as WINBOOL


const PM_NOREMOVE = &h00000
const PM_REMOVE = &h0001
const PM_NOYIELD = &h0002
declare function RegisterHotKey(byval hWnd as HWND, byval id as long, byval fsModifiers as UINT, byval vk as UINT) as WINBOOL
declare function UnregisterHotKey(byval hWnd as HWND, byval id as long) as WINBOOL
const MOD_ALT = &h0001
const MOD_CONTROL = &h0002
const MOD_SHIFT = &h0004
const MOD_WIN = &h0008


const IDHOT_SNAPWINDOW = -1
const IDHOT_SNAPDESKTOP = -2
const ENDSESSION_CLOSEAPP = &h00000001
const ENDSESSION_CRITICAL = &h40000000
const ENDSESSION_LOGOFF = &h80000000
const EWX_LOGOFF = &h000000000
const EWX_SHUTDOWN = &h00000001
const EWX_REBOOT = &h00000002
const EWX_FORCE = &h00000004
const EWX_POWEROFF = &h00000008
const EWX_FORCEIFHUNG = &h00000010
const EWX_QUICKRESOLVE = &h00000020


const EWX_HYBRID_SHUTDOWN = &h00400000
const EWX_BOOTOPTIONS = &h01000000

declare function ExitWindowsEx(byval uFlags as UINT, byval dwReason as DWORD) as WINBOOL
declare function SwapMouseButton(byval fSwap as WINBOOL) as WINBOOL
declare function GetMessagePos() as DWORD
declare function GetMessageTime() as LONG
declare function GetMessageExtraInfo() as LPARAM


declare function IsWow64Message() as WINBOOL
declare function SetMessageExtraInfo(byval lParam as LPARAM) as LPARAM
declare function SendMessageA(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT

 declare function SendMessage alias "SendMessageA"(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT

declare function SendMessageW(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT


declare function SendMessageTimeoutA(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM, byval fuFlags as UINT, byval uTimeout as UINT, byval lpdwResult as PDWORD_PTR) as LRESULT

 declare function SendMessageTimeout alias "SendMessageTimeoutA"(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM, byval fuFlags as UINT, byval uTimeout as UINT, byval lpdwResult as PDWORD_PTR) as LRESULT

declare function SendMessageTimeoutW(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM, byval fuFlags as UINT, byval uTimeout as UINT, byval lpdwResult as PDWORD_PTR) as LRESULT


declare function SendNotifyMessageA(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as WINBOOL

 declare function SendNotifyMessage alias "SendNotifyMessageA"(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as WINBOOL

declare function SendNotifyMessageW(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as WINBOOL


declare function SendMessageCallbackA(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM, byval lpResultCallBack as SENDASYNCPROC, byval dwData as ULONG_PTR) as WINBOOL

 declare function SendMessageCallback alias "SendMessageCallbackA"(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM, byval lpResultCallBack as SENDASYNCPROC, byval dwData as ULONG_PTR) as WINBOOL

declare function SendMessageCallbackW(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM, byval lpResultCallBack as SENDASYNCPROC, byval dwData as ULONG_PTR) as WINBOOL


type BSMINFO
 cbSize as UINT
 hdesk as HDESK
 hwnd as HWND
 luid as LUID
end type

type PBSMINFO as BSMINFO ptr
declare function BroadcastSystemMessageExA(byval flags as DWORD, byval lpInfo as LPDWORD, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM, byval pbsmInfo as PBSMINFO) as long

 declare function BroadcastSystemMessageEx alias "BroadcastSystemMessageExA"(byval flags as DWORD, byval lpInfo as LPDWORD, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM, byval pbsmInfo as PBSMINFO) as long

declare function BroadcastSystemMessageExW(byval flags as DWORD, byval lpInfo as LPDWORD, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM, byval pbsmInfo as PBSMINFO) as long


declare function BroadcastSystemMessageA(byval flags as DWORD, byval lpInfo as LPDWORD, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as long

 declare function BroadcastSystemMessage alias "BroadcastSystemMessageA"(byval flags as DWORD, byval lpInfo as LPDWORD, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as long

declare function BroadcastSystemMessageW(byval flags as DWORD, byval lpInfo as LPDWORD, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as long


const BSM_ALLCOMPONENTS = &h000000000
const BSM_VXDS = &h00000001
const BSM_NETDRIVER = &h00000002
const BSM_INSTALLABLEDRIVERS = &h00000004
const BSM_APPLICATIONS = &h00000008
const BSM_ALLDESKTOPS = &h00000010
const BSF_QUERY = &h00000001
const BSF_IGNORECURRENTTASK = &h00000002
const BSF_FLUSHDISK = &h00000004
const BSF_NOHANG = &h00000008
const BSF_POSTMESSAGE = &h00000010
const BSF_FORCEIFHUNG = &h00000020
const BSF_NOTIMEOUTIFNOTHUNG = &h00000040
const BSF_ALLOWSFW = &h00000080
const BSF_SENDNOTIFYMESSAGE = &h00000100
const BSF_RETURNHDESK = &h00000200
const BSF_LUID = &h00000400
const BROADCAST_QUERY_DENY = &h424D5144
type HDEVNOTIFY as PVOID
type PHDEVNOTIFY as HDEVNOTIFY ptr
const DEVICE_NOTIFY_WINDOW_HANDLE = &h000000000
const DEVICE_NOTIFY_SERVICE_HANDLE = &h00000001
const DEVICE_NOTIFY_ALL_INTERFACE_CLASSES = &h00000004


 type HPOWERNOTIFY as HANDLE
 type PHPOWERNOTIFY as HPOWERNOTIFY ptr
 declare function RegisterPowerSettingNotification(byval hRecipient as HANDLE, byval PowerSettingGuid as LPCGUID, byval Flags as DWORD) as HPOWERNOTIFY
 declare function UnregisterPowerSettingNotification(byval Handle as HPOWERNOTIFY) as WINBOOL
 declare function RegisterSuspendResumeNotification(byval hRecipient as HANDLE, byval Flags as DWORD) as HPOWERNOTIFY
 declare function UnregisterSuspendResumeNotification(byval Handle as HPOWERNOTIFY) as WINBOOL

declare function PostMessageA(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as WINBOOL

 declare function PostMessage alias "PostMessageA"(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as WINBOOL

declare function PostMessageW(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as WINBOOL


declare function PostThreadMessageA(byval idThread as DWORD, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as WINBOOL

 declare function PostThreadMessage alias "PostThreadMessageA"(byval idThread as DWORD, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as WINBOOL

declare function PostThreadMessageW(byval idThread as DWORD, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as WINBOOL


declare function AttachThreadInput(byval idAttach as DWORD, byval idAttachTo as DWORD, byval fAttach as WINBOOL) as WINBOOL
declare function ReplyMessage(byval lResult as LRESULT) as WINBOOL
declare function WaitMessage() as WINBOOL
declare function WaitForInputIdle(byval hProcess as HANDLE, byval dwMilliseconds as DWORD) as DWORD
declare function DefWindowProcA(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT

 declare function DefWindowProc alias "DefWindowProcA"(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT

declare function DefWindowProcW(byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT


declare sub PostQuitMessage(byval nExitCode as long)
declare function InSendMessage() as WINBOOL
declare function InSendMessageEx(byval lpReserved as LPVOID) as DWORD
declare function GetDoubleClickTime() as UINT
declare function SetDoubleClickTime(byval as UINT) as WINBOOL
declare function RegisterClassA(byval lpWndClass as const WNDCLASSA ptr) as ATOM

 declare function RegisterClass alias "RegisterClassA"(byval lpWndClass as const WNDCLASSA ptr) as ATOM

declare function RegisterClassW(byval lpWndClass as const WNDCLASSW ptr) as ATOM


declare function UnregisterClassA(byval lpClassName as LPCSTR, byval hInstance as HINSTANCE) as WINBOOL

 declare function UnregisterClass alias "UnregisterClassA"(byval lpClassName as LPCSTR, byval hInstance as HINSTANCE) as WINBOOL

declare function UnregisterClassW(byval lpClassName as LPCWSTR, byval hInstance as HINSTANCE) as WINBOOL


declare function GetClassInfoA(byval hInstance as HINSTANCE, byval lpClassName as LPCSTR, byval lpWndClass as LPWNDCLASSA) as WINBOOL

 declare function GetClassInfo alias "GetClassInfoA"(byval hInstance as HINSTANCE, byval lpClassName as LPCSTR, byval lpWndClass as LPWNDCLASSA) as WINBOOL

declare function GetClassInfoW(byval hInstance as HINSTANCE, byval lpClassName as LPCWSTR, byval lpWndClass as LPWNDCLASSW) as WINBOOL


declare function RegisterClassExA(byval as const WNDCLASSEXA ptr) as ATOM

 declare function RegisterClassEx alias "RegisterClassExA"(byval as const WNDCLASSEXA ptr) as ATOM

declare function RegisterClassExW(byval as const WNDCLASSEXW ptr) as ATOM


declare function GetClassInfoExA(byval hInstance as HINSTANCE, byval lpszClass as LPCSTR, byval lpwcx as LPWNDCLASSEXA) as WINBOOL

 declare function GetClassInfoEx alias "GetClassInfoExA"(byval hInstance as HINSTANCE, byval lpszClass as LPCSTR, byval lpwcx as LPWNDCLASSEXA) as WINBOOL

declare function GetClassInfoExW(byval hInstance as HINSTANCE, byval lpszClass as LPCWSTR, byval lpwcx as LPWNDCLASSEXW) as WINBOOL


declare function CallWindowProcA(byval lpPrevWndFunc as WNDPROC, byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT

 declare function CallWindowProc alias "CallWindowProcA"(byval lpPrevWndFunc as WNDPROC, byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT

declare function CallWindowProcW(byval lpPrevWndFunc as WNDPROC, byval hWnd as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT


const CW_USEDEFAULT = clng(&h80000000)
const HWND_BROADCAST = cast(HWND, &hffff)
const HWND_MESSAGE = cast(HWND, -3)
const HWND_DESKTOP = cast(HWND, 0)
const ISMEX_NOSEND = &h000000000
const ISMEX_SEND = &h00000001
const ISMEX_NOTIFY = &h00000002
const ISMEX_CALLBACK = &h00000004
const ISMEX_REPLIED = &h00000008

 extern GUID_POWERSCHEME_PERSONALITY as const GUID
 extern GUID_MIN_POWER_SAVINGS as const GUID
 extern GUID_MAX_POWER_SAVINGS as const GUID
 extern GUID_TYPICAL_POWER_SAVINGS as const GUID
 extern GUID_ACDC_POWER_SOURCE as const GUID
 extern GUID_BATTERY_PERCENTAGE_REMAINING as const GUID
 extern GUID_IDLE_BACKGROUND_TASK as const GUID
 extern GUID_SYSTEM_AWAYMODE as const GUID
 extern GUID_MONITOR_POWER_ON as const GUID

declare function RegisterDeviceNotificationA(byval hRecipient as HANDLE, byval NotificationFilter as LPVOID, byval Flags as DWORD) as HDEVNOTIFY

 declare function RegisterDeviceNotification alias "RegisterDeviceNotificationA"(byval hRecipient as HANDLE, byval NotificationFilter as LPVOID, byval Flags as DWORD) as HDEVNOTIFY

declare function RegisterDeviceNotificationW(byval hRecipient as HANDLE, byval NotificationFilter as LPVOID, byval Flags as DWORD) as HDEVNOTIFY


declare function UnregisterDeviceNotification(byval Handle as HDEVNOTIFY) as WINBOOL
type PREGISTERCLASSNAMEW as function(byval as LPCWSTR) as WINBOOLEAN


declare function CreateWindowExA(byval dwExStyle as DWORD, byval lpClassName as LPCSTR, byval lpWindowName as LPCSTR, byval dwStyle as DWORD, byval X as long, byval Y as long, byval nWidth as long, byval nHeight as long, byval hWndParent as HWND, byval hMenu as HMENU, byval hInstance as HINSTANCE, byval lpParam as LPVOID) as HWND

 declare function CreateWindowEx alias "CreateWindowExA"(byval dwExStyle as DWORD, byval lpClassName as LPCSTR, byval lpWindowName as LPCSTR, byval dwStyle as DWORD, byval X as long, byval Y as long, byval nWidth as long, byval nHeight as long, byval hWndParent as HWND, byval hMenu as HMENU, byval hInstance as HINSTANCE, byval lpParam as LPVOID) as HWND

declare function CreateWindowExW(byval dwExStyle as DWORD, byval lpClassName as LPCWSTR, byval lpWindowName as LPCWSTR, byval dwStyle as DWORD, byval X as long, byval Y as long, byval nWidth as long, byval nHeight as long, byval hWndParent as HWND, byval hMenu as HMENU, byval hInstance as HINSTANCE, byval lpParam as LPVOID) as HWND


declare function IsWindow(byval hWnd as HWND) as WINBOOL
declare function IsMenu(byval hMenu as HMENU) as WINBOOL
declare function IsChild(byval hWndParent as HWND, byval hWnd as HWND) as WINBOOL
declare function DestroyWindow(byval hWnd as HWND) as WINBOOL
declare function ShowWindow(byval hWnd as HWND, byval nCmdShow as long) as WINBOOL
declare function AnimateWindow(byval hWnd as HWND, byval dwTime as DWORD, byval dwFlags as DWORD) as WINBOOL
declare function UpdateLayeredWindow(byval hWnd as HWND, byval hdcDst as HDC, byval pptDst as POINT ptr, byval psize as SIZE ptr, byval hdcSrc as HDC, byval pptSrc as POINT ptr, byval crKey as COLORREF, byval pblend as BLENDFUNCTION ptr, byval dwFlags as DWORD) as WINBOOL

type tagUPDATELAYEREDWINDOWINFO
 cbSize as DWORD
 hdcDst as HDC
 pptDst as const POINT ptr
 psize as const SIZE ptr
 hdcSrc as HDC
 pptSrc as const POINT ptr
 crKey as COLORREF
 pblend as const BLENDFUNCTION ptr
 dwFlags as DWORD
 prcDirty as const RECT ptr
end type

type UPDATELAYEREDWINDOWINFO as tagUPDATELAYEREDWINDOWINFO
type PUPDATELAYEREDWINDOWINFO as tagUPDATELAYEREDWINDOWINFO ptr

 declare function UpdateLayeredWindowIndirect(byval hWnd as HWND, byval pULWInfo as const UPDATELAYEREDWINDOWINFO ptr) as WINBOOL

declare function GetLayeredWindowAttributes(byval hwnd as HWND, byval pcrKey as COLORREF ptr, byval pbAlpha as UBYTE ptr, byval pdwFlags as DWORD ptr) as WINBOOL
const PW_CLIENTONLY = &h00000001
declare function PrintWindow(byval hwnd as HWND, byval hdcBlt as HDC, byval nFlags as UINT) as WINBOOL
declare function SetLayeredWindowAttributes(byval hwnd as HWND, byval crKey as COLORREF, byval bAlpha as UBYTE, byval dwFlags as DWORD) as WINBOOL
const LWA_COLORKEY = &h00000001
const LWA_ALPHA = &h00000002
const ULW_COLORKEY = &h00000001
const ULW_ALPHA = &h00000002
const ULW_OPAQUE = &h00000004
const ULW_EX_NORESIZE = &h00000008
const FLASHW_STOP = 0
const FLASHW_CAPTION = &h00000001
const FLASHW_TRAY = &h00000002
const FLASHW_ALL = FLASHW_CAPTION or FLASHW_TRAY
const FLASHW_TIMER = &h00000004
const FLASHW_TIMERNOFG = &h0000000c

type FLASHWINFO
 cbSize as UINT
 hwnd as HWND
 dwFlags as DWORD
 uCount as UINT
 dwTimeout as DWORD
end type

type PFLASHWINFO as FLASHWINFO ptr
declare function ShowWindowAsync(byval hWnd as HWND, byval nCmdShow as long) as WINBOOL
declare function FlashWindow(byval hWnd as HWND, byval bInvert as WINBOOL) as WINBOOL
declare function FlashWindowEx(byval pfwi as PFLASHWINFO) as WINBOOL
declare function ShowOwnedPopups(byval hWnd as HWND, byval fShow as WINBOOL) as WINBOOL
declare function OpenIcon(byval hWnd as HWND) as WINBOOL
declare function CloseWindow(byval hWnd as HWND) as WINBOOL
declare function MoveWindow(byval hWnd as HWND, byval X as long, byval Y as long, byval nWidth as long, byval nHeight as long, byval bRepaint as WINBOOL) as WINBOOL
declare function SetWindowPos(byval hWnd as HWND, byval hWndInsertAfter as HWND, byval X as long, byval Y as long, byval cx as long, byval cy as long, byval uFlags as UINT) as WINBOOL
declare function GetWindowPlacement(byval hWnd as HWND, byval lpwndpl as WINDOWPLACEMENT ptr) as WINBOOL
declare function SetWindowPlacement(byval hWnd as HWND, byval lpwndpl as const WINDOWPLACEMENT ptr) as WINBOOL


declare function BeginDeferWindowPos(byval nNumWindows as long) as HDWP
declare function DeferWindowPos(byval hWinPosInfo as HDWP, byval hWnd as HWND, byval hWndInsertAfter as HWND, byval x as long, byval y as long, byval cx as long, byval cy as long, byval uFlags as UINT) as HDWP
declare function EndDeferWindowPos(byval hWinPosInfo as HDWP) as WINBOOL
declare function IsWindowVisible(byval hWnd as HWND) as WINBOOL
declare function IsIconic(byval hWnd as HWND) as WINBOOL
declare function AnyPopup() as WINBOOL
declare function BringWindowToTop(byval hWnd as HWND) as WINBOOL
declare function IsZoomed(byval hWnd as HWND) as WINBOOL

const SWP_NOSIZE = &h0001
const SWP_NOMOVE = &h0002
const SWP_NOZORDER = &h0004
const SWP_NOREDRAW = &h0008
const SWP_NOACTIVATE = &h0010
const SWP_FRAMECHANGED = &h0020
const SWP_SHOWWINDOW = &h0040
const SWP_HIDEWINDOW = &h0080
const SWP_NOCOPYBITS = &h0100
const SWP_NOOWNERZORDER = &h0200
const SWP_NOSENDCHANGING = &h0400
const SWP_DRAWFRAME = SWP_FRAMECHANGED
const SWP_NOREPOSITION = SWP_NOOWNERZORDER
const SWP_DEFERERASE = &h2000
const SWP_ASYNCWINDOWPOS = &h4000
const HWND_TOP = cast(HWND, 0)
const HWND_BOTTOM = cast(HWND, 1)
const HWND_TOPMOST = cast(HWND, -1)
const HWND_NOTOPMOST = cast(HWND, -2)

type DLGTEMPLATE field = 2
 style as DWORD
 dwExtendedStyle as DWORD
 cdit as WORD
 x as short
 y as short
 cx as short
 cy as short
end type

type LPDLGTEMPLATEA as DLGTEMPLATE ptr
type LPDLGTEMPLATEW as DLGTEMPLATE ptr

 type LPDLGTEMPLATE as LPDLGTEMPLATEA

type LPCDLGTEMPLATEA as const DLGTEMPLATE ptr
type LPCDLGTEMPLATEW as const DLGTEMPLATE ptr

 type LPCDLGTEMPLATE as LPCDLGTEMPLATEA

type DLGITEMTEMPLATE field = 2
 style as DWORD
 dwExtendedStyle as DWORD
 x as short
 y as short
 cx as short
 cy as short
 id as WORD
end type

type PDLGITEMTEMPLATEA as DLGITEMTEMPLATE ptr
type PDLGITEMTEMPLATEW as DLGITEMTEMPLATE ptr

 type PDLGITEMTEMPLATE as PDLGITEMTEMPLATEA

type LPDLGITEMTEMPLATEA as DLGITEMTEMPLATE ptr
type LPDLGITEMTEMPLATEW as DLGITEMTEMPLATE ptr

 type LPDLGITEMTEMPLATE as LPDLGITEMTEMPLATEA

declare function CreateDialogParamA(byval hInstance as HINSTANCE, byval lpTemplateName as LPCSTR, byval hWndParent as HWND, byval lpDialogFunc as DLGPROC, byval dwInitParam as LPARAM) as HWND

 declare function CreateDialogParam alias "CreateDialogParamA"(byval hInstance as HINSTANCE, byval lpTemplateName as LPCSTR, byval hWndParent as HWND, byval lpDialogFunc as DLGPROC, byval dwInitParam as LPARAM) as HWND

declare function CreateDialogParamW(byval hInstance as HINSTANCE, byval lpTemplateName as LPCWSTR, byval hWndParent as HWND, byval lpDialogFunc as DLGPROC, byval dwInitParam as LPARAM) as HWND


declare function CreateDialogIndirectParamA(byval hInstance as HINSTANCE, byval lpTemplate as LPCDLGTEMPLATEA, byval hWndParent as HWND, byval lpDialogFunc as DLGPROC, byval dwInitParam as LPARAM) as HWND

 declare function CreateDialogIndirectParam alias "CreateDialogIndirectParamA"(byval hInstance as HINSTANCE, byval lpTemplate as LPCDLGTEMPLATEA, byval hWndParent as HWND, byval lpDialogFunc as DLGPROC, byval dwInitParam as LPARAM) as HWND

declare function CreateDialogIndirectParamW(byval hInstance as HINSTANCE, byval lpTemplate as LPCDLGTEMPLATEW, byval hWndParent as HWND, byval lpDialogFunc as DLGPROC, byval dwInitParam as LPARAM) as HWND


declare function DialogBoxParamA(byval hInstance as HINSTANCE, byval lpTemplateName as LPCSTR, byval hWndParent as HWND, byval lpDialogFunc as DLGPROC, byval dwInitParam as LPARAM) as INT_PTR

 declare function DialogBoxParam alias "DialogBoxParamA"(byval hInstance as HINSTANCE, byval lpTemplateName as LPCSTR, byval hWndParent as HWND, byval lpDialogFunc as DLGPROC, byval dwInitParam as LPARAM) as INT_PTR

declare function DialogBoxParamW(byval hInstance as HINSTANCE, byval lpTemplateName as LPCWSTR, byval hWndParent as HWND, byval lpDialogFunc as DLGPROC, byval dwInitParam as LPARAM) as INT_PTR


declare function DialogBoxIndirectParamA(byval hInstance as HINSTANCE, byval hDialogTemplate as LPCDLGTEMPLATEA, byval hWndParent as HWND, byval lpDialogFunc as DLGPROC, byval dwInitParam as LPARAM) as INT_PTR

 declare function DialogBoxIndirectParam alias "DialogBoxIndirectParamA"(byval hInstance as HINSTANCE, byval hDialogTemplate as LPCDLGTEMPLATEA, byval hWndParent as HWND, byval lpDialogFunc as DLGPROC, byval dwInitParam as LPARAM) as INT_PTR

declare function DialogBoxIndirectParamW(byval hInstance as HINSTANCE, byval hDialogTemplate as LPCDLGTEMPLATEW, byval hWndParent as HWND, byval lpDialogFunc as DLGPROC, byval dwInitParam as LPARAM) as INT_PTR



declare function EndDialog(byval hDlg as HWND, byval nResult as INT_PTR) as WINBOOL
declare function GetDlgItem(byval hDlg as HWND, byval nIDDlgItem as long) as HWND
declare function SetDlgItemInt(byval hDlg as HWND, byval nIDDlgItem as long, byval uValue as UINT, byval bSigned as WINBOOL) as WINBOOL
declare function GetDlgItemInt(byval hDlg as HWND, byval nIDDlgItem as long, byval lpTranslated as WINBOOL ptr, byval bSigned as WINBOOL) as UINT
declare function SetDlgItemTextA(byval hDlg as HWND, byval nIDDlgItem as long, byval lpString as LPCSTR) as WINBOOL

 declare function SetDlgItemText alias "SetDlgItemTextA"(byval hDlg as HWND, byval nIDDlgItem as long, byval lpString as LPCSTR) as WINBOOL

declare function SetDlgItemTextW(byval hDlg as HWND, byval nIDDlgItem as long, byval lpString as LPCWSTR) as WINBOOL


declare function GetDlgItemTextA(byval hDlg as HWND, byval nIDDlgItem as long, byval lpString as LPSTR, byval cchMax as long) as UINT

 declare function GetDlgItemText alias "GetDlgItemTextA"(byval hDlg as HWND, byval nIDDlgItem as long, byval lpString as LPSTR, byval cchMax as long) as UINT

declare function GetDlgItemTextW(byval hDlg as HWND, byval nIDDlgItem as long, byval lpString as LPWSTR, byval cchMax as long) as UINT


declare function CheckDlgButton(byval hDlg as HWND, byval nIDButton as long, byval uCheck as UINT) as WINBOOL
declare function CheckRadioButton(byval hDlg as HWND, byval nIDFirstButton as long, byval nIDLastButton as long, byval nIDCheckButton as long) as WINBOOL
declare function IsDlgButtonChecked(byval hDlg as HWND, byval nIDButton as long) as UINT
declare function SendDlgItemMessageA(byval hDlg as HWND, byval nIDDlgItem as long, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT

 declare function SendDlgItemMessage alias "SendDlgItemMessageA"(byval hDlg as HWND, byval nIDDlgItem as long, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT

declare function SendDlgItemMessageW(byval hDlg as HWND, byval nIDDlgItem as long, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT


declare function GetNextDlgGroupItem(byval hDlg as HWND, byval hCtl as HWND, byval bPrevious as WINBOOL) as HWND
declare function GetNextDlgTabItem(byval hDlg as HWND, byval hCtl as HWND, byval bPrevious as WINBOOL) as HWND
declare function GetDlgCtrlID(byval hWnd as HWND) as long
declare function GetDialogBaseUnits() as long
declare function DefDlgProcA(byval hDlg as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT

 declare function DefDlgProc alias "DefDlgProcA"(byval hDlg as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT

declare function DefDlgProcW(byval hDlg as HWND, byval Msg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT


const DLGWINDOWEXTRA = 30
declare function CallMsgFilterA(byval lpMsg as LPMSG, byval nCode as long) as WINBOOL

 declare function CallMsgFilter alias "CallMsgFilterA"(byval lpMsg as LPMSG, byval nCode as long) as WINBOOL

declare function CallMsgFilterW(byval lpMsg as LPMSG, byval nCode as long) as WINBOOL


declare function OpenClipboard(byval hWndNewOwner as HWND) as WINBOOL
declare function CloseClipboard() as WINBOOL
declare function GetClipboardSequenceNumber() as DWORD
declare function GetClipboardOwner() as HWND
declare function SetClipboardViewer(byval hWndNewViewer as HWND) as HWND
declare function GetClipboardViewer() as HWND
declare function ChangeClipboardChain(byval hWndRemove as HWND, byval hWndNewNext as HWND) as WINBOOL
declare function SetClipboardData(byval uFormat as UINT, byval hMem as HANDLE) as HANDLE
declare function GetClipboardData(byval uFormat as UINT) as HANDLE
declare function RegisterClipboardFormatA(byval lpszFormat as LPCSTR) as UINT

 declare function RegisterClipboardFormat alias "RegisterClipboardFormatA"(byval lpszFormat as LPCSTR) as UINT

declare function RegisterClipboardFormatW(byval lpszFormat as LPCWSTR) as UINT


declare function CountClipboardFormats() as long
declare function EnumClipboardFormats(byval format as UINT) as UINT
declare function GetClipboardFormatNameA(byval format as UINT, byval lpszFormatName as LPSTR, byval cchMaxCount as long) as long

 declare function GetClipboardFormatName alias "GetClipboardFormatNameA"(byval format as UINT, byval lpszFormatName as LPSTR, byval cchMaxCount as long) as long

declare function GetClipboardFormatNameW(byval format as UINT, byval lpszFormatName as LPWSTR, byval cchMaxCount as long) as long


declare function EmptyClipboard() as WINBOOL
declare function IsClipboardFormatAvailable(byval format as UINT) as WINBOOL
declare function GetPriorityClipboardFormat(byval paFormatPriorityList as UINT ptr, byval cFormats as long) as long
declare function GetOpenClipboardWindow() as HWND


declare function CharToOemA(byval lpszSrc as LPCSTR, byval lpszDst as LPSTR) as WINBOOL

 declare function CharToOem alias "CharToOemA"(byval lpszSrc as LPCSTR, byval lpszDst as LPSTR) as WINBOOL

declare function CharToOemW(byval lpszSrc as LPCWSTR, byval lpszDst as LPSTR) as WINBOOL


declare function OemToCharA(byval lpszSrc as LPCSTR, byval lpszDst as LPSTR) as WINBOOL

 declare function OemToChar alias "OemToCharA"(byval lpszSrc as LPCSTR, byval lpszDst as LPSTR) as WINBOOL

declare function OemToCharW(byval lpszSrc as LPCSTR, byval lpszDst as LPWSTR) as WINBOOL


declare function CharToOemBuffA(byval lpszSrc as LPCSTR, byval lpszDst as LPSTR, byval cchDstLength as DWORD) as WINBOOL

 declare function CharToOemBuff alias "CharToOemBuffA"(byval lpszSrc as LPCSTR, byval lpszDst as LPSTR, byval cchDstLength as DWORD) as WINBOOL

declare function CharToOemBuffW(byval lpszSrc as LPCWSTR, byval lpszDst as LPSTR, byval cchDstLength as DWORD) as WINBOOL


declare function OemToCharBuffA(byval lpszSrc as LPCSTR, byval lpszDst as LPSTR, byval cchDstLength as DWORD) as WINBOOL

 declare function OemToCharBuff alias "OemToCharBuffA"(byval lpszSrc as LPCSTR, byval lpszDst as LPSTR, byval cchDstLength as DWORD) as WINBOOL

declare function OemToCharBuffW(byval lpszSrc as LPCSTR, byval lpszDst as LPWSTR, byval cchDstLength as DWORD) as WINBOOL


declare function CharUpperA(byval lpsz as LPSTR) as LPSTR

 declare function CharUpper alias "CharUpperA"(byval lpsz as LPSTR) as LPSTR

declare function CharUpperW(byval lpsz as LPWSTR) as LPWSTR


declare function CharUpperBuffA(byval lpsz as LPSTR, byval cchLength as DWORD) as DWORD

 declare function CharUpperBuff alias "CharUpperBuffA"(byval lpsz as LPSTR, byval cchLength as DWORD) as DWORD

declare function CharUpperBuffW(byval lpsz as LPWSTR, byval cchLength as DWORD) as DWORD


declare function CharLowerA(byval lpsz as LPSTR) as LPSTR

 declare function CharLower alias "CharLowerA"(byval lpsz as LPSTR) as LPSTR

declare function CharLowerW(byval lpsz as LPWSTR) as LPWSTR


declare function CharLowerBuffA(byval lpsz as LPSTR, byval cchLength as DWORD) as DWORD

 declare function CharLowerBuff alias "CharLowerBuffA"(byval lpsz as LPSTR, byval cchLength as DWORD) as DWORD

declare function CharLowerBuffW(byval lpsz as LPWSTR, byval cchLength as DWORD) as DWORD


declare function CharNextA(byval lpsz as LPCSTR) as LPSTR

 declare function CharNext alias "CharNextA"(byval lpsz as LPCSTR) as LPSTR

declare function CharNextW(byval lpsz as LPCWSTR) as LPWSTR


declare function CharPrevA(byval lpszStart as LPCSTR, byval lpszCurrent as LPCSTR) as LPSTR

 declare function CharPrev alias "CharPrevA"(byval lpszStart as LPCSTR, byval lpszCurrent as LPCSTR) as LPSTR

declare function CharPrevW(byval lpszStart as LPCWSTR, byval lpszCurrent as LPCWSTR) as LPWSTR


declare function CharNextExA(byval CodePage as WORD, byval lpCurrentChar as LPCSTR, byval dwFlags as DWORD) as LPSTR
declare function CharPrevExA(byval CodePage as WORD, byval lpStart as LPCSTR, byval lpCurrentChar as LPCSTR, byval dwFlags as DWORD) as LPSTR
declare function AnsiToOem alias "CharToOemA"(byval lpszSrc as LPCSTR, byval lpszDst as LPSTR) as WINBOOL
declare function OemToAnsi alias "OemToCharA"(byval lpszSrc as LPCSTR, byval lpszDst as LPSTR) as WINBOOL
declare function AnsiToOemBuff alias "CharToOemBuffA"(byval lpszSrc as LPCSTR, byval lpszDst as LPSTR, byval cchDstLength as DWORD) as WINBOOL
declare function OemToAnsiBuff alias "OemToCharBuffA"(byval lpszSrc as LPCSTR, byval lpszDst as LPSTR, byval cchDstLength as DWORD) as WINBOOL
declare function AnsiUpper alias "CharUpperA"(byval lpsz as LPSTR) as LPSTR
declare function AnsiUpperBuff alias "CharUpperBuffA"(byval lpsz as LPSTR, byval cchLength as DWORD) as DWORD
declare function AnsiLower alias "CharLowerA"(byval lpsz as LPSTR) as LPSTR
declare function AnsiLowerBuff alias "CharLowerBuffA"(byval lpsz as LPSTR, byval cchLength as DWORD) as DWORD
declare function AnsiNext alias "CharNextA"(byval lpsz as LPCSTR) as LPSTR
declare function AnsiPrev alias "CharPrevA"(byval lpszStart as LPCSTR, byval lpszCurrent as LPCSTR) as LPSTR
declare function IsCharAlphaA(byval ch as CHAR) as WINBOOL

 declare function IsCharAlpha alias "IsCharAlphaA"(byval ch as CHAR) as WINBOOL

declare function IsCharAlphaW(byval ch as WCHAR) as WINBOOL


declare function IsCharAlphaNumericA(byval ch as CHAR) as WINBOOL

 declare function IsCharAlphaNumeric alias "IsCharAlphaNumericA"(byval ch as CHAR) as WINBOOL

declare function IsCharAlphaNumericW(byval ch as WCHAR) as WINBOOL


declare function IsCharUpperA(byval ch as CHAR) as WINBOOL

 declare function IsCharUpper alias "IsCharUpperA"(byval ch as CHAR) as WINBOOL

declare function IsCharUpperW(byval ch as WCHAR) as WINBOOL


declare function IsCharLowerA(byval ch as CHAR) as WINBOOL

 declare function IsCharLower alias "IsCharLowerA"(byval ch as CHAR) as WINBOOL

declare function IsCharLowerW(byval ch as WCHAR) as WINBOOL


declare function SetFocus(byval hWnd as HWND) as HWND
declare function GetActiveWindow() as HWND
declare function GetFocus() as HWND
declare function GetKBCodePage() as UINT
declare function GetKeyState(byval nVirtKey as long) as SHORT
declare function GetAsyncKeyState(byval vKey as long) as SHORT
declare function GetKeyboardState(byval lpKeyState as PBYTE) as WINBOOL
declare function SetKeyboardState(byval lpKeyState as LPBYTE) as WINBOOL
declare function GetKeyNameTextA(byval lParam as LONG, byval lpString as LPSTR, byval cchSize as long) as long

 declare function GetKeyNameText alias "GetKeyNameTextA"(byval lParam as LONG, byval lpString as LPSTR, byval cchSize as long) as long

declare function GetKeyNameTextW(byval lParam as LONG, byval lpString as LPWSTR, byval cchSize as long) as long


declare function GetKeyboardType(byval nTypeFlag as long) as long
declare function ToAscii_ alias "ToAscii"(byval uVirtKey as UINT, byval uScanCode as UINT, byval lpKeyState as const UBYTE ptr, byval lpChar as LPWORD, byval uFlags as UINT) as long
declare function ToAsciiEx(byval uVirtKey as UINT, byval uScanCode as UINT, byval lpKeyState as const UBYTE ptr, byval lpChar as LPWORD, byval uFlags as UINT, byval dwhkl as HKL) as long
declare function ToUnicode(byval wVirtKey as UINT, byval wScanCode as UINT, byval lpKeyState as const UBYTE ptr, byval pwszBuff as LPWSTR, byval cchBuff as long, byval wFlags as UINT) as long
declare function OemKeyScan(byval wOemChar as WORD) as DWORD
declare function VkKeyScanA(byval ch as CHAR) as SHORT

 declare function VkKeyScan alias "VkKeyScanA"(byval ch as CHAR) as SHORT

declare function VkKeyScanW(byval ch as WCHAR) as SHORT


declare function VkKeyScanExA(byval ch as CHAR, byval dwhkl as HKL) as SHORT

 declare function VkKeyScanEx alias "VkKeyScanExA"(byval ch as CHAR, byval dwhkl as HKL) as SHORT

declare function VkKeyScanExW(byval ch as WCHAR, byval dwhkl as HKL) as SHORT


declare sub keybd_event(byval bVk as UBYTE, byval bScan as UBYTE, byval dwFlags as DWORD, byval dwExtraInfo as ULONG_PTR)
const KEYEVENTF_EXTENDEDKEY = &h0001
const KEYEVENTF_KEYUP = &h0002
const KEYEVENTF_UNICODE = &h0004
const KEYEVENTF_SCANCODE = &h0008
const MOUSEEVENTF_MOVE = &h0001
const MOUSEEVENTF_LEFTDOWN = &h0002
const MOUSEEVENTF_LEFTUP = &h0004
const MOUSEEVENTF_RIGHTDOWN = &h0008
const MOUSEEVENTF_RIGHTUP = &h0010
const MOUSEEVENTF_MIDDLEDOWN = &h0020
const MOUSEEVENTF_MIDDLEUP = &h0040
const MOUSEEVENTF_XDOWN = &h0080
const MOUSEEVENTF_XUP = &h0100
const MOUSEEVENTF_WHEEL = &h0800


const MOUSEEVENTF_VIRTUALDESK = &h4000
const MOUSEEVENTF_ABSOLUTE = &h8000
const INPUT_MOUSE = 0
const INPUT_KEYBOARD = 1
const INPUT_HARDWARE = 2


declare sub mouse_event(byval dwFlags as DWORD, byval dx as DWORD, byval dy as DWORD, byval dwData as DWORD, byval dwExtraInfo as ULONG_PTR)

type tagMOUSEINPUT
 dx as LONG
 dy as LONG
 mouseData as DWORD
 dwFlags as DWORD
 time as DWORD
 dwExtraInfo as ULONG_PTR
end type

type MOUSEINPUT as tagMOUSEINPUT
type PMOUSEINPUT as tagMOUSEINPUT ptr
type LPMOUSEINPUT as tagMOUSEINPUT ptr

type tagKEYBDINPUT
 wVk as WORD
 wScan as WORD
 dwFlags as DWORD
 time as DWORD
 dwExtraInfo as ULONG_PTR
end type

type KEYBDINPUT as tagKEYBDINPUT
type PKEYBDINPUT as tagKEYBDINPUT ptr
type LPKEYBDINPUT as tagKEYBDINPUT ptr

type tagHARDWAREINPUT
 uMsg as DWORD
 wParamL as WORD
 wParamH as WORD
end type

type HARDWAREINPUT as tagHARDWAREINPUT
type PHARDWAREINPUT as tagHARDWAREINPUT ptr
type LPHARDWAREINPUT as tagHARDWAREINPUT ptr

type tagINPUT
 as DWORD type

 union
 mi as MOUSEINPUT
 ki as KEYBDINPUT
 hi as HARDWAREINPUT
 end union
end type

type INPUT_ as tagINPUT
type PINPUT as tagINPUT ptr
type LPINPUT as tagINPUT ptr
declare function SendInput(byval cInputs as UINT, byval pInputs as LPINPUT, byval cbSize as long) as UINT


type tagLASTINPUTINFO
 cbSize as UINT
 dwTime as DWORD
end type

type LASTINPUTINFO as tagLASTINPUTINFO
type PLASTINPUTINFO as tagLASTINPUTINFO ptr
declare function GetLastInputInfo(byval plii as PLASTINPUTINFO) as WINBOOL
declare function MapVirtualKeyA(byval uCode as UINT, byval uMapType as UINT) as UINT

 declare function MapVirtualKey alias "MapVirtualKeyA"(byval uCode as UINT, byval uMapType as UINT) as UINT

declare function MapVirtualKeyW(byval uCode as UINT, byval uMapType as UINT) as UINT


declare function MapVirtualKeyExA(byval uCode as UINT, byval uMapType as UINT, byval dwhkl as HKL) as UINT

 declare function MapVirtualKeyEx alias "MapVirtualKeyExA"(byval uCode as UINT, byval uMapType as UINT, byval dwhkl as HKL) as UINT

declare function MapVirtualKeyExW(byval uCode as UINT, byval uMapType as UINT, byval dwhkl as HKL) as UINT


declare function GetInputState() as WINBOOL
declare function GetQueueStatus(byval flags as UINT) as DWORD
declare function GetCapture() as HWND
declare function SetCapture(byval hWnd as HWND) as HWND
declare function ReleaseCapture() as WINBOOL
declare function MsgWaitForMultipleObjects(byval nCount as DWORD, byval pHandles as const HANDLE ptr, byval fWaitAll as WINBOOL, byval dwMilliseconds as DWORD, byval dwWakeMask as DWORD) as DWORD
declare function MsgWaitForMultipleObjectsEx(byval nCount as DWORD, byval pHandles as const HANDLE ptr, byval dwMilliseconds as DWORD, byval dwWakeMask as DWORD, byval dwFlags as DWORD) as DWORD

const MAPVK_VK_TO_VSC = 0
const MAPVK_VSC_TO_VK = 1
const MAPVK_VK_TO_CHAR = 2
const MAPVK_VSC_TO_VK_EX = 3


const MWMO_WAITALL = &h0001
const MWMO_ALERTABLE = &h0002
const MWMO_INPUTAVAILABLE = &h0004
const QS_KEY = &h0001
const QS_MOUSEMOVE = &h0002
const QS_MOUSEBUTTON = &h0004
const QS_POSTMESSAGE = &h0008
const QS_TIMER = &h0010
const QS_PAINT = &h0020
const QS_SENDMESSAGE = &h0040
const QS_HOTKEY = &h0080
const QS_ALLPOSTMESSAGE = &h0100
const QS_RAWINPUT = &h0400


const QS_MOUSE = QS_MOUSEMOVE or QS_MOUSEBUTTON

 const QS_INPUT = (QS_MOUSE or QS_KEY) or QS_RAWINPUT

const QS_ALLEVENTS = (((QS_INPUT or QS_POSTMESSAGE) or QS_TIMER) or QS_PAINT) or QS_HOTKEY
const QS_ALLINPUT = ((((QS_INPUT or QS_POSTMESSAGE) or QS_TIMER) or QS_PAINT) or QS_HOTKEY) or QS_SENDMESSAGE
const USER_TIMER_MAXIMUM = &h7FFFFFFF
const USER_TIMER_MINIMUM = &h0000000A


declare function SetTimer(byval hWnd as HWND, byval nIDEvent as UINT_PTR, byval uElapse as UINT, byval lpTimerFunc as TIMERPROC) as UINT_PTR
declare function KillTimer(byval hWnd as HWND, byval uIDEvent as UINT_PTR) as WINBOOL
declare function IsWindowUnicode(byval hWnd as HWND) as WINBOOL
declare function EnableWindow(byval hWnd as HWND, byval bEnable as WINBOOL) as WINBOOL
declare function IsWindowEnabled(byval hWnd as HWND) as WINBOOL
declare function LoadAcceleratorsA(byval hInstance as HINSTANCE, byval lpTableName as LPCSTR) as HACCEL

 declare function LoadAccelerators alias "LoadAcceleratorsA"(byval hInstance as HINSTANCE, byval lpTableName as LPCSTR) as HACCEL

declare function LoadAcceleratorsW(byval hInstance as HINSTANCE, byval lpTableName as LPCWSTR) as HACCEL


declare function CreateAcceleratorTableA(byval paccel as LPACCEL, byval cAccel as long) as HACCEL

 declare function CreateAcceleratorTable alias "CreateAcceleratorTableA"(byval paccel as LPACCEL, byval cAccel as long) as HACCEL

declare function CreateAcceleratorTableW(byval paccel as LPACCEL, byval cAccel as long) as HACCEL


declare function DestroyAcceleratorTable(byval hAccel as HACCEL) as WINBOOL
declare function CopyAcceleratorTableA(byval hAccelSrc as HACCEL, byval lpAccelDst as LPACCEL, byval cAccelEntries as long) as long

 declare function CopyAcceleratorTable alias "CopyAcceleratorTableA"(byval hAccelSrc as HACCEL, byval lpAccelDst as LPACCEL, byval cAccelEntries as long) as long

declare function CopyAcceleratorTableW(byval hAccelSrc as HACCEL, byval lpAccelDst as LPACCEL, byval cAccelEntries as long) as long


declare function TranslateAcceleratorA(byval hWnd as HWND, byval hAccTable as HACCEL, byval lpMsg as LPMSG) as long

 declare function TranslateAccelerator alias "TranslateAcceleratorA"(byval hWnd as HWND, byval hAccTable as HACCEL, byval lpMsg as LPMSG) as long

declare function TranslateAcceleratorW(byval hWnd as HWND, byval hAccTable as HACCEL, byval lpMsg as LPMSG) as long



const SM_CXSCREEN = 0
const SM_CYSCREEN = 1
const SM_CXVSCROLL = 2
const SM_CYHSCROLL = 3
const SM_CYCAPTION = 4
const SM_CXBORDER = 5
const SM_CYBORDER = 6
const SM_CXDLGFRAME = 7
const SM_CYDLGFRAME = 8
const SM_CYVTHUMB = 9
const SM_CXHTHUMB = 10
const SM_CXICON = 11
const SM_CYICON = 12
const SM_CXCURSOR = 13
const SM_CYCURSOR = 14
const SM_CYMENU = 15
const SM_CXFULLSCREEN = 16
const SM_CYFULLSCREEN = 17
const SM_CYKANJIWINDOW = 18
const SM_MOUSEPRESENT = 19
const SM_CYVSCROLL = 20
const SM_CXHSCROLL = 21
const SM_DEBUG = 22
const SM_SWAPBUTTON = 23
const SM_RESERVED1 = 24
const SM_RESERVED2 = 25
const SM_RESERVED3 = 26
const SM_RESERVED4 = 27
const SM_CXMIN = 28
const SM_CYMIN = 29
const SM_CXSIZE = 30
const SM_CYSIZE = 31
const SM_CXFRAME = 32
const SM_CYFRAME = 33
const SM_CXMINTRACK = 34
const SM_CYMINTRACK = 35
const SM_CXDOUBLECLK = 36
const SM_CYDOUBLECLK = 37
const SM_CXICONSPACING = 38
const SM_CYICONSPACING = 39
const SM_MENUDROPALIGNMENT = 40
const SM_PENWINDOWS = 41
const SM_DBCSENABLED = 42
const SM_CMOUSEBUTTONS = 43
const SM_CXFIXEDFRAME = SM_CXDLGFRAME
const SM_CYFIXEDFRAME = SM_CYDLGFRAME
const SM_CXSIZEFRAME = SM_CXFRAME
const SM_CYSIZEFRAME = SM_CYFRAME
const SM_SECURE = 44
const SM_CXEDGE = 45
const SM_CYEDGE = 46
const SM_CXMINSPACING = 47
const SM_CYMINSPACING = 48
const SM_CXSMICON = 49
const SM_CYSMICON = 50
const SM_CYSMCAPTION = 51
const SM_CXSMSIZE = 52
const SM_CYSMSIZE = 53
const SM_CXMENUSIZE = 54
const SM_CYMENUSIZE = 55
const SM_ARRANGE = 56
const SM_CXMINIMIZED = 57
const SM_CYMINIMIZED = 58
const SM_CXMAXTRACK = 59
const SM_CYMAXTRACK = 60
const SM_CXMAXIMIZED = 61
const SM_CYMAXIMIZED = 62
const SM_NETWORK = 63
const SM_CLEANBOOT = 67
const SM_CXDRAG = 68
const SM_CYDRAG = 69
const SM_SHOWSOUNDS = 70
const SM_CXMENUCHECK = 71
const SM_CYMENUCHECK = 72
const SM_SLOWMACHINE = 73
const SM_MIDEASTENABLED = 74
const SM_MOUSEWHEELPRESENT = 75
const SM_XVIRTUALSCREEN = 76
const SM_YVIRTUALSCREEN = 77
const SM_CXVIRTUALSCREEN = 78
const SM_CYVIRTUALSCREEN = 79
const SM_CMONITORS = 80
const SM_SAMEDISPLAYFORMAT = 81
const SM_IMMENABLED = 82
const SM_CXFOCUSBORDER = 83
const SM_CYFOCUSBORDER = 84
const SM_TABLETPC = 86
const SM_MEDIACENTER = 87
const SM_STARTER = 88
const SM_SERVERR2 = 89


 const SM_CMETRICS = 97

const SM_REMOTESESSION = &h1000
const SM_SHUTTINGDOWN = &h2000
const SM_REMOTECONTROL = &h2001
const SM_CARETBLINKINGENABLED = &h2002


declare function GetSystemMetrics(byval nIndex as long) as long
const PMB_ACTIVE = &h00000001
const MNC_IGNORE = 0
const MNC_CLOSE = 1
const MNC_EXECUTE = 2
const MNC_SELECT = 3
const MNS_NOCHECK = &h80000000
const MNS_MODELESS = &h40000000
const MNS_DRAGDROP = &h20000000
const MNS_AUTODISMISS = &h10000000
const MNS_NOTIFYBYPOS = &h08000000
const MNS_CHECKORBMP = &h04000000
const MIM_MAXHEIGHT = &h00000001
const MIM_BACKGROUND = &h00000002
const MIM_HELPID = &h00000004
const MIM_MENUDATA = &h00000008
const MIM_STYLE = &h00000010
const MIM_APPLYTOSUBMENUS = &h80000000
const MND_CONTINUE = 0
const MND_ENDMENU = 1
const MNGOF_TOPGAP = &h00000001
const MNGOF_BOTTOMGAP = &h00000002
const MNGO_NOINTERFACE = &h000000000
const MNGO_NOERROR = &h00000001
const MIIM_STATE = &h00000001
const MIIM_ID = &h00000002
const MIIM_SUBMENU = &h00000004
const MIIM_CHECKMARKS = &h00000008
const MIIM_TYPE = &h00000010
const MIIM_DATA = &h00000020
const MIIM_STRING = &h00000040
const MIIM_BITMAP = &h00000080
const MIIM_FTYPE = &h00000100
const HBMMENU_CALLBACK = cast(HBITMAP, -1)
const HBMMENU_SYSTEM = cast(HBITMAP, 1)
const HBMMENU_MBAR_RESTORE = cast(HBITMAP, 2)
const HBMMENU_MBAR_MINIMIZE = cast(HBITMAP, 3)
const HBMMENU_MBAR_CLOSE = cast(HBITMAP, 5)
const HBMMENU_MBAR_CLOSE_D = cast(HBITMAP, 6)
const HBMMENU_MBAR_MINIMIZE_D = cast(HBITMAP, 7)
const HBMMENU_POPUP_CLOSE = cast(HBITMAP, 8)
const HBMMENU_POPUP_RESTORE = cast(HBITMAP, 9)
const HBMMENU_POPUP_MAXIMIZE = cast(HBITMAP, 10)
const HBMMENU_POPUP_MINIMIZE = cast(HBITMAP, 11)
declare function LoadMenuA(byval hInstance as HINSTANCE, byval lpMenuName as LPCSTR) as HMENU

 declare function LoadMenu alias "LoadMenuA"(byval hInstance as HINSTANCE, byval lpMenuName as LPCSTR) as HMENU

declare function LoadMenuW(byval hInstance as HINSTANCE, byval lpMenuName as LPCWSTR) as HMENU


declare function LoadMenuIndirectA(byval lpMenuTemplate as const MENUTEMPLATEA ptr) as HMENU

 declare function LoadMenuIndirect alias "LoadMenuIndirectA"(byval lpMenuTemplate as const MENUTEMPLATEA ptr) as HMENU

declare function LoadMenuIndirectW(byval lpMenuTemplate as const MENUTEMPLATEW ptr) as HMENU


declare function GetMenu(byval hWnd as HWND) as HMENU
declare function SetMenu(byval hWnd as HWND, byval hMenu as HMENU) as WINBOOL
declare function ChangeMenuA(byval hMenu as HMENU, byval cmd as UINT, byval lpszNewItem as LPCSTR, byval cmdInsert as UINT, byval flags as UINT) as WINBOOL

 declare function ChangeMenu alias "ChangeMenuA"(byval hMenu as HMENU, byval cmd as UINT, byval lpszNewItem as LPCSTR, byval cmdInsert as UINT, byval flags as UINT) as WINBOOL

declare function ChangeMenuW(byval hMenu as HMENU, byval cmd as UINT, byval lpszNewItem as LPCWSTR, byval cmdInsert as UINT, byval flags as UINT) as WINBOOL


declare function HiliteMenuItem(byval hWnd as HWND, byval hMenu as HMENU, byval uIDHiliteItem as UINT, byval uHilite as UINT) as WINBOOL
declare function GetMenuStringA(byval hMenu as HMENU, byval uIDItem as UINT, byval lpString as LPSTR, byval cchMax as long, byval flags as UINT) as long

 declare function GetMenuString alias "GetMenuStringA"(byval hMenu as HMENU, byval uIDItem as UINT, byval lpString as LPSTR, byval cchMax as long, byval flags as UINT) as long

declare function GetMenuStringW(byval hMenu as HMENU, byval uIDItem as UINT, byval lpString as LPWSTR, byval cchMax as long, byval flags as UINT) as long


declare function GetMenuState(byval hMenu as HMENU, byval uId as UINT, byval uFlags as UINT) as UINT
declare function DrawMenuBar(byval hWnd as HWND) as WINBOOL
declare function GetSystemMenu(byval hWnd as HWND, byval bRevert as WINBOOL) as HMENU
declare function CreateMenu() as HMENU
declare function CreatePopupMenu() as HMENU
declare function DestroyMenu(byval hMenu as HMENU) as WINBOOL
declare function CheckMenuItem(byval hMenu as HMENU, byval uIDCheckItem as UINT, byval uCheck as UINT) as DWORD
declare function EnableMenuItem(byval hMenu as HMENU, byval uIDEnableItem as UINT, byval uEnable as UINT) as WINBOOL
declare function GetSubMenu(byval hMenu as HMENU, byval nPos as long) as HMENU
declare function GetMenuItemID(byval hMenu as HMENU, byval nPos as long) as UINT
declare function GetMenuItemCount(byval hMenu as HMENU) as long
declare function InsertMenuA(byval hMenu as HMENU, byval uPosition as UINT, byval uFlags as UINT, byval uIDNewItem as UINT_PTR, byval lpNewItem as LPCSTR) as WINBOOL

 declare function InsertMenu alias "InsertMenuA"(byval hMenu as HMENU, byval uPosition as UINT, byval uFlags as UINT, byval uIDNewItem as UINT_PTR, byval lpNewItem as LPCSTR) as WINBOOL

declare function InsertMenuW(byval hMenu as HMENU, byval uPosition as UINT, byval uFlags as UINT, byval uIDNewItem as UINT_PTR, byval lpNewItem as LPCWSTR) as WINBOOL


declare function AppendMenuA(byval hMenu as HMENU, byval uFlags as UINT, byval uIDNewItem as UINT_PTR, byval lpNewItem as LPCSTR) as WINBOOL

 declare function AppendMenu alias "AppendMenuA"(byval hMenu as HMENU, byval uFlags as UINT, byval uIDNewItem as UINT_PTR, byval lpNewItem as LPCSTR) as WINBOOL

declare function AppendMenuW(byval hMenu as HMENU, byval uFlags as UINT, byval uIDNewItem as UINT_PTR, byval lpNewItem as LPCWSTR) as WINBOOL


declare function ModifyMenuA(byval hMnu as HMENU, byval uPosition as UINT, byval uFlags as UINT, byval uIDNewItem as UINT_PTR, byval lpNewItem as LPCSTR) as WINBOOL

 declare function ModifyMenu alias "ModifyMenuA"(byval hMnu as HMENU, byval uPosition as UINT, byval uFlags as UINT, byval uIDNewItem as UINT_PTR, byval lpNewItem as LPCSTR) as WINBOOL

declare function ModifyMenuW(byval hMnu as HMENU, byval uPosition as UINT, byval uFlags as UINT, byval uIDNewItem as UINT_PTR, byval lpNewItem as LPCWSTR) as WINBOOL


declare function RemoveMenu(byval hMenu as HMENU, byval uPosition as UINT, byval uFlags as UINT) as WINBOOL
declare function DeleteMenu(byval hMenu as HMENU, byval uPosition as UINT, byval uFlags as UINT) as WINBOOL
declare function SetMenuItemBitmaps(byval hMenu as HMENU, byval uPosition as UINT, byval uFlags as UINT, byval hBitmapUnchecked as HBITMAP, byval hBitmapChecked as HBITMAP) as WINBOOL
declare function GetMenuCheckMarkDimensions() as LONG
declare function TrackPopupMenu(byval hMenu as HMENU, byval uFlags as UINT, byval x as long, byval y as long, byval nReserved as long, byval hWnd as HWND, byval prcRect as const RECT ptr) as WINBOOL

type tagTPMPARAMS
 cbSize as UINT
 rcExclude as RECT
end type

type TPMPARAMS as tagTPMPARAMS

type tagMENUINFO
 cbSize as DWORD
 fMask as DWORD
 dwStyle as DWORD
 cyMax as UINT
 hbrBack as HBRUSH
 dwContextHelpID as DWORD
 dwMenuData as ULONG_PTR
end type

type MENUINFO as tagMENUINFO
type LPMENUINFO as tagMENUINFO ptr
type LPTPMPARAMS as TPMPARAMS ptr
type LPCMENUINFO as const MENUINFO ptr

declare function TrackPopupMenuEx(byval as HMENU, byval as UINT, byval as long, byval as long, byval as HWND, byval as LPTPMPARAMS) as WINBOOL
declare function GetMenuInfo(byval as HMENU, byval as LPMENUINFO) as WINBOOL
declare function SetMenuInfo(byval as HMENU, byval as LPCMENUINFO) as WINBOOL
declare function EndMenu() as WINBOOL


type tagMENUGETOBJECTINFO
 dwFlags as DWORD
 uPos as UINT
 hmenu as HMENU
 riid as PVOID
 pvObj as PVOID
end type

type MENUGETOBJECTINFO as tagMENUGETOBJECTINFO
type PMENUGETOBJECTINFO as tagMENUGETOBJECTINFO ptr

type tagMENUITEMINFOA
 cbSize as UINT
 fMask as UINT
 fType as UINT
 fState as UINT
 wID as UINT
 hSubMenu as HMENU
 hbmpChecked as HBITMAP
 hbmpUnchecked as HBITMAP
 dwItemData as ULONG_PTR
 dwTypeData as LPSTR
 cch as UINT
 hbmpItem as HBITMAP
end type

type MENUITEMINFOA as tagMENUITEMINFOA
type LPMENUITEMINFOA as tagMENUITEMINFOA ptr

type tagMENUITEMINFOW
 cbSize as UINT
 fMask as UINT
 fType as UINT
 fState as UINT
 wID as UINT
 hSubMenu as HMENU
 hbmpChecked as HBITMAP
 hbmpUnchecked as HBITMAP
 dwItemData as ULONG_PTR
 dwTypeData as LPWSTR
 cch as UINT
 hbmpItem as HBITMAP
end type

type MENUITEMINFOW as tagMENUITEMINFOW
type LPMENUITEMINFOW as tagMENUITEMINFOW ptr

 type MENUITEMINFO as MENUITEMINFOA
 type LPMENUITEMINFO as LPMENUITEMINFOA

type LPCMENUITEMINFOA as const MENUITEMINFOA ptr
type LPCMENUITEMINFOW as const MENUITEMINFOW ptr

 type LPCMENUITEMINFO as LPCMENUITEMINFOA

declare function InsertMenuItemA(byval hmenu as HMENU, byval item as UINT, byval fByPosition as WINBOOL, byval lpmi as LPCMENUITEMINFOA) as WINBOOL

 declare function InsertMenuItem alias "InsertMenuItemA"(byval hmenu as HMENU, byval item as UINT, byval fByPosition as WINBOOL, byval lpmi as LPCMENUITEMINFOA) as WINBOOL

declare function InsertMenuItemW(byval hmenu as HMENU, byval item as UINT, byval fByPosition as WINBOOL, byval lpmi as LPCMENUITEMINFOW) as WINBOOL


declare function GetMenuItemInfoA(byval hmenu as HMENU, byval item as UINT, byval fByPosition as WINBOOL, byval lpmii as LPMENUITEMINFOA) as WINBOOL

 declare function GetMenuItemInfo alias "GetMenuItemInfoA"(byval hmenu as HMENU, byval item as UINT, byval fByPosition as WINBOOL, byval lpmii as LPMENUITEMINFOA) as WINBOOL

declare function GetMenuItemInfoW(byval hmenu as HMENU, byval item as UINT, byval fByPosition as WINBOOL, byval lpmii as LPMENUITEMINFOW) as WINBOOL


declare function SetMenuItemInfoA(byval hmenu as HMENU, byval item as UINT, byval fByPositon as WINBOOL, byval lpmii as LPCMENUITEMINFOA) as WINBOOL

 declare function SetMenuItemInfo alias "SetMenuItemInfoA"(byval hmenu as HMENU, byval item as UINT, byval fByPositon as WINBOOL, byval lpmii as LPCMENUITEMINFOA) as WINBOOL

declare function SetMenuItemInfoW(byval hmenu as HMENU, byval item as UINT, byval fByPositon as WINBOOL, byval lpmii as LPCMENUITEMINFOW) as WINBOOL


const GMDI_USEDISABLED = &h0001
const GMDI_GOINTOPOPUPS = &h0002
declare function GetMenuDefaultItem(byval hMenu as HMENU, byval fByPos as UINT, byval gmdiFlags as UINT) as UINT
declare function SetMenuDefaultItem(byval hMenu as HMENU, byval uItem as UINT, byval fByPos as UINT) as WINBOOL
declare function GetMenuItemRect(byval hWnd as HWND, byval hMenu as HMENU, byval uItem as UINT, byval lprcItem as LPRECT) as WINBOOL
declare function MenuItemFromPoint(byval hWnd as HWND, byval hMenu as HMENU, byval ptScreen as POINT) as long

const TPM_LEFTBUTTON = &h00000
const TPM_RIGHTBUTTON = &h0002
const TPM_LEFTALIGN = &h00000
const TPM_CENTERALIGN = &h0004
const TPM_RIGHTALIGN = &h0008
const TPM_TOPALIGN = &h00000
const TPM_VCENTERALIGN = &h0010
const TPM_BOTTOMALIGN = &h0020
const TPM_HORIZONTAL = &h00000
const TPM_VERTICAL = &h0040
const TPM_NONOTIFY = &h0080
const TPM_RETURNCMD = &h0100
const TPM_RECURSE = &h0001
const TPM_HORPOSANIMATION = &h0400
const TPM_HORNEGANIMATION = &h0800
const TPM_VERPOSANIMATION = &h1000
const TPM_VERNEGANIMATION = &h2000
const TPM_NOANIMATION = &h4000
const TPM_LAYOUTRTL = &h8000


type tagDROPSTRUCT
 hwndSource as HWND
 hwndSink as HWND
 wFmt as DWORD
 dwData as ULONG_PTR
 ptDrop as POINT
 dwControlData as DWORD
end type

type DROPSTRUCT as tagDROPSTRUCT
type PDROPSTRUCT as tagDROPSTRUCT ptr
type LPDROPSTRUCT as tagDROPSTRUCT ptr

const DOF_EXECUTABLE = &h8001
const DOF_DOCUMENT = &h8002
const DOF_DIRECTORY = &h8003
const DOF_MULTIPLE = &h8004
const DOF_PROGMAN = &h0001
const DOF_SHELLDATA = &h0002
const DO_DROPFILE = &h454C4946
const DO_PRINTFILE = &h544E5250

declare function DragObject(byval hwndParent as HWND, byval hwndFrom as HWND, byval fmt as UINT, byval data as ULONG_PTR, byval hcur as HCURSOR) as DWORD
declare function DragDetect(byval hwnd as HWND, byval pt as POINT) as WINBOOL
declare function DrawIcon(byval hDC as HDC, byval X as long, byval Y as long, byval hIcon as HICON) as WINBOOL

const DT_TOP = &h000000000
const DT_LEFT = &h000000000
const DT_CENTER = &h00000001
const DT_RIGHT = &h00000002
const DT_VCENTER = &h00000004
const DT_BOTTOM = &h00000008
const DT_WORDBREAK = &h00000010
const DT_SINGLELINE = &h00000020
const DT_EXPANDTABS = &h00000040
const DT_TABSTOP = &h00000080
const DT_NOCLIP = &h00000100
const DT_EXTERNALLEADING = &h00000200
const DT_CALCRECT = &h00000400
const DT_NOPREFIX = &h00000800
const DT_INTERNAL = &h00001000
const DT_EDITCONTROL = &h00002000
const DT_PATH_ELLIPSIS = &h00004000
const DT_END_ELLIPSIS = &h00008000
const DT_MODIFYSTRING = &h00010000
const DT_RTLREADING = &h00020000
const DT_WORD_ELLIPSIS = &h00040000
const DT_NOFULLWIDTHCHARBREAK = &h00080000
const DT_HIDEPREFIX = &h00100000
const DT_PREFIXONLY = &h00200000

type tagDRAWTEXTPARAMS
 cbSize as UINT
 iTabLength as long
 iLeftMargin as long
 iRightMargin as long
 uiLengthDrawn as UINT
end type

type DRAWTEXTPARAMS as tagDRAWTEXTPARAMS
type LPDRAWTEXTPARAMS as tagDRAWTEXTPARAMS ptr
declare function DrawTextA(byval hdc as HDC, byval lpchText as LPCSTR, byval cchText as long, byval lprc as LPRECT, byval format as UINT) as long

 declare function DrawText alias "DrawTextA"(byval hdc as HDC, byval lpchText as LPCSTR, byval cchText as long, byval lprc as LPRECT, byval format as UINT) as long

declare function DrawTextW(byval hdc as HDC, byval lpchText as LPCWSTR, byval cchText as long, byval lprc as LPRECT, byval format as UINT) as long


declare function DrawTextExA(byval hdc as HDC, byval lpchText as LPSTR, byval cchText as long, byval lprc as LPRECT, byval format as UINT, byval lpdtp as LPDRAWTEXTPARAMS) as long

 declare function DrawTextEx alias "DrawTextExA"(byval hdc as HDC, byval lpchText as LPSTR, byval cchText as long, byval lprc as LPRECT, byval format as UINT, byval lpdtp as LPDRAWTEXTPARAMS) as long

declare function DrawTextExW(byval hdc as HDC, byval lpchText as LPWSTR, byval cchText as long, byval lprc as LPRECT, byval format as UINT, byval lpdtp as LPDRAWTEXTPARAMS) as long


declare function GrayStringA(byval hDC as HDC, byval hBrush as HBRUSH, byval lpOutputFunc as GRAYSTRINGPROC, byval lpData as LPARAM, byval nCount as long, byval X as long, byval Y as long, byval nWidth as long, byval nHeight as long) as WINBOOL

 declare function GrayString alias "GrayStringA"(byval hDC as HDC, byval hBrush as HBRUSH, byval lpOutputFunc as GRAYSTRINGPROC, byval lpData as LPARAM, byval nCount as long, byval X as long, byval Y as long, byval nWidth as long, byval nHeight as long) as WINBOOL

declare function GrayStringW(byval hDC as HDC, byval hBrush as HBRUSH, byval lpOutputFunc as GRAYSTRINGPROC, byval lpData as LPARAM, byval nCount as long, byval X as long, byval Y as long, byval nWidth as long, byval nHeight as long) as WINBOOL


declare function DrawStateA(byval hdc as HDC, byval hbrFore as HBRUSH, byval qfnCallBack as DRAWSTATEPROC, byval lData as LPARAM, byval wData as WPARAM, byval x as long, byval y as long, byval cx as long, byval cy as long, byval uFlags as UINT) as WINBOOL

 declare function DrawState alias "DrawStateA"(byval hdc as HDC, byval hbrFore as HBRUSH, byval qfnCallBack as DRAWSTATEPROC, byval lData as LPARAM, byval wData as WPARAM, byval x as long, byval y as long, byval cx as long, byval cy as long, byval uFlags as UINT) as WINBOOL

declare function DrawStateW(byval hdc as HDC, byval hbrFore as HBRUSH, byval qfnCallBack as DRAWSTATEPROC, byval lData as LPARAM, byval wData as WPARAM, byval x as long, byval y as long, byval cx as long, byval cy as long, byval uFlags as UINT) as WINBOOL


declare function TabbedTextOutA(byval hdc as HDC, byval x as long, byval y as long, byval lpString as LPCSTR, byval chCount as long, byval nTabPositions as long, byval lpnTabStopPositions as const INT_ ptr, byval nTabOrigin as long) as LONG

 declare function TabbedTextOut alias "TabbedTextOutA"(byval hdc as HDC, byval x as long, byval y as long, byval lpString as LPCSTR, byval chCount as long, byval nTabPositions as long, byval lpnTabStopPositions as const INT_ ptr, byval nTabOrigin as long) as LONG

declare function TabbedTextOutW(byval hdc as HDC, byval x as long, byval y as long, byval lpString as LPCWSTR, byval chCount as long, byval nTabPositions as long, byval lpnTabStopPositions as const INT_ ptr, byval nTabOrigin as long) as LONG


declare function GetTabbedTextExtentA(byval hdc as HDC, byval lpString as LPCSTR, byval chCount as long, byval nTabPositions as long, byval lpnTabStopPositions as const INT_ ptr) as DWORD

 declare function GetTabbedTextExtent alias "GetTabbedTextExtentA"(byval hdc as HDC, byval lpString as LPCSTR, byval chCount as long, byval nTabPositions as long, byval lpnTabStopPositions as const INT_ ptr) as DWORD

declare function GetTabbedTextExtentW(byval hdc as HDC, byval lpString as LPCWSTR, byval chCount as long, byval nTabPositions as long, byval lpnTabStopPositions as const INT_ ptr) as DWORD


declare function UpdateWindow(byval hWnd as HWND) as WINBOOL
declare function SetActiveWindow(byval hWnd as HWND) as HWND
declare function GetForegroundWindow() as HWND
declare function PaintDesktop(byval hdc as HDC) as WINBOOL
declare sub SwitchToThisWindow(byval hwnd as HWND, byval fUnknown as WINBOOL)
declare function SetForegroundWindow(byval hWnd as HWND) as WINBOOL
declare function AllowSetForegroundWindow(byval dwProcessId as DWORD) as WINBOOL
declare function LockSetForegroundWindow(byval uLockCode as UINT) as WINBOOL
declare function WindowFromDC(byval hDC as HDC) as HWND
declare function GetDC(byval hWnd as HWND) as HDC
declare function GetDCEx(byval hWnd as HWND, byval hrgnClip as HRGN, byval flags as DWORD) as HDC

const DST_COMPLEX = &h00000
const DST_TEXT = &h0001
const DST_PREFIXTEXT = &h0002
const DST_ICON = &h0003
const DST_BITMAP = &h0004
const DSS_NORMAL = &h00000
const DSS_UNION = &h0010
const DSS_DISABLED = &h0020
const DSS_MONO = &h0080
const DSS_HIDEPREFIX = &h0200
const DSS_PREFIXONLY = &h0400
const DSS_RIGHT = &h8000
const ASFW_ANY = cast(DWORD, -1)
const LSFW_LOCK = 1
const LSFW_UNLOCK = 2
const DCX_WINDOW = &h00000001
const DCX_CACHE = &h00000002
const DCX_NORESETATTRS = &h00000004
const DCX_CLIPCHILDREN = &h00000008
const DCX_CLIPSIBLINGS = &h00000010
const DCX_PARENTCLIP = &h00000020
const DCX_EXCLUDERGN = &h00000040
const DCX_INTERSECTRGN = &h00000080
const DCX_EXCLUDEUPDATE = &h00000100
const DCX_INTERSECTUPDATE = &h00000200
const DCX_LOCKWINDOWUPDATE = &h00000400
const DCX_VALIDATE = &h00200000

declare function GetWindowDC(byval hWnd as HWND) as HDC
declare function ReleaseDC(byval hWnd as HWND, byval hDC as HDC) as long
declare function BeginPaint(byval hWnd as HWND, byval lpPaint as LPPAINTSTRUCT) as HDC
declare function EndPaint(byval hWnd as HWND, byval lpPaint as const PAINTSTRUCT ptr) as WINBOOL
declare function GetUpdateRect(byval hWnd as HWND, byval lpRect as LPRECT, byval bErase as WINBOOL) as WINBOOL
declare function GetUpdateRgn(byval hWnd as HWND, byval hRgn as HRGN, byval bErase as WINBOOL) as long
declare function SetWindowRgn(byval hWnd as HWND, byval hRgn as HRGN, byval bRedraw as WINBOOL) as long
declare function GetWindowRgn(byval hWnd as HWND, byval hRgn as HRGN) as long
declare function GetWindowRgnBox(byval hWnd as HWND, byval lprc as LPRECT) as long
declare function ExcludeUpdateRgn(byval hDC as HDC, byval hWnd as HWND) as long
declare function InvalidateRect(byval hWnd as HWND, byval lpRect as const RECT ptr, byval bErase as WINBOOL) as WINBOOL
declare function ValidateRect(byval hWnd as HWND, byval lpRect as const RECT ptr) as WINBOOL
declare function InvalidateRgn(byval hWnd as HWND, byval hRgn as HRGN, byval bErase as WINBOOL) as WINBOOL
declare function ValidateRgn(byval hWnd as HWND, byval hRgn as HRGN) as WINBOOL
declare function RedrawWindow(byval hWnd as HWND, byval lprcUpdate as const RECT ptr, byval hrgnUpdate as HRGN, byval flags as UINT) as WINBOOL

const RDW_INVALIDATE = &h0001
const RDW_INTERNALPAINT = &h0002
const RDW_ERASE = &h0004
const RDW_VALIDATE = &h0008
const RDW_NOINTERNALPAINT = &h0010
const RDW_NOERASE = &h0020
const RDW_NOCHILDREN = &h0040
const RDW_ALLCHILDREN = &h0080
const RDW_UPDATENOW = &h0100
const RDW_ERASENOW = &h0200
const RDW_FRAME = &h0400
const RDW_NOFRAME = &h0800

declare function LockWindowUpdate(byval hWndLock as HWND) as WINBOOL
declare function ScrollWindow(byval hWnd as HWND, byval XAmount as long, byval YAmount as long, byval lpRect as const RECT ptr, byval lpClipRect as const RECT ptr) as WINBOOL
declare function ScrollDC(byval hDC as HDC, byval dx as long, byval dy as long, byval lprcScroll as const RECT ptr, byval lprcClip as const RECT ptr, byval hrgnUpdate as HRGN, byval lprcUpdate as LPRECT) as WINBOOL
declare function ScrollWindowEx(byval hWnd as HWND, byval dx as long, byval dy as long, byval prcScroll as const RECT ptr, byval prcClip as const RECT ptr, byval hrgnUpdate as HRGN, byval prcUpdate as LPRECT, byval flags as UINT) as long

const SW_SCROLLCHILDREN = &h0001
const SW_INVALIDATE = &h0002
const SW_ERASE = &h0004
const SW_SMOOTHSCROLL = &h0010

declare function SetScrollPos(byval hWnd as HWND, byval nBar as long, byval nPos as long, byval bRedraw as WINBOOL) as long
declare function GetScrollPos(byval hWnd as HWND, byval nBar as long) as long
declare function SetScrollRange(byval hWnd as HWND, byval nBar as long, byval nMinPos as long, byval nMaxPos as long, byval bRedraw as WINBOOL) as WINBOOL
declare function GetScrollRange(byval hWnd as HWND, byval nBar as long, byval lpMinPos as LPINT, byval lpMaxPos as LPINT) as WINBOOL
declare function ShowScrollBar(byval hWnd as HWND, byval wBar as long, byval bShow as WINBOOL) as WINBOOL
declare function EnableScrollBar(byval hWnd as HWND, byval wSBflags as UINT, byval wArrows as UINT) as WINBOOL

const ESB_ENABLE_BOTH = &h00000
const ESB_DISABLE_BOTH = &h0003
const ESB_DISABLE_LEFT = &h0001
const ESB_DISABLE_RIGHT = &h0002
const ESB_DISABLE_UP = &h0001
const ESB_DISABLE_DOWN = &h0002
const ESB_DISABLE_LTUP = ESB_DISABLE_LEFT
const ESB_DISABLE_RTDN = ESB_DISABLE_RIGHT
declare function SetPropA(byval hWnd as HWND, byval lpString as LPCSTR, byval hData as HANDLE) as WINBOOL

 declare function SetProp alias "SetPropA"(byval hWnd as HWND, byval lpString as LPCSTR, byval hData as HANDLE) as WINBOOL

declare function SetPropW(byval hWnd as HWND, byval lpString as LPCWSTR, byval hData as HANDLE) as WINBOOL


declare function GetPropA(byval hWnd as HWND, byval lpString as LPCSTR) as HANDLE

 declare function GetProp alias "GetPropA"(byval hWnd as HWND, byval lpString as LPCSTR) as HANDLE

declare function GetPropW(byval hWnd as HWND, byval lpString as LPCWSTR) as HANDLE


declare function RemovePropA(byval hWnd as HWND, byval lpString as LPCSTR) as HANDLE

 declare function RemoveProp alias "RemovePropA"(byval hWnd as HWND, byval lpString as LPCSTR) as HANDLE

declare function RemovePropW(byval hWnd as HWND, byval lpString as LPCWSTR) as HANDLE


declare function EnumPropsExA(byval hWnd as HWND, byval lpEnumFunc as PROPENUMPROCEXA, byval lParam as LPARAM) as long

 declare function EnumPropsEx alias "EnumPropsExA"(byval hWnd as HWND, byval lpEnumFunc as PROPENUMPROCEXA, byval lParam as LPARAM) as long

declare function EnumPropsExW(byval hWnd as HWND, byval lpEnumFunc as PROPENUMPROCEXW, byval lParam as LPARAM) as long


declare function EnumPropsA(byval hWnd as HWND, byval lpEnumFunc as PROPENUMPROCA) as long

 declare function EnumProps alias "EnumPropsA"(byval hWnd as HWND, byval lpEnumFunc as PROPENUMPROCA) as long

declare function EnumPropsW(byval hWnd as HWND, byval lpEnumFunc as PROPENUMPROCW) as long


declare function SetWindowTextA(byval hWnd as HWND, byval lpString as LPCSTR) as WINBOOL

 declare function SetWindowText alias "SetWindowTextA"(byval hWnd as HWND, byval lpString as LPCSTR) as WINBOOL

declare function SetWindowTextW(byval hWnd as HWND, byval lpString as LPCWSTR) as WINBOOL


declare function GetWindowTextA(byval hWnd as HWND, byval lpString as LPSTR, byval nMaxCount as long) as long

 declare function GetWindowText alias "GetWindowTextA"(byval hWnd as HWND, byval lpString as LPSTR, byval nMaxCount as long) as long

declare function GetWindowTextW(byval hWnd as HWND, byval lpString as LPWSTR, byval nMaxCount as long) as long


declare function GetWindowTextLengthA(byval hWnd as HWND) as long

 declare function GetWindowTextLength alias "GetWindowTextLengthA"(byval hWnd as HWND) as long

declare function GetWindowTextLengthW(byval hWnd as HWND) as long


declare function GetClientRect(byval hWnd as HWND, byval lpRect as LPRECT) as WINBOOL
declare function GetWindowRect(byval hWnd as HWND, byval lpRect as LPRECT) as WINBOOL
declare function AdjustWindowRect(byval lpRect as LPRECT, byval dwStyle as DWORD, byval bMenu as WINBOOL) as WINBOOL
declare function AdjustWindowRectEx(byval lpRect as LPRECT, byval dwStyle as DWORD, byval bMenu as WINBOOL, byval dwExStyle as DWORD) as WINBOOL
const HELPINFO_WINDOW = &h0001
const HELPINFO_MENUITEM = &h0002

type tagHELPINFO
 cbSize as UINT
 iContextType as long
 iCtrlId as long
 hItemHandle as HANDLE
 dwContextId as DWORD_PTR
 MousePos as POINT
end type

type HELPINFO as tagHELPINFO
type LPHELPINFO as tagHELPINFO ptr
declare function SetWindowContextHelpId(byval as HWND, byval as DWORD) as WINBOOL
declare function GetWindowContextHelpId(byval as HWND) as DWORD
declare function SetMenuContextHelpId(byval as HMENU, byval as DWORD) as WINBOOL
declare function GetMenuContextHelpId(byval as HMENU) as DWORD

const MB_OK = &h000000000
const MB_OKCANCEL = &h00000001
const MB_ABORTRETRYIGNORE = &h00000002
const MB_YESNOCANCEL = &h00000003
const MB_YESNO = &h00000004
const MB_RETRYCANCEL = &h00000005
const MB_CANCELTRYCONTINUE = &h00000006
const MB_ICONHAND = &h00000010
const MB_ICONQUESTION = &h00000020
const MB_ICONEXCLAMATION = &h00000030
const MB_ICONASTERISK = &h00000040
const MB_USERICON = &h00000080
const MB_ICONWARNING = MB_ICONEXCLAMATION
const MB_ICONERROR = MB_ICONHAND
const MB_ICONINFORMATION = MB_ICONASTERISK
const MB_ICONSTOP = MB_ICONHAND
const MB_DEFBUTTON1 = &h000000000
const MB_DEFBUTTON2 = &h00000100
const MB_DEFBUTTON3 = &h00000200
const MB_DEFBUTTON4 = &h00000300
const MB_APPLMODAL = &h000000000
const MB_SYSTEMMODAL = &h00001000
const MB_TASKMODAL = &h00002000
const MB_HELP = &h00004000
const MB_NOFOCUS = &h00008000
const MB_SETFOREGROUND = &h00010000
const MB_DEFAULT_DESKTOP_ONLY = &h00020000
const MB_TOPMOST = &h00040000
const MB_RIGHT = &h00080000
const MB_RTLREADING = &h00100000
const MB_SERVICE_NOTIFICATION = &h00200000
const MB_SERVICE_NOTIFICATION_NT3X = &h00040000
const MB_TYPEMASK = &h0000000F
const MB_ICONMASK = &h000000F0
const MB_DEFMASK = &h00000F00
const MB_MODEMASK = &h00003000
const MB_MISCMASK = &h0000C000
declare function MessageBoxA(byval hWnd as HWND, byval lpText as LPCSTR, byval lpCaption as LPCSTR, byval uType as UINT) as long

 declare function MessageBox alias "MessageBoxA"(byval hWnd as HWND, byval lpText as LPCSTR, byval lpCaption as LPCSTR, byval uType as UINT) as long

declare function MessageBoxW(byval hWnd as HWND, byval lpText as LPCWSTR, byval lpCaption as LPCWSTR, byval uType as UINT) as long


declare function MessageBoxExA(byval hWnd as HWND, byval lpText as LPCSTR, byval lpCaption as LPCSTR, byval uType as UINT, byval wLanguageId as WORD) as long

 declare function MessageBoxEx alias "MessageBoxExA"(byval hWnd as HWND, byval lpText as LPCSTR, byval lpCaption as LPCSTR, byval uType as UINT, byval wLanguageId as WORD) as long

declare function MessageBoxExW(byval hWnd as HWND, byval lpText as LPCWSTR, byval lpCaption as LPCWSTR, byval uType as UINT, byval wLanguageId as WORD) as long


type MSGBOXCALLBACK as sub(byval lpHelpInfo as LPHELPINFO)

type tagMSGBOXPARAMSA
 cbSize as UINT
 hwndOwner as HWND
 hInstance as HINSTANCE
 lpszText as LPCSTR
 lpszCaption as LPCSTR
 dwStyle as DWORD
 lpszIcon as LPCSTR
 dwContextHelpId as DWORD_PTR
 lpfnMsgBoxCallback as MSGBOXCALLBACK
 dwLanguageId as DWORD
end type

type MSGBOXPARAMSA as tagMSGBOXPARAMSA
type PMSGBOXPARAMSA as tagMSGBOXPARAMSA ptr
type LPMSGBOXPARAMSA as tagMSGBOXPARAMSA ptr

type tagMSGBOXPARAMSW
 cbSize as UINT
 hwndOwner as HWND
 hInstance as HINSTANCE
 lpszText as LPCWSTR
 lpszCaption as LPCWSTR
 dwStyle as DWORD
 lpszIcon as LPCWSTR
 dwContextHelpId as DWORD_PTR
 lpfnMsgBoxCallback as MSGBOXCALLBACK
 dwLanguageId as DWORD
end type

type MSGBOXPARAMSW as tagMSGBOXPARAMSW
type PMSGBOXPARAMSW as tagMSGBOXPARAMSW ptr
type LPMSGBOXPARAMSW as tagMSGBOXPARAMSW ptr

 type MSGBOXPARAMS as MSGBOXPARAMSA
 type PMSGBOXPARAMS as PMSGBOXPARAMSA
 type LPMSGBOXPARAMS as LPMSGBOXPARAMSA

declare function MessageBoxIndirectA(byval lpmbp as const MSGBOXPARAMSA ptr) as long

 declare function MessageBoxIndirect alias "MessageBoxIndirectA"(byval lpmbp as const MSGBOXPARAMSA ptr) as long

declare function MessageBoxIndirectW(byval lpmbp as const MSGBOXPARAMSW ptr) as long


declare function MessageBeep(byval uType as UINT) as WINBOOL
declare function ShowCursor(byval bShow as WINBOOL) as long
declare function SetCursorPos(byval X as long, byval Y as long) as WINBOOL
declare function SetCursor(byval hCursor as HCURSOR) as HCURSOR
declare function GetCursorPos(byval lpPoint as LPPOINT) as WINBOOL
declare function ClipCursor(byval lpRect as const RECT ptr) as WINBOOL
declare function GetClipCursor(byval lpRect as LPRECT) as WINBOOL
declare function GetCursor() as HCURSOR
declare function CreateCaret(byval hWnd as HWND, byval hBitmap as HBITMAP, byval nWidth as long, byval nHeight as long) as WINBOOL
declare function GetCaretBlinkTime() as UINT
declare function SetCaretBlinkTime(byval uMSeconds as UINT) as WINBOOL
declare function DestroyCaret() as WINBOOL
declare function HideCaret(byval hWnd as HWND) as WINBOOL
declare function ShowCaret(byval hWnd as HWND) as WINBOOL
declare function SetCaretPos(byval X as long, byval Y as long) as WINBOOL
declare function GetCaretPos(byval lpPoint as LPPOINT) as WINBOOL
declare function ClientToScreen(byval hWnd as HWND, byval lpPoint as LPPOINT) as WINBOOL
declare function ScreenToClient(byval hWnd as HWND, byval lpPoint as LPPOINT) as WINBOOL
declare function MapWindowPoints(byval hWndFrom as HWND, byval hWndTo as HWND, byval lpPoints as LPPOINT, byval cPoints as UINT) as long
declare function WindowFromPoint(byval Point as POINT) as HWND
declare function ChildWindowFromPoint(byval hWndParent as HWND, byval Point as POINT) as HWND
declare function ChildWindowFromPointEx(byval hwnd as HWND, byval pt as POINT, byval flags as UINT) as HWND


const CWP_ALL = &h00000
const CWP_SKIPINVISIBLE = &h0001
const CWP_SKIPDISABLED = &h0002
const CWP_SKIPTRANSPARENT = &h0004
const CTLCOLOR_MSGBOX = 0
const CTLCOLOR_EDIT = 1
const CTLCOLOR_LISTBOX = 2
const CTLCOLOR_BTN = 3
const CTLCOLOR_DLG = 4
const CTLCOLOR_SCROLLBAR = 5
const CTLCOLOR_STATIC = 6
const CTLCOLOR_MAX = 7
const COLOR_SCROLLBAR = 0
const COLOR_BACKGROUND = 1
const COLOR_ACTIVECAPTION = 2
const COLOR_INACTIVECAPTION = 3
const COLOR_MENU = 4
const COLOR_WINDOW = 5
const COLOR_WINDOWFRAME = 6
const COLOR_MENUTEXT = 7
const COLOR_WINDOWTEXT = 8
const COLOR_CAPTIONTEXT = 9
const COLOR_ACTIVEBORDER = 10
const COLOR_INACTIVEBORDER = 11
const COLOR_APPWORKSPACE = 12
const COLOR_HIGHLIGHT = 13
const COLOR_HIGHLIGHTTEXT = 14
const COLOR_BTNFACE = 15
const COLOR_BTNSHADOW = 16
const COLOR_GRAYTEXT = 17
const COLOR_BTNTEXT = 18
const COLOR_INACTIVECAPTIONTEXT = 19
const COLOR_BTNHIGHLIGHT = 20
const COLOR_3DDKSHADOW = 21
const COLOR_3DLIGHT = 22
const COLOR_INFOTEXT = 23
const COLOR_INFOBK = 24
const COLOR_HOTLIGHT = 26
const COLOR_GRADIENTACTIVECAPTION = 27
const COLOR_GRADIENTINACTIVECAPTION = 28
const COLOR_MENUHILIGHT = 29
const COLOR_MENUBAR = 30
const COLOR_DESKTOP = COLOR_BACKGROUND
const COLOR_3DFACE = COLOR_BTNFACE
const COLOR_3DSHADOW = COLOR_BTNSHADOW
const COLOR_3DHIGHLIGHT = COLOR_BTNHIGHLIGHT
const COLOR_3DHILIGHT = COLOR_BTNHIGHLIGHT
const COLOR_BTNHILIGHT = COLOR_BTNHIGHLIGHT

declare function GetSysColor(byval nIndex as long) as DWORD
declare function GetSysColorBrush(byval nIndex as long) as HBRUSH
declare function SetSysColors(byval cElements as long, byval lpaElements as const INT_ ptr, byval lpaRgbValues as const COLORREF ptr) as WINBOOL
declare function DrawFocusRect(byval hDC as HDC, byval lprc as const RECT ptr) as WINBOOL
declare function FillRect(byval hDC as HDC, byval lprc as const RECT ptr, byval hbr as HBRUSH) as long
declare function FrameRect(byval hDC as HDC, byval lprc as const RECT ptr, byval hbr as HBRUSH) as long
declare function InvertRect(byval hDC as HDC, byval lprc as const RECT ptr) as WINBOOL
declare function SetRect(byval lprc as LPRECT, byval xLeft as long, byval yTop as long, byval xRight as long, byval yBottom as long) as WINBOOL
declare function SetRectEmpty(byval lprc as LPRECT) as WINBOOL
declare function CopyRect(byval lprcDst as LPRECT, byval lprcSrc as const RECT ptr) as WINBOOL
declare function InflateRect(byval lprc as LPRECT, byval dx as long, byval dy as long) as WINBOOL
declare function IntersectRect(byval lprcDst as LPRECT, byval lprcSrc1 as const RECT ptr, byval lprcSrc2 as const RECT ptr) as WINBOOL
declare function UnionRect(byval lprcDst as LPRECT, byval lprcSrc1 as const RECT ptr, byval lprcSrc2 as const RECT ptr) as WINBOOL
declare function SubtractRect(byval lprcDst as LPRECT, byval lprcSrc1 as const RECT ptr, byval lprcSrc2 as const RECT ptr) as WINBOOL
declare function OffsetRect(byval lprc as LPRECT, byval dx as long, byval dy as long) as WINBOOL
declare function IsRectEmpty(byval lprc as const RECT ptr) as WINBOOL
declare function EqualRect(byval lprc1 as const RECT ptr, byval lprc2 as const RECT ptr) as WINBOOL
declare function PtInRect(byval lprc as const RECT ptr, byval pt as POINT) as WINBOOL
declare function GetWindowWord(byval hWnd as HWND, byval nIndex as long) as WORD
declare function SetWindowWord(byval hWnd as HWND, byval nIndex as long, byval wNewWord as WORD) as WORD
declare function GetWindowLongA(byval hWnd as HWND, byval nIndex as long) as LONG

 declare function GetWindowLong alias "GetWindowLongA"(byval hWnd as HWND, byval nIndex as long) as LONG

declare function GetWindowLongW(byval hWnd as HWND, byval nIndex as long) as LONG


declare function SetWindowLongA(byval hWnd as HWND, byval nIndex as long, byval dwNewLong as LONG) as LONG

 declare function SetWindowLong alias "SetWindowLongA"(byval hWnd as HWND, byval nIndex as long, byval dwNewLong as LONG) as LONG

declare function SetWindowLongW(byval hWnd as HWND, byval nIndex as long, byval dwNewLong as LONG) as LONG


 declare function GetWindowLongPtrA alias "GetWindowLongA"(byval hWnd as HWND, byval nIndex as long) as LONG

 declare function GetWindowLongPtr alias "GetWindowLongA"(byval hWnd as HWND, byval nIndex as long) as LONG

 declare function GetWindowLongPtrW alias "GetWindowLongW"(byval hWnd as HWND, byval nIndex as long) as LONG


 declare function SetWindowLongPtrA alias "SetWindowLongA"(byval hWnd as HWND, byval nIndex as long, byval dwNewLong as LONG) as LONG

 declare function SetWindowLongPtr alias "SetWindowLongA"(byval hWnd as HWND, byval nIndex as long, byval dwNewLong as LONG) as LONG

 declare function SetWindowLongPtrW alias "SetWindowLongW"(byval hWnd as HWND, byval nIndex as long, byval dwNewLong as LONG) as LONG



declare function GetClassWord(byval hWnd as HWND, byval nIndex as long) as WORD
declare function SetClassWord(byval hWnd as HWND, byval nIndex as long, byval wNewWord as WORD) as WORD
declare function GetClassLongA(byval hWnd as HWND, byval nIndex as long) as DWORD

 declare function GetClassLong alias "GetClassLongA"(byval hWnd as HWND, byval nIndex as long) as DWORD

declare function GetClassLongW(byval hWnd as HWND, byval nIndex as long) as DWORD


declare function SetClassLongA(byval hWnd as HWND, byval nIndex as long, byval dwNewLong as LONG) as DWORD

 declare function SetClassLong alias "SetClassLongA"(byval hWnd as HWND, byval nIndex as long, byval dwNewLong as LONG) as DWORD

declare function SetClassLongW(byval hWnd as HWND, byval nIndex as long, byval dwNewLong as LONG) as DWORD


 declare function GetClassLongPtrA alias "GetClassLongA"(byval hWnd as HWND, byval nIndex as long) as DWORD

 declare function GetClassLongPtr alias "GetClassLongA"(byval hWnd as HWND, byval nIndex as long) as DWORD

 declare function GetClassLongPtrW alias "GetClassLongW"(byval hWnd as HWND, byval nIndex as long) as DWORD


 declare function SetClassLongPtrA alias "SetClassLongA"(byval hWnd as HWND, byval nIndex as long, byval dwNewLong as LONG) as DWORD

 declare function SetClassLongPtr alias "SetClassLongA"(byval hWnd as HWND, byval nIndex as long, byval dwNewLong as LONG) as DWORD

 declare function SetClassLongPtrW alias "SetClassLongW"(byval hWnd as HWND, byval nIndex as long, byval dwNewLong as LONG) as DWORD



declare function GetProcessDefaultLayout(byval pdwDefaultLayout as DWORD ptr) as WINBOOL
declare function SetProcessDefaultLayout(byval dwDefaultLayout as DWORD) as WINBOOL
declare function GetDesktopWindow() as HWND
declare function GetParent(byval hWnd as HWND) as HWND
declare function SetParent(byval hWndChild as HWND, byval hWndNewParent as HWND) as HWND
declare function EnumChildWindows(byval hWndParent as HWND, byval lpEnumFunc as WNDENUMPROC, byval lParam as LPARAM) as WINBOOL
declare function FindWindowA(byval lpClassName as LPCSTR, byval lpWindowName as LPCSTR) as HWND

 declare function FindWindow alias "FindWindowA"(byval lpClassName as LPCSTR, byval lpWindowName as LPCSTR) as HWND

declare function FindWindowW(byval lpClassName as LPCWSTR, byval lpWindowName as LPCWSTR) as HWND


declare function FindWindowExA(byval hWndParent as HWND, byval hWndChildAfter as HWND, byval lpszClass as LPCSTR, byval lpszWindow as LPCSTR) as HWND

 declare function FindWindowEx alias "FindWindowExA"(byval hWndParent as HWND, byval hWndChildAfter as HWND, byval lpszClass as LPCSTR, byval lpszWindow as LPCSTR) as HWND

declare function FindWindowExW(byval hWndParent as HWND, byval hWndChildAfter as HWND, byval lpszClass as LPCWSTR, byval lpszWindow as LPCWSTR) as HWND


declare function GetShellWindow() as HWND
declare function RegisterShellHookWindow(byval hwnd as HWND) as WINBOOL
declare function DeregisterShellHookWindow(byval hwnd as HWND) as WINBOOL
declare function EnumWindows(byval lpEnumFunc as WNDENUMPROC, byval lParam as LPARAM) as WINBOOL
declare function EnumThreadWindows(byval dwThreadId as DWORD, byval lpfn as WNDENUMPROC, byval lParam as LPARAM) as WINBOOL
declare function GetClassNameA(byval hWnd as HWND, byval lpClassName as LPSTR, byval nMaxCount as long) as long

 declare function GetClassName alias "GetClassNameA"(byval hWnd as HWND, byval lpClassName as LPSTR, byval nMaxCount as long) as long

declare function GetClassNameW(byval hWnd as HWND, byval lpClassName as LPWSTR, byval nMaxCount as long) as long


declare function GetTopWindow(byval hWnd as HWND) as HWND
declare function GetWindowThreadProcessId(byval hWnd as HWND, byval lpdwProcessId as LPDWORD) as DWORD
declare function IsGUIThread(byval bConvert as WINBOOL) as WINBOOL
declare function GetLastActivePopup(byval hWnd as HWND) as HWND
const GW_HWNDFIRST = 0
const GW_HWNDLAST = 1
const GW_HWNDNEXT = 2
const GW_HWNDPREV = 3
const GW_OWNER = 4
const GW_CHILD = 5
const GW_ENABLEDPOPUP = 6
const GW_MAX = 6
declare function GetWindow(byval hWnd as HWND, byval uCmd as UINT) as HWND
declare function SetWindowsHookA(byval nFilterType as long, byval pfnFilterProc as HOOKPROC) as HHOOK

 declare function SetWindowsHook alias "SetWindowsHookA"(byval nFilterType as long, byval pfnFilterProc as HOOKPROC) as HHOOK

declare function SetWindowsHookW(byval nFilterType as long, byval pfnFilterProc as HOOKPROC) as HHOOK


declare function UnhookWindowsHook(byval nCode as long, byval pfnFilterProc as HOOKPROC) as WINBOOL
declare function SetWindowsHookExA(byval idHook as long, byval lpfn as HOOKPROC, byval hmod as HINSTANCE, byval dwThreadId as DWORD) as HHOOK

 declare function SetWindowsHookEx alias "SetWindowsHookExA"(byval idHook as long, byval lpfn as HOOKPROC, byval hmod as HINSTANCE, byval dwThreadId as DWORD) as HHOOK

declare function SetWindowsHookExW(byval idHook as long, byval lpfn as HOOKPROC, byval hmod as HINSTANCE, byval dwThreadId as DWORD) as HHOOK


declare function UnhookWindowsHookEx(byval hhk as HHOOK) as WINBOOL
declare function CallNextHookEx(byval hhk as HHOOK, byval nCode as long, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT
const MF_INSERT = &h000000000
const MF_CHANGE = &h00000080
const MF_APPEND = &h00000100
const MF_DELETE = &h00000200
const MF_REMOVE = &h00001000
const MF_BYCOMMAND = &h000000000
const MF_BYPOSITION = &h00000400
const MF_SEPARATOR = &h00000800
const MF_ENABLED = &h000000000
const MF_GRAYED = &h00000001
const MF_DISABLED = &h00000002
const MF_UNCHECKED = &h000000000
const MF_CHECKED = &h00000008
const MF_USECHECKBITMAPS = &h00000200
const MF_STRING = &h000000000
const MF_BITMAP = &h00000004
const MF_OWNERDRAW = &h00000100
const MF_POPUP = &h00000010
const MF_MENUBARBREAK = &h00000020
const MF_MENUBREAK = &h00000040
const MF_UNHILITE = &h000000000
const MF_HILITE = &h00000080
const MF_DEFAULT = &h00001000
const MF_SYSMENU = &h00002000
const MF_HELP = &h00004000
const MF_RIGHTJUSTIFY = &h00004000
const MF_MOUSESELECT = &h00008000
const MF_END = &h00000080
const MFT_STRING = MF_STRING
const MFT_BITMAP = MF_BITMAP
const MFT_MENUBARBREAK = MF_MENUBARBREAK
const MFT_MENUBREAK = MF_MENUBREAK
const MFT_OWNERDRAW = MF_OWNERDRAW
const MFT_RADIOCHECK = &h00000200
const MFT_SEPARATOR = MF_SEPARATOR
const MFT_RIGHTORDER = &h00002000
const MFT_RIGHTJUSTIFY = MF_RIGHTJUSTIFY
const MFS_GRAYED = &h00000003
const MFS_DISABLED = MFS_GRAYED
const MFS_CHECKED = MF_CHECKED
const MFS_HILITE = MF_HILITE
const MFS_ENABLED = MF_ENABLED
const MFS_UNCHECKED = MF_UNCHECKED
const MFS_UNHILITE = MF_UNHILITE
const MFS_DEFAULT = MF_DEFAULT
declare function CheckMenuRadioItem(byval hmenu as HMENU, byval first as UINT, byval last as UINT, byval check as UINT, byval flags as UINT) as WINBOOL

type MENUITEMTEMPLATEHEADER
 versionNumber as WORD
 offset as WORD
end type

type PMENUITEMTEMPLATEHEADER as MENUITEMTEMPLATEHEADER ptr

type MENUITEMTEMPLATE
 mtOption as WORD
 mtID as WORD
 mtString as wstring * 1
end type

type PMENUITEMTEMPLATE as MENUITEMTEMPLATE ptr
const MF_END = &h00000080
const SC_SIZE = &hF000
const SC_MOVE = &hF010
const SC_MINIMIZE = &hF020
const SC_MAXIMIZE = &hF030
const SC_NEXTWINDOW = &hF040
const SC_PREVWINDOW = &hF050
const SC_CLOSE = &hF060
const SC_VSCROLL = &hF070
const SC_HSCROLL = &hF080
const SC_MOUSEMENU = &hF090
const SC_KEYMENU = &hF100
const SC_ARRANGE = &hF110
const SC_RESTORE = &hF120
const SC_TASKLIST = &hF130
const SC_SCREENSAVE = &hF140
const SC_HOTKEY = &hF150
const SC_DEFAULT = &hF160
const SC_MONITORPOWER = &hF170
const SC_CONTEXTHELP = &hF180
const SC_SEPARATOR = &hF00F


const SC_ICON = SC_MINIMIZE
const SC_ZOOM = SC_MAXIMIZE
declare function LoadBitmapA(byval hInstance as HINSTANCE, byval lpBitmapName as LPCSTR) as HBITMAP

 declare function LoadBitmap alias "LoadBitmapA"(byval hInstance as HINSTANCE, byval lpBitmapName as LPCSTR) as HBITMAP

declare function LoadBitmapW(byval hInstance as HINSTANCE, byval lpBitmapName as LPCWSTR) as HBITMAP


declare function LoadCursorA(byval hInstance as HINSTANCE, byval lpCursorName as LPCSTR) as HCURSOR

 declare function LoadCursor alias "LoadCursorA"(byval hInstance as HINSTANCE, byval lpCursorName as LPCSTR) as HCURSOR

declare function LoadCursorW(byval hInstance as HINSTANCE, byval lpCursorName as LPCWSTR) as HCURSOR


declare function LoadCursorFromFileA(byval lpFileName as LPCSTR) as HCURSOR

 declare function LoadCursorFromFile alias "LoadCursorFromFileA"(byval lpFileName as LPCSTR) as HCURSOR

declare function LoadCursorFromFileW(byval lpFileName as LPCWSTR) as HCURSOR


declare function CreateCursor(byval hInst as HINSTANCE, byval xHotSpot as long, byval yHotSpot as long, byval nWidth as long, byval nHeight as long, byval pvANDPlane as const any ptr, byval pvXORPlane as const any ptr) as HCURSOR
declare function DestroyCursor(byval hCursor as HCURSOR) as WINBOOL

type _ICONINFO
 fIcon as WINBOOL
 xHotspot as DWORD
 yHotspot as DWORD
 hbmMask as HBITMAP
 hbmColor as HBITMAP
end type

type ICONINFO as _ICONINFO
type PICONINFO as ICONINFO ptr
declare function SetSystemCursor(byval hcur as HCURSOR, byval id as DWORD) as WINBOOL
declare function LoadIconA(byval hInstance as HINSTANCE, byval lpIconName as LPCSTR) as HICON

 declare function LoadIcon alias "LoadIconA"(byval hInstance as HINSTANCE, byval lpIconName as LPCSTR) as HICON

declare function LoadIconW(byval hInstance as HINSTANCE, byval lpIconName as LPCWSTR) as HICON


declare function PrivateExtractIconsA(byval szFileName as LPCSTR, byval nIconIndex as long, byval cxIcon as long, byval cyIcon as long, byval phicon as HICON ptr, byval piconid as UINT ptr, byval nIcons as UINT, byval flags as UINT) as UINT

 declare function PrivateExtractIcons alias "PrivateExtractIconsA"(byval szFileName as LPCSTR, byval nIconIndex as long, byval cxIcon as long, byval cyIcon as long, byval phicon as HICON ptr, byval piconid as UINT ptr, byval nIcons as UINT, byval flags as UINT) as UINT

declare function PrivateExtractIconsW(byval szFileName as LPCWSTR, byval nIconIndex as long, byval cxIcon as long, byval cyIcon as long, byval phicon as HICON ptr, byval piconid as UINT ptr, byval nIcons as UINT, byval flags as UINT) as UINT


declare function CreateIcon(byval hInstance as HINSTANCE, byval nWidth as long, byval nHeight as long, byval cPlanes as UBYTE, byval cBitsPixel as UBYTE, byval lpbANDbits as const UBYTE ptr, byval lpbXORbits as const UBYTE ptr) as HICON
declare function DestroyIcon(byval hIcon as HICON) as WINBOOL
declare function LookupIconIdFromDirectory(byval presbits as PBYTE, byval fIcon as WINBOOL) as long
declare function LookupIconIdFromDirectoryEx(byval presbits as PBYTE, byval fIcon as WINBOOL, byval cxDesired as long, byval cyDesired as long, byval Flags as UINT) as long
declare function CreateIconFromResource(byval presbits as PBYTE, byval dwResSize as DWORD, byval fIcon as WINBOOL, byval dwVer as DWORD) as HICON
declare function CreateIconFromResourceEx(byval presbits as PBYTE, byval dwResSize as DWORD, byval fIcon as WINBOOL, byval dwVer as DWORD, byval cxDesired as long, byval cyDesired as long, byval Flags as UINT) as HICON

type tagCURSORSHAPE
 xHotSpot as long
 yHotSpot as long
 cx as long
 cy as long
 cbWidth as long
 Planes as UBYTE
 BitsPixel as UBYTE
end type

type CURSORSHAPE as tagCURSORSHAPE
type LPCURSORSHAPE as tagCURSORSHAPE ptr
const IMAGE_BITMAP = 0
const IMAGE_ICON = 1
const IMAGE_CURSOR = 2
const IMAGE_ENHMETAFILE = 3
const LR_DEFAULTCOLOR = &h00000
const LR_MONOCHROME = &h0001
const LR_COLOR = &h0002
const LR_COPYRETURNORG = &h0004
const LR_COPYDELETEORG = &h0008
const LR_LOADFROMFILE = &h0010
const LR_LOADTRANSPARENT = &h0020
const LR_DEFAULTSIZE = &h0040
const LR_VGACOLOR = &h0080
const LR_LOADMAP3DCOLORS = &h1000
const LR_CREATEDIBSECTION = &h2000
const LR_COPYFROMRESOURCE = &h4000
const LR_SHARED = &h8000
declare function LoadImageA(byval hInst as HINSTANCE, byval name as LPCSTR, byval type as UINT, byval cx as long, byval cy as long, byval fuLoad as UINT) as HANDLE

 declare function LoadImage alias "LoadImageA"(byval hInst as HINSTANCE, byval name as LPCSTR, byval type as UINT, byval cx as long, byval cy as long, byval fuLoad as UINT) as HANDLE

declare function LoadImageW(byval hInst as HINSTANCE, byval name as LPCWSTR, byval type as UINT, byval cx as long, byval cy as long, byval fuLoad as UINT) as HANDLE


declare function CopyImage(byval h as HANDLE, byval type as UINT, byval cx as long, byval cy as long, byval flags as UINT) as HANDLE
declare function DrawIconEx(byval hdc as HDC, byval xLeft as long, byval yTop as long, byval hIcon as HICON, byval cxWidth as long, byval cyWidth as long, byval istepIfAniCur as UINT, byval hbrFlickerFreeDraw as HBRUSH, byval diFlags as UINT) as WINBOOL
declare function CreateIconIndirect(byval piconinfo as PICONINFO) as HICON
declare function CopyIcon(byval hIcon as HICON) as HICON
declare function GetIconInfo(byval hIcon as HICON, byval piconinfo as PICONINFO) as WINBOOL







const DI_MASK = &h0001
const DI_IMAGE = &h0002
const DI_NORMAL = &h0003
const DI_COMPAT = &h0004
const DI_DEFAULTSIZE = &h0008
const DI_NOMIRROR = &h0010
const RES_ICON = 1
const RES_CURSOR = 2
const OBM_CLOSE = 32754
const OBM_UPARROW = 32753
const OBM_DNARROW = 32752
const OBM_RGARROW = 32751
const OBM_LFARROW = 32750
const OBM_REDUCE = 32749
const OBM_ZOOM = 32748
const OBM_RESTORE = 32747
const OBM_REDUCED = 32746
const OBM_ZOOMD = 32745
const OBM_RESTORED = 32744
const OBM_UPARROWD = 32743
const OBM_DNARROWD = 32742
const OBM_RGARROWD = 32741
const OBM_LFARROWD = 32740
const OBM_MNARROW = 32739
const OBM_COMBO = 32738
const OBM_UPARROWI = 32737
const OBM_DNARROWI = 32736
const OBM_RGARROWI = 32735
const OBM_LFARROWI = 32734
const OBM_OLD_CLOSE = 32767
const OBM_SIZE = 32766
const OBM_OLD_UPARROW = 32765
const OBM_OLD_DNARROW = 32764
const OBM_OLD_RGARROW = 32763
const OBM_OLD_LFARROW = 32762
const OBM_BTSIZE = 32761
const OBM_CHECK = 32760
const OBM_CHECKBOXES = 32759
const OBM_BTNCORNERS = 32758
const OBM_OLD_REDUCE = 32757
const OBM_OLD_ZOOM = 32756
const OBM_OLD_RESTORE = 32755
const OCR_NORMAL = 32512
const OCR_IBEAM = 32513
const OCR_WAIT = 32514
const OCR_CROSS = 32515
const OCR_UP = 32516
const OCR_SIZE = 32640
const OCR_ICON = 32641
const OCR_SIZENWSE = 32642
const OCR_SIZENESW = 32643
const OCR_SIZEWE = 32644
const OCR_SIZENS = 32645
const OCR_SIZEALL = 32646
const OCR_ICOCUR = 32647
const OCR_NO = 32648
const OCR_HAND = 32649
const OCR_APPSTARTING = 32650
const OIC_SAMPLE = 32512
const OIC_HAND = 32513
const OIC_QUES = 32514
const OIC_BANG = 32515
const OIC_NOTE = 32516
const OIC_WINLOGO = 32517
const OIC_WARNING = OIC_BANG
const OIC_ERROR = OIC_HAND
const OIC_INFORMATION = OIC_NOTE


const ORD_LANGDRIVER = 1


const IDOK = 1
const IDCANCEL = 2
const IDABORT = 3
const IDRETRY = 4
const IDIGNORE = 5
const IDYES = 6
const IDNO = 7
const IDCLOSE = 8
const IDHELP = 9
const IDTRYAGAIN = 10
const IDCONTINUE = 11
const IDTIMEOUT = 32000
const ES_LEFT = &h00000
const ES_CENTER = &h0001
const ES_RIGHT = &h0002
const ES_MULTILINE = &h0004
const ES_UPPERCASE = &h0008
const ES_LOWERCASE = &h0010
const ES_PASSWORD = &h0020
const ES_AUTOVSCROLL = &h0040
const ES_AUTOHSCROLL = &h0080
const ES_NOHIDESEL = &h0100
const ES_OEMCONVERT = &h0400
const ES_READONLY = &h0800
const ES_WANTRETURN = &h1000
const ES_NUMBER = &h2000
const EN_SETFOCUS = &h0100
const EN_KILLFOCUS = &h0200
const EN_CHANGE = &h0300
const EN_UPDATE = &h0400
const EN_ERRSPACE = &h0500
const EN_MAXTEXT = &h0501
const EN_HSCROLL = &h0601
const EN_VSCROLL = &h0602
const EN_ALIGN_LTR_EC = &h0700
const EN_ALIGN_RTL_EC = &h0701
const EC_LEFTMARGIN = &h0001
const EC_RIGHTMARGIN = &h0002
const EC_USEFONTINFO = &hffff
const EMSIS_COMPOSITIONSTRING = &h0001
const EIMES_GETCOMPSTRATONCE = &h0001
const EIMES_CANCELCOMPSTRINFOCUS = &h0002
const EIMES_COMPLETECOMPSTRKILLFOCUS = &h0004
const EM_GETSEL = &h00B0
const EM_SETSEL = &h00B1
const EM_GETRECT = &h00B2
const EM_SETRECT = &h00B3
const EM_SETRECTNP = &h00B4
const EM_SCROLL = &h00B5
const EM_LINESCROLL = &h00B6
const EM_SCROLLCARET = &h00B7
const EM_GETMODIFY = &h00B8
const EM_SETMODIFY = &h00B9
const EM_GETLINECOUNT = &h00BA
const EM_LINEINDEX = &h00BB
const EM_SETHANDLE = &h00BC
const EM_GETHANDLE = &h00BD
const EM_GETTHUMB = &h00BE
const EM_LINELENGTH = &h00C1
const EM_REPLACESEL = &h00C2
const EM_GETLINE = &h00C4
const EM_LIMITTEXT = &h00C5
const EM_CANUNDO = &h00C6
const EM_UNDO = &h00C7
const EM_FMTLINES = &h00C8
const EM_LINEFROMCHAR = &h00C9
const EM_SETTABSTOPS = &h00CB
const EM_SETPASSWORDCHAR = &h00CC
const EM_EMPTYUNDOBUFFER = &h00CD
const EM_GETFIRSTVISIBLELINE = &h00CE
const EM_SETREADONLY = &h00CF
const EM_SETWORDBREAKPROC = &h00D0
const EM_GETWORDBREAKPROC = &h00D1
const EM_GETPASSWORDCHAR = &h00D2
const EM_SETMARGINS = &h00D3
const EM_GETMARGINS = &h00D4
const EM_SETLIMITTEXT = EM_LIMITTEXT
const EM_GETLIMITTEXT = &h00D5
const EM_POSFROMCHAR = &h00D6
const EM_CHARFROMPOS = &h00D7
const EM_SETIMESTATUS = &h00D8
const EM_GETIMESTATUS = &h00D9
const WB_LEFT = 0
const WB_RIGHT = 1
const WB_ISDELIMITER = 2
const BS_PUSHBUTTON = &h000000000
const BS_DEFPUSHBUTTON = &h00000001
const BS_CHECKBOX = &h00000002
const BS_AUTOCHECKBOX = &h00000003
const BS_RADIOBUTTON = &h00000004
const BS_3STATE = &h00000005
const BS_AUTO3STATE = &h00000006
const BS_GROUPBOX = &h00000007
const BS_USERBUTTON = &h00000008
const BS_AUTORADIOBUTTON = &h00000009
const BS_PUSHBOX = &h0000000A
const BS_OWNERDRAW = &h0000000B
const BS_TYPEMASK = &h0000000F
const BS_LEFTTEXT = &h00000020
const BS_TEXT = &h000000000
const BS_ICON = &h00000040
const BS_BITMAP = &h00000080
const BS_LEFT = &h00000100
const BS_RIGHT = &h00000200
const BS_CENTER = &h00000300
const BS_TOP = &h00000400
const BS_BOTTOM = &h00000800
const BS_VCENTER = &h00000C00
const BS_PUSHLIKE = &h00001000
const BS_MULTILINE = &h00002000
const BS_NOTIFY = &h00004000
const BS_FLAT = &h00008000
const BS_RIGHTBUTTON = BS_LEFTTEXT
const BN_CLICKED = 0
const BN_PAINT = 1
const BN_HILITE = 2
const BN_UNHILITE = 3
const BN_DISABLE = 4
const BN_DOUBLECLICKED = 5
const BN_PUSHED = BN_HILITE
const BN_UNPUSHED = BN_UNHILITE
const BN_DBLCLK = BN_DOUBLECLICKED
const BN_SETFOCUS = 6
const BN_KILLFOCUS = 7
const BM_GETCHECK = &h00F0
const BM_SETCHECK = &h00F1
const BM_GETSTATE = &h00F2
const BM_SETSTATE = &h00F3
const BM_SETSTYLE = &h00F4
const BM_CLICK = &h00F5
const BM_GETIMAGE = &h00F6
const BM_SETIMAGE = &h00F7


const BST_UNCHECKED = &h00000
const BST_CHECKED = &h0001
const BST_INDETERMINATE = &h0002
const BST_PUSHED = &h0004
const BST_FOCUS = &h0008
const SS_LEFT = &h000000000
const SS_CENTER = &h00000001
const SS_RIGHT = &h00000002
const SS_ICON = &h00000003
const SS_BLACKRECT = &h00000004
const SS_GRAYRECT = &h00000005
const SS_WHITERECT = &h00000006
const SS_BLACKFRAME = &h00000007
const SS_GRAYFRAME = &h00000008
const SS_WHITEFRAME = &h00000009
const SS_USERITEM = &h0000000A
const SS_SIMPLE = &h0000000B
const SS_LEFTNOWORDWRAP = &h0000000C
const SS_OWNERDRAW = &h0000000D
const SS_BITMAP = &h0000000E
const SS_ENHMETAFILE = &h0000000F
const SS_ETCHEDHORZ = &h00000010
const SS_ETCHEDVERT = &h00000011
const SS_ETCHEDFRAME = &h00000012
const SS_TYPEMASK = &h0000001F
const SS_REALSIZECONTROL = &h00000040
const SS_NOPREFIX = &h00000080
const SS_NOTIFY = &h00000100
const SS_CENTERIMAGE = &h00000200
const SS_RIGHTJUST = &h00000400
const SS_REALSIZEIMAGE = &h00000800
const SS_SUNKEN = &h00001000
const SS_EDITCONTROL = &h00002000
const SS_ENDELLIPSIS = &h00004000
const SS_PATHELLIPSIS = &h00008000
const SS_WORDELLIPSIS = &h0000C000
const SS_ELLIPSISMASK = &h0000C000
const STM_SETICON = &h0170
const STM_GETICON = &h0171
const STM_SETIMAGE = &h0172
const STM_GETIMAGE = &h0173
const STN_CLICKED = 0
const STN_DBLCLK = 1
const STN_ENABLE = 2
const STN_DISABLE = 3
const STM_MSGMAX = &h0174
const DWL_MSGRESULT = 0
const DWL_DLGPROC = 4
const DWL_USER = 8


const DWLP_MSGRESULT = 0
const DDL_READWRITE = &h00000
const DDL_READONLY = &h0001
const DDL_HIDDEN = &h0002
const DDL_SYSTEM = &h0004
const DDL_DIRECTORY = &h0010
const DDL_ARCHIVE = &h0020
const DDL_POSTMSGS = &h2000
const DDL_DRIVES = &h4000
const DDL_EXCLUSIVE = &h8000
declare function IsDialogMessageA(byval hDlg as HWND, byval lpMsg as LPMSG) as WINBOOL

 declare function IsDialogMessage alias "IsDialogMessageA"(byval hDlg as HWND, byval lpMsg as LPMSG) as WINBOOL

declare function IsDialogMessageW(byval hDlg as HWND, byval lpMsg as LPMSG) as WINBOOL


declare function MapDialogRect(byval hDlg as HWND, byval lpRect as LPRECT) as WINBOOL
declare function DlgDirListA(byval hDlg as HWND, byval lpPathSpec as LPSTR, byval nIDListBox as long, byval nIDStaticPath as long, byval uFileType as UINT) as long

 declare function DlgDirList alias "DlgDirListA"(byval hDlg as HWND, byval lpPathSpec as LPSTR, byval nIDListBox as long, byval nIDStaticPath as long, byval uFileType as UINT) as long

declare function DlgDirListW(byval hDlg as HWND, byval lpPathSpec as LPWSTR, byval nIDListBox as long, byval nIDStaticPath as long, byval uFileType as UINT) as long


declare function DlgDirSelectExA(byval hwndDlg as HWND, byval lpString as LPSTR, byval chCount as long, byval idListBox as long) as WINBOOL

 declare function DlgDirSelectEx alias "DlgDirSelectExA"(byval hwndDlg as HWND, byval lpString as LPSTR, byval chCount as long, byval idListBox as long) as WINBOOL

declare function DlgDirSelectExW(byval hwndDlg as HWND, byval lpString as LPWSTR, byval chCount as long, byval idListBox as long) as WINBOOL


declare function DlgDirListComboBoxA(byval hDlg as HWND, byval lpPathSpec as LPSTR, byval nIDComboBox as long, byval nIDStaticPath as long, byval uFiletype as UINT) as long

 declare function DlgDirListComboBox alias "DlgDirListComboBoxA"(byval hDlg as HWND, byval lpPathSpec as LPSTR, byval nIDComboBox as long, byval nIDStaticPath as long, byval uFiletype as UINT) as long

declare function DlgDirListComboBoxW(byval hDlg as HWND, byval lpPathSpec as LPWSTR, byval nIDComboBox as long, byval nIDStaticPath as long, byval uFiletype as UINT) as long


declare function DlgDirSelectComboBoxExA(byval hwndDlg as HWND, byval lpString as LPSTR, byval cchOut as long, byval idComboBox as long) as WINBOOL

 declare function DlgDirSelectComboBoxEx alias "DlgDirSelectComboBoxExA"(byval hwndDlg as HWND, byval lpString as LPSTR, byval cchOut as long, byval idComboBox as long) as WINBOOL

declare function DlgDirSelectComboBoxExW(byval hwndDlg as HWND, byval lpString as LPWSTR, byval cchOut as long, byval idComboBox as long) as WINBOOL


const DS_ABSALIGN = &h01
const DS_SYSMODAL = &h02
const DS_LOCALEDIT = &h20
const DS_SETFONT = &h40
const DS_MODALFRAME = &h80
const DS_NOIDLEMSG = &h100
const DS_SETFOREGROUND = &h200
const DS_3DLOOK = &h0004
const DS_FIXEDSYS = &h0008
const DS_NOFAILCREATE = &h0010
const DS_CONTROL = &h0400
const DS_CENTER = &h0800
const DS_CENTERMOUSE = &h1000
const DS_CONTEXTHELP = &h2000
const DS_SHELLFONT = DS_SETFONT or DS_FIXEDSYS
const DM_GETDEFID = WM_USER + 0
const DM_SETDEFID = WM_USER + 1
const DM_REPOSITION = WM_USER + 2
const DC_HASDEFID = &h534B
const DLGC_WANTARROWS = &h0001
const DLGC_WANTTAB = &h0002
const DLGC_WANTALLKEYS = &h0004
const DLGC_WANTMESSAGE = &h0004
const DLGC_HASSETSEL = &h0008
const DLGC_DEFPUSHBUTTON = &h0010
const DLGC_UNDEFPUSHBUTTON = &h0020
const DLGC_RADIOBUTTON = &h0040
const DLGC_WANTCHARS = &h0080
const DLGC_STATIC = &h0100
const DLGC_BUTTON = &h2000
const LB_CTLCODE = 0
const LB_OKAY = 0
const LB_ERR = -1
const LB_ERRSPACE = -2
const LBN_ERRSPACE = -2
const LBN_SELCHANGE = 1
const LBN_DBLCLK = 2
const LBN_SELCANCEL = 3
const LBN_SETFOCUS = 4
const LBN_KILLFOCUS = 5
const LB_ADDSTRING = &h0180
const LB_INSERTSTRING = &h0181
const LB_DELETESTRING = &h0182
const LB_SELITEMRANGEEX = &h0183
const LB_RESETCONTENT = &h0184
const LB_SETSEL = &h0185
const LB_SETCURSEL = &h0186
const LB_GETSEL = &h0187
const LB_GETCURSEL = &h0188
const LB_GETTEXT = &h0189
const LB_GETTEXTLEN = &h018A
const LB_GETCOUNT = &h018B
const LB_SELECTSTRING = &h018C
const LB_DIR = &h018D
const LB_GETTOPINDEX = &h018E
const LB_FINDSTRING = &h018F
const LB_GETSELCOUNT = &h0190
const LB_GETSELITEMS = &h0191
const LB_SETTABSTOPS = &h0192
const LB_GETHORIZONTALEXTENT = &h0193
const LB_SETHORIZONTALEXTENT = &h0194
const LB_SETCOLUMNWIDTH = &h0195
const LB_ADDFILE = &h0196
const LB_SETTOPINDEX = &h0197
const LB_GETITEMRECT = &h0198
const LB_GETITEMDATA = &h0199
const LB_SETITEMDATA = &h019A
const LB_SELITEMRANGE = &h019B
const LB_SETANCHORINDEX = &h019C
const LB_GETANCHORINDEX = &h019D
const LB_SETCARETINDEX = &h019E
const LB_GETCARETINDEX = &h019F
const LB_SETITEMHEIGHT = &h01A0
const LB_GETITEMHEIGHT = &h01A1
const LB_FINDSTRINGEXACT = &h01A2
const LB_SETLOCALE = &h01A5
const LB_GETLOCALE = &h01A6
const LB_SETCOUNT = &h01A7
const LB_INITSTORAGE = &h01A8
const LB_ITEMFROMPOINT = &h01A9
const LB_GETLISTBOXINFO = &h01B2
const LB_MSGMAX = &h01B3
const LBS_NOTIFY = &h0001
const LBS_SORT = &h0002
const LBS_NOREDRAW = &h0004
const LBS_MULTIPLESEL = &h0008
const LBS_OWNERDRAWFIXED = &h0010
const LBS_OWNERDRAWVARIABLE = &h0020
const LBS_HASSTRINGS = &h0040
const LBS_USETABSTOPS = &h0080
const LBS_NOINTEGRALHEIGHT = &h0100
const LBS_MULTICOLUMN = &h0200
const LBS_WANTKEYBOARDINPUT = &h0400
const LBS_EXTENDEDSEL = &h0800
const LBS_DISABLENOSCROLL = &h1000
const LBS_NODATA = &h2000
const LBS_NOSEL = &h4000
const LBS_COMBOBOX = &h8000
const LBS_STANDARD = ((LBS_NOTIFY or LBS_SORT) or WS_VSCROLL) or WS_BORDER
const CB_OKAY = 0
const CB_ERR = -1
const CB_ERRSPACE = -2
const CBN_ERRSPACE = -1
const CBN_SELCHANGE = 1
const CBN_DBLCLK = 2
const CBN_SETFOCUS = 3
const CBN_KILLFOCUS = 4
const CBN_EDITCHANGE = 5
const CBN_EDITUPDATE = 6
const CBN_DROPDOWN = 7
const CBN_CLOSEUP = 8
const CBN_SELENDOK = 9
const CBN_SELENDCANCEL = 10
const CBS_SIMPLE = &h0001
const CBS_DROPDOWN = &h0002
const CBS_DROPDOWNLIST = &h0003
const CBS_OWNERDRAWFIXED = &h0010
const CBS_OWNERDRAWVARIABLE = &h0020
const CBS_AUTOHSCROLL = &h0040
const CBS_OEMCONVERT = &h0080
const CBS_SORT = &h0100
const CBS_HASSTRINGS = &h0200
const CBS_NOINTEGRALHEIGHT = &h0400
const CBS_DISABLENOSCROLL = &h0800
const CBS_UPPERCASE = &h2000
const CBS_LOWERCASE = &h4000
const CB_GETEDITSEL = &h0140
const CB_LIMITTEXT = &h0141
const CB_SETEDITSEL = &h0142
const CB_ADDSTRING = &h0143
const CB_DELETESTRING = &h0144
const CB_DIR = &h0145
const CB_GETCOUNT = &h0146
const CB_GETCURSEL = &h0147
const CB_GETLBTEXT = &h0148
const CB_GETLBTEXTLEN = &h0149
const CB_INSERTSTRING = &h014A
const CB_RESETCONTENT = &h014B
const CB_FINDSTRING = &h014C
const CB_SELECTSTRING = &h014D
const CB_SETCURSEL = &h014E
const CB_SHOWDROPDOWN = &h014F
const CB_GETITEMDATA = &h0150
const CB_SETITEMDATA = &h0151
const CB_GETDROPPEDCONTROLRECT = &h0152
const CB_SETITEMHEIGHT = &h0153
const CB_GETITEMHEIGHT = &h0154
const CB_SETEXTENDEDUI = &h0155
const CB_GETEXTENDEDUI = &h0156
const CB_GETDROPPEDSTATE = &h0157
const CB_FINDSTRINGEXACT = &h0158
const CB_SETLOCALE = &h0159
const CB_GETLOCALE = &h015A
const CB_GETTOPINDEX = &h015b
const CB_SETTOPINDEX = &h015c
const CB_GETHORIZONTALEXTENT = &h015d
const CB_SETHORIZONTALEXTENT = &h015e
const CB_GETDROPPEDWIDTH = &h015f
const CB_SETDROPPEDWIDTH = &h0160
const CB_INITSTORAGE = &h0161
const CB_GETCOMBOBOXINFO = &h0164
const CB_MSGMAX = &h0165
const SBS_HORZ = &h00000
const SBS_VERT = &h0001
const SBS_TOPALIGN = &h0002
const SBS_LEFTALIGN = &h0002
const SBS_BOTTOMALIGN = &h0004
const SBS_RIGHTALIGN = &h0004
const SBS_SIZEBOXTOPLEFTALIGN = &h0002
const SBS_SIZEBOXBOTTOMRIGHTALIGN = &h0004
const SBS_SIZEBOX = &h0008
const SBS_SIZEGRIP = &h0010
const SBM_SETPOS = &h00E0
const SBM_GETPOS = &h00E1
const SBM_SETRANGE = &h00E2
const SBM_SETRANGEREDRAW = &h00E6
const SBM_GETRANGE = &h00E3
const SBM_ENABLE_ARROWS = &h00E4
const SBM_SETSCROLLINFO = &h00E9
const SBM_GETSCROLLINFO = &h00EA
const SBM_GETSCROLLBARINFO = &h00EB
const SIF_RANGE = &h0001
const SIF_PAGE = &h0002
const SIF_POS = &h0004
const SIF_DISABLENOSCROLL = &h0008
const SIF_TRACKPOS = &h0010
const SIF_ALL = ((SIF_RANGE or SIF_PAGE) or SIF_POS) or SIF_TRACKPOS

type tagSCROLLINFO
 cbSize as UINT
 fMask as UINT
 nMin as long
 nMax as long
 nPage as UINT
 nPos as long
 nTrackPos as long
end type

type SCROLLINFO as tagSCROLLINFO
type LPSCROLLINFO as tagSCROLLINFO ptr
type LPCSCROLLINFO as const SCROLLINFO ptr
declare function SetScrollInfo(byval hwnd as HWND, byval nBar as long, byval lpsi as LPCSCROLLINFO, byval redraw as WINBOOL) as long
declare function GetScrollInfo(byval hwnd as HWND, byval nBar as long, byval lpsi as LPSCROLLINFO) as WINBOOL

const MDIS_ALLCHILDSTYLES = &h0001
const MDITILE_VERTICAL = &h00000
const MDITILE_HORIZONTAL = &h0001
const MDITILE_SKIPDISABLED = &h0002
const MDITILE_ZORDER = &h0004

type tagMDICREATESTRUCTA
 szClass as LPCSTR
 szTitle as LPCSTR
 hOwner as HANDLE
 x as long
 y as long
 cx as long
 cy as long
 style as DWORD
 lParam as LPARAM
end type

type MDICREATESTRUCTA as tagMDICREATESTRUCTA
type LPMDICREATESTRUCTA as tagMDICREATESTRUCTA ptr

type tagMDICREATESTRUCTW
 szClass as LPCWSTR
 szTitle as LPCWSTR
 hOwner as HANDLE
 x as long
 y as long
 cx as long
 cy as long
 style as DWORD
 lParam as LPARAM
end type

type MDICREATESTRUCTW as tagMDICREATESTRUCTW
type LPMDICREATESTRUCTW as tagMDICREATESTRUCTW ptr

 type MDICREATESTRUCT as MDICREATESTRUCTA
 type LPMDICREATESTRUCT as LPMDICREATESTRUCTA

type tagCLIENTCREATESTRUCT
 hWindowMenu as HANDLE
 idFirstChild as UINT
end type

type CLIENTCREATESTRUCT as tagCLIENTCREATESTRUCT
type LPCLIENTCREATESTRUCT as tagCLIENTCREATESTRUCT ptr
declare function DefFrameProcA(byval hWnd as HWND, byval hWndMDIClient as HWND, byval uMsg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT

 declare function DefFrameProc alias "DefFrameProcA"(byval hWnd as HWND, byval hWndMDIClient as HWND, byval uMsg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT

declare function DefFrameProcW(byval hWnd as HWND, byval hWndMDIClient as HWND, byval uMsg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT


declare function DefMDIChildProcA(byval hWnd as HWND, byval uMsg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT

 declare function DefMDIChildProc alias "DefMDIChildProcA"(byval hWnd as HWND, byval uMsg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT

declare function DefMDIChildProcW(byval hWnd as HWND, byval uMsg as UINT, byval wParam as WPARAM, byval lParam as LPARAM) as LRESULT


declare function TranslateMDISysAccel(byval hWndClient as HWND, byval lpMsg as LPMSG) as WINBOOL
declare function ArrangeIconicWindows(byval hWnd as HWND) as UINT
declare function CreateMDIWindowA(byval lpClassName as LPCSTR, byval lpWindowName as LPCSTR, byval dwStyle as DWORD, byval X as long, byval Y as long, byval nWidth as long, byval nHeight as long, byval hWndParent as HWND, byval hInstance as HINSTANCE, byval lParam as LPARAM) as HWND

 declare function CreateMDIWindow alias "CreateMDIWindowA"(byval lpClassName as LPCSTR, byval lpWindowName as LPCSTR, byval dwStyle as DWORD, byval X as long, byval Y as long, byval nWidth as long, byval nHeight as long, byval hWndParent as HWND, byval hInstance as HINSTANCE, byval lParam as LPARAM) as HWND

declare function CreateMDIWindowW(byval lpClassName as LPCWSTR, byval lpWindowName as LPCWSTR, byval dwStyle as DWORD, byval X as long, byval Y as long, byval nWidth as long, byval nHeight as long, byval hWndParent as HWND, byval hInstance as HINSTANCE, byval lParam as LPARAM) as HWND


declare function TileWindows(byval hwndParent as HWND, byval wHow as UINT, byval lpRect as const RECT ptr, byval cKids as UINT, byval lpKids as const HWND ptr) as WORD
declare function CascadeWindows(byval hwndParent as HWND, byval wHow as UINT, byval lpRect as const RECT ptr, byval cKids as UINT, byval lpKids as const HWND ptr) as WORD
type HELPPOLY as DWORD

type tagMULTIKEYHELPA
 mkSize as DWORD
 mkKeylist as byte
 szKeyphrase as zstring * 1
end type

type MULTIKEYHELPA as tagMULTIKEYHELPA
type PMULTIKEYHELPA as tagMULTIKEYHELPA ptr
type LPMULTIKEYHELPA as tagMULTIKEYHELPA ptr

type tagMULTIKEYHELPW
 mkSize as DWORD
 mkKeylist as wchar_t
 szKeyphrase as wstring * 1
end type

type MULTIKEYHELPW as tagMULTIKEYHELPW
type PMULTIKEYHELPW as tagMULTIKEYHELPW ptr
type LPMULTIKEYHELPW as tagMULTIKEYHELPW ptr

 type MULTIKEYHELP as MULTIKEYHELPA
 type PMULTIKEYHELP as PMULTIKEYHELPA
 type LPMULTIKEYHELP as LPMULTIKEYHELPA

type tagHELPWININFOA
 wStructSize as long
 x as long
 y as long
 dx as long
 dy as long
 wMax as long
 rgchMember as zstring * 2
end type

type HELPWININFOA as tagHELPWININFOA
type PHELPWININFOA as tagHELPWININFOA ptr
type LPHELPWININFOA as tagHELPWININFOA ptr

type tagHELPWININFOW
 wStructSize as long
 x as long
 y as long
 dx as long
 dy as long
 wMax as long
 rgchMember as wstring * 2
end type

type HELPWININFOW as tagHELPWININFOW
type PHELPWININFOW as tagHELPWININFOW ptr
type LPHELPWININFOW as tagHELPWININFOW ptr

 type HELPWININFO as HELPWININFOA
 type PHELPWININFO as PHELPWININFOA
 type LPHELPWININFO as LPHELPWININFOA

declare function WinHelpA(byval hWndMain as HWND, byval lpszHelp as LPCSTR, byval uCommand as UINT, byval dwData as ULONG_PTR) as WINBOOL

 declare function WinHelp alias "WinHelpA"(byval hWndMain as HWND, byval lpszHelp as LPCSTR, byval uCommand as UINT, byval dwData as ULONG_PTR) as WINBOOL

declare function WinHelpW(byval hWndMain as HWND, byval lpszHelp as LPCWSTR, byval uCommand as UINT, byval dwData as ULONG_PTR) as WINBOOL


const HELP_CONTEXT = &h0001
const HELP_QUIT = &h0002
const HELP_INDEX = &h0003
const HELP_CONTENTS = &h0003
const HELP_HELPONHELP = &h0004
const HELP_SETINDEX = &h0005
const HELP_SETCONTENTS = &h0005
const HELP_CONTEXTPOPUP = &h0008
const HELP_FORCEFILE = &h0009
const HELP_KEY = &h0101
const HELP_COMMAND = &h0102
const HELP_PARTIALKEY = &h0105
const HELP_MULTIKEY = &h0201
const HELP_SETWINPOS = &h0203
const HELP_CONTEXTMENU = &h000a
const HELP_FINDER = &h000b
const HELP_WM_HELP = &h000c
const HELP_SETPOPUP_POS = &h000d
const HELP_TCARD = &h8000
const HELP_TCARD_DATA = &h0010
const HELP_TCARD_OTHER_CALLER = &h0011
const IDH_NO_HELP = 28440
const IDH_MISSING_CONTEXT = 28441
const IDH_GENERIC_HELP_BUTTON = 28442
const IDH_OK = 28443
const IDH_CANCEL = 28444
const IDH_HELP = 28445
const GR_GDIOBJECTS = 0
const GR_USEROBJECTS = 1


declare function GetGuiResources(byval hProcess as HANDLE, byval uiFlags as DWORD) as DWORD
const SPI_GETBEEP = &h0001
const SPI_SETBEEP = &h0002
const SPI_GETMOUSE = &h0003
const SPI_SETMOUSE = &h0004
const SPI_GETBORDER = &h0005
const SPI_SETBORDER = &h0006
const SPI_GETKEYBOARDSPEED = &h000A
const SPI_SETKEYBOARDSPEED = &h000B
const SPI_LANGDRIVER = &h000C
const SPI_ICONHORIZONTALSPACING = &h000D
const SPI_GETSCREENSAVETIMEOUT = &h000E
const SPI_SETSCREENSAVETIMEOUT = &h000F
const SPI_GETSCREENSAVEACTIVE = &h0010
const SPI_SETSCREENSAVEACTIVE = &h0011
const SPI_GETGRIDGRANULARITY = &h0012
const SPI_SETGRIDGRANULARITY = &h0013
const SPI_SETDESKWALLPAPER = &h0014
const SPI_SETDESKPATTERN = &h0015
const SPI_GETKEYBOARDDELAY = &h0016
const SPI_SETKEYBOARDDELAY = &h0017
const SPI_ICONVERTICALSPACING = &h0018
const SPI_GETICONTITLEWRAP = &h0019
const SPI_SETICONTITLEWRAP = &h001A
const SPI_GETMENUDROPALIGNMENT = &h001B
const SPI_SETMENUDROPALIGNMENT = &h001C
const SPI_SETDOUBLECLKWIDTH = &h001D
const SPI_SETDOUBLECLKHEIGHT = &h001E
const SPI_GETICONTITLELOGFONT = &h001F
const SPI_SETDOUBLECLICKTIME = &h0020
const SPI_SETMOUSEBUTTONSWAP = &h0021
const SPI_SETICONTITLELOGFONT = &h0022
const SPI_GETFASTTASKSWITCH = &h0023
const SPI_SETFASTTASKSWITCH = &h0024
const SPI_SETDRAGFULLWINDOWS = &h0025
const SPI_GETDRAGFULLWINDOWS = &h0026
const SPI_GETNONCLIENTMETRICS = &h0029
const SPI_SETNONCLIENTMETRICS = &h002A
const SPI_GETMINIMIZEDMETRICS = &h002B
const SPI_SETMINIMIZEDMETRICS = &h002C
const SPI_GETICONMETRICS = &h002D
const SPI_SETICONMETRICS = &h002E
const SPI_SETWORKAREA = &h002F
const SPI_GETWORKAREA = &h0030
const SPI_SETPENWINDOWS = &h0031
const SPI_GETHIGHCONTRAST = &h0042
const SPI_SETHIGHCONTRAST = &h0043
const SPI_GETKEYBOARDPREF = &h0044
const SPI_SETKEYBOARDPREF = &h0045
const SPI_GETSCREENREADER = &h0046
const SPI_SETSCREENREADER = &h0047
const SPI_GETANIMATION = &h0048
const SPI_SETANIMATION = &h0049
const SPI_GETFONTSMOOTHING = &h004A
const SPI_SETFONTSMOOTHING = &h004B
const SPI_SETDRAGWIDTH = &h004C
const SPI_SETDRAGHEIGHT = &h004D
const SPI_SETHANDHELD = &h004E
const SPI_GETLOWPOWERTIMEOUT = &h004F
const SPI_GETPOWEROFFTIMEOUT = &h0050
const SPI_SETLOWPOWERTIMEOUT = &h0051
const SPI_SETPOWEROFFTIMEOUT = &h0052
const SPI_GETLOWPOWERACTIVE = &h0053
const SPI_GETPOWEROFFACTIVE = &h0054
const SPI_SETLOWPOWERACTIVE = &h0055
const SPI_SETPOWEROFFACTIVE = &h0056
const SPI_SETCURSORS = &h0057
const SPI_SETICONS = &h0058
const SPI_GETDEFAULTINPUTLANG = &h0059
const SPI_SETDEFAULTINPUTLANG = &h005A
const SPI_SETLANGTOGGLE = &h005B
const SPI_GETWINDOWSEXTENSION = &h005C
const SPI_SETMOUSETRAILS = &h005D
const SPI_GETMOUSETRAILS = &h005E
const SPI_SETSCREENSAVERRUNNING = &h0061
const SPI_SCREENSAVERRUNNING = SPI_SETSCREENSAVERRUNNING
const SPI_GETFILTERKEYS = &h0032
const SPI_SETFILTERKEYS = &h0033
const SPI_GETTOGGLEKEYS = &h0034
const SPI_SETTOGGLEKEYS = &h0035
const SPI_GETMOUSEKEYS = &h0036
const SPI_SETMOUSEKEYS = &h0037
const SPI_GETSHOWSOUNDS = &h0038
const SPI_SETSHOWSOUNDS = &h0039
const SPI_GETSTICKYKEYS = &h003A
const SPI_SETSTICKYKEYS = &h003B
const SPI_GETACCESSTIMEOUT = &h003C
const SPI_SETACCESSTIMEOUT = &h003D
const SPI_GETSERIALKEYS = &h003E
const SPI_SETSERIALKEYS = &h003F
const SPI_GETSOUNDSENTRY = &h0040
const SPI_SETSOUNDSENTRY = &h0041
const SPI_GETSNAPTODEFBUTTON = &h005F
const SPI_SETSNAPTODEFBUTTON = &h0060
const SPI_GETMOUSEHOVERWIDTH = &h0062
const SPI_SETMOUSEHOVERWIDTH = &h0063
const SPI_GETMOUSEHOVERHEIGHT = &h0064
const SPI_SETMOUSEHOVERHEIGHT = &h0065
const SPI_GETMOUSEHOVERTIME = &h0066
const SPI_SETMOUSEHOVERTIME = &h0067
const SPI_GETWHEELSCROLLLINES = &h0068
const SPI_SETWHEELSCROLLLINES = &h0069
const SPI_GETMENUSHOWDELAY = &h006A
const SPI_SETMENUSHOWDELAY = &h006B


const SPI_GETSHOWIMEUI = &h006E
const SPI_SETSHOWIMEUI = &h006F
const SPI_GETMOUSESPEED = &h0070
const SPI_SETMOUSESPEED = &h0071
const SPI_GETSCREENSAVERRUNNING = &h0072
const SPI_GETDESKWALLPAPER = &h0073


const SPI_GETACTIVEWINDOWTRACKING = &h1000
const SPI_SETACTIVEWINDOWTRACKING = &h1001
const SPI_GETMENUANIMATION = &h1002
const SPI_SETMENUANIMATION = &h1003
const SPI_GETCOMBOBOXANIMATION = &h1004
const SPI_SETCOMBOBOXANIMATION = &h1005
const SPI_GETLISTBOXSMOOTHSCROLLING = &h1006
const SPI_SETLISTBOXSMOOTHSCROLLING = &h1007
const SPI_GETGRADIENTCAPTIONS = &h1008
const SPI_SETGRADIENTCAPTIONS = &h1009
const SPI_GETKEYBOARDCUES = &h100A
const SPI_SETKEYBOARDCUES = &h100B
const SPI_GETMENUUNDERLINES = SPI_GETKEYBOARDCUES
const SPI_SETMENUUNDERLINES = SPI_SETKEYBOARDCUES
const SPI_GETACTIVEWNDTRKZORDER = &h100C
const SPI_SETACTIVEWNDTRKZORDER = &h100D
const SPI_GETHOTTRACKING = &h100E
const SPI_SETHOTTRACKING = &h100F
const SPI_GETMENUFADE = &h1012
const SPI_SETMENUFADE = &h1013
const SPI_GETSELECTIONFADE = &h1014
const SPI_SETSELECTIONFADE = &h1015
const SPI_GETTOOLTIPANIMATION = &h1016
const SPI_SETTOOLTIPANIMATION = &h1017
const SPI_GETTOOLTIPFADE = &h1018
const SPI_SETTOOLTIPFADE = &h1019
const SPI_GETCURSORSHADOW = &h101A
const SPI_SETCURSORSHADOW = &h101B
const SPI_GETMOUSESONAR = &h101C
const SPI_SETMOUSESONAR = &h101D
const SPI_GETMOUSECLICKLOCK = &h101E
const SPI_SETMOUSECLICKLOCK = &h101F
const SPI_GETMOUSEVANISH = &h1020
const SPI_SETMOUSEVANISH = &h1021
const SPI_GETFLATMENU = &h1022
const SPI_SETFLATMENU = &h1023
const SPI_GETDROPSHADOW = &h1024
const SPI_SETDROPSHADOW = &h1025
const SPI_GETBLOCKSENDINPUTRESETS = &h1026
const SPI_SETBLOCKSENDINPUTRESETS = &h1027
const SPI_GETUIEFFECTS = &h103E
const SPI_SETUIEFFECTS = &h103F


const SPI_GETFOREGROUNDLOCKTIMEOUT = &h2000
const SPI_SETFOREGROUNDLOCKTIMEOUT = &h2001
const SPI_GETACTIVEWNDTRKTIMEOUT = &h2002
const SPI_SETACTIVEWNDTRKTIMEOUT = &h2003
const SPI_GETFOREGROUNDFLASHCOUNT = &h2004
const SPI_SETFOREGROUNDFLASHCOUNT = &h2005
const SPI_GETCARETWIDTH = &h2006
const SPI_SETCARETWIDTH = &h2007
const SPI_GETMOUSECLICKLOCKTIME = &h2008
const SPI_SETMOUSECLICKLOCKTIME = &h2009
const SPI_GETFONTSMOOTHINGTYPE = &h200A
const SPI_SETFONTSMOOTHINGTYPE = &h200B
const FE_FONTSMOOTHINGSTANDARD = &h0001
const FE_FONTSMOOTHINGCLEARTYPE = &h0002
const FE_FONTSMOOTHINGDOCKING = &h8000
const SPI_GETFONTSMOOTHINGCONTRAST = &h200C
const SPI_SETFONTSMOOTHINGCONTRAST = &h200D
const SPI_GETFOCUSBORDERWIDTH = &h200E
const SPI_SETFOCUSBORDERWIDTH = &h200F
const SPI_GETFOCUSBORDERHEIGHT = &h2010
const SPI_SETFOCUSBORDERHEIGHT = &h2011
const SPI_GETFONTSMOOTHINGORIENTATION = &h2012
const SPI_SETFONTSMOOTHINGORIENTATION = &h2013


const FE_FONTSMOOTHINGORIENTATIONBGR = &h00000
const FE_FONTSMOOTHINGORIENTATIONRGB = &h0001
const SPIF_UPDATEINIFILE = &h0001
const SPIF_SENDWININICHANGE = &h0002
const SPIF_SENDCHANGE = SPIF_SENDWININICHANGE
const METRICS_USEDEFAULT = -1

type tagNONCLIENTMETRICSA
 cbSize as UINT
 iBorderWidth as long
 iScrollWidth as long
 iScrollHeight as long
 iCaptionWidth as long
 iCaptionHeight as long
 lfCaptionFont as LOGFONTA
 iSmCaptionWidth as long
 iSmCaptionHeight as long
 lfSmCaptionFont as LOGFONTA
 iMenuWidth as long
 iMenuHeight as long
 lfMenuFont as LOGFONTA
 lfStatusFont as LOGFONTA
 lfMessageFont as LOGFONTA

end type

type NONCLIENTMETRICSA as tagNONCLIENTMETRICSA
type PNONCLIENTMETRICSA as tagNONCLIENTMETRICSA ptr
type LPNONCLIENTMETRICSA as tagNONCLIENTMETRICSA ptr

type tagNONCLIENTMETRICSW
 cbSize as UINT
 iBorderWidth as long
 iScrollWidth as long
 iScrollHeight as long
 iCaptionWidth as long
 iCaptionHeight as long
 lfCaptionFont as LOGFONTW
 iSmCaptionWidth as long
 iSmCaptionHeight as long
 lfSmCaptionFont as LOGFONTW
 iMenuWidth as long
 iMenuHeight as long
 lfMenuFont as LOGFONTW
 lfStatusFont as LOGFONTW
 lfMessageFont as LOGFONTW

end type

type NONCLIENTMETRICSW as tagNONCLIENTMETRICSW
type PNONCLIENTMETRICSW as tagNONCLIENTMETRICSW ptr
type LPNONCLIENTMETRICSW as tagNONCLIENTMETRICSW ptr

 type NONCLIENTMETRICS as NONCLIENTMETRICSA
 type PNONCLIENTMETRICS as PNONCLIENTMETRICSA
 type LPNONCLIENTMETRICS as LPNONCLIENTMETRICSA

const ARW_BOTTOMLEFT = &h00000
const ARW_BOTTOMRIGHT = &h0001
const ARW_TOPLEFT = &h0002
const ARW_TOPRIGHT = &h0003
const ARW_STARTMASK = &h0003
const ARW_STARTRIGHT = &h0001
const ARW_STARTTOP = &h0002
const ARW_LEFT = &h00000
const ARW_RIGHT = &h00000
const ARW_UP = &h0004
const ARW_DOWN = &h0004
const ARW_HIDE = &h0008

type tagMINIMIZEDMETRICS
 cbSize as UINT
 iWidth as long
 iHorzGap as long
 iVertGap as long
 iArrange as long
end type

type MINIMIZEDMETRICS as tagMINIMIZEDMETRICS
type PMINIMIZEDMETRICS as tagMINIMIZEDMETRICS ptr
type LPMINIMIZEDMETRICS as tagMINIMIZEDMETRICS ptr

type tagICONMETRICSA
 cbSize as UINT
 iHorzSpacing as long
 iVertSpacing as long
 iTitleWrap as long
 lfFont as LOGFONTA
end type

type ICONMETRICSA as tagICONMETRICSA
type PICONMETRICSA as tagICONMETRICSA ptr
type LPICONMETRICSA as tagICONMETRICSA ptr

type tagICONMETRICSW
 cbSize as UINT
 iHorzSpacing as long
 iVertSpacing as long
 iTitleWrap as long
 lfFont as LOGFONTW
end type

type ICONMETRICSW as tagICONMETRICSW
type PICONMETRICSW as tagICONMETRICSW ptr
type LPICONMETRICSW as tagICONMETRICSW ptr

 type ICONMETRICS as ICONMETRICSA
 type PICONMETRICS as PICONMETRICSA
 type LPICONMETRICS as LPICONMETRICSA

type tagANIMATIONINFO
 cbSize as UINT
 iMinAnimate as long
end type

type ANIMATIONINFO as tagANIMATIONINFO
type LPANIMATIONINFO as tagANIMATIONINFO ptr

type tagSERIALKEYSA
 cbSize as UINT
 dwFlags as DWORD
 lpszActivePort as LPSTR
 lpszPort as LPSTR
 iBaudRate as UINT
 iPortState as UINT
 iActive as UINT
end type

type SERIALKEYSA as tagSERIALKEYSA
type LPSERIALKEYSA as tagSERIALKEYSA ptr

type tagSERIALKEYSW
 cbSize as UINT
 dwFlags as DWORD
 lpszActivePort as LPWSTR
 lpszPort as LPWSTR
 iBaudRate as UINT
 iPortState as UINT
 iActive as UINT
end type

type SERIALKEYSW as tagSERIALKEYSW
type LPSERIALKEYSW as tagSERIALKEYSW ptr

 type SERIALKEYS as SERIALKEYSA
 type LPSERIALKEYS as LPSERIALKEYSA

type tagHIGHCONTRASTA
 cbSize as UINT
 dwFlags as DWORD
 lpszDefaultScheme as LPSTR
end type

type HIGHCONTRASTA as tagHIGHCONTRASTA
type LPHIGHCONTRASTA as tagHIGHCONTRASTA ptr

type tagHIGHCONTRASTW
 cbSize as UINT
 dwFlags as DWORD
 lpszDefaultScheme as LPWSTR
end type

type HIGHCONTRASTW as tagHIGHCONTRASTW
type LPHIGHCONTRASTW as tagHIGHCONTRASTW ptr

 type HIGHCONTRAST as HIGHCONTRASTA
 type LPHIGHCONTRAST as LPHIGHCONTRASTA

const SERKF_SERIALKEYSON = &h00000001
const SERKF_AVAILABLE = &h00000002
const SERKF_INDICATOR = &h00000004
const HCF_HIGHCONTRASTON = &h00000001
const HCF_AVAILABLE = &h00000002
const HCF_HOTKEYACTIVE = &h00000004
const HCF_CONFIRMHOTKEY = &h00000008
const HCF_HOTKEYSOUND = &h00000010
const HCF_INDICATOR = &h00000020
const HCF_HOTKEYAVAILABLE = &h00000040
const HCF_LOGONDESKTOP = &h00000100
const HCF_DEFAULTDESKTOP = &h00000200
const CDS_UPDATEREGISTRY = &h00000001
const CDS_TEST = &h00000002
const CDS_FULLSCREEN = &h00000004
const CDS_GLOBAL = &h00000008
const CDS_SET_PRIMARY = &h00000010
const CDS_VIDEOPARAMETERS = &h00000020


const CDS_RESET = &h40000000
const CDS_RESET_EX = &h20000000
const CDS_NORESET = &h10000000

type _VIDEOPARAMETERS
 Guid as GUID
 dwOffset as ULONG
 dwCommand as ULONG
 dwFlags as ULONG
 dwMode as ULONG
 dwTVStandard as ULONG
 dwAvailableModes as ULONG
 dwAvailableTVStandard as ULONG
 dwFlickerFilter as ULONG
 dwOverScanX as ULONG
 dwOverScanY as ULONG
 dwMaxUnscaledX as ULONG
 dwMaxUnscaledY as ULONG
 dwPositionX as ULONG
 dwPositionY as ULONG
 dwBrightness as ULONG
 dwContrast as ULONG
 dwCPType as ULONG
 dwCPCommand as ULONG
 dwCPStandard as ULONG
 dwCPKey as ULONG
 bCP_APSTriggerBits as ULONG
 bOEMCopyProtection(0 to 255) as UCHAR
end type

type VIDEOPARAMETERS as _VIDEOPARAMETERS
type PVIDEOPARAMETERS as _VIDEOPARAMETERS ptr
type LPVIDEOPARAMETERS as _VIDEOPARAMETERS ptr

const VP_COMMAND_GET = &h0001
const VP_COMMAND_SET = &h0002
const VP_FLAGS_TV_MODE = &h0001
const VP_FLAGS_TV_STANDARD = &h0002
const VP_FLAGS_FLICKER = &h0004
const VP_FLAGS_OVERSCAN = &h0008
const VP_FLAGS_MAX_UNSCALED = &h0010
const VP_FLAGS_POSITION = &h0020
const VP_FLAGS_BRIGHTNESS = &h0040
const VP_FLAGS_CONTRAST = &h0080
const VP_FLAGS_COPYPROTECT = &h0100
const VP_MODE_WIN_GRAPHICS = &h0001
const VP_MODE_TV_PLAYBACK = &h0002
const VP_TV_STANDARD_NTSC_M = &h0001
const VP_TV_STANDARD_NTSC_M_J = &h0002
const VP_TV_STANDARD_PAL_B = &h0004
const VP_TV_STANDARD_PAL_D = &h0008
const VP_TV_STANDARD_PAL_H = &h0010
const VP_TV_STANDARD_PAL_I = &h0020
const VP_TV_STANDARD_PAL_M = &h0040
const VP_TV_STANDARD_PAL_N = &h0080
const VP_TV_STANDARD_SECAM_B = &h0100
const VP_TV_STANDARD_SECAM_D = &h0200
const VP_TV_STANDARD_SECAM_G = &h0400
const VP_TV_STANDARD_SECAM_H = &h0800
const VP_TV_STANDARD_SECAM_K = &h1000
const VP_TV_STANDARD_SECAM_K1 = &h2000
const VP_TV_STANDARD_SECAM_L = &h4000
const VP_TV_STANDARD_WIN_VGA = &h8000
const VP_TV_STANDARD_NTSC_433 = &h00010000
const VP_TV_STANDARD_PAL_G = &h00020000
const VP_TV_STANDARD_PAL_60 = &h00040000
const VP_TV_STANDARD_SECAM_L1 = &h00080000
const VP_CP_TYPE_APS_TRIGGER = &h0001
const VP_CP_TYPE_MACROVISION = &h0002
const VP_CP_CMD_ACTIVATE = &h0001
const VP_CP_CMD_DEACTIVATE = &h0002
const VP_CP_CMD_CHANGE = &h0004
const DISP_CHANGE_SUCCESSFUL = 0
const DISP_CHANGE_RESTART = 1
const DISP_CHANGE_FAILED = -1
const DISP_CHANGE_BADMODE = -2
const DISP_CHANGE_NOTUPDATED = -3
const DISP_CHANGE_BADFLAGS = -4
const DISP_CHANGE_BADPARAM = -5
const DISP_CHANGE_BADDUALVIEW = -6
declare function ChangeDisplaySettingsA(byval lpDevMode as LPDEVMODEA, byval dwFlags as DWORD) as LONG

 declare function ChangeDisplaySettings alias "ChangeDisplaySettingsA"(byval lpDevMode as LPDEVMODEA, byval dwFlags as DWORD) as LONG

declare function ChangeDisplaySettingsW(byval lpDevMode as LPDEVMODEW, byval dwFlags as DWORD) as LONG


declare function ChangeDisplaySettingsExA(byval lpszDeviceName as LPCSTR, byval lpDevMode as LPDEVMODEA, byval hwnd as HWND, byval dwflags as DWORD, byval lParam as LPVOID) as LONG

 declare function ChangeDisplaySettingsEx alias "ChangeDisplaySettingsExA"(byval lpszDeviceName as LPCSTR, byval lpDevMode as LPDEVMODEA, byval hwnd as HWND, byval dwflags as DWORD, byval lParam as LPVOID) as LONG

declare function ChangeDisplaySettingsExW(byval lpszDeviceName as LPCWSTR, byval lpDevMode as LPDEVMODEW, byval hwnd as HWND, byval dwflags as DWORD, byval lParam as LPVOID) as LONG


const ENUM_CURRENT_SETTINGS = cast(DWORD, -1)
const ENUM_REGISTRY_SETTINGS = cast(DWORD, -2)
declare function EnumDisplaySettingsA(byval lpszDeviceName as LPCSTR, byval iModeNum as DWORD, byval lpDevMode as LPDEVMODEA) as WINBOOL

 declare function EnumDisplaySettings alias "EnumDisplaySettingsA"(byval lpszDeviceName as LPCSTR, byval iModeNum as DWORD, byval lpDevMode as LPDEVMODEA) as WINBOOL

declare function EnumDisplaySettingsW(byval lpszDeviceName as LPCWSTR, byval iModeNum as DWORD, byval lpDevMode as LPDEVMODEW) as WINBOOL


declare function EnumDisplaySettingsExA(byval lpszDeviceName as LPCSTR, byval iModeNum as DWORD, byval lpDevMode as LPDEVMODEA, byval dwFlags as DWORD) as WINBOOL

 declare function EnumDisplaySettingsEx alias "EnumDisplaySettingsExA"(byval lpszDeviceName as LPCSTR, byval iModeNum as DWORD, byval lpDevMode as LPDEVMODEA, byval dwFlags as DWORD) as WINBOOL

declare function EnumDisplaySettingsExW(byval lpszDeviceName as LPCWSTR, byval iModeNum as DWORD, byval lpDevMode as LPDEVMODEW, byval dwFlags as DWORD) as WINBOOL


const EDS_RAWMODE = &h00000002
declare function EnumDisplayDevicesA(byval lpDevice as LPCSTR, byval iDevNum as DWORD, byval lpDisplayDevice as PDISPLAY_DEVICEA, byval dwFlags as DWORD) as WINBOOL

 declare function EnumDisplayDevices alias "EnumDisplayDevicesA"(byval lpDevice as LPCSTR, byval iDevNum as DWORD, byval lpDisplayDevice as PDISPLAY_DEVICEA, byval dwFlags as DWORD) as WINBOOL

declare function EnumDisplayDevicesW(byval lpDevice as LPCWSTR, byval iDevNum as DWORD, byval lpDisplayDevice as PDISPLAY_DEVICEW, byval dwFlags as DWORD) as WINBOOL


const EDD_GET_DEVICE_INTERFACE_NAME = &h00000001


declare function SystemParametersInfoA(byval uiAction as UINT, byval uiParam as UINT, byval pvParam as PVOID, byval fWinIni as UINT) as WINBOOL

 declare function SystemParametersInfo alias "SystemParametersInfoA"(byval uiAction as UINT, byval uiParam as UINT, byval pvParam as PVOID, byval fWinIni as UINT) as WINBOOL

declare function SystemParametersInfoW(byval uiAction as UINT, byval uiParam as UINT, byval pvParam as PVOID, byval fWinIni as UINT) as WINBOOL


type tagFILTERKEYS
 cbSize as UINT
 dwFlags as DWORD
 iWaitMSec as DWORD
 iDelayMSec as DWORD
 iRepeatMSec as DWORD
 iBounceMSec as DWORD
end type

type FILTERKEYS as tagFILTERKEYS
type LPFILTERKEYS as tagFILTERKEYS ptr
const FKF_FILTERKEYSON = &h00000001
const FKF_AVAILABLE = &h00000002
const FKF_HOTKEYACTIVE = &h00000004
const FKF_CONFIRMHOTKEY = &h00000008
const FKF_HOTKEYSOUND = &h00000010
const FKF_INDICATOR = &h00000020
const FKF_CLICKON = &h00000040

type tagSTICKYKEYS
 cbSize as UINT
 dwFlags as DWORD
end type

type STICKYKEYS as tagSTICKYKEYS
type LPSTICKYKEYS as tagSTICKYKEYS ptr
const SKF_STICKYKEYSON = &h00000001
const SKF_AVAILABLE = &h00000002
const SKF_HOTKEYACTIVE = &h00000004
const SKF_CONFIRMHOTKEY = &h00000008
const SKF_HOTKEYSOUND = &h00000010
const SKF_INDICATOR = &h00000020
const SKF_AUDIBLEFEEDBACK = &h00000040
const SKF_TRISTATE = &h00000080
const SKF_TWOKEYSOFF = &h00000100
const SKF_LALTLATCHED = &h10000000
const SKF_LCTLLATCHED = &h04000000
const SKF_LSHIFTLATCHED = &h01000000
const SKF_RALTLATCHED = &h20000000
const SKF_RCTLLATCHED = &h08000000
const SKF_RSHIFTLATCHED = &h02000000
const SKF_LWINLATCHED = &h40000000
const SKF_RWINLATCHED = &h80000000
const SKF_LALTLOCKED = &h00100000
const SKF_LCTLLOCKED = &h00040000
const SKF_LSHIFTLOCKED = &h00010000
const SKF_RALTLOCKED = &h00200000
const SKF_RCTLLOCKED = &h00080000
const SKF_RSHIFTLOCKED = &h00020000
const SKF_LWINLOCKED = &h00400000
const SKF_RWINLOCKED = &h00800000

type tagMOUSEKEYS
 cbSize as UINT
 dwFlags as DWORD
 iMaxSpeed as DWORD
 iTimeToMaxSpeed as DWORD
 iCtrlSpeed as DWORD
 dwReserved1 as DWORD
 dwReserved2 as DWORD
end type

type MOUSEKEYS as tagMOUSEKEYS
type LPMOUSEKEYS as tagMOUSEKEYS ptr
const MKF_MOUSEKEYSON = &h00000001
const MKF_AVAILABLE = &h00000002
const MKF_HOTKEYACTIVE = &h00000004
const MKF_CONFIRMHOTKEY = &h00000008
const MKF_HOTKEYSOUND = &h00000010
const MKF_INDICATOR = &h00000020
const MKF_MODIFIERS = &h00000040
const MKF_REPLACENUMBERS = &h00000080
const MKF_LEFTBUTTONSEL = &h10000000
const MKF_RIGHTBUTTONSEL = &h20000000
const MKF_LEFTBUTTONDOWN = &h01000000
const MKF_RIGHTBUTTONDOWN = &h02000000
const MKF_MOUSEMODE = &h80000000

type tagACCESSTIMEOUT
 cbSize as UINT
 dwFlags as DWORD
 iTimeOutMSec as DWORD
end type

type ACCESSTIMEOUT as tagACCESSTIMEOUT
type LPACCESSTIMEOUT as tagACCESSTIMEOUT ptr
const ATF_TIMEOUTON = &h00000001
const ATF_ONOFFFEEDBACK = &h00000002
const SSGF_NONE = 0
const SSGF_DISPLAY = 3
const SSTF_NONE = 0
const SSTF_CHARS = 1
const SSTF_BORDER = 2
const SSTF_DISPLAY = 3
const SSWF_NONE = 0
const SSWF_TITLE = 1
const SSWF_WINDOW = 2
const SSWF_DISPLAY = 3
const SSWF_CUSTOM = 4

type tagSOUNDSENTRYA
 cbSize as UINT
 dwFlags as DWORD
 iFSTextEffect as DWORD
 iFSTextEffectMSec as DWORD
 iFSTextEffectColorBits as DWORD
 iFSGrafEffect as DWORD
 iFSGrafEffectMSec as DWORD
 iFSGrafEffectColor as DWORD
 iWindowsEffect as DWORD
 iWindowsEffectMSec as DWORD
 lpszWindowsEffectDLL as LPSTR
 iWindowsEffectOrdinal as DWORD
end type

type SOUNDSENTRYA as tagSOUNDSENTRYA
type LPSOUNDSENTRYA as tagSOUNDSENTRYA ptr

type tagSOUNDSENTRYW
 cbSize as UINT
 dwFlags as DWORD
 iFSTextEffect as DWORD
 iFSTextEffectMSec as DWORD
 iFSTextEffectColorBits as DWORD
 iFSGrafEffect as DWORD
 iFSGrafEffectMSec as DWORD
 iFSGrafEffectColor as DWORD
 iWindowsEffect as DWORD
 iWindowsEffectMSec as DWORD
 lpszWindowsEffectDLL as LPWSTR
 iWindowsEffectOrdinal as DWORD
end type

type SOUNDSENTRYW as tagSOUNDSENTRYW
type LPSOUNDSENTRYW as tagSOUNDSENTRYW ptr

 type SOUNDSENTRY as SOUNDSENTRYA
 type LPSOUNDSENTRY as LPSOUNDSENTRYA

const SSF_SOUNDSENTRYON = &h00000001
const SSF_AVAILABLE = &h00000002
const SSF_INDICATOR = &h00000004

type tagTOGGLEKEYS
 cbSize as UINT
 dwFlags as DWORD
end type

type TOGGLEKEYS as tagTOGGLEKEYS
type LPTOGGLEKEYS as tagTOGGLEKEYS ptr

type tagMONITORINFO
 cbSize as DWORD
 rcMonitor as RECT
 rcWork as RECT
 dwFlags as DWORD
end type

type MONITORINFO as tagMONITORINFO
type LPMONITORINFO as tagMONITORINFO ptr


type tagMONITORINFOEXA
 union
 type
 cbSize as DWORD
 rcMonitor as RECT
 rcWork as RECT
 dwFlags as DWORD
 end type
 end union

 szDevice as zstring * 32
end type

type MONITORINFOEXA as tagMONITORINFOEXA
type LPMONITORINFOEXA as tagMONITORINFOEXA ptr

type tagMONITORINFOEXW
 union
 type
 cbSize as DWORD
 rcMonitor as RECT
 rcWork as RECT
 dwFlags as DWORD
 end type
 end union

 szDevice as wstring * 32
end type

type MONITORINFOEXW as tagMONITORINFOEXW
type LPMONITORINFOEXW as tagMONITORINFOEXW ptr

 type MONITORINFOEX as MONITORINFOEXA
 type LPMONITORINFOEX as LPMONITORINFOEXA

type MONITORENUMPROC as function(byval as HMONITOR, byval as HDC, byval as LPRECT, byval as LPARAM) as WINBOOL
declare sub SetDebugErrorLevel(byval dwLevel as DWORD)
declare sub SetLastErrorEx(byval dwErrCode as DWORD, byval dwType as DWORD)
declare function InternalGetWindowText(byval hWnd as HWND, byval pString as LPWSTR, byval cchMaxCount as long) as long
declare function CancelShutdown() as WINBOOL
declare function MonitorFromPoint(byval pt as POINT, byval dwFlags as DWORD) as HMONITOR
declare function MonitorFromRect(byval lprc as LPCRECT, byval dwFlags as DWORD) as HMONITOR
declare function MonitorFromWindow(byval hwnd as HWND, byval dwFlags as DWORD) as HMONITOR
declare function EndTask(byval hWnd as HWND, byval fShutDown as WINBOOL, byval fForce as WINBOOL) as WINBOOL


declare function GetMonitorInfoA(byval hMonitor as HMONITOR, byval lpmi as LPMONITORINFO) as WINBOOL

 declare function GetMonitorInfo alias "GetMonitorInfoA"(byval hMonitor as HMONITOR, byval lpmi as LPMONITORINFO) as WINBOOL

declare function GetMonitorInfoW(byval hMonitor as HMONITOR, byval lpmi as LPMONITORINFO) as WINBOOL


declare function EnumDisplayMonitors(byval hdc as HDC, byval lprcClip as LPCRECT, byval lpfnEnum as MONITORENUMPROC, byval dwData as LPARAM) as WINBOOL
const TKF_TOGGLEKEYSON = &h00000001
const TKF_AVAILABLE = &h00000002
const TKF_HOTKEYACTIVE = &h00000004
const TKF_CONFIRMHOTKEY = &h00000008
const TKF_HOTKEYSOUND = &h00000010
const TKF_INDICATOR = &h00000020
const SLE_ERROR = &h00000001
const SLE_MINORERROR = &h00000002
const SLE_WARNING = &h00000003
const MONITOR_DEFAULTTONULL = &h000000000
const MONITOR_DEFAULTTOPRIMARY = &h00000001
const MONITOR_DEFAULTTONEAREST = &h00000002
const MONITORINFOF_PRIMARY = &h00000001
type WINEVENTPROC as sub(byval hWinEventHook as HWINEVENTHOOK, byval event as DWORD, byval hwnd as HWND, byval idObject as LONG, byval idChild as LONG, byval idEventThread as DWORD, byval dwmsEventTime as DWORD)

declare sub NotifyWinEvent(byval event as DWORD, byval hwnd as HWND, byval idObject as LONG, byval idChild as LONG)
declare function SetWinEventHook(byval eventMin as DWORD, byval eventMax as DWORD, byval hmodWinEventProc as HMODULE, byval pfnWinEventProc as WINEVENTPROC, byval idProcess as DWORD, byval idThread as DWORD, byval dwFlags as DWORD) as HWINEVENTHOOK
declare function IsWinEventHookInstalled(byval event as DWORD) as WINBOOL

const WINEVENT_OUTOFCONTEXT = &h00000
const WINEVENT_SKIPOWNTHREAD = &h0001
const WINEVENT_SKIPOWNPROCESS = &h0002
const WINEVENT_INCONTEXT = &h0004
declare function UnhookWinEvent(byval hWinEventHook as HWINEVENTHOOK) as WINBOOL
const CHILDID_SELF = 0
const INDEXID_OBJECT = 0
const INDEXID_CONTAINER = 0
const EVENT_MIN = &h00000001
const EVENT_MAX = &h7FFFFFFF
const EVENT_SYSTEM_SOUND = &h0001
const EVENT_SYSTEM_ALERT = &h0002
const EVENT_SYSTEM_FOREGROUND = &h0003
const EVENT_SYSTEM_MENUSTART = &h0004
const EVENT_SYSTEM_MENUEND = &h0005
const EVENT_SYSTEM_MENUPOPUPSTART = &h0006
const EVENT_SYSTEM_MENUPOPUPEND = &h0007
const EVENT_SYSTEM_CAPTURESTART = &h0008
const EVENT_SYSTEM_CAPTUREEND = &h0009
const EVENT_SYSTEM_MOVESIZESTART = &h000A
const EVENT_SYSTEM_MOVESIZEEND = &h000B
const EVENT_SYSTEM_CONTEXTHELPSTART = &h000C
const EVENT_SYSTEM_CONTEXTHELPEND = &h000D
const EVENT_SYSTEM_DRAGDROPSTART = &h000E
const EVENT_SYSTEM_DRAGDROPEND = &h000F
const EVENT_SYSTEM_DIALOGSTART = &h0010
const EVENT_SYSTEM_DIALOGEND = &h0011
const EVENT_SYSTEM_SCROLLINGSTART = &h0012
const EVENT_SYSTEM_SCROLLINGEND = &h0013
const EVENT_SYSTEM_SWITCHSTART = &h0014
const EVENT_SYSTEM_SWITCHEND = &h0015
const EVENT_SYSTEM_MINIMIZESTART = &h0016
const EVENT_SYSTEM_MINIMIZEEND = &h0017


const EVENT_CONSOLE_CARET = &h4001
const EVENT_CONSOLE_UPDATE_REGION = &h4002
const EVENT_CONSOLE_UPDATE_SIMPLE = &h4003
const EVENT_CONSOLE_UPDATE_SCROLL = &h4004
const EVENT_CONSOLE_LAYOUT = &h4005
const EVENT_CONSOLE_START_APPLICATION = &h4006
const EVENT_CONSOLE_END_APPLICATION = &h4007

 const CONSOLE_APPLICATION_16BIT = &h0001

const CONSOLE_CARET_SELECTION = &h0001
const CONSOLE_CARET_VISIBLE = &h0002


const EVENT_OBJECT_CREATE = &h8000
const EVENT_OBJECT_DESTROY = &h8001
const EVENT_OBJECT_SHOW = &h8002
const EVENT_OBJECT_HIDE = &h8003
const EVENT_OBJECT_REORDER = &h8004
const EVENT_OBJECT_FOCUS = &h8005
const EVENT_OBJECT_SELECTION = &h8006
const EVENT_OBJECT_SELECTIONADD = &h8007
const EVENT_OBJECT_SELECTIONREMOVE = &h8008
const EVENT_OBJECT_SELECTIONWITHIN = &h8009
const EVENT_OBJECT_STATECHANGE = &h800A
const EVENT_OBJECT_LOCATIONCHANGE = &h800B
const EVENT_OBJECT_NAMECHANGE = &h800C
const EVENT_OBJECT_DESCRIPTIONCHANGE = &h800D
const EVENT_OBJECT_VALUECHANGE = &h800E
const EVENT_OBJECT_PARENTCHANGE = &h800F
const EVENT_OBJECT_HELPCHANGE = &h8010
const EVENT_OBJECT_DEFACTIONCHANGE = &h8011
const EVENT_OBJECT_ACCELERATORCHANGE = &h8012


const SOUND_SYSTEM_STARTUP = 1
const SOUND_SYSTEM_SHUTDOWN = 2
const SOUND_SYSTEM_BEEP = 3
const SOUND_SYSTEM_ERROR = 4
const SOUND_SYSTEM_QUESTION = 5
const SOUND_SYSTEM_WARNING = 6
const SOUND_SYSTEM_INFORMATION = 7
const SOUND_SYSTEM_MAXIMIZE = 8
const SOUND_SYSTEM_MINIMIZE = 9
const SOUND_SYSTEM_RESTOREUP = 10
const SOUND_SYSTEM_RESTOREDOWN = 11
const SOUND_SYSTEM_APPSTART = 12
const SOUND_SYSTEM_FAULT = 13
const SOUND_SYSTEM_APPEND = 14
const SOUND_SYSTEM_MENUCOMMAND = 15
const SOUND_SYSTEM_MENUPOPUP = 16
const CSOUND_SYSTEM = 16
const ALERT_SYSTEM_INFORMATIONAL = 1
const ALERT_SYSTEM_WARNING = 2
const ALERT_SYSTEM_ERROR = 3
const ALERT_SYSTEM_QUERY = 4
const ALERT_SYSTEM_CRITICAL = 5
const CALERT_SYSTEM = 6

type tagGUITHREADINFO
 cbSize as DWORD
 flags as DWORD
 hwndActive as HWND
 hwndFocus as HWND
 hwndCapture as HWND
 hwndMenuOwner as HWND
 hwndMoveSize as HWND
 hwndCaret as HWND
 rcCaret as RECT
end type

type GUITHREADINFO as tagGUITHREADINFO
type PGUITHREADINFO as tagGUITHREADINFO ptr
type LPGUITHREADINFO as tagGUITHREADINFO ptr

const GUI_CARETBLINKING = &h00000001
const GUI_INMOVESIZE = &h00000002
const GUI_INMENUMODE = &h00000004
const GUI_SYSTEMMENUMODE = &h00000008
const GUI_POPUPMENUMODE = &h00000010

 const GUI_16BITTASK = &h00000020

declare function GetGUIThreadInfo(byval idThread as DWORD, byval pgui as PGUITHREADINFO) as WINBOOL
declare function BlockInput(byval fBlockIt as WINBOOL) as WINBOOL
declare function GetWindowModuleFileNameA(byval hwnd as HWND, byval pszFileName as LPSTR, byval cchFileNameMax as UINT) as UINT

 declare function GetWindowModuleFileName alias "GetWindowModuleFileNameA"(byval hwnd as HWND, byval pszFileName as LPSTR, byval cchFileNameMax as UINT) as UINT

declare function GetWindowModuleFileNameW(byval hwnd as HWND, byval pszFileName as LPWSTR, byval cchFileNameMax as UINT) as UINT



const STATE_SYSTEM_UNAVAILABLE = &h00000001
const STATE_SYSTEM_SELECTED = &h00000002
const STATE_SYSTEM_FOCUSED = &h00000004
const STATE_SYSTEM_PRESSED = &h00000008
const STATE_SYSTEM_CHECKED = &h00000010
const STATE_SYSTEM_MIXED = &h00000020
const STATE_SYSTEM_INDETERMINATE = STATE_SYSTEM_MIXED
const STATE_SYSTEM_READONLY = &h00000040
const STATE_SYSTEM_HOTTRACKED = &h00000080
const STATE_SYSTEM_DEFAULT = &h00000100
const STATE_SYSTEM_EXPANDED = &h00000200
const STATE_SYSTEM_COLLAPSED = &h00000400
const STATE_SYSTEM_BUSY = &h00000800
const STATE_SYSTEM_FLOATING = &h00001000
const STATE_SYSTEM_MARQUEED = &h00002000
const STATE_SYSTEM_ANIMATED = &h00004000
const STATE_SYSTEM_INVISIBLE = &h00008000
const STATE_SYSTEM_OFFSCREEN = &h00010000
const STATE_SYSTEM_SIZEABLE = &h00020000
const STATE_SYSTEM_MOVEABLE = &h00040000
const STATE_SYSTEM_SELFVOICING = &h00080000
const STATE_SYSTEM_FOCUSABLE = &h00100000
const STATE_SYSTEM_SELECTABLE = &h00200000
const STATE_SYSTEM_LINKED = &h00400000
const STATE_SYSTEM_TRAVERSED = &h00800000
const STATE_SYSTEM_MULTISELECTABLE = &h01000000
const STATE_SYSTEM_EXTSELECTABLE = &h02000000
const STATE_SYSTEM_ALERT_LOW = &h04000000
const STATE_SYSTEM_ALERT_MEDIUM = &h08000000
const STATE_SYSTEM_ALERT_HIGH = &h10000000
const STATE_SYSTEM_PROTECTED = &h20000000
const STATE_SYSTEM_VALID = &h3FFFFFFF
const CCHILDREN_TITLEBAR = 5
const CCHILDREN_SCROLLBAR = 5

type tagCURSORINFO
 cbSize as DWORD
 flags as DWORD
 hCursor as HCURSOR
 ptScreenPos as POINT
end type

type CURSORINFO as tagCURSORINFO
type PCURSORINFO as tagCURSORINFO ptr
type LPCURSORINFO as tagCURSORINFO ptr
const CURSOR_SHOWING = &h00000001


declare function GetCursorInfo(byval pci as PCURSORINFO) as WINBOOL

type tagWINDOWINFO
 cbSize as DWORD
 rcWindow as RECT
 rcClient as RECT
 dwStyle as DWORD
 dwExStyle as DWORD
 dwWindowStatus as DWORD
 cxWindowBorders as UINT
 cyWindowBorders as UINT
 atomWindowType as ATOM
 wCreatorVersion as WORD
end type

type WINDOWINFO as tagWINDOWINFO
type PWINDOWINFO as tagWINDOWINFO ptr
type LPWINDOWINFO as tagWINDOWINFO ptr
const WS_ACTIVECAPTION = &h0001
declare function GetWindowInfo(byval hwnd as HWND, byval pwi as PWINDOWINFO) as WINBOOL

type tagTITLEBARINFO
 cbSize as DWORD
 rcTitleBar as RECT
 rgstate(0 to (5 + 1) - 1) as DWORD
end type

type TITLEBARINFO as tagTITLEBARINFO
type PTITLEBARINFO as tagTITLEBARINFO ptr
type LPTITLEBARINFO as tagTITLEBARINFO ptr
declare function GetTitleBarInfo(byval hwnd as HWND, byval pti as PTITLEBARINFO) as WINBOOL


type tagMENUBARINFO
 cbSize as DWORD
 rcBar as RECT
 hMenu as HMENU
 hwndMenu as HWND
 fBarFocused : 1 as WINBOOL
 fFocused : 1 as WINBOOL
end type

type MENUBARINFO as tagMENUBARINFO
type PMENUBARINFO as tagMENUBARINFO ptr
type LPMENUBARINFO as tagMENUBARINFO ptr
declare function GetMenuBarInfo(byval hwnd as HWND, byval idObject as LONG, byval idItem as LONG, byval pmbi as PMENUBARINFO) as WINBOOL

type tagSCROLLBARINFO
 cbSize as DWORD
 rcScrollBar as RECT
 dxyLineButton as long
 xyThumbTop as long
 xyThumbBottom as long
 reserved as long
 rgstate(0 to (5 + 1) - 1) as DWORD
end type

type SCROLLBARINFO as tagSCROLLBARINFO
type PSCROLLBARINFO as tagSCROLLBARINFO ptr
type LPSCROLLBARINFO as tagSCROLLBARINFO ptr
declare function GetScrollBarInfo(byval hwnd as HWND, byval idObject as LONG, byval psbi as PSCROLLBARINFO) as WINBOOL

type tagCOMBOBOXINFO
 cbSize as DWORD
 rcItem as RECT
 rcButton as RECT
 stateButton as DWORD
 hwndCombo as HWND
 hwndItem as HWND
 hwndList as HWND
end type

type COMBOBOXINFO as tagCOMBOBOXINFO
type PCOMBOBOXINFO as tagCOMBOBOXINFO ptr
type LPCOMBOBOXINFO as tagCOMBOBOXINFO ptr
declare function GetComboBoxInfo(byval hwndCombo as HWND, byval pcbi as PCOMBOBOXINFO) as WINBOOL

const GA_PARENT = 1
const GA_ROOT = 2
const GA_ROOTOWNER = 3

declare function GetAncestor(byval hwnd as HWND, byval gaFlags as UINT) as HWND
declare function RealChildWindowFromPoint(byval hwndParent as HWND, byval ptParentClientCoords as POINT) as HWND
declare function RealGetWindowClassA(byval hwnd as HWND, byval ptszClassName as LPSTR, byval cchClassNameMax as UINT) as UINT

 declare function RealGetWindowClass alias "RealGetWindowClassA"(byval hwnd as HWND, byval ptszClassName as LPSTR, byval cchClassNameMax as UINT) as UINT

declare function RealGetWindowClassW(byval hwnd as HWND, byval ptszClassName as LPWSTR, byval cchClassNameMax as UINT) as UINT


type tagALTTABINFO
 cbSize as DWORD
 cItems as long
 cColumns as long
 cRows as long
 iColFocus as long
 iRowFocus as long
 cxItem as long
 cyItem as long
 ptStart as POINT
end type

type ALTTABINFO as tagALTTABINFO
type PALTTABINFO as tagALTTABINFO ptr
type LPALTTABINFO as tagALTTABINFO ptr
declare function GetAltTabInfoA(byval hwnd as HWND, byval iItem as long, byval pati as PALTTABINFO, byval pszItemText as LPSTR, byval cchItemText as UINT) as WINBOOL

 declare function GetAltTabInfo alias "GetAltTabInfoA"(byval hwnd as HWND, byval iItem as long, byval pati as PALTTABINFO, byval pszItemText as LPSTR, byval cchItemText as UINT) as WINBOOL

declare function GetAltTabInfoW(byval hwnd as HWND, byval iItem as long, byval pati as PALTTABINFO, byval pszItemText as LPWSTR, byval cchItemText as UINT) as WINBOOL


declare function GetListBoxInfo(byval hwnd as HWND) as DWORD
declare function LockWorkStation() as WINBOOL
declare function UserHandleGrantAccess(byval hUserHandle as HANDLE, byval hJob as HANDLE, byval bGrant as WINBOOL) as WINBOOL

type HRAWINPUT__
 unused as long
end type

type HRAWINPUT as HRAWINPUT__ ptr
const RIM_INPUT = 0
const RIM_INPUTSINK = 1

type tagRAWINPUTHEADER
 dwType as DWORD
 dwSize as DWORD
 hDevice as HANDLE
 wParam as WPARAM
end type

type RAWINPUTHEADER as tagRAWINPUTHEADER
type PRAWINPUTHEADER as tagRAWINPUTHEADER ptr
type LPRAWINPUTHEADER as tagRAWINPUTHEADER ptr

const RIM_TYPEMOUSE = 0
const RIM_TYPEKEYBOARD = 1
const RIM_TYPEHID = 2

type tagRAWMOUSE
 usFlags as USHORT

 union
 ulButtons as ULONG

 type
 usButtonFlags as USHORT
 usButtonData as USHORT
 end type
 end union

 ulRawButtons as ULONG
 lLastX as LONG
 lLastY as LONG
 ulExtraInformation as ULONG
end type

type RAWMOUSE as tagRAWMOUSE
type PRAWMOUSE as tagRAWMOUSE ptr
type LPRAWMOUSE as tagRAWMOUSE ptr

const RI_MOUSE_LEFT_BUTTON_DOWN = &h0001
const RI_MOUSE_LEFT_BUTTON_UP = &h0002
const RI_MOUSE_RIGHT_BUTTON_DOWN = &h0004
const RI_MOUSE_RIGHT_BUTTON_UP = &h0008
const RI_MOUSE_MIDDLE_BUTTON_DOWN = &h0010
const RI_MOUSE_MIDDLE_BUTTON_UP = &h0020
const RI_MOUSE_BUTTON_4_DOWN = &h0040
const RI_MOUSE_BUTTON_4_UP = &h0080
const RI_MOUSE_BUTTON_5_DOWN = &h0100
const RI_MOUSE_BUTTON_5_UP = &h0200
const RI_MOUSE_WHEEL = &h0400
const RI_MOUSE_BUTTON_1_DOWN = RI_MOUSE_LEFT_BUTTON_DOWN
const RI_MOUSE_BUTTON_1_UP = RI_MOUSE_LEFT_BUTTON_UP
const RI_MOUSE_BUTTON_2_DOWN = RI_MOUSE_RIGHT_BUTTON_DOWN
const RI_MOUSE_BUTTON_2_UP = RI_MOUSE_RIGHT_BUTTON_UP
const RI_MOUSE_BUTTON_3_DOWN = RI_MOUSE_MIDDLE_BUTTON_DOWN
const RI_MOUSE_BUTTON_3_UP = RI_MOUSE_MIDDLE_BUTTON_UP
const MOUSE_MOVE_RELATIVE = 0
const MOUSE_MOVE_ABSOLUTE = 1
const MOUSE_VIRTUAL_DESKTOP = &h02
const MOUSE_ATTRIBUTES_CHANGED = &h04


type tagRAWKEYBOARD
 MakeCode as USHORT
 Flags as USHORT
 Reserved as USHORT
 VKey as USHORT
 Message as UINT
 ExtraInformation as ULONG
end type

type RAWKEYBOARD as tagRAWKEYBOARD
type PRAWKEYBOARD as tagRAWKEYBOARD ptr
type LPRAWKEYBOARD as tagRAWKEYBOARD ptr

const KEYBOARD_OVERRUN_MAKE_CODE = &hFF
const RI_KEY_MAKE = 0
const RI_KEY_BREAK = 1
const RI_KEY_E0 = 2
const RI_KEY_E1 = 4
const RI_KEY_TERMSRV_SET_LED = 8
const RI_KEY_TERMSRV_SHADOW = &h10

type tagRAWHID
 dwSizeHid as DWORD
 dwCount as DWORD
 bRawData(0 to 0) as UBYTE
end type

type RAWHID as tagRAWHID
type PRAWHID as tagRAWHID ptr
type LPRAWHID as tagRAWHID ptr

union tagRAWINPUT_data
 mouse as RAWMOUSE
 keyboard as RAWKEYBOARD
 hid as RAWHID
end union

type tagRAWINPUT
 header as RAWINPUTHEADER
 data as tagRAWINPUT_data
end type

type RAWINPUT as tagRAWINPUT
type PRAWINPUT as tagRAWINPUT ptr
type LPRAWINPUT as tagRAWINPUT ptr


const RID_INPUT = &h10000003
const RID_HEADER = &h10000005
declare function GetRawInputData(byval hRawInput as HRAWINPUT, byval uiCommand as UINT, byval pData as LPVOID, byval pcbSize as PUINT, byval cbSizeHeader as UINT) as UINT
const RIDI_PREPARSEDDATA = &h20000005
const RIDI_DEVICENAME = &h20000007
const RIDI_DEVICEINFO = &h2000000b

type tagRID_DEVICE_INFO_MOUSE
 dwId as DWORD
 dwNumberOfButtons as DWORD
 dwSampleRate as DWORD
 fHasHorizontalWheel as WINBOOL
end type

type RID_DEVICE_INFO_MOUSE as tagRID_DEVICE_INFO_MOUSE
type PRID_DEVICE_INFO_MOUSE as tagRID_DEVICE_INFO_MOUSE ptr

type tagRID_DEVICE_INFO_KEYBOARD
 dwType as DWORD
 dwSubType as DWORD
 dwKeyboardMode as DWORD
 dwNumberOfFunctionKeys as DWORD
 dwNumberOfIndicators as DWORD
 dwNumberOfKeysTotal as DWORD
end type

type RID_DEVICE_INFO_KEYBOARD as tagRID_DEVICE_INFO_KEYBOARD
type PRID_DEVICE_INFO_KEYBOARD as tagRID_DEVICE_INFO_KEYBOARD ptr

type tagRID_DEVICE_INFO_HID
 dwVendorId as DWORD
 dwProductId as DWORD
 dwVersionNumber as DWORD
 usUsagePage as USHORT
 usUsage as USHORT
end type

type RID_DEVICE_INFO_HID as tagRID_DEVICE_INFO_HID
type PRID_DEVICE_INFO_HID as tagRID_DEVICE_INFO_HID ptr

type tagRID_DEVICE_INFO
 cbSize as DWORD
 dwType as DWORD

 union
 mouse as RID_DEVICE_INFO_MOUSE
 keyboard as RID_DEVICE_INFO_KEYBOARD
 hid as RID_DEVICE_INFO_HID
 end union
end type

type RID_DEVICE_INFO as tagRID_DEVICE_INFO
type PRID_DEVICE_INFO as tagRID_DEVICE_INFO ptr
type LPRID_DEVICE_INFO as tagRID_DEVICE_INFO ptr
declare function GetRawInputDeviceInfoA(byval hDevice as HANDLE, byval uiCommand as UINT, byval pData as LPVOID, byval pcbSize as PUINT) as UINT

 declare function GetRawInputDeviceInfo alias "GetRawInputDeviceInfoA"(byval hDevice as HANDLE, byval uiCommand as UINT, byval pData as LPVOID, byval pcbSize as PUINT) as UINT

declare function GetRawInputDeviceInfoW(byval hDevice as HANDLE, byval uiCommand as UINT, byval pData as LPVOID, byval pcbSize as PUINT) as UINT


declare function GetRawInputBuffer(byval pData as PRAWINPUT, byval pcbSize as PUINT, byval cbSizeHeader as UINT) as UINT

type tagRAWINPUTDEVICE
 usUsagePage as USHORT
 usUsage as USHORT
 dwFlags as DWORD
 hwndTarget as HWND
end type

type RAWINPUTDEVICE as tagRAWINPUTDEVICE
type PRAWINPUTDEVICE as tagRAWINPUTDEVICE ptr
type LPRAWINPUTDEVICE as tagRAWINPUTDEVICE ptr
type PCRAWINPUTDEVICE as const RAWINPUTDEVICE ptr

const RIDEV_REMOVE = &h00000001
const RIDEV_EXCLUDE = &h00000010
const RIDEV_PAGEONLY = &h00000020
const RIDEV_NOLEGACY = &h00000030
const RIDEV_INPUTSINK = &h00000100
const RIDEV_CAPTUREMOUSE = &h00000200
const RIDEV_NOHOTKEYS = &h00000200
const RIDEV_APPKEYS = &h00000400
const RIDEV_EXINPUTSINK = &h00001000
const RIDEV_DEVNOTIFY = &h00002000
const RIDEV_EXMODEMASK = &h000000F0
const GIDC_ARRIVAL = 1
const GIDC_REMOVAL = 2


type tagRAWINPUTDEVICELIST
 hDevice as HANDLE
 dwType as DWORD
end type

type RAWINPUTDEVICELIST as tagRAWINPUTDEVICELIST
type PRAWINPUTDEVICELIST as tagRAWINPUTDEVICELIST ptr
declare function RegisterRawInputDevices(byval pRawInputDevices as PCRAWINPUTDEVICE, byval uiNumDevices as UINT, byval cbSize as UINT) as WINBOOL
declare function GetRegisteredRawInputDevices(byval pRawInputDevices as PRAWINPUTDEVICE, byval puiNumDevices as PUINT, byval cbSize as UINT) as UINT
declare function GetRawInputDeviceList(byval pRawInputDeviceList as PRAWINPUTDEVICELIST, byval puiNumDevices as PUINT, byval cbSize as UINT) as UINT
declare function DefRawInputProc(byval paRawInput as PRAWINPUT ptr, byval nInput as INT_, byval cbSizeHeader as UINT) as LRESULT


const MAX_STR_BLOCKREASON = 256
declare function ShutdownBlockReasonCreate(byval hWnd as HWND, byval pwszReason as LPCWSTR) as WINBOOL
declare function ShutdownBlockReasonQuery(byval hWnd as HWND, byval pwszBuff as LPWSTR, byval pcchBuff as DWORD ptr) as WINBOOL
declare function ShutdownBlockReasonDestroy(byval hWnd as HWND) as WINBOOL


end extern



extern "Windows"

declare function GetTimeFormatEx(byval lpLocaleName as LPCWSTR, byval dwFlags as DWORD, byval lpTime as const SYSTEMTIME ptr, byval lpFormat as LPCWSTR, byval lpTimeStr as LPWSTR, byval cchTime as long) as long
declare function GetDateFormatEx(byval lpLocaleName as LPCWSTR, byval dwFlags as DWORD, byval lpDate as const SYSTEMTIME ptr, byval lpFormat as LPCWSTR, byval lpDateStr as LPWSTR, byval cchDate as long, byval lpCalendar as LPCWSTR) as long
declare function GetDateFormatA(byval Locale as LCID, byval dwFlags as DWORD, byval lpDate as const SYSTEMTIME ptr, byval lpFormat as LPCSTR, byval lpDateStr as LPSTR, byval cchDate as long) as long
declare function GetDateFormatW(byval Locale as LCID, byval dwFlags as DWORD, byval lpDate as const SYSTEMTIME ptr, byval lpFormat as LPCWSTR, byval lpDateStr as LPWSTR, byval cchDate as long) as long
declare function GetTimeFormatA(byval Locale as LCID, byval dwFlags as DWORD, byval lpTime as const SYSTEMTIME ptr, byval lpFormat as LPCSTR, byval lpTimeStr as LPSTR, byval cchTime as long) as long
declare function GetTimeFormatW(byval Locale as LCID, byval dwFlags as DWORD, byval lpTime as const SYSTEMTIME ptr, byval lpFormat as LPCWSTR, byval lpTimeStr as LPWSTR, byval cchTime as long) as long

 declare function GetDateFormat alias "GetDateFormatA"(byval Locale as LCID, byval dwFlags as DWORD, byval lpDate as const SYSTEMTIME ptr, byval lpFormat as LPCSTR, byval lpDateStr as LPSTR, byval cchDate as long) as long
 declare function GetTimeFormat alias "GetTimeFormatA"(byval Locale as LCID, byval dwFlags as DWORD, byval lpTime as const SYSTEMTIME ptr, byval lpFormat as LPCSTR, byval lpTimeStr as LPSTR, byval cchTime as long) as long

const MAX_LEADBYTES = 12
const MAX_DEFAULTCHAR = 2
const HIGH_SURROGATE_START = &hd800
const HIGH_SURROGATE_END = &hdbff
const LOW_SURROGATE_START = &hdc00
const LOW_SURROGATE_END = &hdfff
const MB_PRECOMPOSED = &h00000001
const MB_COMPOSITE = &h00000002
const MB_USEGLYPHCHARS = &h00000004
const MB_ERR_INVALID_CHARS = &h00000008
const WC_DISCARDNS = &h00000010
const WC_SEPCHARS = &h00000020
const WC_DEFAULTCHAR = &h00000040


const WC_COMPOSITECHECK = &h00000200
const WC_NO_BEST_FIT_CHARS = &h00000400
const CT_CTYPE1 = &h00000001
const CT_CTYPE2 = &h00000002
const CT_CTYPE3 = &h00000004
const C1_UPPER = &h0001
const C1_LOWER = &h0002
const C1_DIGIT = &h0004
const C1_SPACE = &h0008
const C1_PUNCT = &h0010
const C1_CNTRL = &h0020
const C1_BLANK = &h0040
const C1_XDIGIT = &h0080
const C1_ALPHA = &h0100
const C1_DEFINED = &h0200
const C2_LEFTTORIGHT = &h0001
const C2_RIGHTTOLEFT = &h0002
const C2_EUROPENUMBER = &h0003
const C2_EUROPESEPARATOR = &h0004
const C2_EUROPETERMINATOR = &h0005
const C2_ARABICNUMBER = &h0006
const C2_COMMONSEPARATOR = &h0007
const C2_BLOCKSEPARATOR = &h0008
const C2_SEGMENTSEPARATOR = &h0009
const C2_WHITESPACE = &h000a
const C2_OTHERNEUTRAL = &h000b
const C2_NOTAPPLICABLE = &h00000
const C3_NONSPACING = &h0001
const C3_DIACRITIC = &h0002
const C3_VOWELMARK = &h0004
const C3_SYMBOL = &h0008
const C3_KATAKANA = &h0010
const C3_HIRAGANA = &h0020
const C3_HALFWIDTH = &h0040
const C3_FULLWIDTH = &h0080
const C3_IDEOGRAPH = &h0100
const C3_KASHIDA = &h0200
const C3_LEXICAL = &h0400
const C3_HIGHSURROGATE = &h0800
const C3_LOWSURROGATE = &h1000
const C3_ALPHA = &h8000
const C3_NOTAPPLICABLE = &h00000
const NORM_IGNORECASE = &h00000001
const NORM_IGNORENONSPACE = &h00000002
const NORM_IGNORESYMBOLS = &h00000004
const LINGUISTIC_IGNORECASE = &h00000010
const LINGUISTIC_IGNOREDIACRITIC = &h00000020
const NORM_IGNOREKANATYPE = &h00010000
const NORM_IGNOREWIDTH = &h00020000
const NORM_LINGUISTIC_CASING = &h08000000
const MAP_FOLDCZONE = &h00000010
const MAP_PRECOMPOSED = &h00000020
const MAP_COMPOSITE = &h00000040
const MAP_FOLDDIGITS = &h00000080
const MAP_EXPAND_LIGATURES = &h00002000
const LCMAP_LOWERCASE = &h00000100
const LCMAP_UPPERCASE = &h00000200


const LCMAP_SORTKEY = &h00000400
const LCMAP_BYTEREV = &h00000800
const LCMAP_HIRAGANA = &h00100000
const LCMAP_KATAKANA = &h00200000
const LCMAP_HALFWIDTH = &h00400000
const LCMAP_FULLWIDTH = &h00800000
const LCMAP_LINGUISTIC_CASING = &h01000000
const LCMAP_SIMPLIFIED_CHINESE = &h02000000
const LCMAP_TRADITIONAL_CHINESE = &h04000000


const FIND_STARTSWITH = &h00100000
const FIND_ENDSWITH = &h00200000
const FIND_FROMSTART = &h00400000
const FIND_FROMEND = &h00800000
const LGRPID_INSTALLED = &h00000001
const LGRPID_SUPPORTED = &h00000002
const LCID_INSTALLED = &h00000001
const LCID_SUPPORTED = &h00000002
const LCID_ALTERNATE_SORTS = &h00000004


const CP_INSTALLED = &h00000001
const CP_SUPPORTED = &h00000002
const SORT_STRINGSORT = &h00001000


const CSTR_LESS_THAN = 1
const CSTR_EQUAL = 2
const CSTR_GREATER_THAN = 3
const CP_ACP = 0
const CP_OEMCP = 1
const CP_MACCP = 2
const CP_THREAD_ACP = 3
const CP_SYMBOL = 42
const CP_UTF7 = 65000
const CP_UTF8 = 65001
const CTRY_DEFAULT = 0
const CTRY_ALBANIA = 355
const CTRY_ALGERIA = 213
const CTRY_ARGENTINA = 54
const CTRY_ARMENIA = 374
const CTRY_AUSTRALIA = 61
const CTRY_AUSTRIA = 43
const CTRY_AZERBAIJAN = 994
const CTRY_BAHRAIN = 973
const CTRY_BELARUS = 375
const CTRY_BELGIUM = 32
const CTRY_BELIZE = 501
const CTRY_BOLIVIA = 591
const CTRY_BRAZIL = 55
const CTRY_BRUNEI_DARUSSALAM = 673
const CTRY_BULGARIA = 359
const CTRY_CANADA = 2
const CTRY_CARIBBEAN = 1
const CTRY_CHILE = 56
const CTRY_COLOMBIA = 57
const CTRY_COSTA_RICA = 506
const CTRY_CROATIA = 385
const CTRY_CZECH = 420
const CTRY_DENMARK = 45
const CTRY_DOMINICAN_REPUBLIC = 1
const CTRY_ECUADOR = 593
const CTRY_EGYPT = 20
const CTRY_EL_SALVADOR = 503
const CTRY_ESTONIA = 372
const CTRY_FAEROE_ISLANDS = 298
const CTRY_FINLAND = 358
const CTRY_FRANCE = 33
const CTRY_GEORGIA = 995
const CTRY_GERMANY = 49
const CTRY_GREECE = 30
const CTRY_GUATEMALA = 502
const CTRY_HONDURAS = 504
const CTRY_HONG_KONG = 852
const CTRY_HUNGARY = 36
const CTRY_ICELAND = 354
const CTRY_INDIA = 91
const CTRY_INDONESIA = 62
const CTRY_IRAN = 981
const CTRY_IRAQ = 964
const CTRY_IRELAND = 353
const CTRY_ISRAEL = 972
const CTRY_ITALY = 39
const CTRY_JAMAICA = 1
const CTRY_JAPAN = 81
const CTRY_JORDAN = 962
const CTRY_KAZAKSTAN = 7
const CTRY_KENYA = 254
const CTRY_KUWAIT = 965
const CTRY_KYRGYZSTAN = 996
const CTRY_LATVIA = 371
const CTRY_LEBANON = 961
const CTRY_LIBYA = 218
const CTRY_LIECHTENSTEIN = 41
const CTRY_LITHUANIA = 370
const CTRY_LUXEMBOURG = 352
const CTRY_MACAU = 853
const CTRY_MACEDONIA = 389
const CTRY_MALAYSIA = 60
const CTRY_MALDIVES = 960
const CTRY_MEXICO = 52
const CTRY_MONACO = 33
const CTRY_MONGOLIA = 976
const CTRY_MOROCCO = 212
const CTRY_NETHERLANDS = 31
const CTRY_NEW_ZEALAND = 64
const CTRY_NICARAGUA = 505
const CTRY_NORWAY = 47
const CTRY_OMAN = 968
const CTRY_PAKISTAN = 92
const CTRY_PANAMA = 507
const CTRY_PARAGUAY = 595
const CTRY_PERU = 51
const CTRY_PHILIPPINES = 63
const CTRY_POLAND = 48
const CTRY_PORTUGAL = 351
const CTRY_PRCHINA = 86
const CTRY_PUERTO_RICO = 1
const CTRY_QATAR = 974
const CTRY_ROMANIA = 40
const CTRY_RUSSIA = 7
const CTRY_SAUDI_ARABIA = 966
const CTRY_SERBIA = 381
const CTRY_SINGAPORE = 65
const CTRY_SLOVAK = 421
const CTRY_SLOVENIA = 386
const CTRY_SOUTH_AFRICA = 27
const CTRY_SOUTH_KOREA = 82
const CTRY_SPAIN = 34
const CTRY_SWEDEN = 46
const CTRY_SWITZERLAND = 41
const CTRY_SYRIA = 963
const CTRY_TAIWAN = 886
const CTRY_TATARSTAN = 7
const CTRY_THAILAND = 66
const CTRY_TRINIDAD_Y_TOBAGO = 1
const CTRY_TUNISIA = 216
const CTRY_TURKEY = 90
const CTRY_UAE = 971
const CTRY_UKRAINE = 380
const CTRY_UNITED_KINGDOM = 44
const CTRY_UNITED_STATES = 1
const CTRY_URUGUAY = 598
const CTRY_UZBEKISTAN = 7
const CTRY_VENEZUELA = 58
const CTRY_VIET_NAM = 84
const CTRY_YEMEN = 967
const CTRY_ZIMBABWE = 263
const LOCALE_SLOCALIZEDDISPLAYNAME = &h00000002


const LOCALE_RETURN_NUMBER = &h20000000
const LOCALE_USE_CP_ACP = &h40000000
const LOCALE_NOUSEROVERRIDE = &h80000000


const LOCALE_SENGLISHLANGUAGENAME = &h00001001
const LOCALE_SNATIVELANGUAGENAME = &h00000004
const LOCALE_SLOCALIZEDCOUNTRYNAME = &h00000006
const LOCALE_SENGLISHCOUNTRYNAME = &h00001002
const LOCALE_SNATIVECOUNTRYNAME = &h00000008
const LOCALE_SLANGUAGE = &h00000002


const LOCALE_SENGLANGUAGE = &h00001001
const LOCALE_SNATIVELANGNAME = &h00000004
const LOCALE_SCOUNTRY = &h00000006
const LOCALE_SENGCOUNTRY = &h00001002
const LOCALE_SNATIVECTRYNAME = &h00000008
const LOCALE_ILANGUAGE = &h00000001
const LOCALE_SABBREVLANGNAME = &h00000003
const LOCALE_ICOUNTRY = &h00000005
const LOCALE_SABBREVCTRYNAME = &h00000007
const LOCALE_IGEOID = &h0000005b
const LOCALE_IDEFAULTLANGUAGE = &h00000009
const LOCALE_IDEFAULTCOUNTRY = &h0000000a
const LOCALE_IDEFAULTCODEPAGE = &h0000000b
const LOCALE_IDEFAULTANSICODEPAGE = &h00001004
const LOCALE_IDEFAULTMACCODEPAGE = &h00001011
const LOCALE_SLIST = &h0000000c
const LOCALE_IMEASURE = &h0000000d
const LOCALE_SDECIMAL = &h0000000e
const LOCALE_STHOUSAND = &h0000000f
const LOCALE_SGROUPING = &h00000010
const LOCALE_IDIGITS = &h00000011
const LOCALE_ILZERO = &h00000012
const LOCALE_INEGNUMBER = &h00001010
const LOCALE_SNATIVEDIGITS = &h00000013
const LOCALE_SCURRENCY = &h00000014
const LOCALE_SINTLSYMBOL = &h00000015
const LOCALE_SMONDECIMALSEP = &h00000016
const LOCALE_SMONTHOUSANDSEP = &h00000017
const LOCALE_SMONGROUPING = &h00000018
const LOCALE_ICURRDIGITS = &h00000019
const LOCALE_IINTLCURRDIGITS = &h0000001a
const LOCALE_ICURRENCY = &h0000001b
const LOCALE_INEGCURR = &h0000001c
const LOCALE_SDATE = &h0000001d
const LOCALE_STIME = &h0000001e
const LOCALE_SSHORTDATE = &h0000001f
const LOCALE_SLONGDATE = &h00000020
const LOCALE_STIMEFORMAT = &h00001003
const LOCALE_IDATE = &h00000021
const LOCALE_ILDATE = &h00000022
const LOCALE_ITIME = &h00000023
const LOCALE_ITIMEMARKPOSN = &h00001005
const LOCALE_ICENTURY = &h00000024
const LOCALE_ITLZERO = &h00000025
const LOCALE_IDAYLZERO = &h00000026
const LOCALE_IMONLZERO = &h00000027
const LOCALE_S1159 = &h00000028
const LOCALE_S2359 = &h00000029
const LOCALE_ICALENDARTYPE = &h00001009
const LOCALE_IOPTIONALCALENDAR = &h0000100b
const LOCALE_IFIRSTDAYOFWEEK = &h0000100c
const LOCALE_IFIRSTWEEKOFYEAR = &h0000100d
const LOCALE_SDAYNAME1 = &h0000002a
const LOCALE_SDAYNAME2 = &h0000002b
const LOCALE_SDAYNAME3 = &h0000002c
const LOCALE_SDAYNAME4 = &h0000002d
const LOCALE_SDAYNAME5 = &h0000002e
const LOCALE_SDAYNAME6 = &h0000002f
const LOCALE_SDAYNAME7 = &h00000030
const LOCALE_SABBREVDAYNAME1 = &h00000031
const LOCALE_SABBREVDAYNAME2 = &h00000032
const LOCALE_SABBREVDAYNAME3 = &h00000033
const LOCALE_SABBREVDAYNAME4 = &h00000034
const LOCALE_SABBREVDAYNAME5 = &h00000035
const LOCALE_SABBREVDAYNAME6 = &h00000036
const LOCALE_SABBREVDAYNAME7 = &h00000037
const LOCALE_SMONTHNAME1 = &h00000038
const LOCALE_SMONTHNAME2 = &h00000039
const LOCALE_SMONTHNAME3 = &h0000003a
const LOCALE_SMONTHNAME4 = &h0000003b
const LOCALE_SMONTHNAME5 = &h0000003c
const LOCALE_SMONTHNAME6 = &h0000003d
const LOCALE_SMONTHNAME7 = &h0000003e
const LOCALE_SMONTHNAME8 = &h0000003f
const LOCALE_SMONTHNAME9 = &h00000040
const LOCALE_SMONTHNAME10 = &h00000041
const LOCALE_SMONTHNAME11 = &h00000042
const LOCALE_SMONTHNAME12 = &h00000043
const LOCALE_SMONTHNAME13 = &h0000100e
const LOCALE_SABBREVMONTHNAME1 = &h00000044
const LOCALE_SABBREVMONTHNAME2 = &h00000045
const LOCALE_SABBREVMONTHNAME3 = &h00000046
const LOCALE_SABBREVMONTHNAME4 = &h00000047
const LOCALE_SABBREVMONTHNAME5 = &h00000048
const LOCALE_SABBREVMONTHNAME6 = &h00000049
const LOCALE_SABBREVMONTHNAME7 = &h0000004a
const LOCALE_SABBREVMONTHNAME8 = &h0000004b
const LOCALE_SABBREVMONTHNAME9 = &h0000004c
const LOCALE_SABBREVMONTHNAME10 = &h0000004d
const LOCALE_SABBREVMONTHNAME11 = &h0000004e
const LOCALE_SABBREVMONTHNAME12 = &h0000004f
const LOCALE_SABBREVMONTHNAME13 = &h0000100f
const LOCALE_SPOSITIVESIGN = &h00000050
const LOCALE_SNEGATIVESIGN = &h00000051
const LOCALE_IPOSSIGNPOSN = &h00000052
const LOCALE_INEGSIGNPOSN = &h00000053
const LOCALE_IPOSSYMPRECEDES = &h00000054
const LOCALE_IPOSSEPBYSPACE = &h00000055
const LOCALE_INEGSYMPRECEDES = &h00000056
const LOCALE_INEGSEPBYSPACE = &h00000057
const LOCALE_FONTSIGNATURE = &h00000058
const LOCALE_SISO639LANGNAME = &h00000059
const LOCALE_SISO3166CTRYNAME = &h0000005a
const LOCALE_IDEFAULTEBCDICCODEPAGE = &h00001012
const LOCALE_IPAPERSIZE = &h0000100a
const LOCALE_SENGCURRNAME = &h00001007
const LOCALE_SNATIVECURRNAME = &h00001008
const LOCALE_SYEARMONTH = &h00001006
const LOCALE_SSORTNAME = &h00001013
const LOCALE_IDIGITSUBSTITUTION = &h00001014


const TIME_NOMINUTESORSECONDS = &h00000001
const TIME_NOSECONDS = &h00000002
const TIME_NOTIMEMARKER = &h00000004
const TIME_FORCE24HOURFORMAT = &h00000008
const DATE_SHORTDATE = &h00000001
const DATE_LONGDATE = &h00000002
const DATE_USE_ALT_CALENDAR = &h00000004
const DATE_YEARMONTH = &h00000008
const DATE_LTRREADING = &h00000010
const DATE_RTLREADING = &h00000020


const CAL_NOUSEROVERRIDE = LOCALE_NOUSEROVERRIDE
const CAL_USE_CP_ACP = LOCALE_USE_CP_ACP
const CAL_RETURN_NUMBER = LOCALE_RETURN_NUMBER


const CAL_ICALINTVALUE = &h00000001
const CAL_SCALNAME = &h00000002
const CAL_IYEAROFFSETRANGE = &h00000003
const CAL_SERASTRING = &h00000004
const CAL_SSHORTDATE = &h00000005
const CAL_SLONGDATE = &h00000006
const CAL_SDAYNAME1 = &h00000007
const CAL_SDAYNAME2 = &h00000008
const CAL_SDAYNAME3 = &h00000009
const CAL_SDAYNAME4 = &h0000000a
const CAL_SDAYNAME5 = &h0000000b
const CAL_SDAYNAME6 = &h0000000c
const CAL_SDAYNAME7 = &h0000000d
const CAL_SABBREVDAYNAME1 = &h0000000e
const CAL_SABBREVDAYNAME2 = &h0000000f
const CAL_SABBREVDAYNAME3 = &h00000010
const CAL_SABBREVDAYNAME4 = &h00000011
const CAL_SABBREVDAYNAME5 = &h00000012
const CAL_SABBREVDAYNAME6 = &h00000013
const CAL_SABBREVDAYNAME7 = &h00000014
const CAL_SMONTHNAME1 = &h00000015
const CAL_SMONTHNAME2 = &h00000016
const CAL_SMONTHNAME3 = &h00000017
const CAL_SMONTHNAME4 = &h00000018
const CAL_SMONTHNAME5 = &h00000019
const CAL_SMONTHNAME6 = &h0000001a
const CAL_SMONTHNAME7 = &h0000001b
const CAL_SMONTHNAME8 = &h0000001c
const CAL_SMONTHNAME9 = &h0000001d
const CAL_SMONTHNAME10 = &h0000001e
const CAL_SMONTHNAME11 = &h0000001f
const CAL_SMONTHNAME12 = &h00000020
const CAL_SMONTHNAME13 = &h00000021
const CAL_SABBREVMONTHNAME1 = &h00000022
const CAL_SABBREVMONTHNAME2 = &h00000023
const CAL_SABBREVMONTHNAME3 = &h00000024
const CAL_SABBREVMONTHNAME4 = &h00000025
const CAL_SABBREVMONTHNAME5 = &h00000026
const CAL_SABBREVMONTHNAME6 = &h00000027
const CAL_SABBREVMONTHNAME7 = &h00000028
const CAL_SABBREVMONTHNAME8 = &h00000029
const CAL_SABBREVMONTHNAME9 = &h0000002a
const CAL_SABBREVMONTHNAME10 = &h0000002b
const CAL_SABBREVMONTHNAME11 = &h0000002c
const CAL_SABBREVMONTHNAME12 = &h0000002d
const CAL_SABBREVMONTHNAME13 = &h0000002e
const CAL_SYEARMONTH = &h0000002f
const CAL_ITWODIGITYEARMAX = &h00000030


const ENUM_ALL_CALENDARS = &hffffffff
const CAL_GREGORIAN = 1
const CAL_GREGORIAN_US = 2
const CAL_JAPAN = 3
const CAL_TAIWAN = 4
const CAL_KOREA = 5
const CAL_HIJRI = 6
const CAL_THAI = 7
const CAL_HEBREW = 8
const CAL_GREGORIAN_ME_FRENCH = 9
const CAL_GREGORIAN_ARABIC = 10
const CAL_GREGORIAN_XLIT_ENGLISH = 11
const CAL_GREGORIAN_XLIT_FRENCH = 12
const CAL_UMALQURA = 23
const LGRPID_WESTERN_EUROPE = &h0001
const LGRPID_CENTRAL_EUROPE = &h0002
const LGRPID_BALTIC = &h0003
const LGRPID_GREEK = &h0004
const LGRPID_CYRILLIC = &h0005
const LGRPID_TURKIC = &h0006
const LGRPID_TURKISH = &h0006
const LGRPID_JAPANESE = &h0007
const LGRPID_KOREAN = &h0008
const LGRPID_TRADITIONAL_CHINESE = &h0009
const LGRPID_SIMPLIFIED_CHINESE = &h000a
const LGRPID_THAI = &h000b
const LGRPID_HEBREW = &h000c
const LGRPID_ARABIC = &h000d
const LGRPID_VIETNAMESE = &h000e
const LGRPID_INDIC = &h000f
const LGRPID_GEORGIAN = &h0010
const LGRPID_ARMENIAN = &h0011


type LGRPID as DWORD
type LCTYPE as DWORD
type CALTYPE as DWORD
type CALID as DWORD

type _cpinfo
 MaxCharSize as UINT
 DefaultChar(0 to 1) as UBYTE
 LeadByte(0 to 11) as UBYTE
end type

type CPINFO as _cpinfo
type LPCPINFO as _cpinfo ptr

type _cpinfoexA
 MaxCharSize as UINT
 DefaultChar(0 to 1) as UBYTE
 LeadByte(0 to 11) as UBYTE
 UnicodeDefaultChar as WCHAR
 CodePage as UINT
 CodePageName as zstring * 260
end type

type CPINFOEXA as _cpinfoexA
type LPCPINFOEXA as _cpinfoexA ptr

type _cpinfoexW
 MaxCharSize as UINT
 DefaultChar(0 to 1) as UBYTE
 LeadByte(0 to 11) as UBYTE
 UnicodeDefaultChar as WCHAR
 CodePage as UINT
 CodePageName as wstring * 260
end type

type CPINFOEXW as _cpinfoexW
type LPCPINFOEXW as _cpinfoexW ptr

 type CPINFOEX as CPINFOEXA
 type LPCPINFOEX as LPCPINFOEXA

type _numberfmtA
 NumDigits as UINT
 LeadingZero as UINT
 Grouping as UINT
 lpDecimalSep as LPSTR
 lpThousandSep as LPSTR
 NegativeOrder as UINT
end type

type NUMBERFMTA as _numberfmtA
type LPNUMBERFMTA as _numberfmtA ptr

type _numberfmtW
 NumDigits as UINT
 LeadingZero as UINT
 Grouping as UINT
 lpDecimalSep as LPWSTR
 lpThousandSep as LPWSTR
 NegativeOrder as UINT
end type

type NUMBERFMTW as _numberfmtW
type LPNUMBERFMTW as _numberfmtW ptr

 type NUMBERFMT as NUMBERFMTA
 type LPNUMBERFMT as LPNUMBERFMTA

type _currencyfmtA
 NumDigits as UINT
 LeadingZero as UINT
 Grouping as UINT
 lpDecimalSep as LPSTR
 lpThousandSep as LPSTR
 NegativeOrder as UINT
 PositiveOrder as UINT
 lpCurrencySymbol as LPSTR
end type

type CURRENCYFMTA as _currencyfmtA
type LPCURRENCYFMTA as _currencyfmtA ptr

type _currencyfmtW
 NumDigits as UINT
 LeadingZero as UINT
 Grouping as UINT
 lpDecimalSep as LPWSTR
 lpThousandSep as LPWSTR
 NegativeOrder as UINT
 PositiveOrder as UINT
 lpCurrencySymbol as LPWSTR
end type

type CURRENCYFMTW as _currencyfmtW
type LPCURRENCYFMTW as _currencyfmtW ptr

 type CURRENCYFMT as CURRENCYFMTA
 type LPCURRENCYFMT as LPCURRENCYFMTA

type SYSNLS_FUNCTION as long
enum
 COMPARE_STRING = &h1
end enum

type NLS_FUNCTION as DWORD

type _nlsversioninfo
 dwNLSVersionInfoSize as DWORD
 dwNLSVersion as DWORD
 dwDefinedVersion as DWORD

end type

type NLSVERSIONINFO as _nlsversioninfo
type LPNLSVERSIONINFO as _nlsversioninfo ptr

type _nlsversioninfoex
 dwNLSVersionInfoSize as DWORD
 dwNLSVersion as DWORD
 dwDefinedVersion as DWORD
 dwEffectiveId as DWORD
 guidCustomVersion as GUID
end type

type NLSVERSIONINFOEX as _nlsversioninfoex
type LPNLSVERSIONINFOEX as _nlsversioninfoex ptr
type GEOID as LONG
type GEOTYPE as DWORD
type GEOCLASS as DWORD
const GEOID_NOT_AVAILABLE = -1

type SYSGEOTYPE as long
enum
 GEO_NATION = &h0001
 GEO_LATITUDE = &h0002
 GEO_LONGITUDE = &h0003
 GEO_ISO2 = &h0004
 GEO_ISO3 = &h0005
 GEO_RFC1766 = &h0006
 GEO_LCID = &h0007
 GEO_FRIENDLYNAME = &h0008
 GEO_OFFICIALNAME = &h0009
 GEO_TIMEZONES = &h000a
 GEO_OFFICIALLANGUAGES = &h000b
 GEO_ISO_UN_NUMBER = &h000c
 GEO_PARENT = &h000d
end enum

type SYSGEOCLASS as long
enum
 GEOCLASS_NATION = 16
 GEOCLASS_REGION = 14
 GEOCLASS_ALL = 0
end enum


type LANGUAGEGROUP_ENUMPROCA as function(byval as LGRPID, byval as LPSTR, byval as LPSTR, byval as DWORD, byval as LONG_PTR) as WINBOOL
type LANGGROUPLOCALE_ENUMPROCA as function(byval as LGRPID, byval as LCID, byval as LPSTR, byval as LONG_PTR) as WINBOOL
type UILANGUAGE_ENUMPROCA as function(byval as LPSTR, byval as LONG_PTR) as WINBOOL
type CODEPAGE_ENUMPROCA as function(byval as LPSTR) as WINBOOL
type DATEFMT_ENUMPROCA as function(byval as LPSTR) as WINBOOL
type DATEFMT_ENUMPROCEXA as function(byval as LPSTR, byval as CALID) as WINBOOL
type TIMEFMT_ENUMPROCA as function(byval as LPSTR) as WINBOOL
type CALINFO_ENUMPROCA as function(byval as LPSTR) as WINBOOL
type CALINFO_ENUMPROCEXA as function(byval as LPSTR, byval as CALID) as WINBOOL
type LOCALE_ENUMPROCA as function(byval as LPSTR) as WINBOOL
type LOCALE_ENUMPROCW as function(byval as LPWSTR) as WINBOOL
type LANGUAGEGROUP_ENUMPROCW as function(byval as LGRPID, byval as LPWSTR, byval as LPWSTR, byval as DWORD, byval as LONG_PTR) as WINBOOL
type LANGGROUPLOCALE_ENUMPROCW as function(byval as LGRPID, byval as LCID, byval as LPWSTR, byval as LONG_PTR) as WINBOOL
type UILANGUAGE_ENUMPROCW as function(byval as LPWSTR, byval as LONG_PTR) as WINBOOL
type CODEPAGE_ENUMPROCW as function(byval as LPWSTR) as WINBOOL
type DATEFMT_ENUMPROCW as function(byval as LPWSTR) as WINBOOL
type DATEFMT_ENUMPROCEXW as function(byval as LPWSTR, byval as CALID) as WINBOOL
type TIMEFMT_ENUMPROCW as function(byval as LPWSTR) as WINBOOL
type CALINFO_ENUMPROCW as function(byval as LPWSTR) as WINBOOL
type CALINFO_ENUMPROCEXW as function(byval as LPWSTR, byval as CALID) as WINBOOL
type GEO_ENUMPROC as function(byval as GEOID) as WINBOOL

 type LANGUAGEGROUP_ENUMPROC as LANGUAGEGROUP_ENUMPROCA
 type LANGGROUPLOCALE_ENUMPROC as LANGGROUPLOCALE_ENUMPROCA
 type UILANGUAGE_ENUMPROC as UILANGUAGE_ENUMPROCA
 type CODEPAGE_ENUMPROC as CODEPAGE_ENUMPROCA
 type DATEFMT_ENUMPROC as DATEFMT_ENUMPROCA
 type DATEFMT_ENUMPROCEX as DATEFMT_ENUMPROCEXA
 type TIMEFMT_ENUMPROC as TIMEFMT_ENUMPROCA
 type CALINFO_ENUMPROC as CALINFO_ENUMPROCA
 type CALINFO_ENUMPROCEX as CALINFO_ENUMPROCEXA
 type LOCALE_ENUMPROC as LOCALE_ENUMPROCA

type _FILEMUIINFO
 dwSize as DWORD
 dwVersion as DWORD
 dwFileType as DWORD
 pChecksum(0 to 15) as UBYTE
 pServiceChecksum(0 to 15) as UBYTE
 dwLanguageNameOffset as DWORD
 dwTypeIDMainSize as DWORD
 dwTypeIDMainOffset as DWORD
 dwTypeNameMainOffset as DWORD
 dwTypeIDMUISize as DWORD
 dwTypeIDMUIOffset as DWORD
 dwTypeNameMUIOffset as DWORD
 abBuffer(0 to 7) as UBYTE
end type

type FILEMUIINFO as _FILEMUIINFO
type PFILEMUIINFO as _FILEMUIINFO ptr
declare function CompareStringW(byval Locale as LCID, byval dwCmpFlags as DWORD, byval lpString1 as PCNZWCH, byval cchCount1 as long, byval lpString2 as PCNZWCH, byval cchCount2 as long) as long
declare function FoldStringW(byval dwMapFlags as DWORD, byval lpSrcStr as LPCWCH, byval cchSrc as long, byval lpDestStr as LPWSTR, byval cchDest as long) as long


declare function GetStringTypeExW(byval Locale as LCID, byval dwInfoType as DWORD, byval lpSrcStr as LPCWCH, byval cchSrc as long, byval lpCharType as LPWORD) as WINBOOL



declare function GetStringTypeW(byval dwInfoType as DWORD, byval lpSrcStr as LPCWCH, byval cchSrc as long, byval lpCharType as LPWORD) as WINBOOL
declare function MultiByteToWideChar(byval CodePage as UINT, byval dwFlags as DWORD, byval lpMultiByteStr as LPCCH, byval cbMultiByte as long, byval lpWideCharStr as LPWSTR, byval cchWideChar as long) as long
declare function WideCharToMultiByte(byval CodePage as UINT, byval dwFlags as DWORD, byval lpWideCharStr as LPCWCH, byval cchWideChar as long, byval lpMultiByteStr as LPSTR, byval cbMultiByte as long, byval lpDefaultChar as LPCCH, byval lpUsedDefaultChar as LPBOOL) as long


declare function IsValidCodePage(byval CodePage as UINT) as WINBOOL
declare function GetACP() as UINT
declare function GetOEMCP() as UINT
declare function CompareStringA(byval Locale as LCID, byval dwCmpFlags as DWORD, byval lpString1 as PCNZCH, byval cchCount1 as long, byval lpString2 as PCNZCH, byval cchCount2 as long) as long
declare function LCMapStringW(byval Locale as LCID, byval dwMapFlags as DWORD, byval lpSrcStr as LPCWSTR, byval cchSrc as long, byval lpDestStr as LPWSTR, byval cchDest as long) as long
declare function LCMapStringA(byval Locale as LCID, byval dwMapFlags as DWORD, byval lpSrcStr as LPCSTR, byval cchSrc as long, byval lpDestStr as LPSTR, byval cchDest as long) as long
declare function GetLocaleInfoW(byval Locale as LCID, byval LCType as LCTYPE, byval lpLCData as LPWSTR, byval cchData as long) as long
declare function GetLocaleInfoA(byval Locale as LCID, byval LCType as LCTYPE, byval lpLCData as LPSTR, byval cchData as long) as long
declare function IsDBCSLeadByte(byval TestChar as UBYTE) as WINBOOL
declare function IsDBCSLeadByteEx(byval CodePage as UINT, byval TestChar as UBYTE) as WINBOOL
declare function GetNumberFormatA(byval Locale as LCID, byval dwFlags as DWORD, byval lpValue as LPCSTR, byval lpFormat as const NUMBERFMTA ptr, byval lpNumberStr as LPSTR, byval cchNumber as long) as long
declare function GetNumberFormatW(byval Locale as LCID, byval dwFlags as DWORD, byval lpValue as LPCWSTR, byval lpFormat as const NUMBERFMTW ptr, byval lpNumberStr as LPWSTR, byval cchNumber as long) as long
declare function GetCurrencyFormatA(byval Locale as LCID, byval dwFlags as DWORD, byval lpValue as LPCSTR, byval lpFormat as const CURRENCYFMTA ptr, byval lpCurrencyStr as LPSTR, byval cchCurrency as long) as long
declare function GetCurrencyFormatW(byval Locale as LCID, byval dwFlags as DWORD, byval lpValue as LPCWSTR, byval lpFormat as const CURRENCYFMTW ptr, byval lpCurrencyStr as LPWSTR, byval cchCurrency as long) as long
declare function EnumCalendarInfoA(byval lpCalInfoEnumProc as CALINFO_ENUMPROCA, byval Locale as LCID, byval Calendar as CALID, byval CalType as CALTYPE) as WINBOOL
declare function EnumCalendarInfoW(byval lpCalInfoEnumProc as CALINFO_ENUMPROCW, byval Locale as LCID, byval Calendar as CALID, byval CalType as CALTYPE) as WINBOOL
declare function EnumCalendarInfoExA(byval lpCalInfoEnumProcEx as CALINFO_ENUMPROCEXA, byval Locale as LCID, byval Calendar as CALID, byval CalType as CALTYPE) as WINBOOL
declare function EnumCalendarInfoExW(byval lpCalInfoEnumProcEx as CALINFO_ENUMPROCEXW, byval Locale as LCID, byval Calendar as CALID, byval CalType as CALTYPE) as WINBOOL
declare function EnumTimeFormatsA(byval lpTimeFmtEnumProc as TIMEFMT_ENUMPROCA, byval Locale as LCID, byval dwFlags as DWORD) as WINBOOL
declare function EnumTimeFormatsW(byval lpTimeFmtEnumProc as TIMEFMT_ENUMPROCW, byval Locale as LCID, byval dwFlags as DWORD) as WINBOOL
declare function EnumDateFormatsA(byval lpDateFmtEnumProc as DATEFMT_ENUMPROCA, byval Locale as LCID, byval dwFlags as DWORD) as WINBOOL
declare function EnumDateFormatsW(byval lpDateFmtEnumProc as DATEFMT_ENUMPROCW, byval Locale as LCID, byval dwFlags as DWORD) as WINBOOL
declare function EnumDateFormatsExA(byval lpDateFmtEnumProcEx as DATEFMT_ENUMPROCEXA, byval Locale as LCID, byval dwFlags as DWORD) as WINBOOL
declare function EnumDateFormatsExW(byval lpDateFmtEnumProcEx as DATEFMT_ENUMPROCEXW, byval Locale as LCID, byval dwFlags as DWORD) as WINBOOL
declare function IsValidLanguageGroup(byval LanguageGroup as LGRPID, byval dwFlags as DWORD) as WINBOOL
declare function GetNLSVersion(byval Function as NLS_FUNCTION, byval Locale as LCID, byval lpVersionInformation as LPNLSVERSIONINFO) as WINBOOL
declare function IsNLSDefinedString(byval Function as NLS_FUNCTION, byval dwFlags as DWORD, byval lpVersionInformation as LPNLSVERSIONINFO, byval lpString as LPCWSTR, byval cchStr as INT_) as WINBOOL
declare function IsValidLocale(byval Locale as LCID, byval dwFlags as DWORD) as WINBOOL
declare function SetLocaleInfoA(byval Locale as LCID, byval LCType as LCTYPE, byval lpLCData as LPCSTR) as WINBOOL
declare function SetLocaleInfoW(byval Locale as LCID, byval LCType as LCTYPE, byval lpLCData as LPCWSTR) as WINBOOL
declare function GetCalendarInfoA(byval Locale as LCID, byval Calendar as CALID, byval CalType as CALTYPE, byval lpCalData as LPSTR, byval cchData as long, byval lpValue as LPDWORD) as long
declare function GetCalendarInfoW(byval Locale as LCID, byval Calendar as CALID, byval CalType as CALTYPE, byval lpCalData as LPWSTR, byval cchData as long, byval lpValue as LPDWORD) as long
declare function SetCalendarInfoA(byval Locale as LCID, byval Calendar as CALID, byval CalType as CALTYPE, byval lpCalData as LPCSTR) as WINBOOL
declare function SetCalendarInfoW(byval Locale as LCID, byval Calendar as CALID, byval CalType as CALTYPE, byval lpCalData as LPCWSTR) as WINBOOL




 declare function SetLocaleInfo alias "SetLocaleInfoA"(byval Locale as LCID, byval LCType as LCTYPE, byval lpLCData as LPCSTR) as WINBOOL
 declare function GetCalendarInfo alias "GetCalendarInfoA"(byval Locale as LCID, byval Calendar as CALID, byval CalType as CALTYPE, byval lpCalData as LPSTR, byval cchData as long, byval lpValue as LPDWORD) as long
 declare function SetCalendarInfo alias "SetCalendarInfoA"(byval Locale as LCID, byval Calendar as CALID, byval CalType as CALTYPE, byval lpCalData as LPCSTR) as WINBOOL

 declare function CompareString alias "CompareStringA"(byval Locale as LCID, byval dwCmpFlags as DWORD, byval lpString1 as PCNZCH, byval cchCount1 as long, byval lpString2 as PCNZCH, byval cchCount2 as long) as long
 declare function LCMapString alias "LCMapStringA"(byval Locale as LCID, byval dwMapFlags as DWORD, byval lpSrcStr as LPCSTR, byval cchSrc as long, byval lpDestStr as LPSTR, byval cchDest as long) as long
 declare function GetLocaleInfo alias "GetLocaleInfoA"(byval Locale as LCID, byval LCType as LCTYPE, byval lpLCData as LPSTR, byval cchData as long) as long
 declare function GetNumberFormat alias "GetNumberFormatA"(byval Locale as LCID, byval dwFlags as DWORD, byval lpValue as LPCSTR, byval lpFormat as const NUMBERFMTA ptr, byval lpNumberStr as LPSTR, byval cchNumber as long) as long
 declare function GetCurrencyFormat alias "GetCurrencyFormatA"(byval Locale as LCID, byval dwFlags as DWORD, byval lpValue as LPCSTR, byval lpFormat as const CURRENCYFMTA ptr, byval lpCurrencyStr as LPSTR, byval cchCurrency as long) as long
 declare function EnumCalendarInfo alias "EnumCalendarInfoA"(byval lpCalInfoEnumProc as CALINFO_ENUMPROCA, byval Locale as LCID, byval Calendar as CALID, byval CalType as CALTYPE) as WINBOOL
 declare function EnumCalendarInfoEx alias "EnumCalendarInfoExA"(byval lpCalInfoEnumProcEx as CALINFO_ENUMPROCEXA, byval Locale as LCID, byval Calendar as CALID, byval CalType as CALTYPE) as WINBOOL
 declare function EnumTimeFormats alias "EnumTimeFormatsA"(byval lpTimeFmtEnumProc as TIMEFMT_ENUMPROCA, byval Locale as LCID, byval dwFlags as DWORD) as WINBOOL
 declare function EnumDateFormats alias "EnumDateFormatsA"(byval lpDateFmtEnumProc as DATEFMT_ENUMPROCA, byval Locale as LCID, byval dwFlags as DWORD) as WINBOOL
 declare function EnumDateFormatsEx alias "EnumDateFormatsExA"(byval lpDateFmtEnumProcEx as DATEFMT_ENUMPROCEXA, byval Locale as LCID, byval dwFlags as DWORD) as WINBOOL

declare function GetGeoInfoA(byval Location as GEOID, byval GeoType as GEOTYPE, byval lpGeoData as LPSTR, byval cchData as long, byval LangId as LANGID) as long
declare function GetGeoInfoW(byval Location as GEOID, byval GeoType as GEOTYPE, byval lpGeoData as LPWSTR, byval cchData as long, byval LangId as LANGID) as long
declare function EnumSystemGeoID(byval GeoClass as GEOCLASS, byval ParentGeoId as GEOID, byval lpGeoEnumProc as GEO_ENUMPROC) as WINBOOL
declare function GetUserGeoID(byval GeoClass as GEOCLASS) as GEOID
declare function GetCPInfo(byval CodePage as UINT, byval lpCPInfo as LPCPINFO) as WINBOOL
declare function GetCPInfoExA(byval CodePage as UINT, byval dwFlags as DWORD, byval lpCPInfoEx as LPCPINFOEXA) as WINBOOL
declare function GetCPInfoExW(byval CodePage as UINT, byval dwFlags as DWORD, byval lpCPInfoEx as LPCPINFOEXW) as WINBOOL


 declare function GetGeoInfo alias "GetGeoInfoA"(byval Location as GEOID, byval GeoType as GEOTYPE, byval lpGeoData as LPSTR, byval cchData as long, byval LangId as LANGID) as long
 declare function GetCPInfoEx alias "GetCPInfoExA"(byval CodePage as UINT, byval dwFlags as DWORD, byval lpCPInfoEx as LPCPINFOEXA) as WINBOOL

declare function SetUserGeoID(byval GeoId as GEOID) as WINBOOL
declare function ConvertDefaultLocale(byval Locale as LCID) as LCID
declare function GetThreadLocale() as LCID
declare function SetThreadLocale(byval Locale as LCID) as WINBOOL
declare function GetSystemDefaultUILanguage() as LANGID
declare function GetUserDefaultUILanguage() as LANGID
declare function GetSystemDefaultLangID() as LANGID
declare function GetUserDefaultLangID() as LANGID
declare function GetSystemDefaultLCID() as LCID
declare function GetUserDefaultLCID() as LCID
declare function SetThreadUILanguage(byval LangId as LANGID) as LANGID
declare function GetStringTypeExA(byval Locale as LCID, byval dwInfoType as DWORD, byval lpSrcStr as LPCSTR, byval cchSrc as long, byval lpCharType as LPWORD) as WINBOOL
declare function GetStringTypeA(byval Locale as LCID, byval dwInfoType as DWORD, byval lpSrcStr as LPCSTR, byval cchSrc as long, byval lpCharType as LPWORD) as WINBOOL
declare function FoldStringA(byval dwMapFlags as DWORD, byval lpSrcStr as LPCSTR, byval cchSrc as long, byval lpDestStr as LPSTR, byval cchDest as long) as long
declare function EnumSystemLocalesA(byval lpLocaleEnumProc as LOCALE_ENUMPROCA, byval dwFlags as DWORD) as WINBOOL
declare function EnumSystemLocalesW(byval lpLocaleEnumProc as LOCALE_ENUMPROCW, byval dwFlags as DWORD) as WINBOOL
declare function EnumSystemLanguageGroupsA(byval lpLanguageGroupEnumProc as LANGUAGEGROUP_ENUMPROCA, byval dwFlags as DWORD, byval lParam as LONG_PTR) as WINBOOL
declare function EnumSystemLanguageGroupsW(byval lpLanguageGroupEnumProc as LANGUAGEGROUP_ENUMPROCW, byval dwFlags as DWORD, byval lParam as LONG_PTR) as WINBOOL
declare function EnumLanguageGroupLocalesA(byval lpLangGroupLocaleEnumProc as LANGGROUPLOCALE_ENUMPROCA, byval LanguageGroup as LGRPID, byval dwFlags as DWORD, byval lParam as LONG_PTR) as WINBOOL
declare function EnumLanguageGroupLocalesW(byval lpLangGroupLocaleEnumProc as LANGGROUPLOCALE_ENUMPROCW, byval LanguageGroup as LGRPID, byval dwFlags as DWORD, byval lParam as LONG_PTR) as WINBOOL
declare function EnumUILanguagesA(byval lpUILanguageEnumProc as UILANGUAGE_ENUMPROCA, byval dwFlags as DWORD, byval lParam as LONG_PTR) as WINBOOL
declare function EnumUILanguagesW(byval lpUILanguageEnumProc as UILANGUAGE_ENUMPROCW, byval dwFlags as DWORD, byval lParam as LONG_PTR) as WINBOOL


 declare function FoldString alias "FoldStringA"(byval dwMapFlags as DWORD, byval lpSrcStr as LPCSTR, byval cchSrc as long, byval lpDestStr as LPSTR, byval cchDest as long) as long
 declare function GetStringTypeEx alias "GetStringTypeExA"(byval Locale as LCID, byval dwInfoType as DWORD, byval lpSrcStr as LPCSTR, byval cchSrc as long, byval lpCharType as LPWORD) as WINBOOL
 declare function EnumSystemLocales alias "EnumSystemLocalesA"(byval lpLocaleEnumProc as LOCALE_ENUMPROCA, byval dwFlags as DWORD) as WINBOOL
 declare function EnumSystemLanguageGroups alias "EnumSystemLanguageGroupsA"(byval lpLanguageGroupEnumProc as LANGUAGEGROUP_ENUMPROCA, byval dwFlags as DWORD, byval lParam as LONG_PTR) as WINBOOL
 declare function EnumLanguageGroupLocales alias "EnumLanguageGroupLocalesA"(byval lpLangGroupLocaleEnumProc as LANGGROUPLOCALE_ENUMPROCA, byval LanguageGroup as LGRPID, byval dwFlags as DWORD, byval lParam as LONG_PTR) as WINBOOL
 declare function EnumUILanguages alias "EnumUILanguagesA"(byval lpUILanguageEnumProc as UILANGUAGE_ENUMPROCA, byval dwFlags as DWORD, byval lParam as LONG_PTR) as WINBOOL

declare function EnumSystemCodePagesA(byval lpCodePageEnumProc as CODEPAGE_ENUMPROCA, byval dwFlags as DWORD) as WINBOOL
declare function EnumSystemCodePagesW(byval lpCodePageEnumProc as CODEPAGE_ENUMPROCW, byval dwFlags as DWORD) as WINBOOL


 declare function EnumSystemCodePages alias "EnumSystemCodePagesA"(byval lpCodePageEnumProc as CODEPAGE_ENUMPROCA, byval dwFlags as DWORD) as WINBOOL

end extern




extern "Windows"


type _COORD
 X as SHORT
 Y as SHORT
end type

type COORD as _COORD
type PCOORD as _COORD ptr

type _SMALL_RECT
 Left as SHORT
 Top as SHORT
 Right as SHORT
 Bottom as SHORT
end type

type SMALL_RECT as _SMALL_RECT
type PSMALL_RECT as _SMALL_RECT ptr

union _KEY_EVENT_RECORD_uChar
 UnicodeChar as WCHAR
 AsciiChar as CHAR
end union

type _KEY_EVENT_RECORD
 bKeyDown as WINBOOL
 wRepeatCount as WORD
 wVirtualKeyCode as WORD
 wVirtualScanCode as WORD
 uChar as _KEY_EVENT_RECORD_uChar
 dwControlKeyState as DWORD
end type

type KEY_EVENT_RECORD as _KEY_EVENT_RECORD
type PKEY_EVENT_RECORD as _KEY_EVENT_RECORD ptr
const RIGHT_ALT_PRESSED = &h1
const LEFT_ALT_PRESSED = &h2
const RIGHT_CTRL_PRESSED = &h4
const LEFT_CTRL_PRESSED = &h8
const SHIFT_PRESSED = &h10
const NUMLOCK_ON = &h20
const SCROLLLOCK_ON = &h40
const CAPSLOCK_ON = &h80
const ENHANCED_KEY = &h100
const NLS_DBCSCHAR = &h10000
const NLS_ALPHANUMERIC = &h00
const NLS_KATAKANA = &h20000
const NLS_HIRAGANA = &h40000
const NLS_ROMAN = &h400000
const NLS_IME_CONVERSION = &h800000
const NLS_IME_DISABLE = &h20000000

type _MOUSE_EVENT_RECORD
 dwMousePosition as COORD
 dwButtonState as DWORD
 dwControlKeyState as DWORD
 dwEventFlags as DWORD
end type

type MOUSE_EVENT_RECORD as _MOUSE_EVENT_RECORD
type PMOUSE_EVENT_RECORD as _MOUSE_EVENT_RECORD ptr
const FROM_LEFT_1ST_BUTTON_PRESSED = &h1
const RIGHTMOST_BUTTON_PRESSED = &h2
const FROM_LEFT_2ND_BUTTON_PRESSED = &h4
const FROM_LEFT_3RD_BUTTON_PRESSED = &h8
const FROM_LEFT_4TH_BUTTON_PRESSED = &h10
const MOUSE_MOVED = &h1
const DOUBLE_CLICK = &h2
const MOUSE_WHEELED = &h4


type _WINDOW_BUFFER_SIZE_RECORD
 dwSize as COORD
end type

type WINDOW_BUFFER_SIZE_RECORD as _WINDOW_BUFFER_SIZE_RECORD
type PWINDOW_BUFFER_SIZE_RECORD as _WINDOW_BUFFER_SIZE_RECORD ptr

type _MENU_EVENT_RECORD
 dwCommandId as UINT
end type

type MENU_EVENT_RECORD as _MENU_EVENT_RECORD
type PMENU_EVENT_RECORD as _MENU_EVENT_RECORD ptr

type _FOCUS_EVENT_RECORD
 bSetFocus as WINBOOL
end type

type FOCUS_EVENT_RECORD as _FOCUS_EVENT_RECORD
type PFOCUS_EVENT_RECORD as _FOCUS_EVENT_RECORD ptr

union _INPUT_RECORD_Event
 KeyEvent as KEY_EVENT_RECORD
 MouseEvent as MOUSE_EVENT_RECORD
 WindowBufferSizeEvent as WINDOW_BUFFER_SIZE_RECORD
 MenuEvent as MENU_EVENT_RECORD
 FocusEvent as FOCUS_EVENT_RECORD
end union

type _INPUT_RECORD
 EventType as WORD
 Event as _INPUT_RECORD_Event
end type

type INPUT_RECORD as _INPUT_RECORD
type PINPUT_RECORD as _INPUT_RECORD ptr
const KEY_EVENT = &h1
const MOUSE_EVENT_ = &h2
const WINDOW_BUFFER_SIZE_EVENT = &h4
const MENU_EVENT = &h8
const FOCUS_EVENT = &h10

union _CHAR_INFO_Char
 UnicodeChar as WCHAR
 AsciiChar as CHAR
end union

type _CHAR_INFO
 Char as _CHAR_INFO_Char
 Attributes as WORD
end type

type CHAR_INFO as _CHAR_INFO
type PCHAR_INFO as _CHAR_INFO ptr
const FOREGROUND_BLUE = &h1
const FOREGROUND_GREEN = &h2
const FOREGROUND_RED = &h4
const FOREGROUND_INTENSITY = &h8
const BACKGROUND_BLUE = &h10
const BACKGROUND_GREEN = &h20
const BACKGROUND_RED = &h40
const BACKGROUND_INTENSITY = &h80
const COMMON_LVB_LEADING_BYTE = &h100
const COMMON_LVB_TRAILING_BYTE = &h200
const COMMON_LVB_GRID_HORIZONTAL = &h400
const COMMON_LVB_GRID_LVERTICAL = &h800
const COMMON_LVB_GRID_RVERTICAL = &h1000
const COMMON_LVB_REVERSE_VIDEO = &h4000
const COMMON_LVB_UNDERSCORE = &h8000
const COMMON_LVB_SBCSDBCS = &h300

type _CONSOLE_SCREEN_BUFFER_INFO
 dwSize as COORD
 dwCursorPosition as COORD
 wAttributes as WORD
 srWindow as SMALL_RECT
 dwMaximumWindowSize as COORD
end type

type CONSOLE_SCREEN_BUFFER_INFO as _CONSOLE_SCREEN_BUFFER_INFO
type PCONSOLE_SCREEN_BUFFER_INFO as _CONSOLE_SCREEN_BUFFER_INFO ptr

type _CONSOLE_CURSOR_INFO
 dwSize as DWORD
 bVisible as WINBOOL
end type

type CONSOLE_CURSOR_INFO as _CONSOLE_CURSOR_INFO
type PCONSOLE_CURSOR_INFO as _CONSOLE_CURSOR_INFO ptr

type _CONSOLE_FONT_INFO
 nFont as DWORD
 dwFontSize as COORD
end type

type CONSOLE_FONT_INFO as _CONSOLE_FONT_INFO
type PCONSOLE_FONT_INFO as _CONSOLE_FONT_INFO ptr

type _CONSOLE_SELECTION_INFO
 dwFlags as DWORD
 dwSelectionAnchor as COORD
 srSelection as SMALL_RECT
end type

type CONSOLE_SELECTION_INFO as _CONSOLE_SELECTION_INFO
type PCONSOLE_SELECTION_INFO as _CONSOLE_SELECTION_INFO ptr
const CONSOLE_NO_SELECTION = &h00
const CONSOLE_SELECTION_IN_PROGRESS = &h1
const CONSOLE_SELECTION_NOT_EMPTY = &h2
const CONSOLE_MOUSE_SELECTION = &h4
const CONSOLE_MOUSE_DOWN = &h8
type PHANDLER_ROUTINE as function(byval CtrlType as DWORD) as WINBOOL
const CTRL_C_EVENT = 0
const CTRL_BREAK_EVENT = 1
const CTRL_CLOSE_EVENT = 2
const CTRL_LOGOFF_EVENT = 5
const CTRL_SHUTDOWN_EVENT = 6
const ENABLE_PROCESSED_INPUT = &h1
const ENABLE_LINE_INPUT = &h2
const ENABLE_ECHO_INPUT = &h4
const ENABLE_WINDOW_INPUT = &h8
const ENABLE_MOUSE_INPUT = &h10
const ENABLE_INSERT_MODE = &h20
const ENABLE_QUICK_EDIT_MODE = &h40
const ENABLE_EXTENDED_FLAGS = &h80
const ENABLE_AUTO_POSITION = &h100
const ENABLE_PROCESSED_OUTPUT = &h1
const ENABLE_WRAP_AT_EOL_OUTPUT = &h2
declare function PeekConsoleInputA(byval hConsoleInput as HANDLE, byval lpBuffer as PINPUT_RECORD, byval nLength as DWORD, byval lpNumberOfEventsRead as LPDWORD) as WINBOOL

 declare function PeekConsoleInput alias "PeekConsoleInputA"(byval hConsoleInput as HANDLE, byval lpBuffer as PINPUT_RECORD, byval nLength as DWORD, byval lpNumberOfEventsRead as LPDWORD) as WINBOOL

declare function PeekConsoleInputW(byval hConsoleInput as HANDLE, byval lpBuffer as PINPUT_RECORD, byval nLength as DWORD, byval lpNumberOfEventsRead as LPDWORD) as WINBOOL


declare function ReadConsoleInputA(byval hConsoleInput as HANDLE, byval lpBuffer as PINPUT_RECORD, byval nLength as DWORD, byval lpNumberOfEventsRead as LPDWORD) as WINBOOL

 declare function ReadConsoleInput alias "ReadConsoleInputA"(byval hConsoleInput as HANDLE, byval lpBuffer as PINPUT_RECORD, byval nLength as DWORD, byval lpNumberOfEventsRead as LPDWORD) as WINBOOL

declare function ReadConsoleInputW(byval hConsoleInput as HANDLE, byval lpBuffer as PINPUT_RECORD, byval nLength as DWORD, byval lpNumberOfEventsRead as LPDWORD) as WINBOOL


declare function WriteConsoleInputA(byval hConsoleInput as HANDLE, byval lpBuffer as const INPUT_RECORD ptr, byval nLength as DWORD, byval lpNumberOfEventsWritten as LPDWORD) as WINBOOL

 declare function WriteConsoleInput alias "WriteConsoleInputA"(byval hConsoleInput as HANDLE, byval lpBuffer as const INPUT_RECORD ptr, byval nLength as DWORD, byval lpNumberOfEventsWritten as LPDWORD) as WINBOOL

declare function WriteConsoleInputW(byval hConsoleInput as HANDLE, byval lpBuffer as const INPUT_RECORD ptr, byval nLength as DWORD, byval lpNumberOfEventsWritten as LPDWORD) as WINBOOL


declare function ReadConsoleOutputA(byval hConsoleOutput as HANDLE, byval lpBuffer as PCHAR_INFO, byval dwBufferSize as COORD, byval dwBufferCoord as COORD, byval lpReadRegion as PSMALL_RECT) as WINBOOL

 declare function ReadConsoleOutput alias "ReadConsoleOutputA"(byval hConsoleOutput as HANDLE, byval lpBuffer as PCHAR_INFO, byval dwBufferSize as COORD, byval dwBufferCoord as COORD, byval lpReadRegion as PSMALL_RECT) as WINBOOL

declare function ReadConsoleOutputW(byval hConsoleOutput as HANDLE, byval lpBuffer as PCHAR_INFO, byval dwBufferSize as COORD, byval dwBufferCoord as COORD, byval lpReadRegion as PSMALL_RECT) as WINBOOL


declare function WriteConsoleOutputA(byval hConsoleOutput as HANDLE, byval lpBuffer as const CHAR_INFO ptr, byval dwBufferSize as COORD, byval dwBufferCoord as COORD, byval lpWriteRegion as PSMALL_RECT) as WINBOOL

 declare function WriteConsoleOutput alias "WriteConsoleOutputA"(byval hConsoleOutput as HANDLE, byval lpBuffer as const CHAR_INFO ptr, byval dwBufferSize as COORD, byval dwBufferCoord as COORD, byval lpWriteRegion as PSMALL_RECT) as WINBOOL

declare function WriteConsoleOutputW(byval hConsoleOutput as HANDLE, byval lpBuffer as const CHAR_INFO ptr, byval dwBufferSize as COORD, byval dwBufferCoord as COORD, byval lpWriteRegion as PSMALL_RECT) as WINBOOL


declare function ReadConsoleOutputCharacterA(byval hConsoleOutput as HANDLE, byval lpCharacter as LPSTR, byval nLength as DWORD, byval dwReadCoord as COORD, byval lpNumberOfCharsRead as LPDWORD) as WINBOOL

 declare function ReadConsoleOutputCharacter alias "ReadConsoleOutputCharacterA"(byval hConsoleOutput as HANDLE, byval lpCharacter as LPSTR, byval nLength as DWORD, byval dwReadCoord as COORD, byval lpNumberOfCharsRead as LPDWORD) as WINBOOL

declare function ReadConsoleOutputCharacterW(byval hConsoleOutput as HANDLE, byval lpCharacter as LPWSTR, byval nLength as DWORD, byval dwReadCoord as COORD, byval lpNumberOfCharsRead as LPDWORD) as WINBOOL


declare function ReadConsoleOutputAttribute(byval hConsoleOutput as HANDLE, byval lpAttribute as LPWORD, byval nLength as DWORD, byval dwReadCoord as COORD, byval lpNumberOfAttrsRead as LPDWORD) as WINBOOL
declare function WriteConsoleOutputCharacterA(byval hConsoleOutput as HANDLE, byval lpCharacter as LPCSTR, byval nLength as DWORD, byval dwWriteCoord as COORD, byval lpNumberOfCharsWritten as LPDWORD) as WINBOOL

 declare function WriteConsoleOutputCharacter alias "WriteConsoleOutputCharacterA"(byval hConsoleOutput as HANDLE, byval lpCharacter as LPCSTR, byval nLength as DWORD, byval dwWriteCoord as COORD, byval lpNumberOfCharsWritten as LPDWORD) as WINBOOL

declare function WriteConsoleOutputCharacterW(byval hConsoleOutput as HANDLE, byval lpCharacter as LPCWSTR, byval nLength as DWORD, byval dwWriteCoord as COORD, byval lpNumberOfCharsWritten as LPDWORD) as WINBOOL


declare function WriteConsoleOutputAttribute(byval hConsoleOutput as HANDLE, byval lpAttribute as const WORD ptr, byval nLength as DWORD, byval dwWriteCoord as COORD, byval lpNumberOfAttrsWritten as LPDWORD) as WINBOOL
declare function FillConsoleOutputCharacterA(byval hConsoleOutput as HANDLE, byval cCharacter as CHAR, byval nLength as DWORD, byval dwWriteCoord as COORD, byval lpNumberOfCharsWritten as LPDWORD) as WINBOOL

 declare function FillConsoleOutputCharacter alias "FillConsoleOutputCharacterA"(byval hConsoleOutput as HANDLE, byval cCharacter as CHAR, byval nLength as DWORD, byval dwWriteCoord as COORD, byval lpNumberOfCharsWritten as LPDWORD) as WINBOOL

declare function FillConsoleOutputCharacterW(byval hConsoleOutput as HANDLE, byval cCharacter as WCHAR, byval nLength as DWORD, byval dwWriteCoord as COORD, byval lpNumberOfCharsWritten as LPDWORD) as WINBOOL


declare function FillConsoleOutputAttribute(byval hConsoleOutput as HANDLE, byval wAttribute as WORD, byval nLength as DWORD, byval dwWriteCoord as COORD, byval lpNumberOfAttrsWritten as LPDWORD) as WINBOOL
declare function GetConsoleMode(byval hConsoleHandle as HANDLE, byval lpMode as LPDWORD) as WINBOOL
declare function GetNumberOfConsoleInputEvents(byval hConsoleInput as HANDLE, byval lpNumberOfEvents as LPDWORD) as WINBOOL
declare function GetConsoleScreenBufferInfo(byval hConsoleOutput as HANDLE, byval lpConsoleScreenBufferInfo as PCONSOLE_SCREEN_BUFFER_INFO) as WINBOOL
declare function GetLargestConsoleWindowSize(byval hConsoleOutput as HANDLE) as COORD
declare function GetConsoleCursorInfo(byval hConsoleOutput as HANDLE, byval lpConsoleCursorInfo as PCONSOLE_CURSOR_INFO) as WINBOOL
declare function GetCurrentConsoleFont(byval hConsoleOutput as HANDLE, byval bMaximumWindow as WINBOOL, byval lpConsoleCurrentFont as PCONSOLE_FONT_INFO) as WINBOOL
declare function GetConsoleFontSize(byval hConsoleOutput as HANDLE, byval nFont as DWORD) as COORD
declare function GetConsoleSelectionInfo(byval lpConsoleSelectionInfo as PCONSOLE_SELECTION_INFO) as WINBOOL
declare function GetNumberOfConsoleMouseButtons(byval lpNumberOfMouseButtons as LPDWORD) as WINBOOL
declare function SetConsoleMode(byval hConsoleHandle as HANDLE, byval dwMode as DWORD) as WINBOOL
declare function SetConsoleActiveScreenBuffer(byval hConsoleOutput as HANDLE) as WINBOOL
declare function FlushConsoleInputBuffer(byval hConsoleInput as HANDLE) as WINBOOL
declare function SetConsoleScreenBufferSize(byval hConsoleOutput as HANDLE, byval dwSize as COORD) as WINBOOL
declare function SetConsoleCursorPosition(byval hConsoleOutput as HANDLE, byval dwCursorPosition as COORD) as WINBOOL
declare function SetConsoleCursorInfo(byval hConsoleOutput as HANDLE, byval lpConsoleCursorInfo as const CONSOLE_CURSOR_INFO ptr) as WINBOOL
declare function ScrollConsoleScreenBufferA(byval hConsoleOutput as HANDLE, byval lpScrollRectangle as const SMALL_RECT ptr, byval lpClipRectangle as const SMALL_RECT ptr, byval dwDestinationOrigin as COORD, byval lpFill as const CHAR_INFO ptr) as WINBOOL

 declare function ScrollConsoleScreenBuffer alias "ScrollConsoleScreenBufferA"(byval hConsoleOutput as HANDLE, byval lpScrollRectangle as const SMALL_RECT ptr, byval lpClipRectangle as const SMALL_RECT ptr, byval dwDestinationOrigin as COORD, byval lpFill as const CHAR_INFO ptr) as WINBOOL

declare function ScrollConsoleScreenBufferW(byval hConsoleOutput as HANDLE, byval lpScrollRectangle as const SMALL_RECT ptr, byval lpClipRectangle as const SMALL_RECT ptr, byval dwDestinationOrigin as COORD, byval lpFill as const CHAR_INFO ptr) as WINBOOL


declare function SetConsoleWindowInfo(byval hConsoleOutput as HANDLE, byval bAbsolute as WINBOOL, byval lpConsoleWindow as const SMALL_RECT ptr) as WINBOOL
declare function SetConsoleTextAttribute(byval hConsoleOutput as HANDLE, byval wAttributes as WORD) as WINBOOL
declare function SetConsoleCtrlHandler(byval HandlerRoutine as PHANDLER_ROUTINE, byval Add as WINBOOL) as WINBOOL
declare function GenerateConsoleCtrlEvent(byval dwCtrlEvent as DWORD, byval dwProcessGroupId as DWORD) as WINBOOL
declare function AllocConsole() as WINBOOL
declare function FreeConsole() as WINBOOL
declare function AttachConsole(byval dwProcessId as DWORD) as WINBOOL
const ATTACH_PARENT_PROCESS = cast(DWORD, -1)
declare function GetConsoleTitleA(byval lpConsoleTitle as LPSTR, byval nSize as DWORD) as DWORD

 declare function GetConsoleTitle alias "GetConsoleTitleA"(byval lpConsoleTitle as LPSTR, byval nSize as DWORD) as DWORD

declare function GetConsoleTitleW(byval lpConsoleTitle as LPWSTR, byval nSize as DWORD) as DWORD


declare function SetConsoleTitleA(byval lpConsoleTitle as LPCSTR) as WINBOOL

 declare function SetConsoleTitle alias "SetConsoleTitleA"(byval lpConsoleTitle as LPCSTR) as WINBOOL

declare function SetConsoleTitleW(byval lpConsoleTitle as LPCWSTR) as WINBOOL


declare function ReadConsoleA(byval hConsoleInput as HANDLE, byval lpBuffer as LPVOID, byval nNumberOfCharsToRead as DWORD, byval lpNumberOfCharsRead as LPDWORD, byval lpReserved as LPVOID) as WINBOOL

 declare function ReadConsole alias "ReadConsoleA"(byval hConsoleInput as HANDLE, byval lpBuffer as LPVOID, byval nNumberOfCharsToRead as DWORD, byval lpNumberOfCharsRead as LPDWORD, byval lpReserved as LPVOID) as WINBOOL

declare function ReadConsoleW(byval hConsoleInput as HANDLE, byval lpBuffer as LPVOID, byval nNumberOfCharsToRead as DWORD, byval lpNumberOfCharsRead as LPDWORD, byval lpReserved as LPVOID) as WINBOOL


declare function WriteConsoleA(byval hConsoleOutput as HANDLE, byval lpBuffer as const any ptr, byval nNumberOfCharsToWrite as DWORD, byval lpNumberOfCharsWritten as LPDWORD, byval lpReserved as LPVOID) as WINBOOL

 declare function WriteConsole alias "WriteConsoleA"(byval hConsoleOutput as HANDLE, byval lpBuffer as const any ptr, byval nNumberOfCharsToWrite as DWORD, byval lpNumberOfCharsWritten as LPDWORD, byval lpReserved as LPVOID) as WINBOOL

declare function WriteConsoleW(byval hConsoleOutput as HANDLE, byval lpBuffer as const any ptr, byval nNumberOfCharsToWrite as DWORD, byval lpNumberOfCharsWritten as LPDWORD, byval lpReserved as LPVOID) as WINBOOL


const CONSOLE_TEXTMODE_BUFFER = 1
declare function CreateConsoleScreenBuffer(byval dwDesiredAccess as DWORD, byval dwShareMode as DWORD, byval lpSecurityAttributes as const SECURITY_ATTRIBUTES ptr, byval dwFlags as DWORD, byval lpScreenBufferData as LPVOID) as HANDLE
declare function GetConsoleCP() as UINT
declare function SetConsoleCP(byval wCodePageID as UINT) as WINBOOL
declare function GetConsoleOutputCP() as UINT
declare function SetConsoleOutputCP(byval wCodePageID as UINT) as WINBOOL
const CONSOLE_FULLSCREEN = 1
const CONSOLE_FULLSCREEN_HARDWARE = 2
declare function GetConsoleDisplayMode(byval lpModeFlags as LPDWORD) as WINBOOL
const CONSOLE_FULLSCREEN_MODE = 1
const CONSOLE_WINDOWED_MODE = 2
declare function SetConsoleDisplayMode(byval hConsoleOutput as HANDLE, byval dwFlags as DWORD, byval lpNewScreenBufferDimensions as PCOORD) as WINBOOL
declare function GetConsoleWindow() as HWND
declare function GetConsoleProcessList(byval lpdwProcessList as LPDWORD, byval dwProcessCount as DWORD) as DWORD
declare function AddConsoleAliasA(byval Source as LPSTR, byval Target as LPSTR, byval ExeName as LPSTR) as WINBOOL

 declare function AddConsoleAlias alias "AddConsoleAliasA"(byval Source as LPSTR, byval Target as LPSTR, byval ExeName as LPSTR) as WINBOOL

declare function AddConsoleAliasW(byval Source as LPWSTR, byval Target as LPWSTR, byval ExeName as LPWSTR) as WINBOOL


declare function GetConsoleAliasA(byval Source as LPSTR, byval TargetBuffer as LPSTR, byval TargetBufferLength as DWORD, byval ExeName as LPSTR) as DWORD

 declare function GetConsoleAlias alias "GetConsoleAliasA"(byval Source as LPSTR, byval TargetBuffer as LPSTR, byval TargetBufferLength as DWORD, byval ExeName as LPSTR) as DWORD

declare function GetConsoleAliasW(byval Source as LPWSTR, byval TargetBuffer as LPWSTR, byval TargetBufferLength as DWORD, byval ExeName as LPWSTR) as DWORD


declare function GetConsoleAliasesLengthA(byval ExeName as LPSTR) as DWORD

 declare function GetConsoleAliasesLength alias "GetConsoleAliasesLengthA"(byval ExeName as LPSTR) as DWORD

declare function GetConsoleAliasesLengthW(byval ExeName as LPWSTR) as DWORD


declare function GetConsoleAliasExesLengthA() as DWORD

 declare function GetConsoleAliasExesLength alias "GetConsoleAliasExesLengthA"() as DWORD

declare function GetConsoleAliasExesLengthW() as DWORD


declare function GetConsoleAliasesA(byval AliasBuffer as LPSTR, byval AliasBufferLength as DWORD, byval ExeName as LPSTR) as DWORD

 declare function GetConsoleAliases alias "GetConsoleAliasesA"(byval AliasBuffer as LPSTR, byval AliasBufferLength as DWORD, byval ExeName as LPSTR) as DWORD

declare function GetConsoleAliasesW(byval AliasBuffer as LPWSTR, byval AliasBufferLength as DWORD, byval ExeName as LPWSTR) as DWORD


declare function GetConsoleAliasExesA(byval ExeNameBuffer as LPSTR, byval ExeNameBufferLength as DWORD) as DWORD

 declare function GetConsoleAliasExes alias "GetConsoleAliasExesA"(byval ExeNameBuffer as LPSTR, byval ExeNameBufferLength as DWORD) as DWORD

declare function GetConsoleAliasExesW(byval ExeNameBuffer as LPWSTR, byval ExeNameBufferLength as DWORD) as DWORD


type _CONSOLE_FONT_INFOEX
 cbSize as ULONG
 nFont as DWORD
 dwFontSize as COORD
 FontFamily as UINT
 FontWeight as UINT
 FaceName as wstring * 32
end type

type CONSOLE_FONT_INFOEX as _CONSOLE_FONT_INFOEX
type PCONSOLE_FONT_INFOEX as _CONSOLE_FONT_INFOEX ptr

type _CONSOLE_HISTORY_INFO
 cbSize as UINT
 HistoryBufferSize as UINT
 NumberOfHistoryBuffers as UINT
 dwFlags as DWORD
end type

type CONSOLE_HISTORY_INFO as _CONSOLE_HISTORY_INFO
type PCONSOLE_HISTORY_INFO as _CONSOLE_HISTORY_INFO ptr

type _CONSOLE_READCONSOLE_CONTROL
 nLength as ULONG
 nInitialChars as ULONG
 dwCtrlWakeupMask as ULONG
 dwControlKeyState as ULONG
end type

type CONSOLE_READCONSOLE_CONTROL as _CONSOLE_READCONSOLE_CONTROL
type PCONSOLE_READCONSOLE_CONTROL as _CONSOLE_READCONSOLE_CONTROL ptr

type _CONSOLE_SCREEN_BUFFER_INFOEX
 cbSize as ULONG
 dwSize as COORD
 dwCursorPosition as COORD
 wAttributes as WORD
 srWindow as SMALL_RECT
 dwMaximumWindowSize as COORD
 wPopupAttributes as WORD
 bFullscreenSupported as WINBOOL
 ColorTable(0 to 15) as COLORREF
end type

type CONSOLE_SCREEN_BUFFER_INFOEX as _CONSOLE_SCREEN_BUFFER_INFOEX
type PCONSOLE_SCREEN_BUFFER_INFOEX as _CONSOLE_SCREEN_BUFFER_INFOEX ptr
declare function GetConsoleHistoryInfo(byval lpConsoleHistoryInfo as PCONSOLE_HISTORY_INFO) as WINBOOL





declare function GetConsoleScreenBufferInfoEx(byval hConsoleOutput as HANDLE, byval lpConsoleScreenBufferInfoEx as PCONSOLE_SCREEN_BUFFER_INFOEX) as WINBOOL
declare function GetCurrentConsoleFontEx(byval hConsoleOutput as HANDLE, byval bMaximumWindow as WINBOOL, byval lpConsoleCurrentFontEx as PCONSOLE_FONT_INFOEX) as WINBOOL
declare function SetConsoleHistoryInfo(byval lpConsoleHistoryInfo as PCONSOLE_HISTORY_INFO) as WINBOOL
declare function SetConsoleScreenBufferInfoEx(byval hConsoleOutput as HANDLE, byval lpConsoleScreenBufferInfoEx as PCONSOLE_SCREEN_BUFFER_INFOEX) as WINBOOL
declare function SetCurrentConsoleFontEx(byval hConsoleOutput as HANDLE, byval bMaximumWindow as WINBOOL, byval lpConsoleCurrentFontEx as PCONSOLE_FONT_INFOEX) as WINBOOL

end extern


#inclib "version"


extern "Windows"

const VS_VERSION_INFO = 1
const VS_USER_DEFINED = 100
const VS_FFI_SIGNATURE = &hFEEF04BD
const VS_FFI_STRUCVERSION = &h00010000
const VS_FFI_FILEFLAGSMASK = &h0000003F
const VS_FF_DEBUG = &h00000001
const VS_FF_PRERELEASE = &h00000002
const VS_FF_PATCHED = &h00000004
const VS_FF_PRIVATEBUILD = &h00000008
const VS_FF_INFOINFERRED = &h00000010
const VS_FF_SPECIALBUILD = &h00000020
const VOS_UNKNOWN = &h000000000
const VOS_DOS = &h00010000
const VOS_OS216 = &h00020000
const VOS_OS232 = &h00030000
const VOS_NT = &h00040000
const VOS_WINCE = &h00050000
const VOS__BASE = &h000000000
const VOS__WINDOWS16 = &h00000001
const VOS__PM16 = &h00000002
const VOS__PM32 = &h00000003
const VOS__WINDOWS32 = &h00000004
const VOS_DOS_WINDOWS16 = &h00010001
const VOS_DOS_WINDOWS32 = &h00010004
const VOS_OS216_PM16 = &h00020002
const VOS_OS232_PM32 = &h00030003
const VOS_NT_WINDOWS32 = &h00040004
const VFT_UNKNOWN = &h000000000
const VFT_APP = &h00000001
const VFT_DLL = &h00000002
const VFT_DRV = &h00000003
const VFT_FONT = &h00000004
const VFT_VXD = &h00000005
const VFT_STATIC_LIB = &h00000007
const VFT2_UNKNOWN = &h000000000
const VFT2_DRV_PRINTER = &h00000001
const VFT2_DRV_KEYBOARD = &h00000002
const VFT2_DRV_LANGUAGE = &h00000003
const VFT2_DRV_DISPLAY = &h00000004
const VFT2_DRV_MOUSE = &h00000005
const VFT2_DRV_NETWORK = &h00000006
const VFT2_DRV_SYSTEM = &h00000007
const VFT2_DRV_INSTALLABLE = &h00000008
const VFT2_DRV_SOUND = &h00000009
const VFT2_DRV_COMM = &h0000000A
const VFT2_DRV_INPUTMETHOD = &h0000000B
const VFT2_DRV_VERSIONED_PRINTER = &h0000000C
const VFT2_FONT_RASTER = &h00000001
const VFT2_FONT_VECTOR = &h00000002
const VFT2_FONT_TRUETYPE = &h00000003
const VFFF_ISSHAREDFILE = &h0001
const VFF_CURNEDEST = &h0001
const VFF_FILEINUSE = &h0002
const VFF_BUFFTOOSMALL = &h0004
const VIFF_FORCEINSTALL = &h0001
const VIFF_DONTDELETEOLD = &h0002
const VIF_TEMPFILE = &h00000001
const VIF_MISMATCH = &h00000002
const VIF_SRCOLD = &h00000004
const VIF_DIFFLANG = &h00000008
const VIF_DIFFCODEPG = &h00000010
const VIF_DIFFTYPE = &h00000020
const VIF_WRITEPROT = &h00000040
const VIF_FILEINUSE = &h00000080
const VIF_OUTOFSPACE = &h00000100
const VIF_ACCESSVIOLATION = &h00000200
const VIF_SHARINGVIOLATION = &h00000400
const VIF_CANNOTCREATE = &h00000800
const VIF_CANNOTDELETE = &h00001000
const VIF_CANNOTRENAME = &h00002000
const VIF_CANNOTDELETECUR = &h00004000
const VIF_OUTOFMEMORY = &h00008000
const VIF_CANNOTREADSRC = &h00010000
const VIF_CANNOTREADDST = &h00020000
const VIF_BUFFTOOSMALL = &h00040000
const VIF_CANNOTLOADLZ32 = &h00080000
const VIF_CANNOTLOADCABINET = &h00100000

type tagVS_FIXEDFILEINFO
 dwSignature as DWORD
 dwStrucVersion as DWORD
 dwFileVersionMS as DWORD
 dwFileVersionLS as DWORD
 dwProductVersionMS as DWORD
 dwProductVersionLS as DWORD
 dwFileFlagsMask as DWORD
 dwFileFlags as DWORD
 dwFileOS as DWORD
 dwFileType as DWORD
 dwFileSubtype as DWORD
 dwFileDateMS as DWORD
 dwFileDateLS as DWORD
end type

type VS_FIXEDFILEINFO as tagVS_FIXEDFILEINFO
declare function VerFindFileA(byval uFlags as DWORD, byval szFileName as LPSTR, byval szWinDir as LPSTR, byval szAppDir as LPSTR, byval szCurDir as LPSTR, byval lpuCurDirLen as PUINT, byval szDestDir as LPSTR, byval lpuDestDirLen as PUINT) as DWORD

 declare function VerFindFile alias "VerFindFileA"(byval uFlags as DWORD, byval szFileName as LPSTR, byval szWinDir as LPSTR, byval szAppDir as LPSTR, byval szCurDir as LPSTR, byval lpuCurDirLen as PUINT, byval szDestDir as LPSTR, byval lpuDestDirLen as PUINT) as DWORD

declare function VerFindFileW(byval uFlags as DWORD, byval szFileName as LPWSTR, byval szWinDir as LPWSTR, byval szAppDir as LPWSTR, byval szCurDir as LPWSTR, byval lpuCurDirLen as PUINT, byval szDestDir as LPWSTR, byval lpuDestDirLen as PUINT) as DWORD


declare function VerInstallFileA(byval uFlags as DWORD, byval szSrcFileName as LPSTR, byval szDestFileName as LPSTR, byval szSrcDir as LPSTR, byval szDestDir as LPSTR, byval szCurDir as LPSTR, byval szTmpFile as LPSTR, byval lpuTmpFileLen as PUINT) as DWORD

 declare function VerInstallFile alias "VerInstallFileA"(byval uFlags as DWORD, byval szSrcFileName as LPSTR, byval szDestFileName as LPSTR, byval szSrcDir as LPSTR, byval szDestDir as LPSTR, byval szCurDir as LPSTR, byval szTmpFile as LPSTR, byval lpuTmpFileLen as PUINT) as DWORD

declare function VerInstallFileW(byval uFlags as DWORD, byval szSrcFileName as LPWSTR, byval szDestFileName as LPWSTR, byval szSrcDir as LPWSTR, byval szDestDir as LPWSTR, byval szCurDir as LPWSTR, byval szTmpFile as LPWSTR, byval lpuTmpFileLen as PUINT) as DWORD


declare function GetFileVersionInfoSizeA(byval lptstrFilename as LPCSTR, byval lpdwHandle as LPDWORD) as DWORD

 declare function GetFileVersionInfoSize alias "GetFileVersionInfoSizeA"(byval lptstrFilename as LPCSTR, byval lpdwHandle as LPDWORD) as DWORD

declare function GetFileVersionInfoSizeW(byval lptstrFilename as LPCWSTR, byval lpdwHandle as LPDWORD) as DWORD


declare function GetFileVersionInfoA(byval lptstrFilename as LPCSTR, byval dwHandle as DWORD, byval dwLen as DWORD, byval lpData as LPVOID) as WINBOOL

 declare function GetFileVersionInfo alias "GetFileVersionInfoA"(byval lptstrFilename as LPCSTR, byval dwHandle as DWORD, byval dwLen as DWORD, byval lpData as LPVOID) as WINBOOL

declare function GetFileVersionInfoW(byval lptstrFilename as LPCWSTR, byval dwHandle as DWORD, byval dwLen as DWORD, byval lpData as LPVOID) as WINBOOL


declare function VerLanguageNameA(byval wLang as DWORD, byval szLang as LPSTR, byval nSize as DWORD) as DWORD

 declare function VerLanguageName alias "VerLanguageNameA"(byval wLang as DWORD, byval szLang as LPSTR, byval nSize as DWORD) as DWORD

declare function VerLanguageNameW(byval wLang as DWORD, byval szLang as LPWSTR, byval nSize as DWORD) as DWORD


declare function VerQueryValueA(byval pBlock as const LPVOID, byval lpSubBlock as LPCSTR, byval lplpBuffer as LPVOID ptr, byval puLen as PUINT) as WINBOOL

 declare function VerQueryValue alias "VerQueryValueA"(byval pBlock as const LPVOID, byval lpSubBlock as LPCSTR, byval lplpBuffer as LPVOID ptr, byval puLen as PUINT) as WINBOOL

declare function VerQueryValueW(byval pBlock as const LPVOID, byval lpSubBlock as LPCWSTR, byval lplpBuffer as LPVOID ptr, byval puLen as PUINT) as WINBOOL


end extern


#inclib "advapi32"



const SHTDN_REASON_FLAG_COMMENT_REQUIRED = &h01000000
const SHTDN_REASON_FLAG_DIRTY_PROBLEM_ID_REQUIRED = &h02000000
const SHTDN_REASON_FLAG_CLEAN_UI = &h04000000
const SHTDN_REASON_FLAG_DIRTY_UI = &h08000000
const SHTDN_REASON_FLAG_USER_DEFINED = &h40000000
const SHTDN_REASON_FLAG_PLANNED = &h80000000
const SHTDN_REASON_MAJOR_OTHER = &h000000000
const SHTDN_REASON_MAJOR_NONE = &h000000000
const SHTDN_REASON_MAJOR_HARDWARE = &h00010000
const SHTDN_REASON_MAJOR_OPERATINGSYSTEM = &h00020000
const SHTDN_REASON_MAJOR_SOFTWARE = &h00030000
const SHTDN_REASON_MAJOR_APPLICATION = &h00040000
const SHTDN_REASON_MAJOR_SYSTEM = &h00050000
const SHTDN_REASON_MAJOR_POWER = &h00060000
const SHTDN_REASON_MAJOR_LEGACY_API = &h00070000
const SHTDN_REASON_MINOR_OTHER = &h000000000
const SHTDN_REASON_MINOR_NONE = &h000000ff
const SHTDN_REASON_MINOR_MAINTENANCE = &h00000001
const SHTDN_REASON_MINOR_INSTALLATION = &h00000002
const SHTDN_REASON_MINOR_UPGRADE = &h00000003
const SHTDN_REASON_MINOR_RECONFIG = &h00000004
const SHTDN_REASON_MINOR_HUNG = &h00000005
const SHTDN_REASON_MINOR_UNSTABLE = &h00000006
const SHTDN_REASON_MINOR_DISK = &h00000007
const SHTDN_REASON_MINOR_PROCESSOR = &h00000008
const SHTDN_REASON_MINOR_NETWORKCARD = &h00000009
const SHTDN_REASON_MINOR_POWER_SUPPLY = &h0000000a
const SHTDN_REASON_MINOR_CORDUNPLUGGED = &h0000000b
const SHTDN_REASON_MINOR_ENVIRONMENT = &h0000000c
const SHTDN_REASON_MINOR_HARDWARE_DRIVER = &h0000000d
const SHTDN_REASON_MINOR_OTHERDRIVER = &h0000000e
const SHTDN_REASON_MINOR_BLUESCREEN = &h0000000F
const SHTDN_REASON_MINOR_SERVICEPACK = &h00000010
const SHTDN_REASON_MINOR_HOTFIX = &h00000011
const SHTDN_REASON_MINOR_SECURITYFIX = &h00000012
const SHTDN_REASON_MINOR_SECURITY = &h00000013
const SHTDN_REASON_MINOR_NETWORK_CONNECTIVITY = &h00000014
const SHTDN_REASON_MINOR_WMI = &h00000015
const SHTDN_REASON_MINOR_SERVICEPACK_UNINSTALL = &h00000016
const SHTDN_REASON_MINOR_HOTFIX_UNINSTALL = &h00000017
const SHTDN_REASON_MINOR_SECURITYFIX_UNINSTALL = &h00000018
const SHTDN_REASON_MINOR_MMC = &h00000019
const SHTDN_REASON_MINOR_SYSTEMRESTORE = &h0000001a
const SHTDN_REASON_MINOR_TERMSRV = &h00000020
const SHTDN_REASON_MINOR_DC_PROMOTION = &h00000021
const SHTDN_REASON_MINOR_DC_DEMOTION = &h00000022
const SHTDN_REASON_UNKNOWN = SHTDN_REASON_MINOR_NONE
const SHTDN_REASON_LEGACY_API = SHTDN_REASON_MAJOR_LEGACY_API or SHTDN_REASON_FLAG_PLANNED
const SHTDN_REASON_VALID_BIT_MASK = &hc0ffffff
const PCLEANUI = SHTDN_REASON_FLAG_PLANNED or SHTDN_REASON_FLAG_CLEAN_UI
const UCLEANUI = SHTDN_REASON_FLAG_CLEAN_UI
const PDIRTYUI = SHTDN_REASON_FLAG_PLANNED or SHTDN_REASON_FLAG_DIRTY_UI
const UDIRTYUI = SHTDN_REASON_FLAG_DIRTY_UI
const MAX_REASON_NAME_LEN = 64
const MAX_REASON_DESC_LEN = 256
const MAX_REASON_BUGID_LEN = 32
const MAX_REASON_COMMENT_LEN = 512
const SHUTDOWN_TYPE_LEN = 32
const POLICY_SHOWREASONUI_NEVER = 0
const POLICY_SHOWREASONUI_ALWAYS = 1
const POLICY_SHOWREASONUI_WORKSTATIONONLY = 2
const POLICY_SHOWREASONUI_SERVERONLY = 3
const SNAPSHOT_POLICY_NEVER = 0
const SNAPSHOT_POLICY_ALWAYS = 1
const SNAPSHOT_POLICY_UNPLANNED = 2
const MAX_NUM_REASONS = 256

extern "Windows"

const RRF_RT_REG_NONE = &h00000001
const RRF_RT_REG_SZ = &h00000002
const RRF_RT_REG_EXPAND_SZ = &h00000004
const RRF_RT_REG_BINARY = &h00000008
const RRF_RT_REG_DWORD = &h00000010
const RRF_RT_REG_MULTI_SZ = &h00000020
const RRF_RT_REG_QWORD = &h00000040
const RRF_RT_DWORD = RRF_RT_REG_BINARY or RRF_RT_REG_DWORD
const RRF_RT_QWORD = RRF_RT_REG_BINARY or RRF_RT_REG_QWORD
const RRF_RT_ANY = &h0000ffff
const RRF_NOEXPAND = &h10000000
const RRF_ZEROONFAILURE = &h20000000
type REGSAM as ACCESS_MASK
type LSTATUS as LONG
const REG_SECURE_CONNECTION = 1
const PROVIDER_KEEPS_VALUE_LENGTH = &h1

type val_context
 valuelen as long
 value_context as LPVOID
 val_buff_ptr as LPVOID
end type

type PVALCONTEXT as val_context ptr

type PVALUEA
 pv_valuename as LPSTR
 pv_valuelen as long
 pv_value_context as LPVOID
 pv_type as DWORD
end type

type PPVALUEA as PVALUEA ptr

type PVALUEW
 pv_valuename as LPWSTR
 pv_valuelen as long
 pv_value_context as LPVOID
 pv_type as DWORD
end type

type PPVALUEW as PVALUEW ptr

 type PVALUE as PVALUEA
 type PPVALUE as PPVALUEA

type PQUERYHANDLER as function cdecl(byval keycontext as LPVOID, byval val_list as PVALCONTEXT, byval num_vals as DWORD, byval outputbuffer as LPVOID, byval total_outlen as DWORD ptr, byval input_blen as DWORD) as DWORD

type provider_info
 pi_R0_1val as PQUERYHANDLER
 pi_R0_allvals as PQUERYHANDLER
 pi_R3_1val as PQUERYHANDLER
 pi_R3_allvals as PQUERYHANDLER
 pi_flags as DWORD
 pi_key_context as LPVOID
end type

type REG_PROVIDER as provider_info
type PPROVIDER as provider_info ptr

type value_entA
 ve_valuename as LPSTR
 ve_valuelen as DWORD
 ve_valueptr as DWORD_PTR
 ve_type as DWORD
end type

type VALENTA as value_entA
type PVALENTA as value_entA ptr

type value_entW
 ve_valuename as LPWSTR
 ve_valuelen as DWORD
 ve_valueptr as DWORD_PTR
 ve_type as DWORD
end type

type VALENTW as value_entW
type PVALENTW as value_entW ptr

 type VALENT as VALENTA
 type PVALENT as PVALENTA

declare function RegCloseKey(byval hKey as HKEY) as LONG
declare function RegOverridePredefKey(byval hKey as HKEY, byval hNewHKey as HKEY) as LONG
declare function RegOpenUserClassesRoot(byval hToken as HANDLE, byval dwOptions as DWORD, byval samDesired as REGSAM, byval phkResult as PHKEY) as LONG
declare function RegOpenCurrentUser(byval samDesired as REGSAM, byval phkResult as PHKEY) as LONG
declare function RegDisablePredefinedCache() as LONG
declare function RegConnectRegistryA(byval lpMachineName as LPCSTR, byval hKey as HKEY, byval phkResult as PHKEY) as LONG

 declare function RegConnectRegistry alias "RegConnectRegistryA"(byval lpMachineName as LPCSTR, byval hKey as HKEY, byval phkResult as PHKEY) as LONG

declare function RegConnectRegistryW(byval lpMachineName as LPCWSTR, byval hKey as HKEY, byval phkResult as PHKEY) as LONG


declare function RegConnectRegistryExA(byval lpMachineName as LPCSTR, byval hKey as HKEY, byval Flags as ULONG, byval phkResult as PHKEY) as LONG

 declare function RegConnectRegistryEx alias "RegConnectRegistryExA"(byval lpMachineName as LPCSTR, byval hKey as HKEY, byval Flags as ULONG, byval phkResult as PHKEY) as LONG

declare function RegConnectRegistryExW(byval lpMachineName as LPCWSTR, byval hKey as HKEY, byval Flags as ULONG, byval phkResult as PHKEY) as LONG


declare function RegCreateKeyA(byval hKey as HKEY, byval lpSubKey as LPCSTR, byval phkResult as PHKEY) as LONG

 declare function RegCreateKey alias "RegCreateKeyA"(byval hKey as HKEY, byval lpSubKey as LPCSTR, byval phkResult as PHKEY) as LONG

declare function RegCreateKeyW(byval hKey as HKEY, byval lpSubKey as LPCWSTR, byval phkResult as PHKEY) as LONG


declare function RegCreateKeyExA(byval hKey as HKEY, byval lpSubKey as LPCSTR, byval Reserved as DWORD, byval lpClass as LPSTR, byval dwOptions as DWORD, byval samDesired as REGSAM, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES, byval phkResult as PHKEY, byval lpdwDisposition as LPDWORD) as LONG

 declare function RegCreateKeyEx alias "RegCreateKeyExA"(byval hKey as HKEY, byval lpSubKey as LPCSTR, byval Reserved as DWORD, byval lpClass as LPSTR, byval dwOptions as DWORD, byval samDesired as REGSAM, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES, byval phkResult as PHKEY, byval lpdwDisposition as LPDWORD) as LONG

declare function RegCreateKeyExW(byval hKey as HKEY, byval lpSubKey as LPCWSTR, byval Reserved as DWORD, byval lpClass as LPWSTR, byval dwOptions as DWORD, byval samDesired as REGSAM, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES, byval phkResult as PHKEY, byval lpdwDisposition as LPDWORD) as LONG


declare function RegDeleteKeyA(byval hKey as HKEY, byval lpSubKey as LPCSTR) as LONG

 declare function RegDeleteKey alias "RegDeleteKeyA"(byval hKey as HKEY, byval lpSubKey as LPCSTR) as LONG

declare function RegDeleteKeyW(byval hKey as HKEY, byval lpSubKey as LPCWSTR) as LONG


declare function RegDeleteKeyExA(byval hKey as HKEY, byval lpSubKey as LPCSTR, byval samDesired as REGSAM, byval Reserved as DWORD) as LONG

 declare function RegDeleteKeyEx alias "RegDeleteKeyExA"(byval hKey as HKEY, byval lpSubKey as LPCSTR, byval samDesired as REGSAM, byval Reserved as DWORD) as LONG

declare function RegDeleteKeyExW(byval hKey as HKEY, byval lpSubKey as LPCWSTR, byval samDesired as REGSAM, byval Reserved as DWORD) as LONG


declare function RegDisableReflectionKey(byval hBase as HKEY) as LONG
declare function RegEnableReflectionKey(byval hBase as HKEY) as LONG
declare function RegQueryReflectionKey(byval hBase as HKEY, byval bIsReflectionDisabled as WINBOOL ptr) as LONG
declare function RegDeleteValueA(byval hKey as HKEY, byval lpValueName as LPCSTR) as LONG

 declare function RegDeleteValue alias "RegDeleteValueA"(byval hKey as HKEY, byval lpValueName as LPCSTR) as LONG

declare function RegDeleteValueW(byval hKey as HKEY, byval lpValueName as LPCWSTR) as LONG


declare function RegEnumKeyA(byval hKey as HKEY, byval dwIndex as DWORD, byval lpName as LPSTR, byval cchName as DWORD) as LONG

 declare function RegEnumKey alias "RegEnumKeyA"(byval hKey as HKEY, byval dwIndex as DWORD, byval lpName as LPSTR, byval cchName as DWORD) as LONG

declare function RegEnumKeyW(byval hKey as HKEY, byval dwIndex as DWORD, byval lpName as LPWSTR, byval cchName as DWORD) as LONG


declare function RegEnumKeyExA(byval hKey as HKEY, byval dwIndex as DWORD, byval lpName as LPSTR, byval lpcchName as LPDWORD, byval lpReserved as LPDWORD, byval lpClass as LPSTR, byval lpcchClass as LPDWORD, byval lpftLastWriteTime as PFILETIME) as LONG

 declare function RegEnumKeyEx alias "RegEnumKeyExA"(byval hKey as HKEY, byval dwIndex as DWORD, byval lpName as LPSTR, byval lpcchName as LPDWORD, byval lpReserved as LPDWORD, byval lpClass as LPSTR, byval lpcchClass as LPDWORD, byval lpftLastWriteTime as PFILETIME) as LONG

declare function RegEnumKeyExW(byval hKey as HKEY, byval dwIndex as DWORD, byval lpName as LPWSTR, byval lpcchName as LPDWORD, byval lpReserved as LPDWORD, byval lpClass as LPWSTR, byval lpcchClass as LPDWORD, byval lpftLastWriteTime as PFILETIME) as LONG


declare function RegEnumValueA(byval hKey as HKEY, byval dwIndex as DWORD, byval lpValueName as LPSTR, byval lpcchValueName as LPDWORD, byval lpReserved as LPDWORD, byval lpType as LPDWORD, byval lpData as LPBYTE, byval lpcbData as LPDWORD) as LONG

 declare function RegEnumValue alias "RegEnumValueA"(byval hKey as HKEY, byval dwIndex as DWORD, byval lpValueName as LPSTR, byval lpcchValueName as LPDWORD, byval lpReserved as LPDWORD, byval lpType as LPDWORD, byval lpData as LPBYTE, byval lpcbData as LPDWORD) as LONG

declare function RegEnumValueW(byval hKey as HKEY, byval dwIndex as DWORD, byval lpValueName as LPWSTR, byval lpcchValueName as LPDWORD, byval lpReserved as LPDWORD, byval lpType as LPDWORD, byval lpData as LPBYTE, byval lpcbData as LPDWORD) as LONG


declare function RegFlushKey(byval hKey as HKEY) as LONG
declare function RegGetKeySecurity(byval hKey as HKEY, byval SecurityInformation as SECURITY_INFORMATION, byval pSecurityDescriptor as PSECURITY_DESCRIPTOR, byval lpcbSecurityDescriptor as LPDWORD) as LONG
declare function RegLoadKeyA(byval hKey as HKEY, byval lpSubKey as LPCSTR, byval lpFile as LPCSTR) as LONG

 declare function RegLoadKey alias "RegLoadKeyA"(byval hKey as HKEY, byval lpSubKey as LPCSTR, byval lpFile as LPCSTR) as LONG

declare function RegLoadKeyW(byval hKey as HKEY, byval lpSubKey as LPCWSTR, byval lpFile as LPCWSTR) as LONG


declare function RegNotifyChangeKeyValue(byval hKey as HKEY, byval bWatchSubtree as WINBOOL, byval dwNotifyFilter as DWORD, byval hEvent as HANDLE, byval fAsynchronous as WINBOOL) as LONG
declare function RegOpenKeyA(byval hKey as HKEY, byval lpSubKey as LPCSTR, byval phkResult as PHKEY) as LONG

 declare function RegOpenKey alias "RegOpenKeyA"(byval hKey as HKEY, byval lpSubKey as LPCSTR, byval phkResult as PHKEY) as LONG

declare function RegOpenKeyW(byval hKey as HKEY, byval lpSubKey as LPCWSTR, byval phkResult as PHKEY) as LONG


declare function RegOpenKeyExA(byval hKey as HKEY, byval lpSubKey as LPCSTR, byval ulOptions as DWORD, byval samDesired as REGSAM, byval phkResult as PHKEY) as LONG

 declare function RegOpenKeyEx alias "RegOpenKeyExA"(byval hKey as HKEY, byval lpSubKey as LPCSTR, byval ulOptions as DWORD, byval samDesired as REGSAM, byval phkResult as PHKEY) as LONG

declare function RegOpenKeyExW(byval hKey as HKEY, byval lpSubKey as LPCWSTR, byval ulOptions as DWORD, byval samDesired as REGSAM, byval phkResult as PHKEY) as LONG


declare function RegQueryInfoKeyA(byval hKey as HKEY, byval lpClass as LPSTR, byval lpcchClass as LPDWORD, byval lpReserved as LPDWORD, byval lpcSubKeys as LPDWORD, byval lpcbMaxSubKeyLen as LPDWORD, byval lpcbMaxClassLen as LPDWORD, byval lpcValues as LPDWORD, byval lpcbMaxValueNameLen as LPDWORD, byval lpcbMaxValueLen as LPDWORD, byval lpcbSecurityDescriptor as LPDWORD, byval lpftLastWriteTime as PFILETIME) as LONG

 declare function RegQueryInfoKey alias "RegQueryInfoKeyA"(byval hKey as HKEY, byval lpClass as LPSTR, byval lpcchClass as LPDWORD, byval lpReserved as LPDWORD, byval lpcSubKeys as LPDWORD, byval lpcbMaxSubKeyLen as LPDWORD, byval lpcbMaxClassLen as LPDWORD, byval lpcValues as LPDWORD, byval lpcbMaxValueNameLen as LPDWORD, byval lpcbMaxValueLen as LPDWORD, byval lpcbSecurityDescriptor as LPDWORD, byval lpftLastWriteTime as PFILETIME) as LONG

declare function RegQueryInfoKeyW(byval hKey as HKEY, byval lpClass as LPWSTR, byval lpcchClass as LPDWORD, byval lpReserved as LPDWORD, byval lpcSubKeys as LPDWORD, byval lpcbMaxSubKeyLen as LPDWORD, byval lpcbMaxClassLen as LPDWORD, byval lpcValues as LPDWORD, byval lpcbMaxValueNameLen as LPDWORD, byval lpcbMaxValueLen as LPDWORD, byval lpcbSecurityDescriptor as LPDWORD, byval lpftLastWriteTime as PFILETIME) as LONG


declare function RegQueryValueA(byval hKey as HKEY, byval lpSubKey as LPCSTR, byval lpData as LPSTR, byval lpcbData as PLONG) as LONG

 declare function RegQueryValue alias "RegQueryValueA"(byval hKey as HKEY, byval lpSubKey as LPCSTR, byval lpData as LPSTR, byval lpcbData as PLONG) as LONG

declare function RegQueryValueW(byval hKey as HKEY, byval lpSubKey as LPCWSTR, byval lpData as LPWSTR, byval lpcbData as PLONG) as LONG


declare function RegQueryMultipleValuesA(byval hKey as HKEY, byval val_list as PVALENTA, byval num_vals as DWORD, byval lpValueBuf as LPSTR, byval ldwTotsize as LPDWORD) as LONG

 declare function RegQueryMultipleValues alias "RegQueryMultipleValuesA"(byval hKey as HKEY, byval val_list as PVALENTA, byval num_vals as DWORD, byval lpValueBuf as LPSTR, byval ldwTotsize as LPDWORD) as LONG

declare function RegQueryMultipleValuesW(byval hKey as HKEY, byval val_list as PVALENTW, byval num_vals as DWORD, byval lpValueBuf as LPWSTR, byval ldwTotsize as LPDWORD) as LONG


declare function RegQueryValueExA(byval hKey as HKEY, byval lpValueName as LPCSTR, byval lpReserved as LPDWORD, byval lpType as LPDWORD, byval lpData as LPBYTE, byval lpcbData as LPDWORD) as LONG

 declare function RegQueryValueEx alias "RegQueryValueExA"(byval hKey as HKEY, byval lpValueName as LPCSTR, byval lpReserved as LPDWORD, byval lpType as LPDWORD, byval lpData as LPBYTE, byval lpcbData as LPDWORD) as LONG

declare function RegQueryValueExW(byval hKey as HKEY, byval lpValueName as LPCWSTR, byval lpReserved as LPDWORD, byval lpType as LPDWORD, byval lpData as LPBYTE, byval lpcbData as LPDWORD) as LONG


declare function RegReplaceKeyA(byval hKey as HKEY, byval lpSubKey as LPCSTR, byval lpNewFile as LPCSTR, byval lpOldFile as LPCSTR) as LONG

 declare function RegReplaceKey alias "RegReplaceKeyA"(byval hKey as HKEY, byval lpSubKey as LPCSTR, byval lpNewFile as LPCSTR, byval lpOldFile as LPCSTR) as LONG

declare function RegReplaceKeyW(byval hKey as HKEY, byval lpSubKey as LPCWSTR, byval lpNewFile as LPCWSTR, byval lpOldFile as LPCWSTR) as LONG


declare function RegRestoreKeyA(byval hKey as HKEY, byval lpFile as LPCSTR, byval dwFlags as DWORD) as LONG

 declare function RegRestoreKey alias "RegRestoreKeyA"(byval hKey as HKEY, byval lpFile as LPCSTR, byval dwFlags as DWORD) as LONG

declare function RegRestoreKeyW(byval hKey as HKEY, byval lpFile as LPCWSTR, byval dwFlags as DWORD) as LONG


declare function RegSaveKeyA(byval hKey as HKEY, byval lpFile as LPCSTR, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES) as LONG

 declare function RegSaveKey alias "RegSaveKeyA"(byval hKey as HKEY, byval lpFile as LPCSTR, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES) as LONG

declare function RegSaveKeyW(byval hKey as HKEY, byval lpFile as LPCWSTR, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES) as LONG


declare function RegSetKeySecurity(byval hKey as HKEY, byval SecurityInformation as SECURITY_INFORMATION, byval pSecurityDescriptor as PSECURITY_DESCRIPTOR) as LONG
declare function RegSetValueA(byval hKey as HKEY, byval lpSubKey as LPCSTR, byval dwType as DWORD, byval lpData as LPCSTR, byval cbData as DWORD) as LONG

 declare function RegSetValue alias "RegSetValueA"(byval hKey as HKEY, byval lpSubKey as LPCSTR, byval dwType as DWORD, byval lpData as LPCSTR, byval cbData as DWORD) as LONG

declare function RegSetValueW(byval hKey as HKEY, byval lpSubKey as LPCWSTR, byval dwType as DWORD, byval lpData as LPCWSTR, byval cbData as DWORD) as LONG


declare function RegSetValueExA(byval hKey as HKEY, byval lpValueName as LPCSTR, byval Reserved as DWORD, byval dwType as DWORD, byval lpData as const UBYTE ptr, byval cbData as DWORD) as LONG

 declare function RegSetValueEx alias "RegSetValueExA"(byval hKey as HKEY, byval lpValueName as LPCSTR, byval Reserved as DWORD, byval dwType as DWORD, byval lpData as const UBYTE ptr, byval cbData as DWORD) as LONG

declare function RegSetValueExW(byval hKey as HKEY, byval lpValueName as LPCWSTR, byval Reserved as DWORD, byval dwType as DWORD, byval lpData as const UBYTE ptr, byval cbData as DWORD) as LONG


declare function RegUnLoadKeyA(byval hKey as HKEY, byval lpSubKey as LPCSTR) as LONG

 declare function RegUnLoadKey alias "RegUnLoadKeyA"(byval hKey as HKEY, byval lpSubKey as LPCSTR) as LONG

declare function RegUnLoadKeyW(byval hKey as HKEY, byval lpSubKey as LPCWSTR) as LONG


declare function RegGetValueA(byval hkey as HKEY, byval lpSubKey as LPCSTR, byval lpValue as LPCSTR, byval dwFlags as DWORD, byval pdwType as LPDWORD, byval pvData as PVOID, byval pcbData as LPDWORD) as LONG

 declare function RegGetValue alias "RegGetValueA"(byval hkey as HKEY, byval lpSubKey as LPCSTR, byval lpValue as LPCSTR, byval dwFlags as DWORD, byval pdwType as LPDWORD, byval pvData as PVOID, byval pcbData as LPDWORD) as LONG

declare function RegGetValueW(byval hkey as HKEY, byval lpSubKey as LPCWSTR, byval lpValue as LPCWSTR, byval dwFlags as DWORD, byval pdwType as LPDWORD, byval pvData as PVOID, byval pcbData as LPDWORD) as LONG


declare function InitiateSystemShutdownA(byval lpMachineName as LPSTR, byval lpMessage as LPSTR, byval dwTimeout as DWORD, byval bForceAppsClosed as WINBOOL, byval bRebootAfterShutdown as WINBOOL) as WINBOOL

 declare function InitiateSystemShutdown alias "InitiateSystemShutdownA"(byval lpMachineName as LPSTR, byval lpMessage as LPSTR, byval dwTimeout as DWORD, byval bForceAppsClosed as WINBOOL, byval bRebootAfterShutdown as WINBOOL) as WINBOOL

declare function InitiateSystemShutdownW(byval lpMachineName as LPWSTR, byval lpMessage as LPWSTR, byval dwTimeout as DWORD, byval bForceAppsClosed as WINBOOL, byval bRebootAfterShutdown as WINBOOL) as WINBOOL


declare function AbortSystemShutdownA(byval lpMachineName as LPSTR) as WINBOOL

 declare function AbortSystemShutdown alias "AbortSystemShutdownA"(byval lpMachineName as LPSTR) as WINBOOL

declare function AbortSystemShutdownW(byval lpMachineName as LPWSTR) as WINBOOL


const REASON_SWINSTALL = SHTDN_REASON_MAJOR_SOFTWARE or SHTDN_REASON_MINOR_INSTALLATION
const REASON_HWINSTALL = SHTDN_REASON_MAJOR_HARDWARE or SHTDN_REASON_MINOR_INSTALLATION
const REASON_SERVICEHANG = SHTDN_REASON_MAJOR_SOFTWARE or SHTDN_REASON_MINOR_HUNG
const REASON_UNSTABLE = SHTDN_REASON_MAJOR_SYSTEM or SHTDN_REASON_MINOR_UNSTABLE
const REASON_SWHWRECONF = SHTDN_REASON_MAJOR_SOFTWARE or SHTDN_REASON_MINOR_RECONFIG
const REASON_OTHER = SHTDN_REASON_MAJOR_OTHER or SHTDN_REASON_MINOR_OTHER
const REASON_UNKNOWN = SHTDN_REASON_UNKNOWN
const REASON_LEGACY_API = SHTDN_REASON_LEGACY_API
const REASON_PLANNED_FLAG = SHTDN_REASON_FLAG_PLANNED
const MAX_SHUTDOWN_TIMEOUT = (((10 * 365) * 24) * 60) * 60
declare function InitiateSystemShutdownExA(byval lpMachineName as LPSTR, byval lpMessage as LPSTR, byval dwTimeout as DWORD, byval bForceAppsClosed as WINBOOL, byval bRebootAfterShutdown as WINBOOL, byval dwReason as DWORD) as WINBOOL

 declare function InitiateSystemShutdownEx alias "InitiateSystemShutdownExA"(byval lpMachineName as LPSTR, byval lpMessage as LPSTR, byval dwTimeout as DWORD, byval bForceAppsClosed as WINBOOL, byval bRebootAfterShutdown as WINBOOL, byval dwReason as DWORD) as WINBOOL

declare function InitiateSystemShutdownExW(byval lpMachineName as LPWSTR, byval lpMessage as LPWSTR, byval dwTimeout as DWORD, byval bForceAppsClosed as WINBOOL, byval bRebootAfterShutdown as WINBOOL, byval dwReason as DWORD) as WINBOOL


declare function RegSaveKeyExA(byval hKey as HKEY, byval lpFile as LPCSTR, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES, byval Flags as DWORD) as LONG

 declare function RegSaveKeyEx alias "RegSaveKeyExA"(byval hKey as HKEY, byval lpFile as LPCSTR, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES, byval Flags as DWORD) as LONG

declare function RegSaveKeyExW(byval hKey as HKEY, byval lpFile as LPCWSTR, byval lpSecurityAttributes as LPSECURITY_ATTRIBUTES, byval Flags as DWORD) as LONG


declare function Wow64Win32ApiEntry(byval dwFuncNumber as DWORD, byval dwFlag as DWORD, byval dwRes as DWORD) as LONG































end extern



extern "Windows"

const WNNC_NET_MSNET = &h00010000
const WNNC_NET_SMB = &h00020000
const WNNC_NET_LANMAN = WNNC_NET_SMB
const WNNC_NET_NETWARE = &h00030000
const WNNC_NET_VINES = &h00040000
const WNNC_NET_10NET = &h00050000
const WNNC_NET_LOCUS = &h00060000
const WNNC_NET_SUN_PC_NFS = &h00070000
const WNNC_NET_LANSTEP = &h00080000
const WNNC_NET_9TILES = &h00090000
const WNNC_NET_LANTASTIC = &h000a0000
const WNNC_NET_AS400 = &h000b0000
const WNNC_NET_FTP_NFS = &h000c0000
const WNNC_NET_PATHWORKS = &h000d0000
const WNNC_NET_LIFENET = &h000e0000
const WNNC_NET_POWERLAN = &h000f0000
const WNNC_NET_BWNFS = &h00100000
const WNNC_NET_COGENT = &h00110000
const WNNC_NET_FARALLON = &h00120000
const WNNC_NET_APPLETALK = &h00130000
const WNNC_NET_INTERGRAPH = &h00140000
const WNNC_NET_SYMFONET = &h00150000
const WNNC_NET_CLEARCASE = &h00160000
const WNNC_NET_FRONTIER = &h00170000
const WNNC_NET_BMC = &h00180000
const WNNC_NET_DCE = &h00190000
const WNNC_NET_AVID = &h001a0000
const WNNC_NET_DOCUSPACE = &h001b0000
const WNNC_NET_MANGOSOFT = &h001c0000
const WNNC_NET_SERNET = &h001d0000
const WNNC_NET_RIVERFRONT1 = &h001e0000
const WNNC_NET_RIVERFRONT2 = &h001f0000
const WNNC_NET_DECORB = &h00200000
const WNNC_NET_PROTSTOR = &h00210000
const WNNC_NET_FJ_REDIR = &h00220000
const WNNC_NET_DISTINCT = &h00230000
const WNNC_NET_TWINS = &h00240000
const WNNC_NET_RDR2SAMPLE = &h00250000
const WNNC_NET_CSC = &h00260000
const WNNC_NET_3IN1 = &h00270000
const WNNC_NET_EXTENDNET = &h00290000
const WNNC_NET_STAC = &h002a0000
const WNNC_NET_FOXBAT = &h002b0000
const WNNC_NET_YAHOO = &h002c0000
const WNNC_NET_EXIFS = &h002d0000
const WNNC_NET_DAV = &h002e0000
const WNNC_NET_KNOWARE = &h002f0000
const WNNC_NET_OBJECT_DIRE = &h00300000
const WNNC_NET_MASFAX = &h00310000
const WNNC_NET_HOB_NFS = &h00320000
const WNNC_NET_SHIVA = &h00330000
const WNNC_NET_IBMAL = &h00340000
const WNNC_NET_LOCK = &h00350000
const WNNC_NET_TERMSRV = &h00360000
const WNNC_NET_SRT = &h00370000
const WNNC_NET_QUINCY = &h00380000
const WNNC_NET_OPENAFS = &h00390000
const WNNC_NET_AVID1 = &h003a0000
const WNNC_NET_DFS = &h003b0000
const WNNC_NET_KWNP = &h003c0000
const WNNC_NET_ZENWORKS = &h003d0000
const WNNC_NET_DRIVEONWEB = &h003e0000
const WNNC_NET_VMWARE = &h003f0000
const WNNC_NET_RSFX = &h00400000
const WNNC_NET_MFILES = &h00410000
const WNNC_NET_MS_NFS = &h00420000
const WNNC_NET_GOOGLE = &h00430000
const WNNC_NET_NDFS = &h00440000
const WNNC_CRED_MANAGER = &hffff0000
const RESOURCE_CONNECTED = &h00000001
const RESOURCE_GLOBALNET = &h00000002
const RESOURCE_REMEMBERED = &h00000003
const RESOURCE_RECENT = &h00000004
const RESOURCE_CONTEXT = &h00000005
const RESOURCETYPE_ANY = &h000000000
const RESOURCETYPE_DISK = &h00000001
const RESOURCETYPE_PRINT = &h00000002
const RESOURCETYPE_RESERVED = &h00000008
const RESOURCETYPE_UNKNOWN = &hFFFFFFFF
const RESOURCEUSAGE_CONNECTABLE = &h00000001
const RESOURCEUSAGE_CONTAINER = &h00000002
const RESOURCEUSAGE_NOLOCALDEVICE = &h00000004
const RESOURCEUSAGE_SIBLING = &h00000008
const RESOURCEUSAGE_ATTACHED = &h00000010
const RESOURCEUSAGE_ALL = (RESOURCEUSAGE_CONNECTABLE or RESOURCEUSAGE_CONTAINER) or RESOURCEUSAGE_ATTACHED
const RESOURCEUSAGE_RESERVED = &h80000000
const RESOURCEDISPLAYTYPE_GENERIC = &h000000000
const RESOURCEDISPLAYTYPE_DOMAIN = &h00000001
const RESOURCEDISPLAYTYPE_SERVER = &h00000002
const RESOURCEDISPLAYTYPE_SHARE = &h00000003
const RESOURCEDISPLAYTYPE_FILE = &h00000004
const RESOURCEDISPLAYTYPE_GROUP = &h00000005
const RESOURCEDISPLAYTYPE_NETWORK = &h00000006
const RESOURCEDISPLAYTYPE_ROOT = &h00000007
const RESOURCEDISPLAYTYPE_SHAREADMIN = &h00000008
const RESOURCEDISPLAYTYPE_DIRECTORY = &h00000009
const RESOURCEDISPLAYTYPE_TREE = &h0000000a
const RESOURCEDISPLAYTYPE_NDSCONTAINER = &h0000000b

type _NETRESOURCEA
 dwScope as DWORD
 dwType as DWORD
 dwDisplayType as DWORD
 dwUsage as DWORD
 lpLocalName as LPSTR
 lpRemoteName as LPSTR
 lpComment as LPSTR
 lpProvider as LPSTR
end type

type NETRESOURCEA as _NETRESOURCEA
type LPNETRESOURCEA as _NETRESOURCEA ptr

type _NETRESOURCEW
 dwScope as DWORD
 dwType as DWORD
 dwDisplayType as DWORD
 dwUsage as DWORD
 lpLocalName as LPWSTR
 lpRemoteName as LPWSTR
 lpComment as LPWSTR
 lpProvider as LPWSTR
end type

type NETRESOURCEW as _NETRESOURCEW
type LPNETRESOURCEW as _NETRESOURCEW ptr

 type NETRESOURCE as NETRESOURCEA
 type LPNETRESOURCE as LPNETRESOURCEA

const NETPROPERTY_PERSISTENT = 1
const CONNECT_UPDATE_PROFILE = &h00000001
const CONNECT_UPDATE_RECENT = &h00000002
const CONNECT_TEMPORARY = &h00000004
const CONNECT_INTERACTIVE = &h00000008
const CONNECT_PROMPT = &h00000010
const CONNECT_NEED_DRIVE = &h00000020
const CONNECT_REFCOUNT = &h00000040
const CONNECT_REDIRECT = &h00000080
const CONNECT_LOCALDRIVE = &h00000100
const CONNECT_CURRENT_MEDIA = &h00000200
const CONNECT_DEFERRED = &h00000400
const CONNECT_RESERVED = &hFF000000
const CONNECT_COMMANDLINE = &h00000800
const CONNECT_CMD_SAVECRED = &h00001000



declare function WNetAddConnectionA(byval lpRemoteName as LPCSTR, byval lpPassword as LPCSTR, byval lpLocalName as LPCSTR) as DWORD

 declare function WNetAddConnection alias "WNetAddConnectionA"(byval lpRemoteName as LPCSTR, byval lpPassword as LPCSTR, byval lpLocalName as LPCSTR) as DWORD

declare function WNetAddConnectionW(byval lpRemoteName as LPCWSTR, byval lpPassword as LPCWSTR, byval lpLocalName as LPCWSTR) as DWORD


declare function WNetAddConnection2A(byval lpNetResource as LPNETRESOURCEA, byval lpPassword as LPCSTR, byval lpUserName as LPCSTR, byval dwFlags as DWORD) as DWORD

 declare function WNetAddConnection2 alias "WNetAddConnection2A"(byval lpNetResource as LPNETRESOURCEA, byval lpPassword as LPCSTR, byval lpUserName as LPCSTR, byval dwFlags as DWORD) as DWORD

declare function WNetAddConnection2W(byval lpNetResource as LPNETRESOURCEW, byval lpPassword as LPCWSTR, byval lpUserName as LPCWSTR, byval dwFlags as DWORD) as DWORD


declare function WNetAddConnection3A(byval hwndOwner as HWND, byval lpNetResource as LPNETRESOURCEA, byval lpPassword as LPCSTR, byval lpUserName as LPCSTR, byval dwFlags as DWORD) as DWORD

 declare function WNetAddConnection3 alias "WNetAddConnection3A"(byval hwndOwner as HWND, byval lpNetResource as LPNETRESOURCEA, byval lpPassword as LPCSTR, byval lpUserName as LPCSTR, byval dwFlags as DWORD) as DWORD

declare function WNetAddConnection3W(byval hwndOwner as HWND, byval lpNetResource as LPNETRESOURCEW, byval lpPassword as LPCWSTR, byval lpUserName as LPCWSTR, byval dwFlags as DWORD) as DWORD


declare function WNetCancelConnectionA(byval lpName as LPCSTR, byval fForce as WINBOOL) as DWORD

 declare function WNetCancelConnection alias "WNetCancelConnectionA"(byval lpName as LPCSTR, byval fForce as WINBOOL) as DWORD

declare function WNetCancelConnectionW(byval lpName as LPCWSTR, byval fForce as WINBOOL) as DWORD


declare function WNetCancelConnection2A(byval lpName as LPCSTR, byval dwFlags as DWORD, byval fForce as WINBOOL) as DWORD

 declare function WNetCancelConnection2 alias "WNetCancelConnection2A"(byval lpName as LPCSTR, byval dwFlags as DWORD, byval fForce as WINBOOL) as DWORD

declare function WNetCancelConnection2W(byval lpName as LPCWSTR, byval dwFlags as DWORD, byval fForce as WINBOOL) as DWORD


declare function WNetGetConnectionA(byval lpLocalName as LPCSTR, byval lpRemoteName as LPSTR, byval lpnLength as LPDWORD) as DWORD

 declare function WNetGetConnection alias "WNetGetConnectionA"(byval lpLocalName as LPCSTR, byval lpRemoteName as LPSTR, byval lpnLength as LPDWORD) as DWORD

declare function WNetGetConnectionW(byval lpLocalName as LPCWSTR, byval lpRemoteName as LPWSTR, byval lpnLength as LPDWORD) as DWORD


declare function WNetRestoreConnectionA(byval hwndParent as HWND, byval lpDevice as LPCSTR) as DWORD

 declare function WNetRestoreConnection alias "WNetRestoreConnectionA"(byval hwndParent as HWND, byval lpDevice as LPCSTR) as DWORD

declare function WNetUseConnectionA(byval hwndOwner as HWND, byval lpNetResource as LPNETRESOURCEA, byval lpPassword as LPCSTR, byval lpUserID as LPCSTR, byval dwFlags as DWORD, byval lpAccessName as LPSTR, byval lpBufferSize as LPDWORD, byval lpResult as LPDWORD) as DWORD

 declare function WNetUseConnection alias "WNetUseConnectionA"(byval hwndOwner as HWND, byval lpNetResource as LPNETRESOURCEA, byval lpPassword as LPCSTR, byval lpUserID as LPCSTR, byval dwFlags as DWORD, byval lpAccessName as LPSTR, byval lpBufferSize as LPDWORD, byval lpResult as LPDWORD) as DWORD

declare function WNetUseConnectionW(byval hwndOwner as HWND, byval lpNetResource as LPNETRESOURCEW, byval lpPassword as LPCWSTR, byval lpUserID as LPCWSTR, byval dwFlags as DWORD, byval lpAccessName as LPWSTR, byval lpBufferSize as LPDWORD, byval lpResult as LPDWORD) as DWORD


declare function WNetConnectionDialog(byval hwnd as HWND, byval dwType as DWORD) as DWORD
declare function WNetDisconnectDialog(byval hwnd as HWND, byval dwType as DWORD) as DWORD

 declare function WNetRestoreConnectionW(byval hwndParent as HWND, byval lpDevice as LPCWSTR) as DWORD


type _CONNECTDLGSTRUCTA
 cbStructure as DWORD
 hwndOwner as HWND
 lpConnRes as LPNETRESOURCEA
 dwFlags as DWORD
 dwDevNum as DWORD
end type

type CONNECTDLGSTRUCTA as _CONNECTDLGSTRUCTA
type LPCONNECTDLGSTRUCTA as _CONNECTDLGSTRUCTA ptr

type _CONNECTDLGSTRUCTW
 cbStructure as DWORD
 hwndOwner as HWND
 lpConnRes as LPNETRESOURCEW
 dwFlags as DWORD
 dwDevNum as DWORD
end type

type CONNECTDLGSTRUCTW as _CONNECTDLGSTRUCTW
type LPCONNECTDLGSTRUCTW as _CONNECTDLGSTRUCTW ptr

 type CONNECTDLGSTRUCT as CONNECTDLGSTRUCTA
 type LPCONNECTDLGSTRUCT as LPCONNECTDLGSTRUCTA

const CONNDLG_RO_PATH = &h00000001
const CONNDLG_CONN_POINT = &h00000002
const CONNDLG_USE_MRU = &h00000004
const CONNDLG_HIDE_BOX = &h00000008
const CONNDLG_PERSIST = &h00000010
const CONNDLG_NOT_PERSIST = &h00000020
declare function WNetConnectionDialog1A(byval lpConnDlgStruct as LPCONNECTDLGSTRUCTA) as DWORD

 declare function WNetConnectionDialog1 alias "WNetConnectionDialog1A"(byval lpConnDlgStruct as LPCONNECTDLGSTRUCTA) as DWORD

declare function WNetConnectionDialog1W(byval lpConnDlgStruct as LPCONNECTDLGSTRUCTW) as DWORD


type _DISCDLGSTRUCTA
 cbStructure as DWORD
 hwndOwner as HWND
 lpLocalName as LPSTR
 lpRemoteName as LPSTR
 dwFlags as DWORD
end type

type DISCDLGSTRUCTA as _DISCDLGSTRUCTA
type LPDISCDLGSTRUCTA as _DISCDLGSTRUCTA ptr

type _DISCDLGSTRUCTW
 cbStructure as DWORD
 hwndOwner as HWND
 lpLocalName as LPWSTR
 lpRemoteName as LPWSTR
 dwFlags as DWORD
end type

type DISCDLGSTRUCTW as _DISCDLGSTRUCTW
type LPDISCDLGSTRUCTW as _DISCDLGSTRUCTW ptr

 type DISCDLGSTRUCT as DISCDLGSTRUCTA
 type LPDISCDLGSTRUCT as LPDISCDLGSTRUCTA

const DISC_UPDATE_PROFILE = &h00000001
const DISC_NO_FORCE = &h00000040
declare function WNetDisconnectDialog1A(byval lpConnDlgStruct as LPDISCDLGSTRUCTA) as DWORD

 declare function WNetDisconnectDialog1 alias "WNetDisconnectDialog1A"(byval lpConnDlgStruct as LPDISCDLGSTRUCTA) as DWORD

declare function WNetDisconnectDialog1W(byval lpConnDlgStruct as LPDISCDLGSTRUCTW) as DWORD


declare function WNetOpenEnumA(byval dwScope as DWORD, byval dwType as DWORD, byval dwUsage as DWORD, byval lpNetResource as LPNETRESOURCEA, byval lphEnum as LPHANDLE) as DWORD

 declare function WNetOpenEnum alias "WNetOpenEnumA"(byval dwScope as DWORD, byval dwType as DWORD, byval dwUsage as DWORD, byval lpNetResource as LPNETRESOURCEA, byval lphEnum as LPHANDLE) as DWORD

declare function WNetOpenEnumW(byval dwScope as DWORD, byval dwType as DWORD, byval dwUsage as DWORD, byval lpNetResource as LPNETRESOURCEW, byval lphEnum as LPHANDLE) as DWORD


declare function WNetEnumResourceA(byval hEnum as HANDLE, byval lpcCount as LPDWORD, byval lpBuffer as LPVOID, byval lpBufferSize as LPDWORD) as DWORD

 declare function WNetEnumResource alias "WNetEnumResourceA"(byval hEnum as HANDLE, byval lpcCount as LPDWORD, byval lpBuffer as LPVOID, byval lpBufferSize as LPDWORD) as DWORD

declare function WNetEnumResourceW(byval hEnum as HANDLE, byval lpcCount as LPDWORD, byval lpBuffer as LPVOID, byval lpBufferSize as LPDWORD) as DWORD


declare function WNetCloseEnum(byval hEnum as HANDLE) as DWORD
declare function WNetGetResourceParentA(byval lpNetResource as LPNETRESOURCEA, byval lpBuffer as LPVOID, byval lpcbBuffer as LPDWORD) as DWORD

 declare function WNetGetResourceParent alias "WNetGetResourceParentA"(byval lpNetResource as LPNETRESOURCEA, byval lpBuffer as LPVOID, byval lpcbBuffer as LPDWORD) as DWORD

declare function WNetGetResourceParentW(byval lpNetResource as LPNETRESOURCEW, byval lpBuffer as LPVOID, byval lpcbBuffer as LPDWORD) as DWORD


declare function WNetGetResourceInformationA(byval lpNetResource as LPNETRESOURCEA, byval lpBuffer as LPVOID, byval lpcbBuffer as LPDWORD, byval lplpSystem as LPSTR ptr) as DWORD

 declare function WNetGetResourceInformation alias "WNetGetResourceInformationA"(byval lpNetResource as LPNETRESOURCEA, byval lpBuffer as LPVOID, byval lpcbBuffer as LPDWORD, byval lplpSystem as LPSTR ptr) as DWORD

declare function WNetGetResourceInformationW(byval lpNetResource as LPNETRESOURCEW, byval lpBuffer as LPVOID, byval lpcbBuffer as LPDWORD, byval lplpSystem as LPWSTR ptr) as DWORD


const UNIVERSAL_NAME_INFO_LEVEL = &h00000001
const REMOTE_NAME_INFO_LEVEL = &h00000002

type _UNIVERSAL_NAME_INFOA
 lpUniversalName as LPSTR
end type

type UNIVERSAL_NAME_INFOA as _UNIVERSAL_NAME_INFOA
type LPUNIVERSAL_NAME_INFOA as _UNIVERSAL_NAME_INFOA ptr

type _UNIVERSAL_NAME_INFOW
 lpUniversalName as LPWSTR
end type

type UNIVERSAL_NAME_INFOW as _UNIVERSAL_NAME_INFOW
type LPUNIVERSAL_NAME_INFOW as _UNIVERSAL_NAME_INFOW ptr

 type UNIVERSAL_NAME_INFO as UNIVERSAL_NAME_INFOA
 type LPUNIVERSAL_NAME_INFO as LPUNIVERSAL_NAME_INFOA

type _REMOTE_NAME_INFOA
 lpUniversalName as LPSTR
 lpConnectionName as LPSTR
 lpRemainingPath as LPSTR
end type

type REMOTE_NAME_INFOA as _REMOTE_NAME_INFOA
type LPREMOTE_NAME_INFOA as _REMOTE_NAME_INFOA ptr

type _REMOTE_NAME_INFOW
 lpUniversalName as LPWSTR
 lpConnectionName as LPWSTR
 lpRemainingPath as LPWSTR
end type

type REMOTE_NAME_INFOW as _REMOTE_NAME_INFOW
type LPREMOTE_NAME_INFOW as _REMOTE_NAME_INFOW ptr

 type REMOTE_NAME_INFO as REMOTE_NAME_INFOA
 type LPREMOTE_NAME_INFO as LPREMOTE_NAME_INFOA

declare function WNetGetUniversalNameA(byval lpLocalPath as LPCSTR, byval dwInfoLevel as DWORD, byval lpBuffer as LPVOID, byval lpBufferSize as LPDWORD) as DWORD

 declare function WNetGetUniversalName alias "WNetGetUniversalNameA"(byval lpLocalPath as LPCSTR, byval dwInfoLevel as DWORD, byval lpBuffer as LPVOID, byval lpBufferSize as LPDWORD) as DWORD

declare function WNetGetUniversalNameW(byval lpLocalPath as LPCWSTR, byval dwInfoLevel as DWORD, byval lpBuffer as LPVOID, byval lpBufferSize as LPDWORD) as DWORD


declare function WNetGetUserA(byval lpName as LPCSTR, byval lpUserName as LPSTR, byval lpnLength as LPDWORD) as DWORD

 declare function WNetGetUser alias "WNetGetUserA"(byval lpName as LPCSTR, byval lpUserName as LPSTR, byval lpnLength as LPDWORD) as DWORD

declare function WNetGetUserW(byval lpName as LPCWSTR, byval lpUserName as LPWSTR, byval lpnLength as LPDWORD) as DWORD


const WNFMT_MULTILINE = &h01
const WNFMT_ABBREVIATED = &h02
const WNFMT_INENUM = &h10
const WNFMT_CONNECTION = &h20
declare function WNetGetProviderNameA(byval dwNetType as DWORD, byval lpProviderName as LPSTR, byval lpBufferSize as LPDWORD) as DWORD

 declare function WNetGetProviderName alias "WNetGetProviderNameA"(byval dwNetType as DWORD, byval lpProviderName as LPSTR, byval lpBufferSize as LPDWORD) as DWORD

declare function WNetGetProviderNameW(byval dwNetType as DWORD, byval lpProviderName as LPWSTR, byval lpBufferSize as LPDWORD) as DWORD


type _NETINFOSTRUCT
 cbStructure as DWORD
 dwProviderVersion as DWORD
 dwStatus as DWORD
 dwCharacteristics as DWORD
 dwHandle as ULONG_PTR
 wNetType as WORD
 dwPrinters as DWORD
 dwDrives as DWORD
end type

type NETINFOSTRUCT as _NETINFOSTRUCT
type LPNETINFOSTRUCT as _NETINFOSTRUCT ptr
const NETINFO_DLL16 = &h00000001
const NETINFO_DISKRED = &h00000004
const NETINFO_PRINTERRED = &h00000008
declare function WNetGetNetworkInformationA(byval lpProvider as LPCSTR, byval lpNetInfoStruct as LPNETINFOSTRUCT) as DWORD

 declare function WNetGetNetworkInformation alias "WNetGetNetworkInformationA"(byval lpProvider as LPCSTR, byval lpNetInfoStruct as LPNETINFOSTRUCT) as DWORD

declare function WNetGetNetworkInformationW(byval lpProvider as LPCWSTR, byval lpNetInfoStruct as LPNETINFOSTRUCT) as DWORD


type PFNGETPROFILEPATHA as function(byval pszUsername as LPCSTR, byval pszBuffer as LPSTR, byval cbBuffer as UINT) as UINT
type PFNGETPROFILEPATHW as function(byval pszUsername as LPCWSTR, byval pszBuffer as LPWSTR, byval cbBuffer as UINT) as UINT

 type PFNGETPROFILEPATH as PFNGETPROFILEPATHA

type PFNRECONCILEPROFILEA as function(byval pszCentralFile as LPCSTR, byval pszLocalFile as LPCSTR, byval dwFlags as DWORD) as UINT
type PFNRECONCILEPROFILEW as function(byval pszCentralFile as LPCWSTR, byval pszLocalFile as LPCWSTR, byval dwFlags as DWORD) as UINT

 type PFNRECONCILEPROFILE as PFNRECONCILEPROFILEA

const RP_LOGON = &h01
const RP_INIFILE = &h02
type PFNPROCESSPOLICIESA as function(byval hwnd as HWND, byval pszPath as LPCSTR, byval pszUsername as LPCSTR, byval pszComputerName as LPCSTR, byval dwFlags as DWORD) as WINBOOL
type PFNPROCESSPOLICIESW as function(byval hwnd as HWND, byval pszPath as LPCWSTR, byval pszUsername as LPCWSTR, byval pszComputerName as LPCWSTR, byval dwFlags as DWORD) as WINBOOL

 type PFNPROCESSPOLICIES as PFNPROCESSPOLICIESA

const PP_DISPLAYERRORS = &h01
declare function WNetGetLastErrorA(byval lpError as LPDWORD, byval lpErrorBuf as LPSTR, byval nErrorBufSize as DWORD, byval lpNameBuf as LPSTR, byval nNameBufSize as DWORD) as DWORD

 declare function WNetGetLastError alias "WNetGetLastErrorA"(byval lpError as LPDWORD, byval lpErrorBuf as LPSTR, byval nErrorBufSize as DWORD, byval lpNameBuf as LPSTR, byval nNameBufSize as DWORD) as DWORD

declare function WNetGetLastErrorW(byval lpError as LPDWORD, byval lpErrorBuf as LPWSTR, byval nErrorBufSize as DWORD, byval lpNameBuf as LPWSTR, byval nNameBufSize as DWORD) as DWORD


const WN_SUCCESS = NO_ERROR
const WN_NO_ERROR = NO_ERROR
const WN_NOT_SUPPORTED = ERROR_NOT_SUPPORTED
const WN_CANCEL = ERROR_CANCELLED
const WN_RETRY = ERROR_RETRY
const WN_NET_ERROR = ERROR_UNEXP_NET_ERR
const WN_MORE_DATA = ERROR_MORE_DATA
const WN_BAD_POINTER = ERROR_INVALID_ADDRESS
const WN_BAD_VALUE = ERROR_INVALID_PARAMETER
const WN_BAD_USER = ERROR_BAD_USERNAME
const WN_BAD_PASSWORD = ERROR_INVALID_PASSWORD
const WN_ACCESS_DENIED = ERROR_ACCESS_DENIED
const WN_FUNCTION_BUSY = ERROR_BUSY
const WN_WINDOWS_ERROR = ERROR_UNEXP_NET_ERR
const WN_OUT_OF_MEMORY = ERROR_NOT_ENOUGH_MEMORY
const WN_NO_NETWORK = ERROR_NO_NETWORK
const WN_EXTENDED_ERROR = ERROR_EXTENDED_ERROR
const WN_BAD_LEVEL = ERROR_INVALID_LEVEL
const WN_BAD_HANDLE = ERROR_INVALID_HANDLE
const WN_NOT_INITIALIZING = ERROR_ALREADY_INITIALIZED
const WN_NO_MORE_DEVICES = ERROR_NO_MORE_DEVICES
const WN_NOT_CONNECTED = ERROR_NOT_CONNECTED
const WN_OPEN_FILES = ERROR_OPEN_FILES
const WN_DEVICE_IN_USE = ERROR_DEVICE_IN_USE
const WN_BAD_NETNAME = ERROR_BAD_NET_NAME
const WN_BAD_LOCALNAME = ERROR_BAD_DEVICE
const WN_ALREADY_CONNECTED = ERROR_ALREADY_ASSIGNED
const WN_DEVICE_ERROR = ERROR_GEN_FAILURE
const WN_CONNECTION_CLOSED = ERROR_CONNECTION_UNAVAIL
const WN_NO_NET_OR_BAD_PATH = ERROR_NO_NET_OR_BAD_PATH
const WN_BAD_PROVIDER = ERROR_BAD_PROVIDER
const WN_CANNOT_OPEN_PROFILE = ERROR_CANNOT_OPEN_PROFILE
const WN_BAD_PROFILE = ERROR_BAD_PROFILE
const WN_BAD_DEV_TYPE = ERROR_BAD_DEV_TYPE
const WN_DEVICE_ALREADY_REMEMBERED = ERROR_DEVICE_ALREADY_REMEMBERED
const WN_CONNECTED_OTHER_PASSWORD = ERROR_CONNECTED_OTHER_PASSWORD
const WN_CONNECTED_OTHER_PASSWORD_DEFAULT = ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT
const WN_NO_MORE_ENTRIES = ERROR_NO_MORE_ITEMS
const WN_NOT_CONTAINER = ERROR_NOT_CONTAINER
const WN_NOT_AUTHENTICATED = ERROR_NOT_AUTHENTICATED
const WN_NOT_LOGGED_ON = ERROR_NOT_LOGGED_ON
const WN_NOT_VALIDATED = ERROR_NO_LOGON_SERVERS

type _NETCONNECTINFOSTRUCT
 cbStructure as DWORD
 dwFlags as DWORD
 dwSpeed as DWORD
 dwDelay as DWORD
 dwOptDataSize as DWORD
end type

type NETCONNECTINFOSTRUCT as _NETCONNECTINFOSTRUCT
type LPNETCONNECTINFOSTRUCT as _NETCONNECTINFOSTRUCT ptr
const WNCON_FORNETCARD = &h00000001
const WNCON_NOTROUTED = &h00000002
const WNCON_SLOWLINK = &h00000004
const WNCON_DYNAMIC = &h00000008
declare function MultinetGetConnectionPerformanceA(byval lpNetResource as LPNETRESOURCEA, byval lpNetConnectInfoStruct as LPNETCONNECTINFOSTRUCT) as DWORD

 declare function MultinetGetConnectionPerformance alias "MultinetGetConnectionPerformanceA"(byval lpNetResource as LPNETRESOURCEA, byval lpNetConnectInfoStruct as LPNETCONNECTINFOSTRUCT) as DWORD

declare function MultinetGetConnectionPerformanceW(byval lpNetResource as LPNETRESOURCEW, byval lpNetConnectInfoStruct as LPNETCONNECTINFOSTRUCT) as DWORD


end extern







#inclib "advapi32"


extern "Windows"



const SERVICE_NO_CHANGE = &hffffffff
const SERVICE_ACTIVE = &h00000001
const SERVICE_INACTIVE = &h00000002
const SERVICE_STATE_ALL = SERVICE_ACTIVE or SERVICE_INACTIVE
const SERVICE_CONTROL_STOP = &h00000001
const SERVICE_CONTROL_PAUSE = &h00000002
const SERVICE_CONTROL_CONTINUE = &h00000003
const SERVICE_CONTROL_INTERROGATE = &h00000004
const SERVICE_CONTROL_SHUTDOWN = &h00000005
const SERVICE_CONTROL_PARAMCHANGE = &h00000006
const SERVICE_CONTROL_NETBINDADD = &h00000007
const SERVICE_CONTROL_NETBINDREMOVE = &h00000008
const SERVICE_CONTROL_NETBINDENABLE = &h00000009
const SERVICE_CONTROL_NETBINDDISABLE = &h0000000A
const SERVICE_CONTROL_DEVICEEVENT = &h0000000B
const SERVICE_CONTROL_HARDWAREPROFILECHANGE = &h0000000C
const SERVICE_CONTROL_POWEREVENT = &h0000000D
const SERVICE_CONTROL_SESSIONCHANGE = &h0000000E
const SERVICE_STOPPED = &h00000001
const SERVICE_START_PENDING = &h00000002
const SERVICE_STOP_PENDING = &h00000003
const SERVICE_RUNNING = &h00000004
const SERVICE_CONTINUE_PENDING = &h00000005
const SERVICE_PAUSE_PENDING = &h00000006
const SERVICE_PAUSED = &h00000007
const SERVICE_ACCEPT_STOP = &h00000001
const SERVICE_ACCEPT_PAUSE_CONTINUE = &h00000002
const SERVICE_ACCEPT_SHUTDOWN = &h00000004
const SERVICE_ACCEPT_PARAMCHANGE = &h00000008
const SERVICE_ACCEPT_NETBINDCHANGE = &h00000010
const SERVICE_ACCEPT_HARDWAREPROFILECHANGE = &h00000020
const SERVICE_ACCEPT_POWEREVENT = &h00000040
const SERVICE_ACCEPT_SESSIONCHANGE = &h00000080
const SC_MANAGER_CONNECT = &h0001
const SC_MANAGER_CREATE_SERVICE = &h0002
const SC_MANAGER_ENUMERATE_SERVICE = &h0004
const SC_MANAGER_LOCK = &h0008
const SC_MANAGER_QUERY_LOCK_STATUS = &h0010
const SC_MANAGER_MODIFY_BOOT_CONFIG = &h0020
const SC_MANAGER_ALL_ACCESS = (((((STANDARD_RIGHTS_REQUIRED or SC_MANAGER_CONNECT) or SC_MANAGER_CREATE_SERVICE) or SC_MANAGER_ENUMERATE_SERVICE) or SC_MANAGER_LOCK) or SC_MANAGER_QUERY_LOCK_STATUS) or SC_MANAGER_MODIFY_BOOT_CONFIG
const SERVICE_QUERY_CONFIG = &h0001
const SERVICE_CHANGE_CONFIG = &h0002
const SERVICE_QUERY_STATUS = &h0004
const SERVICE_ENUMERATE_DEPENDENTS = &h0008
const SERVICE_START = &h0010
const SERVICE_STOP = &h0020
const SERVICE_PAUSE_CONTINUE = &h0040
const SERVICE_INTERROGATE = &h0080
const SERVICE_USER_DEFINED_CONTROL = &h0100
const SERVICE_ALL_ACCESS = ((((((((STANDARD_RIGHTS_REQUIRED or SERVICE_QUERY_CONFIG) or SERVICE_CHANGE_CONFIG) or SERVICE_QUERY_STATUS) or SERVICE_ENUMERATE_DEPENDENTS) or SERVICE_START) or SERVICE_STOP) or SERVICE_PAUSE_CONTINUE) or SERVICE_INTERROGATE) or SERVICE_USER_DEFINED_CONTROL
const SERVICE_RUNS_IN_SYSTEM_PROCESS = &h00000001
const SERVICE_CONFIG_DESCRIPTION = 1
const SERVICE_CONFIG_FAILURE_ACTIONS = 2

type _SERVICE_DESCRIPTIONA
 lpDescription as LPSTR
end type

type SERVICE_DESCRIPTIONA as _SERVICE_DESCRIPTIONA
type LPSERVICE_DESCRIPTIONA as _SERVICE_DESCRIPTIONA ptr

type _SERVICE_DESCRIPTIONW
 lpDescription as LPWSTR
end type

type SERVICE_DESCRIPTIONW as _SERVICE_DESCRIPTIONW
type LPSERVICE_DESCRIPTIONW as _SERVICE_DESCRIPTIONW ptr

 type SERVICE_DESCRIPTION as SERVICE_DESCRIPTIONA
 type LPSERVICE_DESCRIPTION as LPSERVICE_DESCRIPTIONA

type _SC_ACTION_TYPE as long
enum
 SC_ACTION_NONE = 0
 SC_ACTION_RESTART = 1
 SC_ACTION_REBOOT = 2
 SC_ACTION_RUN_COMMAND = 3
end enum

type SC_ACTION_TYPE as _SC_ACTION_TYPE

type _SC_ACTION
 as SC_ACTION_TYPE Type
 Delay as DWORD
end type

type SC_ACTION as _SC_ACTION
type LPSC_ACTION as _SC_ACTION ptr

type _SERVICE_FAILURE_ACTIONSA
 dwResetPeriod as DWORD
 lpRebootMsg as LPSTR
 lpCommand as LPSTR
 cActions as DWORD
 lpsaActions as SC_ACTION ptr
end type

type SERVICE_FAILURE_ACTIONSA as _SERVICE_FAILURE_ACTIONSA
type LPSERVICE_FAILURE_ACTIONSA as _SERVICE_FAILURE_ACTIONSA ptr

type _SERVICE_FAILURE_ACTIONSW
 dwResetPeriod as DWORD
 lpRebootMsg as LPWSTR
 lpCommand as LPWSTR
 cActions as DWORD
 lpsaActions as SC_ACTION ptr
end type

type SERVICE_FAILURE_ACTIONSW as _SERVICE_FAILURE_ACTIONSW
type LPSERVICE_FAILURE_ACTIONSW as _SERVICE_FAILURE_ACTIONSW ptr

 type SERVICE_FAILURE_ACTIONS as SERVICE_FAILURE_ACTIONSA
 type LPSERVICE_FAILURE_ACTIONS as LPSERVICE_FAILURE_ACTIONSA

type SC_HANDLE__
 unused as long
end type

type SC_HANDLE as SC_HANDLE__ ptr
type LPSC_HANDLE as SC_HANDLE ptr

type SERVICE_STATUS_HANDLE__
 unused as long
end type

type SERVICE_STATUS_HANDLE as SERVICE_STATUS_HANDLE__ ptr

type _SC_STATUS_TYPE as long
enum
 SC_STATUS_PROCESS_INFO = 0
end enum

type SC_STATUS_TYPE as _SC_STATUS_TYPE

type _SC_ENUM_TYPE as long
enum
 SC_ENUM_PROCESS_INFO = 0
end enum

type SC_ENUM_TYPE as _SC_ENUM_TYPE

type _SERVICE_STATUS
 dwServiceType as DWORD
 dwCurrentState as DWORD
 dwControlsAccepted as DWORD
 dwWin32ExitCode as DWORD
 dwServiceSpecificExitCode as DWORD
 dwCheckPoint as DWORD
 dwWaitHint as DWORD
end type

type SERVICE_STATUS as _SERVICE_STATUS
type LPSERVICE_STATUS as _SERVICE_STATUS ptr

type _SERVICE_STATUS_PROCESS
 dwServiceType as DWORD
 dwCurrentState as DWORD
 dwControlsAccepted as DWORD
 dwWin32ExitCode as DWORD
 dwServiceSpecificExitCode as DWORD
 dwCheckPoint as DWORD
 dwWaitHint as DWORD
 dwProcessId as DWORD
 dwServiceFlags as DWORD
end type

type SERVICE_STATUS_PROCESS as _SERVICE_STATUS_PROCESS
type LPSERVICE_STATUS_PROCESS as _SERVICE_STATUS_PROCESS ptr

type _ENUM_SERVICE_STATUSA
 lpServiceName as LPSTR
 lpDisplayName as LPSTR
 ServiceStatus as SERVICE_STATUS
end type

type ENUM_SERVICE_STATUSA as _ENUM_SERVICE_STATUSA
type LPENUM_SERVICE_STATUSA as _ENUM_SERVICE_STATUSA ptr

type _ENUM_SERVICE_STATUSW
 lpServiceName as LPWSTR
 lpDisplayName as LPWSTR
 ServiceStatus as SERVICE_STATUS
end type

type ENUM_SERVICE_STATUSW as _ENUM_SERVICE_STATUSW
type LPENUM_SERVICE_STATUSW as _ENUM_SERVICE_STATUSW ptr

 type ENUM_SERVICE_STATUS as ENUM_SERVICE_STATUSA
 type LPENUM_SERVICE_STATUS as LPENUM_SERVICE_STATUSA

type _ENUM_SERVICE_STATUS_PROCESSA
 lpServiceName as LPSTR
 lpDisplayName as LPSTR
 ServiceStatusProcess as SERVICE_STATUS_PROCESS
end type

type ENUM_SERVICE_STATUS_PROCESSA as _ENUM_SERVICE_STATUS_PROCESSA
type LPENUM_SERVICE_STATUS_PROCESSA as _ENUM_SERVICE_STATUS_PROCESSA ptr

type _ENUM_SERVICE_STATUS_PROCESSW
 lpServiceName as LPWSTR
 lpDisplayName as LPWSTR
 ServiceStatusProcess as SERVICE_STATUS_PROCESS
end type

type ENUM_SERVICE_STATUS_PROCESSW as _ENUM_SERVICE_STATUS_PROCESSW
type LPENUM_SERVICE_STATUS_PROCESSW as _ENUM_SERVICE_STATUS_PROCESSW ptr

 type ENUM_SERVICE_STATUS_PROCESS as ENUM_SERVICE_STATUS_PROCESSA
 type LPENUM_SERVICE_STATUS_PROCESS as LPENUM_SERVICE_STATUS_PROCESSA

type SC_LOCK as LPVOID

type _QUERY_SERVICE_LOCK_STATUSA
 fIsLocked as DWORD
 lpLockOwner as LPSTR
 dwLockDuration as DWORD
end type

type QUERY_SERVICE_LOCK_STATUSA as _QUERY_SERVICE_LOCK_STATUSA
type LPQUERY_SERVICE_LOCK_STATUSA as _QUERY_SERVICE_LOCK_STATUSA ptr

type _QUERY_SERVICE_LOCK_STATUSW
 fIsLocked as DWORD
 lpLockOwner as LPWSTR
 dwLockDuration as DWORD
end type

type QUERY_SERVICE_LOCK_STATUSW as _QUERY_SERVICE_LOCK_STATUSW
type LPQUERY_SERVICE_LOCK_STATUSW as _QUERY_SERVICE_LOCK_STATUSW ptr

 type QUERY_SERVICE_LOCK_STATUS as QUERY_SERVICE_LOCK_STATUSA
 type LPQUERY_SERVICE_LOCK_STATUS as LPQUERY_SERVICE_LOCK_STATUSA

type _QUERY_SERVICE_CONFIGA
 dwServiceType as DWORD
 dwStartType as DWORD
 dwErrorControl as DWORD
 lpBinaryPathName as LPSTR
 lpLoadOrderGroup as LPSTR
 dwTagId as DWORD
 lpDependencies as LPSTR
 lpServiceStartName as LPSTR
 lpDisplayName as LPSTR
end type

type QUERY_SERVICE_CONFIGA as _QUERY_SERVICE_CONFIGA
type LPQUERY_SERVICE_CONFIGA as _QUERY_SERVICE_CONFIGA ptr

type _QUERY_SERVICE_CONFIGW
 dwServiceType as DWORD
 dwStartType as DWORD
 dwErrorControl as DWORD
 lpBinaryPathName as LPWSTR
 lpLoadOrderGroup as LPWSTR
 dwTagId as DWORD
 lpDependencies as LPWSTR
 lpServiceStartName as LPWSTR
 lpDisplayName as LPWSTR
end type

type QUERY_SERVICE_CONFIGW as _QUERY_SERVICE_CONFIGW
type LPQUERY_SERVICE_CONFIGW as _QUERY_SERVICE_CONFIGW ptr

 type QUERY_SERVICE_CONFIG as QUERY_SERVICE_CONFIGA
 type LPQUERY_SERVICE_CONFIG as LPQUERY_SERVICE_CONFIGA

type LPSERVICE_MAIN_FUNCTIONW as sub(byval dwNumServicesArgs as DWORD, byval lpServiceArgVectors as LPWSTR ptr)
type LPSERVICE_MAIN_FUNCTIONA as sub(byval dwNumServicesArgs as DWORD, byval lpServiceArgVectors as LPSTR ptr)

 type LPSERVICE_MAIN_FUNCTION as LPSERVICE_MAIN_FUNCTIONA

type _SERVICE_TABLE_ENTRYA
 lpServiceName as LPSTR
 lpServiceProc as LPSERVICE_MAIN_FUNCTIONA
end type

type SERVICE_TABLE_ENTRYA as _SERVICE_TABLE_ENTRYA
type LPSERVICE_TABLE_ENTRYA as _SERVICE_TABLE_ENTRYA ptr

type _SERVICE_TABLE_ENTRYW
 lpServiceName as LPWSTR
 lpServiceProc as LPSERVICE_MAIN_FUNCTIONW
end type

type SERVICE_TABLE_ENTRYW as _SERVICE_TABLE_ENTRYW
type LPSERVICE_TABLE_ENTRYW as _SERVICE_TABLE_ENTRYW ptr

 type SERVICE_TABLE_ENTRY as SERVICE_TABLE_ENTRYA
 type LPSERVICE_TABLE_ENTRY as LPSERVICE_TABLE_ENTRYA

type LPHANDLER_FUNCTION as sub(byval dwControl as DWORD)
type LPHANDLER_FUNCTION_EX as function(byval dwControl as DWORD, byval dwEventType as DWORD, byval lpEventData as LPVOID, byval lpContext as LPVOID) as DWORD
declare function ChangeServiceConfigA(byval hService as SC_HANDLE, byval dwServiceType as DWORD, byval dwStartType as DWORD, byval dwErrorControl as DWORD, byval lpBinaryPathName as LPCSTR, byval lpLoadOrderGroup as LPCSTR, byval lpdwTagId as LPDWORD, byval lpDependencies as LPCSTR, byval lpServiceStartName as LPCSTR, byval lpPassword as LPCSTR, byval lpDisplayName as LPCSTR) as WINBOOL

 declare function ChangeServiceConfig alias "ChangeServiceConfigA"(byval hService as SC_HANDLE, byval dwServiceType as DWORD, byval dwStartType as DWORD, byval dwErrorControl as DWORD, byval lpBinaryPathName as LPCSTR, byval lpLoadOrderGroup as LPCSTR, byval lpdwTagId as LPDWORD, byval lpDependencies as LPCSTR, byval lpServiceStartName as LPCSTR, byval lpPassword as LPCSTR, byval lpDisplayName as LPCSTR) as WINBOOL

declare function ChangeServiceConfigW(byval hService as SC_HANDLE, byval dwServiceType as DWORD, byval dwStartType as DWORD, byval dwErrorControl as DWORD, byval lpBinaryPathName as LPCWSTR, byval lpLoadOrderGroup as LPCWSTR, byval lpdwTagId as LPDWORD, byval lpDependencies as LPCWSTR, byval lpServiceStartName as LPCWSTR, byval lpPassword as LPCWSTR, byval lpDisplayName as LPCWSTR) as WINBOOL


declare function ChangeServiceConfig2A(byval hService as SC_HANDLE, byval dwInfoLevel as DWORD, byval lpInfo as LPVOID) as WINBOOL

 declare function ChangeServiceConfig2 alias "ChangeServiceConfig2A"(byval hService as SC_HANDLE, byval dwInfoLevel as DWORD, byval lpInfo as LPVOID) as WINBOOL

declare function ChangeServiceConfig2W(byval hService as SC_HANDLE, byval dwInfoLevel as DWORD, byval lpInfo as LPVOID) as WINBOOL


declare function CloseServiceHandle(byval hSCObject as SC_HANDLE) as WINBOOL
declare function ControlService(byval hService as SC_HANDLE, byval dwControl as DWORD, byval lpServiceStatus as LPSERVICE_STATUS) as WINBOOL
declare function CreateServiceA(byval hSCManager as SC_HANDLE, byval lpServiceName as LPCSTR, byval lpDisplayName as LPCSTR, byval dwDesiredAccess as DWORD, byval dwServiceType as DWORD, byval dwStartType as DWORD, byval dwErrorControl as DWORD, byval lpBinaryPathName as LPCSTR, byval lpLoadOrderGroup as LPCSTR, byval lpdwTagId as LPDWORD, byval lpDependencies as LPCSTR, byval lpServiceStartName as LPCSTR, byval lpPassword as LPCSTR) as SC_HANDLE

 declare function CreateService alias "CreateServiceA"(byval hSCManager as SC_HANDLE, byval lpServiceName as LPCSTR, byval lpDisplayName as LPCSTR, byval dwDesiredAccess as DWORD, byval dwServiceType as DWORD, byval dwStartType as DWORD, byval dwErrorControl as DWORD, byval lpBinaryPathName as LPCSTR, byval lpLoadOrderGroup as LPCSTR, byval lpdwTagId as LPDWORD, byval lpDependencies as LPCSTR, byval lpServiceStartName as LPCSTR, byval lpPassword as LPCSTR) as SC_HANDLE

declare function CreateServiceW(byval hSCManager as SC_HANDLE, byval lpServiceName as LPCWSTR, byval lpDisplayName as LPCWSTR, byval dwDesiredAccess as DWORD, byval dwServiceType as DWORD, byval dwStartType as DWORD, byval dwErrorControl as DWORD, byval lpBinaryPathName as LPCWSTR, byval lpLoadOrderGroup as LPCWSTR, byval lpdwTagId as LPDWORD, byval lpDependencies as LPCWSTR, byval lpServiceStartName as LPCWSTR, byval lpPassword as LPCWSTR) as SC_HANDLE


declare function DeleteService(byval hService as SC_HANDLE) as WINBOOL
declare function EnumDependentServicesA(byval hService as SC_HANDLE, byval dwServiceState as DWORD, byval lpServices as LPENUM_SERVICE_STATUSA, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD, byval lpServicesReturned as LPDWORD) as WINBOOL

 declare function EnumDependentServices alias "EnumDependentServicesA"(byval hService as SC_HANDLE, byval dwServiceState as DWORD, byval lpServices as LPENUM_SERVICE_STATUSA, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD, byval lpServicesReturned as LPDWORD) as WINBOOL

declare function EnumDependentServicesW(byval hService as SC_HANDLE, byval dwServiceState as DWORD, byval lpServices as LPENUM_SERVICE_STATUSW, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD, byval lpServicesReturned as LPDWORD) as WINBOOL


declare function EnumServicesStatusA(byval hSCManager as SC_HANDLE, byval dwServiceType as DWORD, byval dwServiceState as DWORD, byval lpServices as LPENUM_SERVICE_STATUSA, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD, byval lpServicesReturned as LPDWORD, byval lpResumeHandle as LPDWORD) as WINBOOL

 declare function EnumServicesStatus alias "EnumServicesStatusA"(byval hSCManager as SC_HANDLE, byval dwServiceType as DWORD, byval dwServiceState as DWORD, byval lpServices as LPENUM_SERVICE_STATUSA, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD, byval lpServicesReturned as LPDWORD, byval lpResumeHandle as LPDWORD) as WINBOOL

declare function EnumServicesStatusW(byval hSCManager as SC_HANDLE, byval dwServiceType as DWORD, byval dwServiceState as DWORD, byval lpServices as LPENUM_SERVICE_STATUSW, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD, byval lpServicesReturned as LPDWORD, byval lpResumeHandle as LPDWORD) as WINBOOL


declare function EnumServicesStatusExA(byval hSCManager as SC_HANDLE, byval InfoLevel as SC_ENUM_TYPE, byval dwServiceType as DWORD, byval dwServiceState as DWORD, byval lpServices as LPBYTE, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD, byval lpServicesReturned as LPDWORD, byval lpResumeHandle as LPDWORD, byval pszGroupName as LPCSTR) as WINBOOL

 declare function EnumServicesStatusEx alias "EnumServicesStatusExA"(byval hSCManager as SC_HANDLE, byval InfoLevel as SC_ENUM_TYPE, byval dwServiceType as DWORD, byval dwServiceState as DWORD, byval lpServices as LPBYTE, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD, byval lpServicesReturned as LPDWORD, byval lpResumeHandle as LPDWORD, byval pszGroupName as LPCSTR) as WINBOOL

declare function EnumServicesStatusExW(byval hSCManager as SC_HANDLE, byval InfoLevel as SC_ENUM_TYPE, byval dwServiceType as DWORD, byval dwServiceState as DWORD, byval lpServices as LPBYTE, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD, byval lpServicesReturned as LPDWORD, byval lpResumeHandle as LPDWORD, byval pszGroupName as LPCWSTR) as WINBOOL


declare function GetServiceKeyNameA(byval hSCManager as SC_HANDLE, byval lpDisplayName as LPCSTR, byval lpServiceName as LPSTR, byval lpcchBuffer as LPDWORD) as WINBOOL

 declare function GetServiceKeyName alias "GetServiceKeyNameA"(byval hSCManager as SC_HANDLE, byval lpDisplayName as LPCSTR, byval lpServiceName as LPSTR, byval lpcchBuffer as LPDWORD) as WINBOOL

declare function GetServiceKeyNameW(byval hSCManager as SC_HANDLE, byval lpDisplayName as LPCWSTR, byval lpServiceName as LPWSTR, byval lpcchBuffer as LPDWORD) as WINBOOL


declare function GetServiceDisplayNameA(byval hSCManager as SC_HANDLE, byval lpServiceName as LPCSTR, byval lpDisplayName as LPSTR, byval lpcchBuffer as LPDWORD) as WINBOOL

 declare function GetServiceDisplayName alias "GetServiceDisplayNameA"(byval hSCManager as SC_HANDLE, byval lpServiceName as LPCSTR, byval lpDisplayName as LPSTR, byval lpcchBuffer as LPDWORD) as WINBOOL

declare function GetServiceDisplayNameW(byval hSCManager as SC_HANDLE, byval lpServiceName as LPCWSTR, byval lpDisplayName as LPWSTR, byval lpcchBuffer as LPDWORD) as WINBOOL


declare function LockServiceDatabase(byval hSCManager as SC_HANDLE) as SC_LOCK
declare function NotifyBootConfigStatus(byval BootAcceptable as WINBOOL) as WINBOOL
declare function OpenSCManagerA(byval lpMachineName as LPCSTR, byval lpDatabaseName as LPCSTR, byval dwDesiredAccess as DWORD) as SC_HANDLE

 declare function OpenSCManager alias "OpenSCManagerA"(byval lpMachineName as LPCSTR, byval lpDatabaseName as LPCSTR, byval dwDesiredAccess as DWORD) as SC_HANDLE

declare function OpenSCManagerW(byval lpMachineName as LPCWSTR, byval lpDatabaseName as LPCWSTR, byval dwDesiredAccess as DWORD) as SC_HANDLE


declare function OpenServiceA(byval hSCManager as SC_HANDLE, byval lpServiceName as LPCSTR, byval dwDesiredAccess as DWORD) as SC_HANDLE

 declare function OpenService alias "OpenServiceA"(byval hSCManager as SC_HANDLE, byval lpServiceName as LPCSTR, byval dwDesiredAccess as DWORD) as SC_HANDLE

declare function OpenServiceW(byval hSCManager as SC_HANDLE, byval lpServiceName as LPCWSTR, byval dwDesiredAccess as DWORD) as SC_HANDLE


declare function QueryServiceConfigA(byval hService as SC_HANDLE, byval lpServiceConfig as LPQUERY_SERVICE_CONFIGA, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD) as WINBOOL

 declare function QueryServiceConfig alias "QueryServiceConfigA"(byval hService as SC_HANDLE, byval lpServiceConfig as LPQUERY_SERVICE_CONFIGA, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD) as WINBOOL

declare function QueryServiceConfigW(byval hService as SC_HANDLE, byval lpServiceConfig as LPQUERY_SERVICE_CONFIGW, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD) as WINBOOL


declare function QueryServiceConfig2A(byval hService as SC_HANDLE, byval dwInfoLevel as DWORD, byval lpBuffer as LPBYTE, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD) as WINBOOL

 declare function QueryServiceConfig2 alias "QueryServiceConfig2A"(byval hService as SC_HANDLE, byval dwInfoLevel as DWORD, byval lpBuffer as LPBYTE, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD) as WINBOOL

declare function QueryServiceConfig2W(byval hService as SC_HANDLE, byval dwInfoLevel as DWORD, byval lpBuffer as LPBYTE, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD) as WINBOOL


declare function QueryServiceLockStatusA(byval hSCManager as SC_HANDLE, byval lpLockStatus as LPQUERY_SERVICE_LOCK_STATUSA, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD) as WINBOOL

 declare function QueryServiceLockStatus alias "QueryServiceLockStatusA"(byval hSCManager as SC_HANDLE, byval lpLockStatus as LPQUERY_SERVICE_LOCK_STATUSA, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD) as WINBOOL

declare function QueryServiceLockStatusW(byval hSCManager as SC_HANDLE, byval lpLockStatus as LPQUERY_SERVICE_LOCK_STATUSW, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD) as WINBOOL


declare function QueryServiceObjectSecurity(byval hService as SC_HANDLE, byval dwSecurityInformation as SECURITY_INFORMATION, byval lpSecurityDescriptor as PSECURITY_DESCRIPTOR, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD) as WINBOOL
declare function QueryServiceStatus(byval hService as SC_HANDLE, byval lpServiceStatus as LPSERVICE_STATUS) as WINBOOL
declare function QueryServiceStatusEx(byval hService as SC_HANDLE, byval InfoLevel as SC_STATUS_TYPE, byval lpBuffer as LPBYTE, byval cbBufSize as DWORD, byval pcbBytesNeeded as LPDWORD) as WINBOOL
declare function RegisterServiceCtrlHandlerA(byval lpServiceName as LPCSTR, byval lpHandlerProc as LPHANDLER_FUNCTION) as SERVICE_STATUS_HANDLE

 declare function RegisterServiceCtrlHandler alias "RegisterServiceCtrlHandlerA"(byval lpServiceName as LPCSTR, byval lpHandlerProc as LPHANDLER_FUNCTION) as SERVICE_STATUS_HANDLE

declare function RegisterServiceCtrlHandlerW(byval lpServiceName as LPCWSTR, byval lpHandlerProc as LPHANDLER_FUNCTION) as SERVICE_STATUS_HANDLE


declare function RegisterServiceCtrlHandlerExA(byval lpServiceName as LPCSTR, byval lpHandlerProc as LPHANDLER_FUNCTION_EX, byval lpContext as LPVOID) as SERVICE_STATUS_HANDLE

 declare function RegisterServiceCtrlHandlerEx alias "RegisterServiceCtrlHandlerExA"(byval lpServiceName as LPCSTR, byval lpHandlerProc as LPHANDLER_FUNCTION_EX, byval lpContext as LPVOID) as SERVICE_STATUS_HANDLE

declare function RegisterServiceCtrlHandlerExW(byval lpServiceName as LPCWSTR, byval lpHandlerProc as LPHANDLER_FUNCTION_EX, byval lpContext as LPVOID) as SERVICE_STATUS_HANDLE


declare function SetServiceObjectSecurity(byval hService as SC_HANDLE, byval dwSecurityInformation as SECURITY_INFORMATION, byval lpSecurityDescriptor as PSECURITY_DESCRIPTOR) as WINBOOL
declare function SetServiceStatus(byval hServiceStatus as SERVICE_STATUS_HANDLE, byval lpServiceStatus as LPSERVICE_STATUS) as WINBOOL
declare function StartServiceCtrlDispatcherA(byval lpServiceStartTable as const SERVICE_TABLE_ENTRYA ptr) as WINBOOL

 declare function StartServiceCtrlDispatcher alias "StartServiceCtrlDispatcherA"(byval lpServiceStartTable as const SERVICE_TABLE_ENTRYA ptr) as WINBOOL

declare function StartServiceCtrlDispatcherW(byval lpServiceStartTable as const SERVICE_TABLE_ENTRYW ptr) as WINBOOL


declare function StartServiceA(byval hService as SC_HANDLE, byval dwNumServiceArgs as DWORD, byval lpServiceArgVectors as LPCSTR ptr) as WINBOOL

 declare function StartService alias "StartServiceA"(byval hService as SC_HANDLE, byval dwNumServiceArgs as DWORD, byval lpServiceArgVectors as LPCSTR ptr) as WINBOOL

declare function StartServiceW(byval hService as SC_HANDLE, byval dwNumServiceArgs as DWORD, byval lpServiceArgVectors as LPCWSTR ptr) as WINBOOL


declare function UnlockServiceDatabase(byval ScLock as SC_LOCK) as WINBOOL













end extern



type _MODEMDEVCAPS
 dwActualSize as DWORD
 dwRequiredSize as DWORD
 dwDevSpecificOffset as DWORD
 dwDevSpecificSize as DWORD
 dwModemProviderVersion as DWORD
 dwModemManufacturerOffset as DWORD
 dwModemManufacturerSize as DWORD
 dwModemModelOffset as DWORD
 dwModemModelSize as DWORD
 dwModemVersionOffset as DWORD
 dwModemVersionSize as DWORD
 dwDialOptions as DWORD
 dwCallSetupFailTimer as DWORD
 dwInactivityTimeout as DWORD
 dwSpeakerVolume as DWORD
 dwSpeakerMode as DWORD
 dwModemOptions as DWORD
 dwMaxDTERate as DWORD
 dwMaxDCERate as DWORD
 abVariablePortion(0 to 0) as UBYTE
end type

type MODEMDEVCAPS as _MODEMDEVCAPS
type PMODEMDEVCAPS as _MODEMDEVCAPS ptr
type LPMODEMDEVCAPS as _MODEMDEVCAPS ptr

type _MODEMSETTINGS
 dwActualSize as DWORD
 dwRequiredSize as DWORD
 dwDevSpecificOffset as DWORD
 dwDevSpecificSize as DWORD
 dwCallSetupFailTimer as DWORD
 dwInactivityTimeout as DWORD
 dwSpeakerVolume as DWORD
 dwSpeakerMode as DWORD
 dwPreferredModemOptions as DWORD
 dwNegotiatedModemOptions as DWORD
 dwNegotiatedDCERate as DWORD
 abVariablePortion(0 to 0) as UBYTE
end type

type MODEMSETTINGS as _MODEMSETTINGS
type PMODEMSETTINGS as _MODEMSETTINGS ptr
type LPMODEMSETTINGS as _MODEMSETTINGS ptr

const DIALOPTION_BILLING = &h00000040
const DIALOPTION_QUIET = &h00000080
const DIALOPTION_DIALTONE = &h00000100
const MDMVOLFLAG_LOW = &h00000001
const MDMVOLFLAG_MEDIUM = &h00000002
const MDMVOLFLAG_HIGH = &h00000004
const MDMVOL_LOW = &h000000000
const MDMVOL_MEDIUM = &h00000001
const MDMVOL_HIGH = &h00000002
const MDMSPKRFLAG_OFF = &h00000001
const MDMSPKRFLAG_DIAL = &h00000002
const MDMSPKRFLAG_ON = &h00000004
const MDMSPKRFLAG_CALLSETUP = &h00000008
const MDMSPKR_OFF = &h000000000
const MDMSPKR_DIAL = &h00000001
const MDMSPKR_ON = &h00000002
const MDMSPKR_CALLSETUP = &h00000003
const MDM_COMPRESSION = &h00000001
const MDM_ERROR_CONTROL = &h00000002
const MDM_FORCED_EC = &h00000004
const MDM_CELLULAR = &h00000008
const MDM_FLOWCONTROL_HARD = &h00000010
const MDM_FLOWCONTROL_SOFT = &h00000020
const MDM_CCITT_OVERRIDE = &h00000040
const MDM_SPEED_ADJUST = &h00000080
const MDM_TONE_DIAL = &h00000100
const MDM_BLIND_DIAL = &h00000200
const MDM_V23_OVERRIDE = &h00000400
const MDM_DIAGNOSTICS = &h00000800
const MDM_MASK_BEARERMODE = &h0000f000
const MDM_SHIFT_BEARERMODE = 12
const MDM_MASK_PROTOCOLID = &h000f0000
const MDM_SHIFT_PROTOCOLID = 16
const MDM_MASK_PROTOCOLDATA = &h0ff00000
const MDM_SHIFT_PROTOCOLDATA = 20
const MDM_MASK_PROTOCOLINFO = MDM_MASK_PROTOCOLID or MDM_MASK_PROTOCOLDATA
const MDM_SHIFT_PROTOCOLINFO = MDM_SHIFT_PROTOCOLID
const MDM_MASK_EXTENDEDINFO = MDM_MASK_BEARERMODE or MDM_MASK_PROTOCOLINFO
const MDM_SHIFT_EXTENDEDINFO = MDM_SHIFT_BEARERMODE
const MDM_BEARERMODE_ANALOG = &h00
const MDM_BEARERMODE_ISDN = &h1
const MDM_BEARERMODE_GSM = &h2
const MDM_PROTOCOLID_DEFAULT = &h00
const MDM_PROTOCOLID_HDLCPPP = &h1
const MDM_PROTOCOLID_V128 = &h2
const MDM_PROTOCOLID_X75 = &h3
const MDM_PROTOCOLID_V110 = &h4
const MDM_PROTOCOLID_V120 = &h5
const MDM_PROTOCOLID_AUTO = &h6
const MDM_PROTOCOLID_ANALOG = &h7
const MDM_PROTOCOLID_GPRS = &h8
const MDM_PROTOCOLID_PIAFS = &h9
const MDM_SHIFT_HDLCPPP_SPEED = &h00
const MDM_MASK_HDLCPPP_SPEED = &h7
const MDM_HDLCPPP_SPEED_DEFAULT = &h00
const MDM_HDLCPPP_SPEED_64K = &h1
const MDM_HDLCPPP_SPEED_56K = &h2
const MDM_SHIFT_HDLCPPP_AUTH = &h3
const MDM_MASK_HDLCPPP_AUTH = &h7 shl 3
const MDM_HDLCPPP_AUTH_DEFAULT = &h00
const MDM_HDLCPPP_AUTH_NONE = &h1
const MDM_HDLCPPP_AUTH_PAP = &h2
const MDM_HDLCPPP_AUTH_CHAP = &h3
const MDM_HDLCPPP_AUTH_MSCHAP = &h4
const MDM_SHIFT_HDLCPPP_ML = &h6
const MDM_MASK_HDLCPPP_ML = &h3 shl 6
const MDM_HDLCPPP_ML_DEFAULT = &h00
const MDM_HDLCPPP_ML_NONE = &h1
const MDM_HDLCPPP_ML_2 = &h2
const MDM_SHIFT_V120_SPEED = &h00
const MDM_MASK_V120_SPEED = &h7
const MDM_V120_SPEED_DEFAULT = &h00
const MDM_V120_SPEED_64K = &h1
const MDM_V120_SPEED_56K = &h2
const MDM_SHIFT_V120_ML = &h6
const MDM_MASK_V120_ML = &h3 shl 6
const MDM_V120_ML_DEFAULT = &h00
const MDM_V120_ML_NONE = &h1
const MDM_V120_ML_2 = &h2
const MDM_SHIFT_X75_DATA = &h00
const MDM_MASK_X75_DATA = &h7
const MDM_X75_DATA_DEFAULT = &h00
const MDM_X75_DATA_64K = &h1
const MDM_X75_DATA_128K = &h2
const MDM_X75_DATA_T_70 = &h3
const MDM_X75_DATA_BTX = &h4
const MDM_SHIFT_V110_SPEED = &h00
const MDM_MASK_V110_SPEED = &hf
const MDM_V110_SPEED_DEFAULT = &h00
const MDM_V110_SPEED_1DOT2K = &h1
const MDM_V110_SPEED_2DOT4K = &h2
const MDM_V110_SPEED_4DOT8K = &h3
const MDM_V110_SPEED_9DOT6K = &h4
const MDM_V110_SPEED_12DOT0K = &h5
const MDM_V110_SPEED_14DOT4K = &h6
const MDM_V110_SPEED_19DOT2K = &h7
const MDM_V110_SPEED_28DOT8K = &h8
const MDM_V110_SPEED_38DOT4K = &h9
const MDM_V110_SPEED_57DOT6K = &hA
const MDM_SHIFT_AUTO_SPEED = &h00
const MDM_MASK_AUTO_SPEED = &h7
const MDM_AUTO_SPEED_DEFAULT = &h00
const MDM_SHIFT_AUTO_ML = &h6
const MDM_MASK_AUTO_ML = &h3 shl 6
const MDM_AUTO_ML_DEFAULT = &h00
const MDM_AUTO_ML_NONE = &h1
const MDM_AUTO_ML_2 = &h2
const MDM_ANALOG_RLP_ON = &h00
const MDM_ANALOG_RLP_OFF = &h1
const MDM_ANALOG_V34 = &h2
const MDM_PIAFS_INCOMING = 0
const MDM_PIAFS_OUTGOING = 1


#inclib "imm32"


extern "Windows"


type HIMC__
 unused as long
end type

type HIMC as HIMC__ ptr

type HIMCC__
 unused as long
end type

type HIMCC as HIMCC__ ptr
type LPHKL as HKL ptr

type tagCOMPOSITIONFORM
 dwStyle as DWORD
 ptCurrentPos as POINT
 rcArea as RECT
end type

type COMPOSITIONFORM as tagCOMPOSITIONFORM
type PCOMPOSITIONFORM as tagCOMPOSITIONFORM ptr
type NPCOMPOSITIONFORM as tagCOMPOSITIONFORM ptr
type LPCOMPOSITIONFORM as tagCOMPOSITIONFORM ptr

type tagCANDIDATEFORM
 dwIndex as DWORD
 dwStyle as DWORD
 ptCurrentPos as POINT
 rcArea as RECT
end type

type CANDIDATEFORM as tagCANDIDATEFORM
type PCANDIDATEFORM as tagCANDIDATEFORM ptr
type NPCANDIDATEFORM as tagCANDIDATEFORM ptr
type LPCANDIDATEFORM as tagCANDIDATEFORM ptr

type tagCANDIDATELIST
 dwSize as DWORD
 dwStyle as DWORD
 dwCount as DWORD
 dwSelection as DWORD
 dwPageStart as DWORD
 dwPageSize as DWORD
 dwOffset(0 to 0) as DWORD
end type

type CANDIDATELIST as tagCANDIDATELIST
type PCANDIDATELIST as tagCANDIDATELIST ptr
type NPCANDIDATELIST as tagCANDIDATELIST ptr
type LPCANDIDATELIST as tagCANDIDATELIST ptr

type tagREGISTERWORDA
 lpReading as LPSTR
 lpWord as LPSTR
end type

type REGISTERWORDA as tagREGISTERWORDA
type PREGISTERWORDA as tagREGISTERWORDA ptr
type NPREGISTERWORDA as tagREGISTERWORDA ptr
type LPREGISTERWORDA as tagREGISTERWORDA ptr

type tagREGISTERWORDW
 lpReading as LPWSTR
 lpWord as LPWSTR
end type

type REGISTERWORDW as tagREGISTERWORDW
type PREGISTERWORDW as tagREGISTERWORDW ptr
type NPREGISTERWORDW as tagREGISTERWORDW ptr
type LPREGISTERWORDW as tagREGISTERWORDW ptr

 type REGISTERWORD as REGISTERWORDA
 type PREGISTERWORD as PREGISTERWORDA
 type NPREGISTERWORD as NPREGISTERWORDA
 type LPREGISTERWORD as LPREGISTERWORDA

type tagRECONVERTSTRING
 dwSize as DWORD
 dwVersion as DWORD
 dwStrLen as DWORD
 dwStrOffset as DWORD
 dwCompStrLen as DWORD
 dwCompStrOffset as DWORD
 dwTargetStrLen as DWORD
 dwTargetStrOffset as DWORD
end type

type RECONVERTSTRING as tagRECONVERTSTRING
type PRECONVERTSTRING as tagRECONVERTSTRING ptr
type NPRECONVERTSTRING as tagRECONVERTSTRING ptr
type LPRECONVERTSTRING as tagRECONVERTSTRING ptr
const STYLE_DESCRIPTION_SIZE = 32

type tagSTYLEBUFA
 dwStyle as DWORD
 szDescription as zstring * 32
end type

type STYLEBUFA as tagSTYLEBUFA
type PSTYLEBUFA as tagSTYLEBUFA ptr
type NPSTYLEBUFA as tagSTYLEBUFA ptr
type LPSTYLEBUFA as tagSTYLEBUFA ptr

type tagSTYLEBUFW
 dwStyle as DWORD
 szDescription as wstring * 32
end type

type STYLEBUFW as tagSTYLEBUFW
type PSTYLEBUFW as tagSTYLEBUFW ptr
type NPSTYLEBUFW as tagSTYLEBUFW ptr
type LPSTYLEBUFW as tagSTYLEBUFW ptr

 type STYLEBUF as STYLEBUFA
 type PSTYLEBUF as PSTYLEBUFA
 type NPSTYLEBUF as NPSTYLEBUFA
 type LPSTYLEBUF as LPSTYLEBUFA

const IMEMENUITEM_STRING_SIZE = 80

type tagIMEMENUITEMINFOA
 cbSize as UINT
 fType as UINT
 fState as UINT
 wID as UINT
 hbmpChecked as HBITMAP
 hbmpUnchecked as HBITMAP
 dwItemData as DWORD
 szString as zstring * 80
 hbmpItem as HBITMAP
end type

type IMEMENUITEMINFOA as tagIMEMENUITEMINFOA
type PIMEMENUITEMINFOA as tagIMEMENUITEMINFOA ptr
type NPIMEMENUITEMINFOA as tagIMEMENUITEMINFOA ptr
type LPIMEMENUITEMINFOA as tagIMEMENUITEMINFOA ptr

type tagIMEMENUITEMINFOW
 cbSize as UINT
 fType as UINT
 fState as UINT
 wID as UINT
 hbmpChecked as HBITMAP
 hbmpUnchecked as HBITMAP
 dwItemData as DWORD
 szString as wstring * 80
 hbmpItem as HBITMAP
end type

type IMEMENUITEMINFOW as tagIMEMENUITEMINFOW
type PIMEMENUITEMINFOW as tagIMEMENUITEMINFOW ptr
type NPIMEMENUITEMINFOW as tagIMEMENUITEMINFOW ptr
type LPIMEMENUITEMINFOW as tagIMEMENUITEMINFOW ptr

 type IMEMENUITEMINFO as IMEMENUITEMINFOA
 type PIMEMENUITEMINFO as PIMEMENUITEMINFOA
 type NPIMEMENUITEMINFO as NPIMEMENUITEMINFOA
 type LPIMEMENUITEMINFO as LPIMEMENUITEMINFOA

type tagIMECHARPOSITION
 dwSize as DWORD
 dwCharPos as DWORD
 pt as POINT
 cLineHeight as UINT
 rcDocument as RECT
end type

type IMECHARPOSITION as tagIMECHARPOSITION
type PIMECHARPOSITION as tagIMECHARPOSITION ptr
type NPIMECHARPOSITION as tagIMECHARPOSITION ptr
type LPIMECHARPOSITION as tagIMECHARPOSITION ptr
type IMCENUMPROC as function(byval as HIMC, byval as LPARAM) as WINBOOL
declare function ImmInstallIMEA(byval lpszIMEFileName as LPCSTR, byval lpszLayoutText as LPCSTR) as HKL

 declare function ImmInstallIME alias "ImmInstallIMEA"(byval lpszIMEFileName as LPCSTR, byval lpszLayoutText as LPCSTR) as HKL

declare function ImmInstallIMEW(byval lpszIMEFileName as LPCWSTR, byval lpszLayoutText as LPCWSTR) as HKL


declare function ImmGetDefaultIMEWnd(byval as HWND) as HWND
declare function ImmGetDescriptionA(byval as HKL, byval as LPSTR, byval uBufLen as UINT) as UINT

 declare function ImmGetDescription alias "ImmGetDescriptionA"(byval as HKL, byval as LPSTR, byval uBufLen as UINT) as UINT

declare function ImmGetDescriptionW(byval as HKL, byval as LPWSTR, byval uBufLen as UINT) as UINT


declare function ImmGetIMEFileNameA(byval as HKL, byval as LPSTR, byval uBufLen as UINT) as UINT

 declare function ImmGetIMEFileName alias "ImmGetIMEFileNameA"(byval as HKL, byval as LPSTR, byval uBufLen as UINT) as UINT

declare function ImmGetIMEFileNameW(byval as HKL, byval as LPWSTR, byval uBufLen as UINT) as UINT


declare function ImmGetProperty(byval as HKL, byval as DWORD) as DWORD
declare function ImmIsIME(byval as HKL) as WINBOOL
declare function ImmSimulateHotKey(byval as HWND, byval as DWORD) as WINBOOL
declare function ImmCreateContext() as HIMC
declare function ImmDestroyContext(byval as HIMC) as WINBOOL
declare function ImmGetContext(byval as HWND) as HIMC
declare function ImmReleaseContext(byval as HWND, byval as HIMC) as WINBOOL
declare function ImmAssociateContext(byval as HWND, byval as HIMC) as HIMC
declare function ImmAssociateContextEx(byval as HWND, byval as HIMC, byval as DWORD) as WINBOOL
declare function ImmGetCompositionStringA(byval as HIMC, byval as DWORD, byval as LPVOID, byval as DWORD) as LONG

 declare function ImmGetCompositionString alias "ImmGetCompositionStringA"(byval as HIMC, byval as DWORD, byval as LPVOID, byval as DWORD) as LONG

declare function ImmGetCompositionStringW(byval as HIMC, byval as DWORD, byval as LPVOID, byval as DWORD) as LONG


declare function ImmSetCompositionStringA(byval as HIMC, byval dwIndex as DWORD, byval lpComp as LPVOID, byval as DWORD, byval lpRead as LPVOID, byval as DWORD) as WINBOOL

 declare function ImmSetCompositionString alias "ImmSetCompositionStringA"(byval as HIMC, byval dwIndex as DWORD, byval lpComp as LPVOID, byval as DWORD, byval lpRead as LPVOID, byval as DWORD) as WINBOOL

declare function ImmSetCompositionStringW(byval as HIMC, byval dwIndex as DWORD, byval lpComp as LPVOID, byval as DWORD, byval lpRead as LPVOID, byval as DWORD) as WINBOOL


declare function ImmGetCandidateListCountA(byval as HIMC, byval lpdwListCount as LPDWORD) as DWORD

 declare function ImmGetCandidateListCount alias "ImmGetCandidateListCountA"(byval as HIMC, byval lpdwListCount as LPDWORD) as DWORD

declare function ImmGetCandidateListCountW(byval as HIMC, byval lpdwListCount as LPDWORD) as DWORD


declare function ImmGetCandidateListA(byval as HIMC, byval deIndex as DWORD, byval as LPCANDIDATELIST, byval dwBufLen as DWORD) as DWORD

 declare function ImmGetCandidateList alias "ImmGetCandidateListA"(byval as HIMC, byval deIndex as DWORD, byval as LPCANDIDATELIST, byval dwBufLen as DWORD) as DWORD

declare function ImmGetCandidateListW(byval as HIMC, byval deIndex as DWORD, byval as LPCANDIDATELIST, byval dwBufLen as DWORD) as DWORD


declare function ImmGetGuideLineA(byval as HIMC, byval dwIndex as DWORD, byval as LPSTR, byval dwBufLen as DWORD) as DWORD

 declare function ImmGetGuideLine alias "ImmGetGuideLineA"(byval as HIMC, byval dwIndex as DWORD, byval as LPSTR, byval dwBufLen as DWORD) as DWORD

declare function ImmGetGuideLineW(byval as HIMC, byval dwIndex as DWORD, byval as LPWSTR, byval dwBufLen as DWORD) as DWORD


declare function ImmGetConversionStatus(byval as HIMC, byval as LPDWORD, byval as LPDWORD) as WINBOOL
declare function ImmSetConversionStatus(byval as HIMC, byval as DWORD, byval as DWORD) as WINBOOL
declare function ImmGetOpenStatus(byval as HIMC) as WINBOOL
declare function ImmSetOpenStatus(byval as HIMC, byval as WINBOOL) as WINBOOL
declare function ImmGetCompositionFontA(byval as HIMC, byval as LPLOGFONTA) as WINBOOL

 declare function ImmGetCompositionFont alias "ImmGetCompositionFontA"(byval as HIMC, byval as LPLOGFONTA) as WINBOOL

declare function ImmGetCompositionFontW(byval as HIMC, byval as LPLOGFONTW) as WINBOOL


declare function ImmSetCompositionFontA(byval as HIMC, byval as LPLOGFONTA) as WINBOOL

 declare function ImmSetCompositionFont alias "ImmSetCompositionFontA"(byval as HIMC, byval as LPLOGFONTA) as WINBOOL

declare function ImmSetCompositionFontW(byval as HIMC, byval as LPLOGFONTW) as WINBOOL


type REGISTERWORDENUMPROCA as function(byval as LPCSTR, byval as DWORD, byval as LPCSTR, byval as LPVOID) as long
type REGISTERWORDENUMPROCW as function(byval as LPCWSTR, byval as DWORD, byval as LPCWSTR, byval as LPVOID) as long

 type REGISTERWORDENUMPROC as REGISTERWORDENUMPROCA

declare function ImmConfigureIMEA(byval as HKL, byval as HWND, byval as DWORD, byval as LPVOID) as WINBOOL

 declare function ImmConfigureIME alias "ImmConfigureIMEA"(byval as HKL, byval as HWND, byval as DWORD, byval as LPVOID) as WINBOOL

declare function ImmConfigureIMEW(byval as HKL, byval as HWND, byval as DWORD, byval as LPVOID) as WINBOOL


declare function ImmEscapeA(byval as HKL, byval as HIMC, byval as UINT, byval as LPVOID) as LRESULT

 declare function ImmEscape alias "ImmEscapeA"(byval as HKL, byval as HIMC, byval as UINT, byval as LPVOID) as LRESULT

declare function ImmEscapeW(byval as HKL, byval as HIMC, byval as UINT, byval as LPVOID) as LRESULT


declare function ImmGetConversionListA(byval as HKL, byval as HIMC, byval as LPCSTR, byval as LPCANDIDATELIST, byval dwBufLen as DWORD, byval uFlag as UINT) as DWORD

 declare function ImmGetConversionList alias "ImmGetConversionListA"(byval as HKL, byval as HIMC, byval as LPCSTR, byval as LPCANDIDATELIST, byval dwBufLen as DWORD, byval uFlag as UINT) as DWORD

declare function ImmGetConversionListW(byval as HKL, byval as HIMC, byval as LPCWSTR, byval as LPCANDIDATELIST, byval dwBufLen as DWORD, byval uFlag as UINT) as DWORD


declare function ImmNotifyIME(byval as HIMC, byval dwAction as DWORD, byval dwIndex as DWORD, byval dwValue as DWORD) as WINBOOL
declare function ImmGetStatusWindowPos(byval as HIMC, byval as LPPOINT) as WINBOOL
declare function ImmSetStatusWindowPos(byval as HIMC, byval as LPPOINT) as WINBOOL
declare function ImmGetCompositionWindow(byval as HIMC, byval as LPCOMPOSITIONFORM) as WINBOOL
declare function ImmSetCompositionWindow(byval as HIMC, byval as LPCOMPOSITIONFORM) as WINBOOL
declare function ImmGetCandidateWindow(byval as HIMC, byval as DWORD, byval as LPCANDIDATEFORM) as WINBOOL
declare function ImmSetCandidateWindow(byval as HIMC, byval as LPCANDIDATEFORM) as WINBOOL
declare function ImmIsUIMessageA(byval as HWND, byval as UINT, byval as WPARAM, byval as LPARAM) as WINBOOL

 declare function ImmIsUIMessage alias "ImmIsUIMessageA"(byval as HWND, byval as UINT, byval as WPARAM, byval as LPARAM) as WINBOOL

declare function ImmIsUIMessageW(byval as HWND, byval as UINT, byval as WPARAM, byval as LPARAM) as WINBOOL


declare function ImmGetVirtualKey(byval as HWND) as UINT
declare function ImmRegisterWordA(byval as HKL, byval lpszReading as LPCSTR, byval as DWORD, byval lpszRegister as LPCSTR) as WINBOOL

 declare function ImmRegisterWord alias "ImmRegisterWordA"(byval as HKL, byval lpszReading as LPCSTR, byval as DWORD, byval lpszRegister as LPCSTR) as WINBOOL

declare function ImmRegisterWordW(byval as HKL, byval lpszReading as LPCWSTR, byval as DWORD, byval lpszRegister as LPCWSTR) as WINBOOL


declare function ImmUnregisterWordA(byval as HKL, byval lpszReading as LPCSTR, byval as DWORD, byval lpszUnregister as LPCSTR) as WINBOOL

 declare function ImmUnregisterWord alias "ImmUnregisterWordA"(byval as HKL, byval lpszReading as LPCSTR, byval as DWORD, byval lpszUnregister as LPCSTR) as WINBOOL

declare function ImmUnregisterWordW(byval as HKL, byval lpszReading as LPCWSTR, byval as DWORD, byval lpszUnregister as LPCWSTR) as WINBOOL


declare function ImmGetRegisterWordStyleA(byval as HKL, byval nItem as UINT, byval as LPSTYLEBUFA) as UINT

 declare function ImmGetRegisterWordStyle alias "ImmGetRegisterWordStyleA"(byval as HKL, byval nItem as UINT, byval as LPSTYLEBUFA) as UINT

declare function ImmGetRegisterWordStyleW(byval as HKL, byval nItem as UINT, byval as LPSTYLEBUFW) as UINT


declare function ImmEnumRegisterWordA(byval as HKL, byval as REGISTERWORDENUMPROCA, byval lpszReading as LPCSTR, byval as DWORD, byval lpszRegister as LPCSTR, byval as LPVOID) as UINT

 declare function ImmEnumRegisterWord alias "ImmEnumRegisterWordA"(byval as HKL, byval as REGISTERWORDENUMPROCA, byval lpszReading as LPCSTR, byval as DWORD, byval lpszRegister as LPCSTR, byval as LPVOID) as UINT

declare function ImmEnumRegisterWordW(byval as HKL, byval as REGISTERWORDENUMPROCW, byval lpszReading as LPCWSTR, byval as DWORD, byval lpszRegister as LPCWSTR, byval as LPVOID) as UINT


declare function ImmDisableIME(byval as DWORD) as WINBOOL
declare function ImmEnumInputContext(byval idThread as DWORD, byval lpfn as IMCENUMPROC, byval lParam as LPARAM) as WINBOOL
declare function ImmGetImeMenuItemsA(byval as HIMC, byval as DWORD, byval as DWORD, byval as LPIMEMENUITEMINFOA, byval as LPIMEMENUITEMINFOA, byval as DWORD) as DWORD

 declare function ImmGetImeMenuItems alias "ImmGetImeMenuItemsA"(byval as HIMC, byval as DWORD, byval as DWORD, byval as LPIMEMENUITEMINFOA, byval as LPIMEMENUITEMINFOA, byval as DWORD) as DWORD

declare function ImmGetImeMenuItemsW(byval as HIMC, byval as DWORD, byval as DWORD, byval as LPIMEMENUITEMINFOW, byval as LPIMEMENUITEMINFOW, byval as DWORD) as DWORD


declare function ImmDisableTextFrameService(byval idThread as DWORD) as WINBOOL
const IMC_GETCANDIDATEPOS = &h0007
const IMC_SETCANDIDATEPOS = &h0008
const IMC_GETCOMPOSITIONFONT = &h0009
const IMC_SETCOMPOSITIONFONT = &h000A
const IMC_GETCOMPOSITIONWINDOW = &h000B
const IMC_SETCOMPOSITIONWINDOW = &h000C
const IMC_GETSTATUSWINDOWPOS = &h000F
const IMC_SETSTATUSWINDOWPOS = &h0010
const IMC_CLOSESTATUSWINDOW = &h0021
const IMC_OPENSTATUSWINDOW = &h0022
const NI_OPENCANDIDATE = &h0010
const NI_CLOSECANDIDATE = &h0011
const NI_SELECTCANDIDATESTR = &h0012
const NI_CHANGECANDIDATELIST = &h0013
const NI_FINALIZECONVERSIONRESULT = &h0014
const NI_COMPOSITIONSTR = &h0015
const NI_SETCANDIDATE_PAGESTART = &h0016
const NI_SETCANDIDATE_PAGESIZE = &h0017
const NI_IMEMENUSELECTED = &h0018
const ISC_SHOWUICANDIDATEWINDOW = &h00000001
const ISC_SHOWUICOMPOSITIONWINDOW = &h80000000
const ISC_SHOWUIGUIDELINE = &h40000000
const ISC_SHOWUIALLCANDIDATEWINDOW = &h0000000F
const ISC_SHOWUIALL = &hC000000F
const CPS_COMPLETE = &h0001
const CPS_CONVERT = &h0002
const CPS_REVERT = &h0003
const CPS_CANCEL = &h0004
const MOD_ALT = &h0001
const MOD_CONTROL = &h0002
const MOD_SHIFT = &h0004
const MOD_LEFT = &h8000
const MOD_RIGHT = &h4000
const MOD_ON_KEYUP = &h0800
const MOD_IGNORE_ALL_MODIFIER = &h0400
const IME_CHOTKEY_IME_NONIME_TOGGLE = &h10
const IME_CHOTKEY_SHAPE_TOGGLE = &h11
const IME_CHOTKEY_SYMBOL_TOGGLE = &h12
const IME_JHOTKEY_CLOSE_OPEN = &h30
const IME_KHOTKEY_SHAPE_TOGGLE = &h50
const IME_KHOTKEY_HANJACONVERT = &h51
const IME_KHOTKEY_ENGLISH = &h52
const IME_THOTKEY_IME_NONIME_TOGGLE = &h70
const IME_THOTKEY_SHAPE_TOGGLE = &h71
const IME_THOTKEY_SYMBOL_TOGGLE = &h72
const IME_HOTKEY_DSWITCH_FIRST = &h100
const IME_HOTKEY_DSWITCH_LAST = &h11F
const IME_HOTKEY_PRIVATE_FIRST = &h200
const IME_ITHOTKEY_RESEND_RESULTSTR = &h200
const IME_ITHOTKEY_PREVIOUS_COMPOSITION = &h201
const IME_ITHOTKEY_UISTYLE_TOGGLE = &h202
const IME_ITHOTKEY_RECONVERTSTRING = &h203
const IME_HOTKEY_PRIVATE_LAST = &h21F
const GCS_COMPREADSTR = &h0001
const GCS_COMPREADATTR = &h0002
const GCS_COMPREADCLAUSE = &h0004
const GCS_COMPSTR = &h0008
const GCS_COMPATTR = &h0010
const GCS_COMPCLAUSE = &h0020
const GCS_CURSORPOS = &h0080
const GCS_DELTASTART = &h0100
const GCS_RESULTREADSTR = &h0200
const GCS_RESULTREADCLAUSE = &h0400
const GCS_RESULTSTR = &h0800
const GCS_RESULTCLAUSE = &h1000
const CS_INSERTCHAR = &h2000
const CS_NOMOVECARET = &h4000
const IMEVER_0310 = &h0003000A
const IMEVER_0400 = &h00040000
const IME_PROP_AT_CARET = &h00010000
const IME_PROP_SPECIAL_UI = &h00020000
const IME_PROP_CANDLIST_START_FROM_1 = &h00040000
const IME_PROP_UNICODE = &h00080000
const IME_PROP_COMPLETE_ON_UNSELECT = &h00100000
const UI_CAP_2700 = &h00000001
const UI_CAP_ROT90 = &h00000002
const UI_CAP_ROTANY = &h00000004
const SCS_CAP_COMPSTR = &h00000001
const SCS_CAP_MAKEREAD = &h00000002
const SCS_CAP_SETRECONVERTSTRING = &h00000004
const SELECT_CAP_CONVERSION = &h00000001
const SELECT_CAP_SENTENCE = &h00000002
const GGL_LEVEL = &h00000001
const GGL_INDEX = &h00000002
const GGL_STRING = &h00000003
const GGL_PRIVATE = &h00000004
const GL_LEVEL_NOGUIDELINE = &h000000000
const GL_LEVEL_FATAL = &h00000001
const GL_LEVEL_ERROR = &h00000002
const GL_LEVEL_WARNING = &h00000003
const GL_LEVEL_INFORMATION = &h00000004
const GL_ID_UNKNOWN = &h000000000
const GL_ID_NOMODULE = &h00000001
const GL_ID_NODICTIONARY = &h00000010
const GL_ID_CANNOTSAVE = &h00000011
const GL_ID_NOCONVERT = &h00000020
const GL_ID_TYPINGERROR = &h00000021
const GL_ID_TOOMANYSTROKE = &h00000022
const GL_ID_READINGCONFLICT = &h00000023
const GL_ID_INPUTREADING = &h00000024
const GL_ID_INPUTRADICAL = &h00000025
const GL_ID_INPUTCODE = &h00000026
const GL_ID_INPUTSYMBOL = &h00000027
const GL_ID_CHOOSECANDIDATE = &h00000028
const GL_ID_REVERSECONVERSION = &h00000029
const GL_ID_PRIVATE_FIRST = &h00008000
const GL_ID_PRIVATE_LAST = &h0000FFFF
const IGP_GETIMEVERSION = cast(DWORD, -4)
const IGP_PROPERTY = &h00000004
const IGP_CONVERSION = &h00000008
const IGP_SENTENCE = &h0000000c
const IGP_UI = &h00000010
const IGP_SETCOMPSTR = &h00000014
const IGP_SELECT = &h00000018
const SCS_SETSTR = GCS_COMPREADSTR or GCS_COMPSTR
const SCS_CHANGEATTR = GCS_COMPREADATTR or GCS_COMPATTR
const SCS_CHANGECLAUSE = GCS_COMPREADCLAUSE or GCS_COMPCLAUSE
const SCS_SETRECONVERTSTRING = &h00010000
const SCS_QUERYRECONVERTSTRING = &h00020000
const ATTR_INPUT = &h000
const ATTR_TARGET_CONVERTED = &h01
const ATTR_CONVERTED = &h02
const ATTR_TARGET_NOTCONVERTED = &h03
const ATTR_INPUT_ERROR = &h04
const ATTR_FIXEDCONVERTED = &h05
const CFS_DEFAULT = &h00000
const CFS_RECT = &h0001
const CFS_POINT = &h0002
const CFS_FORCE_POSITION = &h0020
const CFS_CANDIDATEPOS = &h0040
const CFS_EXCLUDE = &h0080
const GCL_CONVERSION = &h0001
const GCL_REVERSECONVERSION = &h0002
const GCL_REVERSE_LENGTH = &h0003
const IME_CMODE_ALPHANUMERIC = &h00000
const IME_CMODE_NATIVE = &h0001
const IME_CMODE_CHINESE = IME_CMODE_NATIVE
const IME_CMODE_HANGEUL = IME_CMODE_NATIVE
const IME_CMODE_HANGUL = IME_CMODE_NATIVE
const IME_CMODE_JAPANESE = IME_CMODE_NATIVE
const IME_CMODE_KATAKANA = &h0002
const IME_CMODE_LANGUAGE = &h0003
const IME_CMODE_FULLSHAPE = &h0008
const IME_CMODE_ROMAN = &h0010
const IME_CMODE_CHARCODE = &h0020
const IME_CMODE_HANJACONVERT = &h0040
const IME_CMODE_SOFTKBD = &h0080
const IME_CMODE_NOCONVERSION = &h0100
const IME_CMODE_EUDC = &h0200
const IME_CMODE_SYMBOL = &h0400
const IME_CMODE_FIXED = &h0800
const IME_CMODE_RESERVED = &hF0000000
const IME_SMODE_NONE = &h00000
const IME_SMODE_PLAURALCLAUSE = &h0001
const IME_SMODE_SINGLECONVERT = &h0002
const IME_SMODE_AUTOMATIC = &h0004
const IME_SMODE_PHRASEPREDICT = &h0008
const IME_SMODE_CONVERSATION = &h0010
const IME_SMODE_RESERVED = &h0000F000
const IME_CAND_UNKNOWN = &h00000
const IME_CAND_READ = &h0001
const IME_CAND_CODE = &h0002
const IME_CAND_MEANING = &h0003
const IME_CAND_RADICAL = &h0004
const IME_CAND_STROKE = &h0005
const IMN_CLOSESTATUSWINDOW = &h0001
const IMN_OPENSTATUSWINDOW = &h0002
const IMN_CHANGECANDIDATE = &h0003
const IMN_CLOSECANDIDATE = &h0004
const IMN_OPENCANDIDATE = &h0005
const IMN_SETCONVERSIONMODE = &h0006
const IMN_SETSENTENCEMODE = &h0007
const IMN_SETOPENSTATUS = &h0008
const IMN_SETCANDIDATEPOS = &h0009
const IMN_SETCOMPOSITIONFONT = &h000A
const IMN_SETCOMPOSITIONWINDOW = &h000B
const IMN_SETSTATUSWINDOWPOS = &h000C
const IMN_GUIDELINE = &h000D
const IMN_PRIVATE = &h000E
const IMR_COMPOSITIONWINDOW = &h0001
const IMR_CANDIDATEWINDOW = &h0002
const IMR_COMPOSITIONFONT = &h0003
const IMR_RECONVERTSTRING = &h0004
const IMR_CONFIRMRECONVERTSTRING = &h0005
const IMR_QUERYCHARPOSITION = &h0006
const IMR_DOCUMENTFEED = &h0007
const IMM_ERROR_NODATA = -1
const IMM_ERROR_GENERAL = -2
const IME_CONFIG_GENERAL = 1
const IME_CONFIG_REGISTERWORD = 2
const IME_CONFIG_SELECTDICTIONARY = 3
const IME_ESC_QUERY_SUPPORT = &h0003
const IME_ESC_RESERVED_FIRST = &h0004
const IME_ESC_RESERVED_LAST = &h07FF
const IME_ESC_PRIVATE_FIRST = &h0800
const IME_ESC_PRIVATE_LAST = &h0FFF
const IME_ESC_SEQUENCE_TO_INTERNAL = &h1001
const IME_ESC_GET_EUDC_DICTIONARY = &h1003
const IME_ESC_SET_EUDC_DICTIONARY = &h1004
const IME_ESC_MAX_KEY = &h1005
const IME_ESC_IME_NAME = &h1006
const IME_ESC_SYNC_HOTKEY = &h1007
const IME_ESC_HANJA_MODE = &h1008
const IME_ESC_AUTOMATA = &h1009
const IME_ESC_PRIVATE_HOTKEY = &h100a
const IME_ESC_GETHELPFILENAME = &h100b
const IME_REGWORD_STYLE_EUDC = &h00000001
const IME_REGWORD_STYLE_USER_FIRST = &h80000000
const IME_REGWORD_STYLE_USER_LAST = &hFFFFFFFF
const IACE_CHILDREN = &h0001
const IACE_DEFAULT = &h0010
const IACE_IGNORENOCONTEXT = &h0020
const IGIMIF_RIGHTMENU = &h0001
const IGIMII_CMODE = &h0001
const IGIMII_SMODE = &h0002
const IGIMII_CONFIGURE = &h0004
const IGIMII_TOOLS = &h0008
const IGIMII_HELP = &h0010
const IGIMII_OTHER = &h0020
const IGIMII_INPUTTOOLS = &h0040
const IMFT_RADIOCHECK = &h00001
const IMFT_SEPARATOR = &h00002
const IMFT_SUBMENU = &h00004
const IMFS_GRAYED = MFS_GRAYED
const IMFS_DISABLED = MFS_DISABLED
const IMFS_CHECKED = MFS_CHECKED
const IMFS_HILITE = MFS_HILITE
const IMFS_ENABLED = MFS_ENABLED
const IMFS_UNCHECKED = MFS_UNCHECKED
const IMFS_UNHILITE = MFS_UNHILITE
const IMFS_DEFAULT = MFS_DEFAULT
const SOFTKEYBOARD_TYPE_T1 = &h0001
const SOFTKEYBOARD_TYPE_C1 = &h0002

end extern



 dim shared shcoredll as any ptr
 dim shared SetProcessDpiAwareness as function cdecl(byval PROCESS_DPI_AWARENESS as long= 2) as long
 dim ret1 as long
 shcoredll=dylibload("shcore")
 if shcoredll=0 then
 print "DPI : Error loading shcore.dll"
 end 1
 else
 print "DPI : loaded shcore.dll"
 end if
 SetProcessDpiAwareness=DyLibSymbol(shcoredll,"SetProcessDpiAwareness")
 if SetProcessDpiAwareness=0 then
 print "DPI : SetProcessDpiAwareness not found."
 end 2
 else
 print "DPI : found SetProcessDpiAwareness"
 end if
 ret1=SetProcessDpiAwareness( 2)
 if ret1=S_OK then
 print "DPI : SetProcessDpiAwareness() returned "+str(ret1)+" : success!"
 else
 print "DPI : SetProcessDpiAwareness() returned "+str(ret1)+" : failure!"
 end if

 declare function TimeBeginPeriod alias "timeBeginPeriod" (as ulong=1) as long
 declare function TimeEndPeriod alias "timeEndPeriod" (as ulong=1) as long

namespace CreditFBDoc
 Function BMPlOAD( ByRef filename As Const String ) As Any Ptr
 Dim As Long filenum, bmpwidth, bmpheight
 Dim As Any Ptr img
 filenum = FreeFile()
 If Open( filename For Binary Access Read As #filenum )<>0 Then Return 0
 Get #filenum, 19, bmpwidth
 Get #filenum, 23, bmpheight
 Close #filenum
 img = ImageCreate( bmpwidth, Abs(bmpheight) )
 If img = 0 Then Return 0
 If BLoad( filename, img )<>0 Then ImageDestroy( img ): Return 0
 Return img
 End Function
end namespace




 extern p alias "__fb_gfx" as long ptr
nameSpace djRedundo
 function IsScreenLocked() as boolean
 if screenPtr()=0 then return FALSE
 return iif(p[ 33] and 1,true,false)
 end function






const PI as double = atn(1)*4
const PI2 as double = atn(1)*8
const rad2deg as double = 180.0/PI
const deg2rad as double = PI/180.0

type FBS_SAMPLE as short
type MONO_SAMPLE as FBS_SAMPLE
type STEREO_SAMPLE field=1
 as MONO_SAMPLE l,r
end type

type FBS_BUFFERCALLBACK as sub (byval pSamples as FBS_SAMPLE ptr, byval nChannels as integer , byval nSamples as integer)
type FBS_LOADCALLBACK as sub (byval Percent as integer)

type tFBS_Init as function (byval nRate as integer=44100, byval nChannels as integer= 2, byval nBuffers as integer= 3, byval nFrames as integer= 2048, byval nPlugIndex as integer= 0, byval nDeviceIndex as integer= 0) as boolean

type tFBS_Start as function () as boolean
type tFBS_Stop as function () as boolean
type tFBS_Exit as function () as boolean

type tFBS_Get_PlugPath as function () as string
type tFBS_Set_PlugPath as sub (byval NewPath as string)

type tFBS_Get_NumOfPlugouts as function () as integer
type tFBS_Get_PlugName as function () as string
type tFBS_Get_PlugDevice as function () as string
type tFBS_Get_PlugError as function () as string
type tFBS_Get_PlugRate as function () as integer
type tFBS_Get_PlugBits as function () as integer
type tFBS_Get_PlugChannels as function () as integer
type tFBS_Get_PlugBuffers as function () as integer
type tFBS_Get_PlugBuffersize as function () as integer
type tFBS_Get_PlugFrames as function () as integer
type tFBS_Get_PlugFramesize as function () as integer
type tFBS_Get_PlugRunning as function () as boolean

type tFBS_Get_PlayingSounds as function () as integer

type tFBS_Get_PlayedBytes as function () as integer
type tFBS_Get_PlayedSamples as function () as integer
type tFBS_Get_PlayTime as function () as double


type tFBS_Get_MasterVolume as function (byval pVolume as single ptr) as boolean
type tFBS_Set_MasterVolume as function (byval Volume as single ) as boolean

type tFBS_Rad2Deg as function (byval r as double) as double
type tFBS_Deg2Rad as function (byval d as double) as double
type tFBS_Volume_2_DB as function (byval v as single) as single
type tFBS_DB_2_Volume as function (byval d as single) as single
type tFBS_Pow as function (byval x as double, byval y as double) as double

type tFBS_Set_MasterFilter as function (byval nFilter as integer, byval Center as single, byval dB as single, byval Octave as single = 1.0, byval OnOff as boolean = True) as boolean

type tFBS_Enable_MasterFilter as function (byval nFilter as integer) as boolean
type tFBS_Disable_MasterFilter as function (byval nFilter as integer) as boolean

type tFBS_PitchShift as sub (byval d as short ptr, byval s as short ptr, byval v as single , byval n as integer )

type tFBS_Get_MaxChannels as function (byval pnChannels as integer ptr) as boolean
type tFBS_Set_MaxChannels as function (byval nChannels as integer ) as boolean


type tFBS_Set_LoadCallback as function (byval cb as FBS_LOADCALLBACK) as boolean
type tFBS_Enable_LoadCallback as function () as boolean
type tFBS_Disable_LoadCallback as function () as boolean

type tFBS_Set_MasterCallback as function (byval cb as FBS_BUFFERCALLBACK) as boolean
type tFBS_Enable_MasterCallback as function () as boolean
type tFBS_Disable_MasterCallback as function () as boolean


type tFBS_Load_WAVFile as function (byref Filename as string , byval phWave as integer ptr) as boolean

type tFBS_Load_MP3File as function (byref Filename as string , byval phWave as integer ptr , byref tmpPath as string = "") as boolean

type tFBS_Load_MODFile as function (byref Filename as string , byval phWave as integer ptr) as boolean

type tFBS_Load_OGGFile as function (byref Filename as string , byval lphWave as integer ptr , byref tmpPath as string ="") as boolean

type tFBS_Create_Wave as function (byval nSamples as integer , byval phWave as integer ptr , byval ppWave as any ptr ptr) as boolean
type tFBS_Get_WaveLength as function (byval hWave as integer, byval pMS as integer ptr) as boolean

type tFBS_Play_Wave as function (byval hWave as integer , byval nLoops as integer = 1 , byval Speed as single = 1.0 , byval Volume as single = 1.0 , byval Pan as single = .0 , byval phSound as integer ptr = NULL) as boolean

type tFBS_Create_Sound as function (byval hWave as integer , byval phSound as integer ptr = NULL) as boolean


type tFBS_Destroy_Wave as function (byval phWave as integer ptr) as boolean
type tFBS_Destroy_Sound as function (byval phSound as integer ptr) as boolean

type tFBS_Play_Sound as function (byval hSound as integer , byval nLoops as integer = 1) as boolean
type tFBS_Get_SoundLength as function (byval hSound as integer , byval lpMS as integer ptr) as boolean


type tFBS_Set_SoundSpeed as function (byval hSound as integer , byval Speed as single) as boolean
type tFBS_Get_SoundSpeed as function (byval hSound as integer , byval pSpeed as single ptr) as boolean

type tFBS_Set_SoundVolume as function (byval hSound as integer , byval Volume as single) as boolean
type tFBS_Get_SoundVolume as function (byval hSound as integer, byval pVolume as single ptr) as boolean

type tFBS_Set_SoundPan as function (byval hSound as integer, byval Pan as single) as boolean
type tFBS_Get_SoundPan as function (byval hSound as integer , byval pPan as single ptr) as boolean

type tFBS_Set_SoundLoops as function (byval hSound as integer , byval nLoops as integer) as boolean
type tFBS_Get_SoundLoops as function (byval hSound as integer , byval pnLoops as integer ptr) as boolean
type tFBS_Set_SoundMuted as function (byval hSound as integer , byval muted as boolean) as boolean
type tFBS_Get_SoundMuted as function (byval hSound as integer , byval pMuted as boolean ptr ) as boolean
type tFBS_Set_SoundPaused as function (byval hSound as integer , byval Paused as boolean) as boolean
type tFBS_Get_SoundPaused as function (byval hSound as integer , byval pPaused as boolean ptr ) as boolean

type tFBS_Get_WavePointers as function (byval hWave as integer , byval ppWaveStart as short ptr ptr=NULL , byval ppWaveEnd as short ptr ptr=NULL , byval pnChannels as integer ptr =NULL ) as boolean

type tFBS_Get_SoundPointers as function (byval hSound as integer , byval ppStart as short ptr ptr=NULL , byval ppPlay as short ptr ptr=NULL , byval ppEnd as short ptr ptr=NULL) as boolean

type tFBS_Set_SoundPointers as function (byval hSound as integer , byval pNewStart as short ptr=NULL, byval pNewPlay as short ptr=NULL, byval pNewEnd as short ptr=NULL) as boolean

type tFBS_Get_SoundPosition as function (byval hSound as integer, byval pPosition as single ptr) as boolean

type tFBS_Set_SoundCallback as function (byval hSound as integer , byval cb as FBS_BUFFERCALLBACK) as boolean
type tFBS_Enable_SoundCallback as function (byval hSound as integer) as boolean
type tFBS_Disable_SoundCallback as function (byval hSound as integer) as boolean



type tFBS_Get_PlayingStreams as function () as integer

type tFBS_Create_MP3Stream as function (byref Filename as string) as boolean
type tFBS_Play_MP3Stream as function (byval Volume as single=1.0, byval Pan as single=.0) as boolean
type tFBS_End_MP3Stream as function () as boolean
type tFBS_Set_MP3StreamVolume as function (byval Volume as single) as boolean
type tFBS_Get_MP3StreamVolume as function (byval pVolume as single ptr ) as boolean
type tFBS_Set_MP3StreamPan as function (byval Pan as single) as boolean
type tFBS_Get_MP3StreamPan as function (byval pPan as single ptr) as boolean

type tFBS_Get_MP3StreamBuffer as function (byval ppBuffer as short ptr ptr , byval pChannels as integer ptr , byval pnSamples as integer ptr) as boolean

type tFBS_Set_MP3StreamCallback as function (byval cb as FBS_BUFFERCALLBACK) as boolean
type tFBS_Enable_MP3StreamCallback as function () as boolean
type tFBS_Disable_MP3StreamCallback as function () as boolean

 dim shared as tFBS_Init FBS_Init
 dim shared as tFBS_Start FBS_Start
 dim shared as tFBS_Stop FBS_Stop
 dim shared as tFBS_Exit FBS_Exit
 dim shared as tFBS_Get_PlugPath FBS_Get_PlugPath
 dim shared as tFBS_Set_PlugPath FBS_Set_PlugPath
 dim shared as tFBS_Get_NumOfPlugouts FBS_Get_NumOfPlugouts
 dim shared as tFBS_Get_PlugName FBS_Get_PlugName
 dim shared as tFBS_Get_PlugDevice FBS_Get_PlugDevice
 dim shared as tFBS_Get_PlugError FBS_Get_PlugError
 dim shared as tFBS_Get_PlugRate FBS_Get_PlugRate
 dim shared as tFBS_Get_PlugBits FBS_Get_PlugBits
 dim shared as tFBS_Get_PlugChannels FBS_Get_PlugChannels
 dim shared as tFBS_Get_PlugBuffers FBS_Get_PlugBuffers
 dim shared as tFBS_Get_PlugBuffersize FBS_Get_PlugBuffersize
 dim shared as tFBS_Get_PlugFrames FBS_Get_PlugFrames
 dim shared as tFBS_Get_PlugFramesize FBS_Get_PlugFramesize
 dim shared as tFBS_Get_PlugRunning FBS_Get_PlugRunning
 dim shared as tFBS_Get_PlayingSounds FBS_Get_PlayingSounds
 dim shared as tFBS_Get_PlayedBytes FBS_Get_PlayedBytes
 dim shared as tFBS_Get_PlayedSamples FBS_Get_PlayedSamples
 dim shared as tFBS_Get_PlayTime FBS_Get_PlayTime
 dim shared as tFBS_Get_MasterVolume FBS_Get_MasterVolume
 dim shared as tFBS_Set_MasterVolume FBS_Set_MasterVolume
 dim shared as tFBS_Rad2Deg FBS_Rad2Deg
 dim shared as tFBS_Deg2Rad FBS_Deg2Rad
 dim shared as tFBS_Volume_2_DB FBS_Volume_2_DB
 dim shared as tFBS_DB_2_Volume FBS_DB_2_Volume
 dim shared as tFBS_Pow FBS_Pow
 dim shared as tFBS_Set_MasterFilter FBS_Set_MasterFilter
 dim shared as tFBS_Enable_MasterFilter FBS_Enable_MasterFilter
 dim shared as tFBS_Disable_MasterFilter FBS_Disable_MasterFilter
 dim shared as tFBS_PitchShift FBS_PitchShift
 dim shared as tFBS_Get_MaxChannels FBS_Get_MaxChannels
 dim shared as tFBS_Set_MaxChannels FBS_Set_MaxChannels
 dim shared as tFBS_Set_LoadCallback FBS_Set_LoadCallback
 dim shared as tFBS_Enable_LoadCallback FBS_Enable_LoadCallback
 dim shared as tFBS_Disable_LoadCallback FBS_Disable_LoadCallback
 dim shared as tFBS_Set_MasterCallback FBS_Set_MasterCallback
 dim shared as tFBS_Enable_MasterCallback FBS_Enable_MasterCallback
 dim shared as tFBS_Disable_MasterCallback FBS_Disable_MasterCallback
 dim shared as tFBS_Load_WAVFile FBS_Load_WAVFile
 dim shared as tFBS_Load_MP3File FBS_Load_MP3File
 dim shared as tFBS_Load_MODFile FBS_Load_MODFile
 dim shared as tFBS_Load_OGGFile FBS_Load_OGGFile
 dim shared as tFBS_Create_Wave FBS_Create_Wave
 dim shared as tFBS_Get_WaveLength FBS_Get_WaveLength
 dim shared as tFBS_Play_Wave FBS_Play_Wave
 dim shared as tFBS_Create_Sound FBS_Create_Sound
 dim shared as tFBS_Destroy_Wave FBS_Destroy_Wave
 dim shared as tFBS_Destroy_Sound FBS_Destroy_Sound
 dim shared as tFBS_Play_Sound FBS_Play_Sound
 dim shared as tFBS_Get_SoundLength FBS_Get_SoundLength
 dim shared as tFBS_Set_SoundSpeed FBS_Set_SoundSpeed
 dim shared as tFBS_Get_SoundSpeed FBS_Get_SoundSpeed
 dim shared as tFBS_Set_SoundVolume FBS_Set_SoundVolume
 dim shared as tFBS_Get_SoundVolume FBS_Get_SoundVolume
 dim shared as tFBS_Set_SoundPan FBS_Set_SoundPan
 dim shared as tFBS_Get_SoundPan FBS_Get_SoundPan
 dim shared as tFBS_Set_SoundLoops FBS_Set_SoundLoops
 dim shared as tFBS_Get_SoundLoops FBS_Get_SoundLoops
 dim shared as tFBS_Set_SoundMuted FBS_Set_SoundMuted
 dim shared as tFBS_Get_SoundMuted FBS_Get_SoundMuted
 dim shared as tFBS_Set_SoundPaused FBS_Set_SoundPaused
 dim shared as tFBS_Get_SoundPaused FBS_Get_SoundPaused
 dim shared as tFBS_Get_WavePointers FBS_Get_WavePointers
 dim shared as tFBS_Get_SoundPointers FBS_Get_SoundPointers
 dim shared as tFBS_Set_SoundPointers FBS_Set_SoundPointers
 dim shared as tFBS_Get_SoundPosition FBS_Get_SoundPosition
 dim shared as tFBS_Set_SoundCallback FBS_Set_SoundCallback
 dim shared as tFBS_Enable_SoundCallback FBS_Enable_SoundCallback
 dim shared as tFBS_Disable_SoundCallback FBS_Disable_SoundCallback
 dim shared as tFBS_Get_PlayingStreams FBS_Get_PlayingStreams
 dim shared as tFBS_Create_MP3Stream FBS_Create_MP3Stream
 dim shared as tFBS_Play_MP3Stream FBS_Play_MP3Stream
 dim shared as tFBS_End_MP3Stream FBS_End_MP3Stream
 dim shared as tFBS_Set_MP3StreamVolume FBS_Set_MP3StreamVolume
 dim shared as tFBS_Get_MP3StreamVolume FBS_Get_MP3StreamVolume
 dim shared as tFBS_Set_MP3StreamPan FBS_Set_MP3StreamPan
 dim shared as tFBS_Get_MP3StreamPan FBS_Get_MP3StreamPan
 dim shared as tFBS_Get_MP3StreamBuffer FBS_Get_MP3StreamBuffer
 dim shared as tFBS_Set_MP3StreamCallback FBS_Set_MP3StreamCallback
 dim shared as tFBS_Enable_MP3StreamCallback FBS_Enable_MP3StreamCallback
 dim shared as tFBS_Disable_MP3StreamCallback FBS_Disable_MP3StreamCallback


dim shared as any ptr hFBS

function FBSLoaded as boolean
 return (hFBS<>0)
end function

Sub RuntimeLoad Constructor
 if hFBS<>0 then exit sub
 hFBS = DyLibLoad( "fbsound-32" )
 if hFBS=0 then print "error: lib fbsound-32 not loaded !" : exit sub

 FBS_Init =DyLibSymbol(hFBS,ucase($"FBS_Init")) : if FBS_Init =0 then print "error: can't resolve " & $"FBS_Init" : beep : sleep : end 1
 FBS_Start =DyLibSymbol(hFBS,ucase($"FBS_Start")) : if FBS_Start =0 then print "error: can't resolve " & $"FBS_Start" : beep : sleep : end 1
 FBS_Stop =DyLibSymbol(hFBS,ucase($"FBS_Stop")) : if FBS_Stop =0 then print "error: can't resolve " & $"FBS_Stop" : beep : sleep : end 1
 FBS_Exit =DyLibSymbol(hFBS,ucase($"FBS_Exit")) : if FBS_Exit =0 then print "error: can't resolve " & $"FBS_Exit" : beep : sleep : end 1
 FBS_Get_PlugPath =DyLibSymbol(hFBS,ucase($"FBS_Get_PlugPath")) : if FBS_Get_PlugPath =0 then print "error: can't resolve " & $"FBS_Get_PlugPath" : beep : sleep : end 1
 FBS_Set_PlugPath =DyLibSymbol(hFBS,ucase($"FBS_Set_PlugPath")) : if FBS_Set_PlugPath =0 then print "error: can't resolve " & $"FBS_Set_PlugPath" : beep : sleep : end 1
 FBS_Get_NumOfPlugouts =DyLibSymbol(hFBS,ucase($"FBS_Get_NumOfPlugouts")) : if FBS_Get_NumOfPlugouts =0 then print "error: can't resolve " & $"FBS_Get_NumOfPlugouts" : beep : sleep : end 1
 FBS_Get_PlugName =DyLibSymbol(hFBS,ucase($"FBS_Get_PlugName")) : if FBS_Get_PlugName =0 then print "error: can't resolve " & $"FBS_Get_PlugName" : beep : sleep : end 1
 FBS_Get_PlugDevice =DyLibSymbol(hFBS,ucase($"FBS_Get_PlugDevice")) : if FBS_Get_PlugDevice =0 then print "error: can't resolve " & $"FBS_Get_PlugDevice" : beep : sleep : end 1
 FBS_Get_PlugError =DyLibSymbol(hFBS,ucase($"FBS_Get_PlugError")) : if FBS_Get_PlugError =0 then print "error: can't resolve " & $"FBS_Get_PlugError" : beep : sleep : end 1
 FBS_Get_PlugRate =DyLibSymbol(hFBS,ucase($"FBS_Get_PlugRate")) : if FBS_Get_PlugRate =0 then print "error: can't resolve " & $"FBS_Get_PlugRate" : beep : sleep : end 1
 FBS_Get_PlugBits =DyLibSymbol(hFBS,ucase($"FBS_Get_PlugBits")) : if FBS_Get_PlugBits =0 then print "error: can't resolve " & $"FBS_Get_PlugBits" : beep : sleep : end 1
 FBS_Get_PlugChannels =DyLibSymbol(hFBS,ucase($"FBS_Get_PlugChannels")) : if FBS_Get_PlugChannels =0 then print "error: can't resolve " & $"FBS_Get_PlugChannels" : beep : sleep : end 1
 FBS_Get_PlugBuffers =DyLibSymbol(hFBS,ucase($"FBS_Get_PlugBuffers")) : if FBS_Get_PlugBuffers =0 then print "error: can't resolve " & $"FBS_Get_PlugBuffers" : beep : sleep : end 1
 FBS_Get_PlugBuffersize =DyLibSymbol(hFBS,ucase($"FBS_Get_PlugBuffersize")) : if FBS_Get_PlugBuffersize =0 then print "error: can't resolve " & $"FBS_Get_PlugBuffersize" : beep : sleep : end 1
 FBS_Get_PlugFrames =DyLibSymbol(hFBS,ucase($"FBS_Get_PlugFrames")) : if FBS_Get_PlugFrames =0 then print "error: can't resolve " & $"FBS_Get_PlugFrames" : beep : sleep : end 1
 FBS_Get_PlugFramesize =DyLibSymbol(hFBS,ucase($"FBS_Get_PlugFramesize")) : if FBS_Get_PlugFramesize =0 then print "error: can't resolve " & $"FBS_Get_PlugFramesize" : beep : sleep : end 1
 FBS_Get_PlugRunning =DyLibSymbol(hFBS,ucase($"FBS_Get_PlugRunning")) : if FBS_Get_PlugRunning =0 then print "error: can't resolve " & $"FBS_Get_PlugRunning" : beep : sleep : end 1
 FBS_Get_PlayingSounds =DyLibSymbol(hFBS,ucase($"FBS_Get_PlayingSounds")) : if FBS_Get_PlayingSounds =0 then print "error: can't resolve " & $"FBS_Get_PlayingSounds" : beep : sleep : end 1
 FBS_Get_PlayedBytes =DyLibSymbol(hFBS,ucase($"FBS_Get_PlayedBytes")) : if FBS_Get_PlayedBytes =0 then print "error: can't resolve " & $"FBS_Get_PlayedBytes" : beep : sleep : end 1
 FBS_Get_PlayedSamples =DyLibSymbol(hFBS,ucase($"FBS_Get_PlayedSamples")) : if FBS_Get_PlayedSamples =0 then print "error: can't resolve " & $"FBS_Get_PlayedSamples" : beep : sleep : end 1
 FBS_Get_PlayTime =DyLibSymbol(hFBS,ucase($"FBS_Get_PlayTime")) : if FBS_Get_PlayTime =0 then print "error: can't resolve " & $"FBS_Get_PlayTime" : beep : sleep : end 1
 FBS_Get_MasterVolume =DyLibSymbol(hFBS,ucase($"FBS_Get_MasterVolume")) : if FBS_Get_MasterVolume =0 then print "error: can't resolve " & $"FBS_Get_MasterVolume" : beep : sleep : end 1
 FBS_Set_MasterVolume =DyLibSymbol(hFBS,ucase($"FBS_Set_MasterVolume")) : if FBS_Set_MasterVolume =0 then print "error: can't resolve " & $"FBS_Set_MasterVolume" : beep : sleep : end 1
 FBS_Rad2Deg =DyLibSymbol(hFBS,ucase($"FBS_Rad2Deg")) : if FBS_Rad2Deg =0 then print "error: can't resolve " & $"FBS_Rad2Deg" : beep : sleep : end 1
 FBS_Deg2Rad =DyLibSymbol(hFBS,ucase($"FBS_Deg2Rad")) : if FBS_Deg2Rad =0 then print "error: can't resolve " & $"FBS_Deg2Rad" : beep : sleep : end 1
 FBS_Volume_2_DB =DyLibSymbol(hFBS,ucase($"FBS_Volume_2_DB")) : if FBS_Volume_2_DB =0 then print "error: can't resolve " & $"FBS_Volume_2_DB" : beep : sleep : end 1
 FBS_DB_2_Volume =DyLibSymbol(hFBS,ucase($"FBS_DB_2_Volume")) : if FBS_DB_2_Volume =0 then print "error: can't resolve " & $"FBS_DB_2_Volume" : beep : sleep : end 1
 FBS_Pow =DyLibSymbol(hFBS,ucase($"FBS_Pow")) : if FBS_Pow =0 then print "error: can't resolve " & $"FBS_Pow" : beep : sleep : end 1
 FBS_Set_MasterFilter =DyLibSymbol(hFBS,ucase($"FBS_Set_MasterFilter")) : if FBS_Set_MasterFilter =0 then print "error: can't resolve " & $"FBS_Set_MasterFilter" : beep : sleep : end 1
 FBS_Enable_MasterFilter =DyLibSymbol(hFBS,ucase($"FBS_Enable_MasterFilter")) : if FBS_Enable_MasterFilter =0 then print "error: can't resolve " & $"FBS_Enable_MasterFilter" : beep : sleep : end 1
 FBS_Disable_MasterFilter =DyLibSymbol(hFBS,ucase($"FBS_Disable_MasterFilter")) : if FBS_Disable_MasterFilter =0 then print "error: can't resolve " & $"FBS_Disable_MasterFilter" : beep : sleep : end 1
 FBS_PitchShift =DyLibSymbol(hFBS,ucase($"FBS_PitchShift")) : if FBS_PitchShift =0 then print "error: can't resolve " & $"FBS_PitchShift" : beep : sleep : end 1
 FBS_Get_MaxChannels =DyLibSymbol(hFBS,ucase($"FBS_Get_MaxChannels")) : if FBS_Get_MaxChannels =0 then print "error: can't resolve " & $"FBS_Get_MaxChannels" : beep : sleep : end 1
 FBS_Set_MaxChannels =DyLibSymbol(hFBS,ucase($"FBS_Set_MaxChannels")) : if FBS_Set_MaxChannels =0 then print "error: can't resolve " & $"FBS_Set_MaxChannels" : beep : sleep : end 1
 FBS_Set_LoadCallback =DyLibSymbol(hFBS,ucase($"FBS_Set_LoadCallback")) : if FBS_Set_LoadCallback =0 then print "error: can't resolve " & $"FBS_Set_LoadCallback" : beep : sleep : end 1
 FBS_Enable_LoadCallback =DyLibSymbol(hFBS,ucase($"FBS_Enable_LoadCallback")) : if FBS_Enable_LoadCallback =0 then print "error: can't resolve " & $"FBS_Enable_LoadCallback" : beep : sleep : end 1
 FBS_Disable_LoadCallback =DyLibSymbol(hFBS,ucase($"FBS_Disable_LoadCallback")) : if FBS_Disable_LoadCallback =0 then print "error: can't resolve " & $"FBS_Disable_LoadCallback" : beep : sleep : end 1
 FBS_Set_MasterCallback =DyLibSymbol(hFBS,ucase($"FBS_Set_MasterCallback")) : if FBS_Set_MasterCallback =0 then print "error: can't resolve " & $"FBS_Set_MasterCallback" : beep : sleep : end 1
 FBS_Enable_MasterCallback =DyLibSymbol(hFBS,ucase($"FBS_Enable_MasterCallback")) : if FBS_Enable_MasterCallback =0 then print "error: can't resolve " & $"FBS_Enable_MasterCallback" : beep : sleep : end 1
 FBS_Disable_MasterCallback =DyLibSymbol(hFBS,ucase($"FBS_Disable_MasterCallback")) : if FBS_Disable_MasterCallback =0 then print "error: can't resolve " & $"FBS_Disable_MasterCallback" : beep : sleep : end 1
 FBS_Load_WAVFile =DyLibSymbol(hFBS,ucase($"FBS_Load_WAVFile")) : if FBS_Load_WAVFile =0 then print "error: can't resolve " & $"FBS_Load_WAVFile" : beep : sleep : end 1
 FBS_Load_MP3File =DyLibSymbol(hFBS,ucase($"FBS_Load_MP3File")) : if FBS_Load_MP3File =0 then print "error: can't resolve " & $"FBS_Load_MP3File" : beep : sleep : end 1
 FBS_Load_MODFile =DyLibSymbol(hFBS,ucase($"FBS_Load_MODFile")) : if FBS_Load_MODFile =0 then print "error: can't resolve " & $"FBS_Load_MODFile" : beep : sleep : end 1
 FBS_Load_OGGFile =DyLibSymbol(hFBS,ucase($"FBS_Load_OGGFile")) : if FBS_Load_OGGFile =0 then print "error: can't resolve " & $"FBS_Load_OGGFile" : beep : sleep : end 1
 FBS_Create_Wave =DyLibSymbol(hFBS,ucase($"FBS_Create_Wave")) : if FBS_Create_Wave =0 then print "error: can't resolve " & $"FBS_Create_Wave" : beep : sleep : end 1
 FBS_Get_WaveLength =DyLibSymbol(hFBS,ucase($"FBS_Get_WaveLength")) : if FBS_Get_WaveLength =0 then print "error: can't resolve " & $"FBS_Get_WaveLength" : beep : sleep : end 1
 FBS_Play_Wave =DyLibSymbol(hFBS,ucase($"FBS_Play_Wave")) : if FBS_Play_Wave =0 then print "error: can't resolve " & $"FBS_Play_Wave" : beep : sleep : end 1
 FBS_Create_Sound =DyLibSymbol(hFBS,ucase($"FBS_Create_Sound")) : if FBS_Create_Sound =0 then print "error: can't resolve " & $"FBS_Create_Sound" : beep : sleep : end 1
 FBS_Destroy_Wave =DyLibSymbol(hFBS,ucase($"FBS_Destroy_Wave")) : if FBS_Destroy_Wave =0 then print "error: can't resolve " & $"FBS_Destroy_Wave" : beep : sleep : end 1
 FBS_Destroy_Sound =DyLibSymbol(hFBS,ucase($"FBS_Destroy_Sound")) : if FBS_Destroy_Sound =0 then print "error: can't resolve " & $"FBS_Destroy_Sound" : beep : sleep : end 1
 FBS_Play_Sound =DyLibSymbol(hFBS,ucase($"FBS_Play_Sound")) : if FBS_Play_Sound =0 then print "error: can't resolve " & $"FBS_Play_Sound" : beep : sleep : end 1
 FBS_Get_SoundLength =DyLibSymbol(hFBS,ucase($"FBS_Get_SoundLength")) : if FBS_Get_SoundLength =0 then print "error: can't resolve " & $"FBS_Get_SoundLength" : beep : sleep : end 1
 FBS_Set_SoundSpeed =DyLibSymbol(hFBS,ucase($"FBS_Set_SoundSpeed")) : if FBS_Set_SoundSpeed =0 then print "error: can't resolve " & $"FBS_Set_SoundSpeed" : beep : sleep : end 1
 FBS_Get_SoundSpeed =DyLibSymbol(hFBS,ucase($"FBS_Get_SoundSpeed")) : if FBS_Get_SoundSpeed =0 then print "error: can't resolve " & $"FBS_Get_SoundSpeed" : beep : sleep : end 1
 FBS_Set_SoundVolume =DyLibSymbol(hFBS,ucase($"FBS_Set_SoundVolume")) : if FBS_Set_SoundVolume =0 then print "error: can't resolve " & $"FBS_Set_SoundVolume" : beep : sleep : end 1
 FBS_Get_SoundVolume =DyLibSymbol(hFBS,ucase($"FBS_Get_SoundVolume")) : if FBS_Get_SoundVolume =0 then print "error: can't resolve " & $"FBS_Get_SoundVolume" : beep : sleep : end 1
 FBS_Set_SoundPan =DyLibSymbol(hFBS,ucase($"FBS_Set_SoundPan")) : if FBS_Set_SoundPan =0 then print "error: can't resolve " & $"FBS_Set_SoundPan" : beep : sleep : end 1
 FBS_Get_SoundPan =DyLibSymbol(hFBS,ucase($"FBS_Get_SoundPan")) : if FBS_Get_SoundPan =0 then print "error: can't resolve " & $"FBS_Get_SoundPan" : beep : sleep : end 1
 FBS_Set_SoundLoops =DyLibSymbol(hFBS,ucase($"FBS_Set_SoundLoops")) : if FBS_Set_SoundLoops =0 then print "error: can't resolve " & $"FBS_Set_SoundLoops" : beep : sleep : end 1
 FBS_Get_SoundLoops =DyLibSymbol(hFBS,ucase($"FBS_Get_SoundLoops")) : if FBS_Get_SoundLoops =0 then print "error: can't resolve " & $"FBS_Get_SoundLoops" : beep : sleep : end 1
 FBS_Set_SoundMuted =DyLibSymbol(hFBS,ucase($"FBS_Set_SoundMuted")) : if FBS_Set_SoundMuted =0 then print "error: can't resolve " & $"FBS_Set_SoundMuted" : beep : sleep : end 1
 FBS_Get_SoundMuted =DyLibSymbol(hFBS,ucase($"FBS_Get_SoundMuted")) : if FBS_Get_SoundMuted =0 then print "error: can't resolve " & $"FBS_Get_SoundMuted" : beep : sleep : end 1
 FBS_Set_SoundPaused =DyLibSymbol(hFBS,ucase($"FBS_Set_SoundPaused")) : if FBS_Set_SoundPaused =0 then print "error: can't resolve " & $"FBS_Set_SoundPaused" : beep : sleep : end 1
 FBS_Get_SoundPaused =DyLibSymbol(hFBS,ucase($"FBS_Get_SoundPaused")) : if FBS_Get_SoundPaused =0 then print "error: can't resolve " & $"FBS_Get_SoundPaused" : beep : sleep : end 1
 FBS_Get_WavePointers =DyLibSymbol(hFBS,ucase($"FBS_Get_WavePointers")) : if FBS_Get_WavePointers =0 then print "error: can't resolve " & $"FBS_Get_WavePointers" : beep : sleep : end 1
 FBS_Get_SoundPointers =DyLibSymbol(hFBS,ucase($"FBS_Get_SoundPointers")) : if FBS_Get_SoundPointers =0 then print "error: can't resolve " & $"FBS_Get_SoundPointers" : beep : sleep : end 1
 FBS_Set_SoundPointers =DyLibSymbol(hFBS,ucase($"FBS_Set_SoundPointers")) : if FBS_Set_SoundPointers =0 then print "error: can't resolve " & $"FBS_Set_SoundPointers" : beep : sleep : end 1
 FBS_Get_SoundPosition =DyLibSymbol(hFBS,ucase($"FBS_Get_SoundPosition")) : if FBS_Get_SoundPosition =0 then print "error: can't resolve " & $"FBS_Get_SoundPosition" : beep : sleep : end 1
 FBS_Set_SoundCallback =DyLibSymbol(hFBS,ucase($"FBS_Set_SoundCallback")) : if FBS_Set_SoundCallback =0 then print "error: can't resolve " & $"FBS_Set_SoundCallback" : beep : sleep : end 1
 FBS_Enable_SoundCallback =DyLibSymbol(hFBS,ucase($"FBS_Enable_SoundCallback")) : if FBS_Enable_SoundCallback =0 then print "error: can't resolve " & $"FBS_Enable_SoundCallback" : beep : sleep : end 1
 FBS_Disable_SoundCallback =DyLibSymbol(hFBS,ucase($"FBS_Disable_SoundCallback")) : if FBS_Disable_SoundCallback =0 then print "error: can't resolve " & $"FBS_Disable_SoundCallback" : beep : sleep : end 1
 FBS_Get_PlayingStreams =DyLibSymbol(hFBS,ucase($"FBS_Get_PlayingStreams")) : if FBS_Get_PlayingStreams =0 then print "error: can't resolve " & $"FBS_Get_PlayingStreams" : beep : sleep : end 1
 FBS_Create_MP3Stream =DyLibSymbol(hFBS,ucase($"FBS_Create_MP3Stream")) : if FBS_Create_MP3Stream =0 then print "error: can't resolve " & $"FBS_Create_MP3Stream" : beep : sleep : end 1
 FBS_Play_MP3Stream =DyLibSymbol(hFBS,ucase($"FBS_Play_MP3Stream")) : if FBS_Play_MP3Stream =0 then print "error: can't resolve " & $"FBS_Play_MP3Stream" : beep : sleep : end 1
 FBS_End_MP3Stream =DyLibSymbol(hFBS,ucase($"FBS_End_MP3Stream")) : if FBS_End_MP3Stream =0 then print "error: can't resolve " & $"FBS_End_MP3Stream" : beep : sleep : end 1
 FBS_Set_MP3StreamVolume =DyLibSymbol(hFBS,ucase($"FBS_Set_MP3StreamVolume")) : if FBS_Set_MP3StreamVolume =0 then print "error: can't resolve " & $"FBS_Set_MP3StreamVolume" : beep : sleep : end 1
 FBS_Get_MP3StreamVolume =DyLibSymbol(hFBS,ucase($"FBS_Get_MP3StreamVolume")) : if FBS_Get_MP3StreamVolume =0 then print "error: can't resolve " & $"FBS_Get_MP3StreamVolume" : beep : sleep : end 1
 FBS_Set_MP3StreamPan =DyLibSymbol(hFBS,ucase($"FBS_Set_MP3StreamPan")) : if FBS_Set_MP3StreamPan =0 then print "error: can't resolve " & $"FBS_Set_MP3StreamPan" : beep : sleep : end 1
 FBS_Get_MP3StreamPan =DyLibSymbol(hFBS,ucase($"FBS_Get_MP3StreamPan")) : if FBS_Get_MP3StreamPan =0 then print "error: can't resolve " & $"FBS_Get_MP3StreamPan" : beep : sleep : end 1
 FBS_Get_MP3StreamBuffer =DyLibSymbol(hFBS,ucase($"FBS_Get_MP3StreamBuffer")) : if FBS_Get_MP3StreamBuffer =0 then print "error: can't resolve " & $"FBS_Get_MP3StreamBuffer" : beep : sleep : end 1
 FBS_Set_MP3StreamCallback =DyLibSymbol(hFBS,ucase($"FBS_Set_MP3StreamCallback")) : if FBS_Set_MP3StreamCallback =0 then print "error: can't resolve " & $"FBS_Set_MP3StreamCallback" : beep : sleep : end 1
 FBS_Enable_MP3StreamCallback =DyLibSymbol(hFBS,ucase($"FBS_Enable_MP3StreamCallback")) : if FBS_Enable_MP3StreamCallback =0 then print "error: can't resolve " & $"FBS_Enable_MP3StreamCallback" : beep : sleep : end 1
 FBS_Disable_MP3StreamCallback =DyLibSymbol(hFBS,ucase($"FBS_Disable_MP3StreamCallback")) : if FBS_Disable_MP3StreamCallback =0 then print "error: can't resolve " & $"FBS_Disable_MP3StreamCallback" : beep : sleep : end 1
End Sub

sub RuntimeUnload Destructor
 if hFBS=0 then exit sub
 if FBS_Get_PlugRunning() then FBS_Stop()
 FBS_Exit()
 DyLibFree(hFBS)
 hFBS=0
end sub



 function FbSound_Init() as boolean
 dim as string data_path
 data_path = exepath() & "/dta/"
 dim as boolean ok
 ok=fbs_Init()
 if ok=false then
 ? "error: fbs_Init() !"
 ? FBS_Get_PlugError()
 beep
 sleep
 end if
 return ok
 end function
 function LoadWave(byref HWave as integer, byref WaveFileName as const string) as boolean
 dim as string data_path
 data_path = exepath() & "/dta/"
 dim as boolean ok
 ok=fbs_Load_WAVFile(data_path & WaveFileName,@HWave)
 if ok=false then
 ? "error: fbs_Load_WAVFile() !"
 beep
 sleep
 end if
 return ok
 end function
end nameSpace
? "DJ.Peters' FbSound inside..."
? "DJP sound init =", djRedundo.FbSound_Init()
dim as integer testWave
dim as integer testWav2
dim as integer testWav3
dim as integer testWav4
? "add sound fbsloop44.wav =", djRedundo.LoadWave(testWave, "fbsloop44.wav")
? "add sound atem.wav =", djRedundo.LoadWave(testWav2, "atem.wav")
? "add sound pcar.wav =", djRedundo.LoadWave(testWav3, "pcar.wav")
? "add sound rnb_loop.wav =", djRedundo.LoadWave(testWav4, "rnb_loop.wav")

nameSpace ttRedundo

 type SCREENTEST extends OBJECT
 declare static sub TestScreen()
 static as integer scrW
 static as integer scrH
 end type
 dim as integer SCREENTEST.scrW => -1
 dim as integer SCREENTEST.scrH => -1
 sub SCREENTEST.TestScreen()
 screenInfo (SCREENTEST.scrW, SCREENTEST.scrH)
 end sub

 type INTERACTIONTEST extends SCREENTEST
 declare static function TestMouse() as long
 declare static function TestKeyboard() as long
 static as long gmX
 static as long gmY
 static as long gmBtn
 static as long scanCode
 end type
 dim as long INTERACTIONTEST.gmX => -1
 dim as long INTERACTIONTEST.gmY => -1
 dim as long INTERACTIONTEST.gmBtn => -1
 dim as long INTERACTIONTEST.scanCode => -1
 function INTERACTIONTEST.TestMouse() as long
 return getMouse ( INTERACTIONTEST.gmX, INTERACTIONTEST.gmY, , INTERACTIONTEST.gmBtn )
 end function
 function INTERACTIONTEST.TestKeyboard() as long
 dim as long scanCodeResult => -1
 if multiKey(fb.SC_BACKSPACE) then
 scanCodeResult = fb.SC_BACKSPACE
 elseif multiKey(fb.SC_SPACE) then
 scanCodeResult = fb.SC_SPACE
 elseif multiKey(fb.SC_LEFT) andAlso multiKey(fb.SC_UP) then
 scanCodeResult = fb.SC_LEFT + fb.SC_UP
 elseif multiKey(fb.SC_LEFT) andAlso multiKey(fb.SC_DOWN) then
 scanCodeResult = fb.SC_LEFT + fb.SC_DOWN
 elseif multiKey(fb.SC_RIGHT) andAlso multiKey(fb.SC_UP) then
 scanCodeResult = fb.SC_RIGHT + fb.SC_UP
 elseif multiKey(fb.SC_RIGHT) andAlso multiKey(fb.SC_DOWN) then
 scanCodeResult = fb.SC_RIGHT + fb.SC_DOWN
 elseif multiKey(fb.SC_LEFT) then
 scanCodeResult = fb.SC_LEFT
 elseif multiKey(fb.SC_RIGHT) then
 scanCodeResult = fb.SC_RIGHT
 elseif multiKey(fb.SC_DOWN) then
 scanCodeResult = fb.SC_DOWN
 elseif multiKey(fb.SC_UP) then
 scanCodeResult = fb.SC_UP
 end if
 while inkey<>"" : : wend
 INTERACTIONTEST.scanCode = scanCodeResult
 return scanCodeResult
 end function
end nameSpace

nameSpace ttDrgDrpBtn
 const as double _2pi => 8*atn(1)

 type BIVALUE
 as integer _bvx
 as integer _bvy
 end type

 type POSITIONXY
 as integer _x
 as integer _y
 end type
 declare operator -(byval as POSITIONXY, byval as POSITIONXY) as POSITIONXY
 declare operator <>(byval as POSITIONXY, byval as POSITIONXY) as boolean
 operator -(byval LeftOperand as POSITIONXY, byval RightOperand as POSITIONXY) as POSITIONXY
 dim as POSITIONXY operationResult
 operationResult._x = LeftOperand._x - RightOperand._x
 operationResult._y = LeftOperand._y - RightOperand._y
 return operationResult
 end operator
 operator <>(byval LeftOperand as POSITIONXY, byval RightOperand as POSITIONXY) as boolean
 if LeftOperand._x<>RightOperand._x orElse LeftOperand._y<>RightOperand._y then
 return TRUE
 else
 return FALSE
 end if
 end operator

 type WIDHEI
 declare operator Cast() as integer
 declare property Maximum() as integer
 declare property RatioForEllipse() as single
 declare function Xf(byval as integer) as integer
 declare function Yf(byval as integer) as integer
 declare function Refresh( byval as integer=-1, byval as integer=-1) as typeOf(Err())
 as integer _wid
 as integer _hei
 as integer _maximum
 as single _ratioForEllipse
 end type
 operator WIDHEI.Cast() as integer
 return THIS._wid
 end operator
 property WIDHEI.Maximum() as integer
 return - ( iif((-THIS._wid)<(-THIS._hei), (-THIS._wid), (-THIS._hei)) )
 end property
 property WIDHEI.RatioForEllipse() as single
 return THIS._hei/THIS._wid
 end property
 function WIDHEI.Xf(byval Xi as integer) as integer
 return Xi + THIS._wid - 1
 end function
 function WIDHEI.Yf(byval Yi as integer) as integer
 return Yi + THIS._hei - 1
 end function

 type DROPZONE
 enum _DROPZONESHAPE
 _fullRectangle
 _maximumEllipse
 end enum
 declare constructor()
 declare property Xi() as integer
 declare property Yi() as integer
 declare property Xf() as integer
 declare property Yf() as integer
 declare function IsInDropzoneShape overload( byval as integer, byval as integer ) as boolean
 declare function IsInDropzoneShape(byval as POSITIONXY) as boolean
 declare sub DrawDropZone()
 as _DROPZONESHAPE _dzShape
 as POSITIONXY _topLeftCorner
 as WIDHEI _widHei
 as string _keyId
 declare sub DrawDropzoneOccupability()
 as integer _capacity
 as integer _occupiedSlotCount
 as integer _arrayOfDroppedPtr(any)
 end type
 type DZ as DROPZONE
 constructor DROPZONE()
 dim as integer scrW, scrH
 screenInfo scrW, scrH
 with THIS
 ._dzShape => DZ._DROPZONESHAPE._fullRectangle
 ._topLeftCorner._x => scrW\4
 ._topLeftCorner._y => scrH\3
 ._widHei._wid => scrW\8
 ._widHei._hei => scrH\8
 ._keyId => "ID"& str(int(rnd*9e+12))
 ._capacity => 2
 ._occupiedSlotCount => 0
 end with
 end constructor
 property DZ.Xi() as integer
 return THIS._topLeftCorner._x
 end property
 property DZ.Yi() as integer
 return THIS._topLeftCorner._y
 end property
 property DZ.Xf() as integer
 return THIS._widHei.Xf(THIS._topLeftCorner._x)
 end property
 property DZ.Yf() as integer
 return THIS._widHei.Yf(THIS._topLeftCorner._y)
 end property
 function DZ.IsInDropzoneShape( byval PosX as integer, byval PosY as integer ) as boolean
 select case THIS._dzShape
 case DZ._DROPZONESHAPE._fullRectangle
 if PosX>=THIS.Xi andAlso PosX<=THIS.Xf andAlso PosY>=THIS.Yi andAlso PosY<=THIS.Yf then
 return TRUE
 else
 return FALSE
 end if
 case else
 if PosX>=THIS.Xi andAlso PosX<=THIS.Xf andAlso PosY>=THIS.Yi andAlso PosY<=THIS.Yf then
 dim as single xCenter => (THIS.Xi + THIS.Xf)\2
 dim as single yCenter => (THIS.Yi + THIS.Yf)\2
 dim as single rX => THIS._widhei._wid\2
 dim as single rY => THIS._widhei._hei\2
 if (((PosX - xCenter)/rX)^2 + ((PosY - yCenter)/rY)^2)<1 then
 return TRUE
 else
 return FALSE
 end if
 else
 return FALSE
 end if
 end select
 end function
 function DZ.IsInDropzoneShape(byval PosXY as POSITIONXY) as boolean
 select case THIS._dzShape
 case DZ._DROPZONESHAPE._fullRectangle
 if PosXY._x>=THIS.Xi andAlso PosXY._x<=THIS.Xf andAlso PosXY._y>=THIS.Yi andAlso PosXY._y<=THIS.Yf then
 return TRUE
 else
 return FALSE
 end if
 case else
 if PosXY._x>=THIS.Xi andAlso PosXY._x<=THIS.Xf andAlso PosXY._y>=THIS.Yi andAlso PosXY._y<=THIS.Yf then
 dim as single xCenter => (THIS.Xi + THIS.Xf)\2
 dim as single yCenter => (THIS.Yi + THIS.Yf)\2
 dim as single rX => THIS._widhei._wid\2
 dim as single rY => THIS._widhei._hei\2
 if (((PosXY._x - xCenter)/rX)^2 + ((PosXY._y - yCenter)/rY)^2)<1 then
 return TRUE
 else
 return FALSE
 end if
 else
 return FALSE
 end if
 end select
 end function
 sub DZ.DrawDropZone()
 static as integer counter
 static as boolean isFlipped
 dim as integer bkgColor
 screenControl fb.GET_COLOR, , bkgColor
 dim as integer scrDepth
 screenInfo , , scrDepth
 line (THIS.Xi, THIS.Yi)-(THIS.Xf, THIS.Yf), ( bkgColor xor ((cuint(200) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(140) shl 24))) * 30000, b, iif(isFlipped, &b1111000011111111, &b0000111111110000)
 select case THIS._dzShape
 case DZ._DROPZONESHAPE._fullRectangle
 line (THIS.Xi + 1, THIS.Yi + 1)-(THIS.Xf - 1, THIS.Yf - 1), bkgColor xor ((cuint(200) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(140) shl 24)), b, iif(isFlipped, &b1111000011111111, &b0000111111110000)
 case else
 circle ((THIS.Xi + THIS.Xf)\2, (THIS.Yi + THIS.Yf)\2), THIS._widhei.Maximum\2, ((cuint(100) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(100) shl 24)) , ( ( 4*atn(1) )/180)*(counter + 10), ( ( 4*atn(1) )/180)*(counter + 20), THIS._widhei.RatioForEllipse
 circle ((THIS.Xi + THIS.Xf)\2, (THIS.Yi + THIS.Yf)\2), THIS._widhei.Maximum\2, ((cuint(100) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(100) shl 24)) , ( ( 4*atn(1) )/180)*(counter + 30), ( ( 4*atn(1) )/180)*(counter + 40), THIS._widhei.RatioForEllipse
 end select
 counter += 1
 if (counter mod 12)=0 then isFlipped = not isFlipped
 THIS.DrawDropzoneOccupability()
 end sub
 sub DZ.DrawDropzoneOccupability()
 for i as integer = 1 to THIS._capacity
 circle ((THIS.Xi + THIS.Xf)\2 + i*4, (THIS.Yi + THIS.Yf)\2), 2, ((cuint(0) shl 16) or (cuint(200) shl 8) or cuint(200) or &hFF000000)
 next i
 for i as integer = 1 to THIS._occupiedSlotCount
 circle ((THIS.Xi + THIS.Xf)\2, (THIS.Yi + THIS.Yf)\2 + 6 + i*4), 2, ((cuint(200) shl 16) or (cuint(0) shl 8) or cuint(0) or &hFF000000)
 next i
 end sub

 type DRAGDROPBUTTON
 enum _DGDPBTNSHAPE
 _naked
 _squared
 _rounded
 end enum
 declare constructor()
 declare property FontWidth() as integer
 declare property FontHeight() as integer
 declare property Xi() as integer
 declare property Yi() as integer
 declare property Xf() as integer
 declare property Yf() as integer
 declare property RoundedShapeRadius() as BIVALUE
 declare property DropZoneCount() as integer
 declare sub AddDropZoneToArrayOfPtr(byval as DROPZONE ptr)
 declare sub AddDropZoneArrayOfPtrToArrayOfPtr(() as DROPZONE ptr)
 declare sub RemoveAllDropZoneFromArrayOfPtr()
 declare sub RemoveDropZoneFromArrayOfPtrAtIndexAtIndex(byval as integer)
 declare sub RemoveDropZoneFromArrayOfPtrAtIndexByKeyId(byval as string)
 declare sub TestScreen()
 declare function IsInButtonShape(byval as integer, byval as integer) as boolean
 declare sub TestMouse()
 declare sub ShowAllDropZone()
 declare sub ShowDropZoneAtIndex(byval as integer)
 declare sub ShowDropZoneAtKeyId(byval as string)
 declare sub DrawDgdpbtn()
 as _DGDPBTNSHAPE _btnShape
 as string _btnTxt
 as POSITIONXY _topLeftCorner
 as WIDHEI _widHei
 as integer _dpZoneCount
 as DROPZONE ptr _dpZoneArrayPtr(any)
 as fb.IMAGE ptr _dgdpbtnImage
 as ulong _idleColour
 as ulong _mouseOverColour
 as ulong _mouseClickColour
 as ulong _mouseDragColour
 as ulong _mouseDroppableColour
 as ulong _mouseDroppedColour
 as boolean _hasMouseOver
 as boolean _hasMouseClick
 as POSITIONXY _offsetAtClick
 as Boolean _hasMultiplicityIndicator
 as Boolean _isDragAllowed
 as boolean _hasDragStarted
 as boolean _isMouseOverDropZone
 as boolean _isMouseDropped
 as integer _dropZoneCandidateindex
 as integer _scrW
 as integer _scrH
 as integer _scrDepth
 as integer _colWidth
 as integer _rowWidth
 as integer _roundedShapeRadius
 static as integer constructionCount
 static as integer arrayOfDragDropButtonPtrCount
 static as DRAGDROPBUTTON ptr arrayOfDragDropButtonPtr(any)
 end type
 type DGDPBTN as DRAGDROPBUTTON
 dim as integer DGDPBTN.constructionCount
 dim as integer DGDPBTN.arrayOfDragDropButtonPtrCount
 dim as DGDPBTN ptr DGDPBTN.arrayOfDragDropButtonPtr(any)
 constructor DRAGDROPBUTTON()
 DGDPBTN.constructionCount += 1
 redim preserve DGDPBTN.arrayOfDragDropButtonPtr(uBound(DGDPBTN.arrayOfDragDropButtonPtr) + 1)
 DGDPBTN.arrayOfDragDropButtonPtr(uBound(DGDPBTN.arrayOfDragDropButtonPtr)) => @THIS
 THIS.TestScreen()
 with THIS
 ._btnShape => DGDPBTN._DGDPBTNSHAPE._naked
 ._btnTxt => "OK"
 ._topLeftCorner => type<POSITIONXY>(THIS._scrW/2, THIS._scrH/2)
 ._widHei._wid => ( iif((18)>(.FontWidth*len(._btnTxt)), (18), (.FontWidth*len(._btnTxt))) )
 ._widHei._hei => .FontHeight + 4
 .AddDropZoneToArrayOfPtr(0)
 ._dgdpbtnImage =imageCreate(._widHei._wid, ._widHei._hei, ((cuint(100) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(100) shl 24)), ((cuint(200) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(100) shl 24)))
 ._idleColour => ((cuint(100) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(100) shl 24))
 ._mouseOverColour => ((cuint(100) shl 16) or (cuint(200) shl 8) or cuint(200) or (cuint(100) shl 24))
 ._mouseClickColour => ((cuint(100) shl 16) or (cuint(100) shl 8) or cuint(200) or (cuint(100) shl 24))
 ._mouseDragColour => ((cuint(200) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(100) shl 24))
 ._mouseDroppableColour => ((cuint(100) shl 16) or (cuint(200) shl 8) or cuint(100) or (cuint(200) shl 24))
 ._mouseDroppedColour => ((cuint(200) shl 16) or (cuint(200) shl 8) or cuint(100) or (cuint(100) shl 24))
 ._isDragAllowed => TRUE
 ._hasMouseOver => FALSE
 ._hasMouseClick => FALSE
 ._offsetAtClick => type<POSITIONXY>(-1, -1)
 ._hasDragStarted => FALSE
 ._isMouseOverDropZone => FALSE
 ._isMouseDropped => FALSE
 ._dropZoneCandidateindex => -1
 end with
 end constructor
 property DGDPBTN.FontWidth() as integer
 return 16
 end property
 property DGDPBTN.FontHeight() as integer
 return 16
 end property
 property DGDPBTN.Xi() as integer
 return THIS._topLeftCorner._x
 end property
 property DGDPBTN.Yi() as integer
 return THIS._topLeftCorner._y
 end property
 property DGDPBTN.Xf() as integer
 return THIS._widHei.Xf(THIS._topLeftCorner._x)
 end property
 property DGDPBTN.Yf() as integer
 return THIS._widHei.Yf(THIS._topLeftCorner._y)
 end property
 property DGDPBTN.RoundedShapeRadius() as BIVALUE
 dim as BIVALUE returnValue
 returnValue._bvx = THIS._widHei._wid\6
 returnValue._bvy = THIS._widHei._hei\2
 return returnValue
 end property
 property DGDPBTN.DropZoneCount() as integer
 return THIS._dpZoneCount
 end property
 sub DGDPBTN.AddDropZoneToArrayOfPtr(byval DZitem as DROPZONE ptr)
 if DZitem=0 then exit sub
 redim preserve THIS._dpZoneArrayPtr(uBound(THIS._dpZoneArrayPtr) + 1)
 THIS._dpZoneArrayPtr(uBound(THIS._dpZoneArrayPtr)) => DZitem
 end sub
 sub DGDPBTN.AddDropZoneArrayOfPtrToArrayOfPtr(DZArrayOfPtr() as DROPZONE ptr)
 if uBound(DZArrayOfPtr)<0 then exit sub
 dim as integer initialLastIndex = uBound( THIS._dpZoneArrayPtr)
 for index as integer = 0 to uBound(DZArrayOfPtr)
 if DZArrayOfPtr(index)<>0 then
 redim preserve THIS._dpZoneArrayPtr(uBound(THIS._dpZoneArrayPtr) + 1)
 THIS._dpZoneArrayPtr(uBound(THIS._dpZoneArrayPtr)) => DZArrayOfPtr(index)
 end if
 next index
 end sub
 sub DGDPBTN.TestScreen()
 screenInfo THIS._scrW, THIS._scrH, THIS._scrDepth
 dim as ulong scrWidth => width()
 THIS._colWidth => (cuint(scrWidth) and &h0000FFFF)
 THIS._rowWidth => (cuint(scrWidth) shr 16)
 end sub
 function DGDPBTN.IsInButtonShape(byval GmX as integer, byval GmY as integer) as boolean
 select case THIS._btnShape
 case DGDPBTN._DGDPBTNSHAPE._naked
 if GmX>=THIS.Xi andAlso GmX<=THIS.Xf andAlso GmY>=THIS.Yi andAlso GmY<=THIS.Yf then
 return TRUE
 else
 return FALSE
 end if
 case DGDPBTN._DGDPBTNSHAPE._squared
 if GmX>=THIS.Xi - 8 andAlso GmX<=THIS.Xf + 8 andAlso GmY>=THIS.Yi - 8 andAlso GmY<=THIS.Yf + 8 then
 return TRUE
 else
 return FALSE
 end if
 case else
 if GmX>=THIS.Xi - THIS._widHei._wid/2 andAlso GmX<=THIS.Xf + THIS._widHei._wid/2 andAlso GmY>=THIS.Yi - THIS._widHei._hei/2 andAlso GmY<=THIS.Yf + THIS._widHei._hei/2 then
 if ( GmX>=THIS.Xi andAlso GmX<=THIS.Xf andAlso GmY>=THIS.Yi - THIS._widHei._hei/2 andAlso GmY<=THIS.Yf + THIS._widHei._wid/2 ) then
 return TRUE
 else
 dim as integer rx => THIS.RoundedShapeRadius._bvx
 dim as integer ry => THIS.RoundedShapeRadius._bvy
 dim as single yrMinLeft => THIS.Yi - sqr(rx^2 - ( GmX - THIS.Xi)^2)*ry/rx
 dim as single yrMaxLeft => THIS.Yf + sqr(rx^2 - ( GmX - THIS.Xi)^2)*ry/rx
 dim as single yrMinRight => THIS.Yi - sqr(rx^2 - ( GmX - THIS.Xf)^2)*ry/rx
 dim as single yrMaxRight => THIS.Yf + sqr(rx^2 - ( GmX - THIS.Xf)^2)*ry/rx
 if ( GmX>=THIS.Xi - THIS._widHei._wid/2 andAlso GmX<=THIS.Xi andAlso GmY>=yrMinLeft andAlso GmY<=yrMaxLeft ) orElse ( GmX>=THIS.Xf andAlso GmX<=THIS.Xf + THIS._widHei._wid/2 andAlso GmY>=yrMinRight andAlso GmY<=yrMaxRight ) then
 return TRUE
 else
 return FALSE
 end if
 end if
 else
 return FALSE
 end if
 end select
 end function
 sub DGDPBTN.TestMouse()
 static as boolean hasMovedAtLeastOnce
 dim as integer gmX, gmY, gmWheel, gmBtn
 getMouse gmX, gmY, gmWheel, gmBtn
 THIS._hasMultiplicityIndicator = FALSE
 if not THIS._hasDragStarted then
 for index as integer = lBound(DGDPBTN.arrayOfDragDropButtonPtr) to uBound(DGDPBTN.arrayOfDragDropButtonPtr)
 if THIS._hasMouseOver then
 if DGDPBTN.arrayOfDragDropButtonPtr(index)<>@THIS andAlso DGDPBTN.arrayOfDragDropButtonPtr(index)->_hasMouseOver then
 THIS._hasMultiplicityIndicator = TRUE
 end if
 end if
 next index
 end if
 for index as integer = lBound(DGDPBTN.arrayOfDragDropButtonPtr) to uBound(DGDPBTN.arrayOfDragDropButtonPtr)
 if THIS._hasMouseClick then
 if DGDPBTN.arrayOfDragDropButtonPtr(index)<>@THIS andAlso DGDPBTN.arrayOfDragDropButtonPtr(index)->_hasMouseClick then
 THIS._hasMouseClick = FALSE
 exit sub
 end if
 end if
 next index

 dim as boolean hasAlreadyDragStartedForElse => FALSE
 for index as integer = lBound(DGDPBTN.arrayOfDragDropButtonPtr) to uBound(DGDPBTN.arrayOfDragDropButtonPtr)
 if DGDPBTN.arrayOfDragDropButtonPtr(index)<>@THIS andAlso DGDPBTN.arrayOfDragDropButtonPtr(index)->_hasDragStarted then
 hasAlreadyDragStartedForElse = TRUE
 exit sub
 end if
 next index
 select case THIS._hasMouseClick
 case TRUE
 THIS._hasDragStarted = TRUE
 if not ( gmX=(THIS._topLeftCorner._x + THIS._offsetAtClick._x) andAlso gmY=(THIS._topLeftCorner._y + THIS._offsetAtClick._y) ) then
 if not hasMovedAtLeastOnce then hasMovedAtLeastOnce = TRUE

 if THIS._isDragAllowed then
 THIS._topLeftCorner._x = gmX - THIS._offsetAtClick._x
 THIS._topLeftCorner._y = gmY - THIS._offsetAtClick._y
 else
 THIS._hasMouseOver = FALSE
 THIS._hasMouseClick = FALSE
 end if
 else
 if not hasMovedAtLeastOnce then
 THIS._hasDragStarted = FALSE
 else
 THIS._hasDragStarted = TRUE
 end if
 if THIS.IsInButtonShape(gmX, gmY) then
 if not gmBtn>0 then
 if hasMovedAtLeastOnce then hasMovedAtLeastOnce = FALSE
 THIS._hasMouseClick = FALSE
 THIS._offsetAtClick._x = -1
 THIS._offsetAtClick._y = -1
 end if
 else
 THIS._hasMouseOver = FALSE
 end if
 end if
 case else
 if THIS._hasDragStarted then
 THIS._hasDragStarted = FALSE
 end if
 if THIS.IsInButtonShape(gmX, gmY) then
 if not THIS._hasMouseOver then THIS._hasMouseOver = TRUE
 if gmBtn>0 then
 THIS._hasMouseClick = TRUE
 THIS._offsetAtClick._x = gmX - THIS._topLeftCorner._x
 THIS._offsetAtClick._y = gmY - THIS._topLeftCorner._y
 end if
 else
 if THIS._hasMouseOver then THIS._hasMouseOver = FALSE
 end if
 end select
 if THIS._hasDragStarted then
 select case THIS._isMouseOverDropZone
 case TRUE
 if THIS.IsInButtonShape(gmX, gmY) then
 if not gmBtn>0 then
 if not THIS._isMouseDropped then
 if THIS._dropZoneCandidateindex>-1 andAlso THIS._dpZoneArrayPtr(THIS._dropZoneCandidateindex)->_capacity>THIS._dpZoneArrayPtr(THIS._dropZoneCandidateindex)->_occupiedSlotCount then
 with *THIS._dpZoneArrayPtr(THIS._dropZoneCandidateindex)
 redim preserve ._arrayOfDroppedPtr(uBound(._arrayOfDroppedPtr) + 1)
 end with
 THIS._dpZoneArrayPtr(THIS._dropZoneCandidateindex)->_arrayOfDroppedPtr(uBound(THIS._dpZoneArrayPtr(THIS._dropZoneCandidateindex)->_arrayOfDroppedPtr))=cInt(@THIS)
 THIS._isMouseDropped = TRUE
 THIS._dpZoneArrayPtr(THIS._dropZoneCandidateindex)->_occupiedSlotCount += 1
 end if
 THIS._hasMouseClick = FALSE
 else
 end if
 else
 ? "hekk"
 if THIS._isMouseDropped then
 with *THIS._dpZoneArrayPtr(THIS._dropZoneCandidateindex)
 for index as integer = lBound(._arrayOfDroppedPtr) to uBound(._arrayOfDroppedPtr)
 if ._arrayOfDroppedPtr(index)=cInt(@THIS) then
 THIS._dpZoneArrayPtr(THIS._dropZoneCandidateindex)->_occupiedSlotCount -= 1
 ._arrayOfDroppedPtr(index) = 0
 end if
 next index
 dim as integer invalidIndexLowerBound = uBound(._arrayOfDroppedPtr)
 for index as integer = lBound(._arrayOfDroppedPtr) to uBound(._arrayOfDroppedPtr)
 if index=invalidIndexLowerBound then
 exit for
 end if
 if ._arrayOfDroppedPtr(index)=0 then
 swap ._arrayOfDroppedPtr(index), ._arrayOfDroppedPtr(invalidIndexLowerBound)
 invalidIndexLowerBound -= 1
 end if
 next index
 ? invalidIndexLowerBound
 if invalidIndexLowerBound=lBound(._arrayOfDroppedPtr) then
 erase ._arrayOfDroppedPtr
 else
 redim preserve ._arrayOfDroppedPtr(lBound(._arrayOfDroppedPtr) to invalidIndexLowerBound + 1)
 end if
 end with
 THIS._isMouseDropped = FALSE
 end if
 end if
 else
 THIS._hasMouseOver = FALSE
 end if
 case else
 if THIS.IsInButtonShape(gmX, gmY) then
 if not gmBtn>0 then
 if THIS._isMouseDropped then THIS._isMouseDropped = FALSE
 THIS._hasMouseClick = FALSE
 end if
 else
 THIS._hasMouseOver = FALSE
 end if
 end select
 for index as integer = lBound(THIS._dpZoneArrayPtr) to uBound(THIS._dpZoneArrayPtr)
 if THIS._dpZoneArrayPtr(index)->IsInDropzoneShape(gmX, gmY) then
 if not THIS._isMouseOverDropZone then THIS._isMouseOverDropZone = TRUE
 THIS._dropZoneCandidateindex = index
 exit sub
 else
 if THIS._isMouseOverDropZone then THIS._isMouseOverDropZone = FALSE
 THIS._dropZoneCandidateindex = -1
 end if
 next index
 end if
 end sub
 sub DGDPBTN.ShowAllDropZone()
 dim as integer bkgColor
 screenControl fb.GET_COLOR, , bkgColor
 dim as integer scrDepth
 screenInfo , , scrDepth
 for index as integer = 0 to uBound(THIS._dpZoneArrayPtr)
 line ( THIS._dpZoneArrayPtr(index)->Xi + 2, THIS._dpZoneArrayPtr(index)->Yi + 2)- ( THIS._dpZoneArrayPtr(index)->Xf - 2, THIS._dpZoneArrayPtr(index)->Yf - 2), bkgColor/scrDepth, b, &b00000111
 next index
 end sub
 sub DGDPBTN.DrawDgdpbtn()
 THIS.TestMouse()
 dim as ulong btnColour
 if THIS._isMouseOverDropZone then
 btnColour = THIS._mouseDroppableColour
 elseIf THIS._hasDragStarted then
 btnColour = THIS._mouseDragColour
 elseIf THIS._hasMouseClick then
 btnColour = THIS._mouseClickColour
 elseIf THIS._hasMouseOver then
 btnColour = THIS._mouseOverColour
 elseIf not THIS._isMouseDropped then
 btnColour = THIS._idleColour
 end if
 if not THIS._hasDragStarted andAlso THIS._isMouseDropped then
 btnColour = btnColour xor THIS._mouseDroppedColour
 end if
 select case THIS._btnShape
 case DGDPBTN._DGDPBTNSHAPE._naked
 line (THIS.Xi, THIS.Yi)-(THIS.Xf, THIS.Yf), btnColour, b
 case DGDPBTN._DGDPBTNSHAPE._squared
 line (THIS.Xi - 8, THIS.Yi - 8)- (THIS.Xf + 8, THIS.Yf + 8), btnColour, bf
 case else
 dim as integer rx => THIS.RoundedShapeRadius._bvx
 dim as integer ry => THIS.RoundedShapeRadius._bvy
 dim as integer rr => ( iif((THIS.RoundedShapeRadius._bvx)>(THIS.RoundedShapeRadius._bvy), (THIS.RoundedShapeRadius._bvx), (THIS.RoundedShapeRadius._bvy)) )
 line (THIS.Xi - 1, THIS.Yi - 1)-(THIS.Xf + 1, THIS.Yf + 1), btnColour, bf
 line (THIS.Xi - rx, THIS.Yi)-(THIS.Xi, THIS.Yf), btnColour, bf
 line (THIS.Xi, THIS.Yf + ry)-(THIS.Xf, THIS.Yf), btnColour, bf
 line (THIS.Xf + rx, THIS.Yf)-(THIS.Xf, THIS.Yi), btnColour, bf
 line (THIS.Xf, THIS.Yi - ry)-(THIS.Xi, THIS.Yi), btnColour, bf
 dim as integer inc => rr
 while inc>=0
 inc -= 1
 circle (THIS.Xi, THIS.Yi), inc, btnColour, ( 4*atn(1) )/2, ( 4*atn(1) ), THIS.RoundedShapeRadius._bvy/THIS.RoundedShapeRadius._bvx
 circle (THIS.Xi, THIS.Yf), inc, btnColour, ( 4*atn(1) ), 3* ( 4*atn(1) )/2, THIS.RoundedShapeRadius._bvy/THIS.RoundedShapeRadius._bvx
 circle (THIS.Xf, THIS.Yf), inc, btnColour, 3* ( 4*atn(1) )/2, _2pi, THIS.RoundedShapeRadius._bvy/THIS.RoundedShapeRadius._bvx
 circle (THIS.Xf, THIS.Yi), inc, btnColour, 0, ( 4*atn(1) )/2, THIS.RoundedShapeRadius._bvy/THIS.RoundedShapeRadius._bvx
 wend
 end select
 draw string (THIS.Xi + 4, THIS.Yi + 4), THIS._btnTxt, btnColour xor ((cuint(200) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(140) shl 24))
 if THIS._hasMultiplicityIndicator then
 draw string (THIS.Xi - 18, THIS.Yi - 18), "m", btnColour
 line (THIS.Xi - 18, THIS.Yi - 4)-step(6,0), btnColour
 end if
 end sub
end nameSpace

nameSpace ttBtn
 type DBUTTON
 public:
 enum _BTNBEHAVIOUR
 _useDelay = -1
 _standard = 0
 end enum
 declare constructor()
 declare constructor( byval as integer, byval as integer, byval as string )
 declare constructor( byval as integer, byval as integer, byval as integer, byval as integer, byval as string, byval as _BTNBEHAVIOUR=_BTNBEHAVIOUR._useDelay, byval as double=.5 )
 declare property Behaviour() as _BTNBEHAVIOUR
 declare property Behaviour(byval as _BTNBEHAVIOUR)
 declare property ClickTimeInterval() as double
 declare property ClickTimeInterval(byval as double)
 declare property LastClickTime() as double
 declare sub TestButton()
 declare sub DrawButton()
 as integer _topLeftCornerX
 as integer _topLeftCornerY
 as integer _bottomRightCornerX
 as integer _bottomRightCornerY
 as string _text
 as boolean _mouseOver
 as boolean _mouseClick
 as boolean _mouseLegalIntervalClick
 as boolean _isQuiet
 as ulong _btnBorderColor
 as ulong _btnBorderMouseOverColor
 as ulong _btnBorderMouseClickColor
 as ulong _btnColor
 as ulong _btnMouseOverColor
 as ulong _btnMouseClickColor
 as ulong _btnTxtColor
 private:
 as _BTNBEHAVIOUR _behaviour
 as double _lastClickedTime
 as double _minClickTimeInterval
 end type
 constructor DBUTTON()
 dim as integer scrW, scrH
 if screenPtr()=0 then
 scrW = 200
 scrH = 200
 else
 screenInfo scrW, scrH
 end if
 with THIS
 ._text => "DBUTTON"
 ._topLeftCornerX => (scrW - 8*len(._text))\2
 ._topLeftCornerY => (scrH - 20)\2
 ._bottomRightCornerX=> (scrW - 8*len(._text))\2 + 56
 ._bottomRightCornerY=> (scrH + 10)\2
 ._mouseOver => FALSE
 ._mouseClick => FALSE
 ._lastClickedTime => 0
 ._behaviour => DBUTTON._BTNBEHAVIOUR._standard
 ._minClickTimeInterval => .5
 ._mouseLegalIntervalClick => FALSE
 end with
 with THIS
 ._btnBorderColor => ((cuint(0) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(100) shl 24))
 ._btnBorderMouseOverColor => ((cuint(0) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(100) shl 24))
 ._btnBorderMouseClickColor => ((cuint(0) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(100) shl 24))
 ._btnColor => ((cuint(0) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(100) shl 24))
 ._btnMouseOverColor => ((cuint(0) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(100) shl 24))
 ._btnMouseClickColor => ((cuint(0) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(100) shl 24))
 ._btnTxtColor => ((cuint(100) shl 16) or (cuint(100) shl 8) or cuint(200) or (cuint(200) shl 24))
 end with
 end constructor
 constructor DBUTTON( byval TLCX as integer, byval TLCY as integer, byval Text as string )
 with THIS
 ._text => Text
 ._topLeftCornerX => TLCX
 ._topLeftCornerY => TLCY
 ._bottomRightCornerX=> ._topLeftCornerX + 8*len(._text)
 ._bottomRightCornerY=> ._topLeftCornerY + 15
 ._mouseOver => FALSE
 ._mouseClick => FALSE
 ._lastClickedTime => 0
 ._behaviour => DBUTTON._BTNBEHAVIOUR._standard
 ._minClickTimeInterval => .5
 ._mouseLegalIntervalClick => FALSE
 end with
 with THIS
 ._btnBorderColor => ((cuint(100) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(100) shl 24))
 ._btnBorderMouseOverColor => ((cuint(100) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(100) shl 24))
 ._btnBorderMouseClickColor => ((cuint(100) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(100) shl 24))
 ._btnColor => ((cuint(100) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(100) shl 24))
 ._btnMouseOverColor => ((cuint(100) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(100) shl 24))
 ._btnMouseClickColor => ((cuint(100) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(100) shl 24))
 ._btnTxtColor => ((cuint(100) shl 16) or (cuint(100) shl 8) or cuint(200) or (cuint(200) shl 24))
 end with
 end constructor
 constructor DBUTTON( byval TLCX as integer, byval TLCY as integer, byval BtnWidth as integer, byval BtnHeight as integer, byval Text as string, byval BtnBehaviour as DBUTTON._BTNBEHAVIOUR=-1, byval CTI as double=.5 )
 if BtnHeight<15 then BtnHeight = 15
 with THIS
 ._topLeftCornerX => TLCX
 ._topLeftCornerY => TLCY
 ._bottomRightCornerX=> ._topLeftCornerX + BtnWidth
 ._bottomRightCornerY=> ._topLeftCornerY + BtnHeight
 ._text => left(Text, BtnWidth\8)
 ._mouseOver => FALSE
 ._mouseClick => FALSE
 ._lastClickedTime => 0
 ._behaviour => DBUTTON._BTNBEHAVIOUR._standard
 ._minClickTimeInterval => CTI
 ._mouseLegalIntervalClick => FALSE
 end with
 with THIS
 ._btnBorderColor => ((cuint(100) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(100) shl 24))
 ._btnBorderMouseOverColor => ((cuint(100) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(100) shl 24))
 ._btnBorderMouseClickColor => ((cuint(100) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(100) shl 24))
 ._btnColor => ((cuint(120) shl 16) or (cuint(120) shl 8) or cuint(100) or (cuint(120) shl 24))
 ._btnMouseOverColor => ((cuint(100) shl 16) or (cuint(140) shl 8) or cuint(100) or (cuint(220) shl 24))
 ._btnMouseClickColor => ((cuint(100) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(120) shl 24))
 ._btnTxtColor => ((cuint(100) shl 16) or (cuint(70) shl 8) or cuint(120) or (cuint(200) shl 24))
 end with
 end constructor
 property DBUTTON.Behaviour() as DBUTTON._BTNBEHAVIOUR
 return THIS._behaviour
 end property
 property DBUTTON.Behaviour(byval SetValue as DBUTTON._BTNBEHAVIOUR)
 THIS._behaviour = SetValue
 end property
 property DBUTTON.ClickTimeInterval() as double
 return THIS._minClickTimeInterval
 end property
 property DBUTTON.ClickTimeInterval(byval SetValue as double)
 THIS._minClickTimeInterval = SetValue
 end property
 property DBUTTON.LastClickTime() as double
 return THIS._lastClickedTime
 end property
 sub DBUTTON.TestButton()
 dim as integer gmX, gmY, gmBtn1
 getMouse gmX, gmY, , gmBtn1
 with THIS
 if gmX>._topLeftCornerX and gmY>._topLeftCornerY and gmX<._bottomRightCornerX and gmY<._bottomRightCornerY then
 if ._mouseOver=FALSE then ._mouseOver = TRUE
 if gmBtn1=+1 then
 if ._mouseClick=FALSE then
 if (TIMER - ._lastClickedTime)>._minClickTimeInterval then
 ._mouseClick = TRUE
 THIS._lastClickedTime = TIMER
 if ._mouseLegalIntervalClick=FALSE then ._mouseLegalIntervalClick = TRUE
 else
 if ._mouseLegalIntervalClick=TRUE then ._mouseLegalIntervalClick = FALSE
 end if
 else
 if ._mouseClick=TRUE then ._mouseClick = FALSE
 if ._mouseLegalIntervalClick=TRUE then ._mouseLegalIntervalClick = FALSE
 end if
 end if
 else
 if ._mouseOver=TRUE then ._mouseOver = FALSE
 if ._mouseClick=TRUE then ._mouseClick = FALSE
 if ._mouseLegalIntervalClick=TRUE then ._mouseLegalIntervalClick = FALSE
 end if
 end with
 end sub
 sub DBUTTON.DrawButton()

 dim as ulong btnColor
 with THIS
 .TestButton()
 if ._mouseClick=TRUE then
 if ._behaviour=-1 then
 btnColor = ._btnColor xor ((cuint(255) shl 16) or (cuint(180) shl 8) or cuint(140) or (cuint(100) shl 24))
 else
 btnColor = _btnColor
 end if
 elseif ._mouseOver=TRUE then
 if (TIMER - ._lastClickedTime)<._minClickTimeInterval and ._behaviour=-1 then
 btnColor = ._btnMouseClickColor xor ((cuint(180) shl 16) or (cuint(140) shl 8) or cuint(120) or (cuint(100) shl 24))
 else
 btnColor = _btnMouseClickColor
 end if
 else
 if (TIMER - ._lastClickedTime)<._minClickTimeInterval and ._behaviour=-1 then
 if not ._isQuiet then
 btnColor = ._btnMouseOverColor xor ((cuint(100) shl 16) or (cuint(180) shl 8) or cuint(240) or (cuint(100) shl 24))
 end if
 else
 if not ._isQuiet then
 btnColor = _btnMouseOverColor
 end if
 end if
 end if
 if not ._isQuiet then
 line ( ._topLeftCornerX, ._topLeftCornerY)- (._bottomRightCornerX, ._bottomRightCornerY ), btnColor, bf
 else
 if btnColor=0 then
 line ( ._topLeftCornerX + 3, ._topLeftCornerY + 3)- (._bottomRightCornerX - 1, ._bottomRightCornerY - 1 ), 0, bf
 else
 line ( ._topLeftCornerX, ._topLeftCornerY)- (._bottomRightCornerX, ._bottomRightCornerY), btnColor, bf
 end if
 end if
 draw string ( ._topLeftCornerX + 1 + 12, ._topLeftCornerY - 1 + 6 + 0*(._bottomRightCornerY - _topLeftCornerY)\2 ), left(._text, (._bottomRightCornerX - ._topLeftCornerX)), ._btnTxtColor or btnColor, starter
 line ( ._topLeftCornerX, ._topLeftCornerY)- (._bottomRightCornerX, ._bottomRightCornerY), ._btnBorderColor, b
 end with
 end sub
end nameSpace

nameSpace TT2
 type DBUTTON
 public:
 enum _BTNBEHAVIOUR
 _useDelay = -1
 _standard = 0
 end enum
 declare constructor()
 declare constructor( byval as integer, byval as integer, byval as string )
 declare constructor( byval as integer, byval as integer, byval as integer, byval as integer, byval as string, byval as _BTNBEHAVIOUR=_BTNBEHAVIOUR._useDelay, byval as double=.5 )
 declare property Behaviour() as _BTNBEHAVIOUR
 declare property Behaviour(byval as _BTNBEHAVIOUR)
 declare property ClickTimeInterval() as double
 declare property ClickTimeInterval(byval as double)
 declare property LastClickTime() as double
 declare sub TestButton()
 declare sub DrawButton()
 as integer _topLeftCornerX
 as integer _topLeftCornerY
 as integer _bottomRightCornerX
 as integer _bottomRightCornerY
 as string _text
 as boolean _mouseOver
 as boolean _mouseClick
 as boolean _mouseLegalIntervalClick
 as boolean _isQuiet
 as ulong _btnBorderColor
 as ulong _btnBorderMouseOverColor
 as ulong _btnBorderMouseClickColor
 as ulong _btnColor
 as ulong _btnMouseOverColor
 as ulong _btnMouseClickColor
 as ulong _btnTxtColor
 private:
 as _BTNBEHAVIOUR _behaviour
 as double _lastClickedTime
 as double _minClickTimeInterval
 end type
 constructor DBUTTON()
 dim as integer scrW, scrH
 if screenPtr()=0 then
 scrW = 200
 scrH = 200
 else
 screenInfo scrW, scrH
 end if
 with THIS
 ._text => "DBUTTON"
 ._topLeftCornerX => (scrW - 8*len(._text))\2
 ._topLeftCornerY => (scrH - 20)\2
 ._bottomRightCornerX=> (scrW - 8*len(._text))\2 + 56
 ._bottomRightCornerY=> (scrH + 10)\2
 ._mouseOver => FALSE
 ._mouseClick => FALSE
 ._lastClickedTime => 0
 ._behaviour => DBUTTON._BTNBEHAVIOUR._standard
 ._minClickTimeInterval => .5
 ._mouseLegalIntervalClick => FALSE
 end with
 with THIS
 ._btnBorderColor => ((cuint(0) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(100) shl 24))
 ._btnBorderMouseOverColor => ((cuint(0) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(100) shl 24))
 ._btnBorderMouseClickColor => ((cuint(0) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(100) shl 24))
 ._btnColor => ((cuint(0) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(100) shl 24))
 ._btnMouseOverColor => ((cuint(0) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(100) shl 24))
 ._btnMouseClickColor => ((cuint(0) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(100) shl 24))
 ._btnTxtColor => ((cuint(100) shl 16) or (cuint(100) shl 8) or cuint(200) or (cuint(200) shl 24))
 end with
 end constructor
 constructor DBUTTON( byval TLCX as integer, byval TLCY as integer, byval Text as string )
 with THIS
 ._text => Text
 ._topLeftCornerX => TLCX
 ._topLeftCornerY => TLCY
 ._bottomRightCornerX=> ._topLeftCornerX + 8*len(._text)
 ._bottomRightCornerY=> ._topLeftCornerY + 15
 ._mouseOver => FALSE
 ._mouseClick => FALSE
 ._lastClickedTime => 0
 ._behaviour => DBUTTON._BTNBEHAVIOUR._standard
 ._minClickTimeInterval => .5
 ._mouseLegalIntervalClick => FALSE
 end with
 with THIS
 ._btnBorderColor => ((cuint(100) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(100) shl 24))
 ._btnBorderMouseOverColor => ((cuint(100) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(100) shl 24))
 ._btnBorderMouseClickColor => ((cuint(100) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(100) shl 24))
 ._btnColor => ((cuint(100) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(100) shl 24))
 ._btnMouseOverColor => ((cuint(100) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(100) shl 24))
 ._btnMouseClickColor => ((cuint(100) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(100) shl 24))
 ._btnTxtColor => ((cuint(100) shl 16) or (cuint(100) shl 8) or cuint(200) or (cuint(200) shl 24))
 end with
 end constructor
 constructor DBUTTON( byval TLCX as integer, byval TLCY as integer, byval BtnWidth as integer, byval BtnHeight as integer, byval Text as string, byval BtnBehaviour as DBUTTON._BTNBEHAVIOUR=-1, byval CTI as double=.5 )
 if BtnHeight<15 then BtnHeight = 15
 with THIS
 ._topLeftCornerX => TLCX
 ._topLeftCornerY => TLCY
 ._bottomRightCornerX=> ._topLeftCornerX + BtnWidth
 ._bottomRightCornerY=> ._topLeftCornerY + BtnHeight
 ._text => left(Text, BtnWidth\8)
 ._mouseOver => FALSE
 ._mouseClick => FALSE
 ._lastClickedTime => 0
 ._behaviour => DBUTTON._BTNBEHAVIOUR._standard
 ._minClickTimeInterval => CTI
 ._mouseLegalIntervalClick => FALSE
 end with
 with THIS
 ._btnBorderColor => ((cuint(100) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(100) shl 24))
 ._btnBorderMouseOverColor => ((cuint(100) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(100) shl 24))
 ._btnBorderMouseClickColor => ((cuint(100) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(100) shl 24))
 ._btnColor => ((cuint(120) shl 16) or (cuint(120) shl 8) or cuint(100) or (cuint(120) shl 24))
 ._btnMouseOverColor => ((cuint(100) shl 16) or (cuint(140) shl 8) or cuint(100) or (cuint(220) shl 24))
 ._btnMouseClickColor => ((cuint(100) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(120) shl 24))
 ._btnTxtColor => ((cuint(100) shl 16) or (cuint(70) shl 8) or cuint(120) or (cuint(200) shl 24))
 end with
 end constructor
 property DBUTTON.Behaviour() as DBUTTON._BTNBEHAVIOUR
 return THIS._behaviour
 end property
 property DBUTTON.Behaviour(byval SetValue as DBUTTON._BTNBEHAVIOUR)
 THIS._behaviour = SetValue
 end property
 property DBUTTON.ClickTimeInterval() as double
 return THIS._minClickTimeInterval
 end property
 property DBUTTON.ClickTimeInterval(byval SetValue as double)
 THIS._minClickTimeInterval = SetValue
 end property
 property DBUTTON.LastClickTime() as double
 return THIS._lastClickedTime
 end property
 sub DBUTTON.TestButton()
 dim as integer gmX, gmY, gmBtn1
 getMouse gmX, gmY, , gmBtn1
 with THIS
 if gmX>._topLeftCornerX and gmY>._topLeftCornerY and gmX<._bottomRightCornerX and gmY<._bottomRightCornerY then
 if ._mouseOver=FALSE then ._mouseOver = TRUE
 if gmBtn1=+1 then
 if ._mouseClick=FALSE then
 if (TIMER - ._lastClickedTime)>._minClickTimeInterval then
 ._mouseClick = TRUE
 THIS._lastClickedTime = TIMER
 if ._mouseLegalIntervalClick=FALSE then ._mouseLegalIntervalClick = TRUE
 else
 if ._mouseLegalIntervalClick=TRUE then ._mouseLegalIntervalClick = FALSE
 end if
 else
 if ._mouseClick=TRUE then ._mouseClick = FALSE
 if ._mouseLegalIntervalClick=TRUE then ._mouseLegalIntervalClick = FALSE
 end if
 end if
 else
 if ._mouseOver=TRUE then ._mouseOver = FALSE
 if ._mouseClick=TRUE then ._mouseClick = FALSE
 if ._mouseLegalIntervalClick=TRUE then ._mouseLegalIntervalClick = FALSE
 end if
 end with
 end sub
 sub DBUTTON.DrawButton()

 dim as ulong btnColor
 with THIS
 .TestButton()
 if ._mouseClick=TRUE then
 if ._behaviour=-1 then
 btnColor = ._btnColor xor ((cuint(255) shl 16) or (cuint(180) shl 8) or cuint(140) or (cuint(100) shl 24))
 else
 btnColor = _btnColor
 end if
 elseif ._mouseOver=TRUE then
 if (TIMER - ._lastClickedTime)<._minClickTimeInterval and ._behaviour=-1 then
 btnColor = ._btnMouseClickColor xor ((cuint(180) shl 16) or (cuint(140) shl 8) or cuint(120) or (cuint(100) shl 24))
 else
 btnColor = _btnMouseClickColor
 end if
 else
 if (TIMER - ._lastClickedTime)<._minClickTimeInterval and ._behaviour=-1 then
 if not ._isQuiet then
 btnColor = ._btnMouseOverColor xor ((cuint(100) shl 16) or (cuint(180) shl 8) or cuint(240) or (cuint(100) shl 24))
 end if
 else
 if not ._isQuiet then
 btnColor = _btnMouseOverColor
 end if
 end if
 end if
 if not ._isQuiet then
 line ( ._topLeftCornerX, ._topLeftCornerY)- (._bottomRightCornerX, ._bottomRightCornerY ), btnColor, bf
 else
 if btnColor=0 then
 line ( ._topLeftCornerX + 3, ._topLeftCornerY + 3)- (._bottomRightCornerX - 1, ._bottomRightCornerY - 1 ), 0, bf
 else
 line ( ._topLeftCornerX, ._topLeftCornerY)- (._bottomRightCornerX, ._bottomRightCornerY), btnColor, bf
 end if
 end if
 draw string ( ._topLeftCornerX + 1, ._topLeftCornerY - 1 + (._bottomRightCornerY - _topLeftCornerY)\2 ), left(._text, (._bottomRightCornerX - ._topLeftCornerX)), ._btnTxtColor or btnColor
 line ( ._topLeftCornerX, ._topLeftCornerY)- (._bottomRightCornerX, ._bottomRightCornerY), ._btnBorderColor, b
 end with
 end sub

 dim shared as ulong _maxDots => 178
 const as double _2pi => 2* ( 4*atn(1) )
 const as double _rToD => 180/ ( 4*atn(1) )
 const as double _dToR => ( 4*atn(1) )/180


 type SORTABLEP3D
 as double _x
 as double _y
 as double _z
 as ulong _c
 as integer _id
 end type : sub Qsort_z(array() As SORTABLEP3D, Begin as long, Finish as long)
 dim as long i => Begin, j => Finish
 dim as SORTABLEP3D x => array(((i + j)\2))
 while (i<=j)
 while array(i)._z > x ._z : i +=1 : wend
 while array(j)._z < x ._z : j -=1 : wend
 if i<=j then swap array(i), array(j): i +=1 : j -=1
 wend
 if j>Begin then Qsort_z(array(), Begin, j)
 if i<Finish then Qsort_z(array(), i, Finish)
 end sub

 type GENETICUNIT extends DBUTTON
 declare constructor()
 as SORTABLEP3D ptr _sp3DPtr
 as integer _id
 end type
 constructor GENETICUNIT()
 BASE()
 end constructor

 type ANGULAR
 const as double _degreeToRadianCoefficient => _dToR
 enum _ANGLEUNIT
 _rad => 0
 _deg => 1
 end enum
 declare constructor()
 declare constructor(byval as double)
 declare constructor(byval AngleInAngleUnit as double=0, byval MinValueInAngleUnit as double, byval MaxValueInAngleUnit as double, byval AngleUnit as _ANGLEUNIT=1)
 declare operator Let(byval as double)
 declare operator Cast() as double
 declare property MinDegreeValue() as double
 declare property MinDegreeValue(byval as double)
 declare property MaxDegreeValue() as double
 declare property MaxDegreeValue(byval as double)
 declare property CurrentDegreeValue() as double
 declare function IncrementValueByDegreeUnit(byval as double=+1) as double
 as double _angRad
 private:
 as double _minDegValue
 as double _maxDegValue
 end type
 constructor ANGULAR()
 THIS._angRad => 0
 THIS._minDegValue => 0
 THIS._minDegValue => 359
 end constructor
 constructor ANGULAR(byval AngleInRad as double)
 THIS._angRad => AngleInRad
 end constructor
 constructor ANGULAR(byval AngleInAngleUnit as double=0, byval MinValueInAngleUnit as double, byval MaxValueInAngleUnit as double, byval AngleUnit as _ANGLEUNIT=1)
 select case AngleUnit
 case ANGULAR._ANGLEUNIT._rad
 THIS._angRad => AngleInAngleUnit
 THIS._minDegValue => MinValueInAngleUnit*1/ANGULAR._degreeToRadianCoefficient
 THIS._maxDegValue => MinValueInAngleUnit*1/ANGULAR._degreeToRadianCoefficient
 case else
 THIS._angRad => AngleInAngleUnit*ANGULAR._degreeToRadianCoefficient
 THIS._minDegValue => MinValueInAngleUnit
 THIS._maxDegValue => MaxValueInAngleUnit
 end select
 end constructor
 operator ANGULAR.Let(byval LetValue as double)
 THIS._angRad => LetValue
 end operator
 operator ANGULAR.Cast() as double
 return THIS._angRad
 end operator
 property ANGULAR.MinDegreeValue() as double
 if THIS._minDegValue>THIS._maxDegValue then
 swap THIS._minDegValue, THIS._maxDegValue
 end if
 return THIS._minDegValue
 end property
 property ANGULAR.MinDegreeValue(byval SetValue as double)
 THIS._minDegValue = SetValue
 end property
 property ANGULAR.MaxDegreeValue() as double
 if THIS._minDegValue>THIS._maxDegValue then
 swap THIS._minDegValue, THIS._maxDegValue
 end if
 return THIS._maxDegValue
 end property
 property ANGULAR.MaxDegreeValue(byval SetValue as double)
 THIS._maxDegValue = SetValue
 end property
 property ANGULAR.CurrentDegreeValue() as double
 return THIS._angRad*ANGULAR._degreeToRadianCoefficient
 end property
 function ANGULAR.IncrementValueByDegreeUnit(byval IncValue as double=+1) as double
 THIS._angRad += IncValue*1/ANGULAR._degreeToRadianCoefficient
 return THIS._angRad
 end function

 type ROTATABLESPHERESET
 declare constructor()
 declare constructor(byval MaxDot as integer, byval Radius as integer, byval Angle1 as integer, byval Angle2 as integer)
 declare property X2D() as integer
 declare property Y2D() as integer
 declare sub SimpleRotationByAngleInDegree(byval as ANGULAR=90)
 as uByte _maxDot
 as SORTABLEP3D _sp3dSphereCenter
 as double _mainSphereRadius
 as double _individualItemRadius
 as SORTABLEP3D _absolute3DItemPosition(any)
 as SORTABLEP3D _relative3DItemPosition(any)
 as GENETICUNIT _gItemUnit(any)
 as ANGULAR _angle
 as ANGULAR _angle1
 as ANGULAR _angle2
 as double _projection2DX
 as double _projection2DY
 as double _x
 as double _y
 as double _z
 as double _rx
 as double _ry
 as double _rz
 as double _cosAngle
 as double _sinAngle
 as double _aRot
 end type
 type RSS as ROTATABLESPHERESET

 sub ShowActiveAdnNodeBox( byval ActiveIndex as integer, GI() as GENETICUNIT, byval SW as integer, byval SH as integer )
 static as integer _activeIndex => -1
 static as integer _processGraphicsStep => -1
 if _activeIndex<>ActiveIndex then

 _activeIndex = ActiveIndex
 _processGraphicsStep = 0
 end if
 if _processGraphicsStep=-1 then exit sub
 dim as integer x = GI(_activeIndex)._topLeftCornerX
 dim as integer y = GI(_activeIndex)._topLeftCornerY
 select case _processGraphicsStep
 case is<100
 line(x + 2,y + 2)-step(16,16), ((cuint(55) shl 16) or (cuint(105) shl 8) or cuint(55 + _processGraphicsStep) or &hFF000000), b
 line(x,y)-step(20 - 80\(_processGraphicsStep + 2),20 - 80\(_processGraphicsStep + 2)), ((cuint(55) shl 16) or (cuint(205) shl 8) or cuint(155 + _processGraphicsStep) or &hFF000000), b
 circle (x + 10, y + 10), 20, ((cuint(55) shl 16) or (cuint(100 + _processGraphicsStep) shl 8) or cuint(180) or &hFF000000), _processGraphicsStep, _processGraphicsStep + 1
 draw string (x + 2, y + 8), str(ActiveIndex), ((cuint(55) shl 16) or (cuint(100) shl 8) or cuint(120 + _processGraphicsStep) or &hFF000000), starter
 case is>=100 , is<150
 circle (x + 10, y + 10), 1980\_processGraphicsStep, ((cuint(55) shl 16) or (cuint(200) shl 8) or cuint(80 + _processGraphicsStep) or &hFF000000), _processGraphicsStep, _processGraphicsStep + 2
 draw string (x + 3, y + 8), str(ActiveIndex), ((cuint(55) shl 16) or (cuint(_processGraphicsStep) shl 8) or cuint(180) or &hFF000000), starter3
 end select
 if _processGraphicsStep>-1 then _processGraphicsStep += 1
 if _processGraphicsStep>150 then _processGraphicsStep = -1
 end sub
end nameSpace

nameSpace TT3
 type DBUTTON
 enum _BTNBEHAVIOUR
 _useDelay = -1
 _standard = 0
 end enum
 declare constructor()
 declare constructor(byval as integer, byval as integer, byval as string)
 declare constructor(byval as integer, byval as integer, byval as integer, byval as integer, byval as string, byval as _BTNBEHAVIOUR=_BTNBEHAVIOUR._useDelay, byval as double=.5)
 declare property Behaviour() as _BTNBEHAVIOUR
 declare property Behaviour(byval as _BTNBEHAVIOUR)
 declare property ClickTimeInterval() as double
 declare property ClickTimeInterval(byval as double)
 declare property LastClickTime() as double
 declare sub DrawButton()
 as string _text
 as boolean _mouseOver
 as boolean _mouseClick
 as boolean _mouseLegalIntervalClick
 declare sub TestButton()
 as integer _topLeftCornerX
 as integer _topLeftCornerY
 as integer _bottomRightCornerX
 as integer _bottomRightCornerY
 as _BTNBEHAVIOUR _behaviour
 as double _lastClickedTime
 as double _minClickTimeInterval
 end type
 constructor DBUTTON()
 dim as integer scrW, scrH
 if screenPtr()=0 then
 scrW = 200
 scrH = 200
 else
 screenInfo scrW, scrH
 end if
 with THIS
 ._text => "DBUTTON"
 ._topLeftCornerX => (scrW - 8*len(._text))\2
 ._topLeftCornerY => (scrH - 20)\2
 ._bottomRightCornerX=> (scrW - 8*len(._text))\2 + 56
 ._bottomRightCornerY=> (scrH + 10)\2
 ._mouseOver => FALSE
 ._mouseClick => FALSE
 ._lastClickedTime => 0
 ._behaviour => DBUTTON._BTNBEHAVIOUR._standard
 ._minClickTimeInterval => .5
 ._mouseLegalIntervalClick => FALSE
 end with
 end constructor
 constructor DBUTTON(byval TLCX as integer, byval TLCY as integer, byval Text as string)
 with THIS
 ._text => Text
 ._topLeftCornerX => TLCX
 ._topLeftCornerY => TLCY
 ._bottomRightCornerX=> ._topLeftCornerX + 8*len(._text)
 ._bottomRightCornerY=> ._topLeftCornerY + 15
 ._mouseOver => FALSE
 ._mouseClick => FALSE
 ._lastClickedTime => 0
 ._behaviour => DBUTTON._BTNBEHAVIOUR._standard
 ._minClickTimeInterval => .5
 ._mouseLegalIntervalClick => FALSE
 end with
 end constructor
 constructor DBUTTON(byval TLCX as integer, byval TLCY as integer, byval BtnWidth as integer, byval BtnHeight as integer, byval Text as string, byval BtnBehaviour as DBUTTON._BTNBEHAVIOUR=-1, byval CTI as double=.5)
 if BtnHeight<15 then BtnHeight = 15
 with THIS
 ._topLeftCornerX => TLCX
 ._topLeftCornerY => TLCY
 ._bottomRightCornerX=> ._topLeftCornerX + BtnWidth
 ._bottomRightCornerY=> ._topLeftCornerY + BtnHeight
 ._text => left(Text, BtnWidth\8)
 ._mouseOver => FALSE
 ._mouseClick => FALSE
 ._lastClickedTime => 0
 ._behaviour => DBUTTON._BTNBEHAVIOUR._standard
 ._minClickTimeInterval => CTI
 ._mouseLegalIntervalClick => FALSE
 end with
 end constructor
 property DBUTTON.Behaviour() as DBUTTON._BTNBEHAVIOUR
 return THIS._behaviour
 end property
 property DBUTTON.Behaviour(byval SetValue as DBUTTON._BTNBEHAVIOUR)
 THIS._behaviour = SetValue
 end property
 property DBUTTON.ClickTimeInterval() as double
 return THIS._minClickTimeInterval
 end property
 property DBUTTON.ClickTimeInterval(byval SetValue as double)
 THIS._minClickTimeInterval = SetValue
 end property
 property DBUTTON.LastClickTime() as double
 return THIS._lastClickedTime
 end property
 sub DBUTTON.TestButton()
 dim as integer gmX, gmY, gmBtn1
 getMouse gmX, gmY, , gmBtn1
 with THIS
 if gmX>._topLeftCornerX and gmY>._topLeftCornerY and gmX<._bottomRightCornerX and gmY<._bottomRightCornerY then
 if ._mouseOver=FALSE then ._mouseOver = TRUE
 if gmBtn1=+1 then
 if ._mouseClick=FALSE then ._mouseClick = TRUE
 if (TIMER - ._lastClickedTime)>._minClickTimeInterval then
 THIS._lastClickedTime = TIMER
 if ._mouseLegalIntervalClick=FALSE then ._mouseLegalIntervalClick = TRUE
 else
 if ._mouseLegalIntervalClick=TRUE then ._mouseLegalIntervalClick = FALSE
 end if
 else
 if ._mouseClick=TRUE then ._mouseClick = FALSE
 if ._mouseLegalIntervalClick=TRUE then ._mouseLegalIntervalClick = FALSE
 end if
 else
 if ._mouseOver=TRUE then ._mouseOver = FALSE
 if ._mouseClick=TRUE then ._mouseClick = FALSE
 if ._mouseLegalIntervalClick=TRUE then ._mouseLegalIntervalClick = FALSE
 end if
 end with
 end sub
 sub DBUTTON.DrawButton()
 dim as integer scrW, scrH, depth
 if screenPtr()=0 then
 scrW = 200
 scrH = 200
 depth = 32
 screenRes scrW, scrH, depth
 windowTitle "opened by DBUTTON"
 else
 screenInfo , , depth
 end if
 dim as ulong btnColor
 with THIS
 .TestButton()
 if ._mouseClick=TRUE then
 select case depth
 case 32
 if ._behaviour=-1 then
 btnColor = ((cuint(100) shl 16) or (cuint(180) shl 8) or cuint(240) or &hFF000000)
 else
 btnColor = ((cuint(100) shl 16) or (cuint(240) shl 8) or cuint(100) or &hFF000000)
 end if
 case else
 if ._behaviour=-1 then
 btnColor = 10
 else
 btnColor = 11
 end if
 end select
 elseif ._mouseOver=TRUE then
 select case depth
 case 32
 if (TIMER - ._lastClickedTime)<._minClickTimeInterval and ._behaviour=-1 then
 btnColor = ((cuint(100) shl 16) or (cuint(180) shl 8) or cuint(240) or &hFF000000)
 else
 btnColor = ((cuint(200) shl 16) or (cuint(100) shl 8) or cuint(200) or &hFF000000)
 end if
 case else
 if (TIMER - ._lastClickedTime)<._minClickTimeInterval and ._behaviour=-1 then
 btnColor = 10
 else
 btnColor = 13
 end if
 end select
 else
 select case depth
 case 32
 if (TIMER - ._lastClickedTime)<._minClickTimeInterval and ._behaviour=-1 then
 btnColor = ((cuint(100) shl 16) or (cuint(180) shl 8) or cuint(240) or &hFF000000)
 else
 btnColor = ((cuint(180) shl 16) or (cuint(180) shl 8) or cuint(220) or &hFF000000)
 end if
 case else
 if (TIMER - ._lastClickedTime)<._minClickTimeInterval and ._behaviour=-1 then
 btnColor = 10
 else
 btnColor = 7
 end if
 end select
 end if
 line (._topLeftCornerX, ._topLeftCornerY)- (._bottomRightCornerX, ._bottomRightCornerY), btnColor, bf
 draw string (._topLeftCornerX + 1, ._topLeftCornerY - 1 + (._bottomRightCornerY - _topLeftCornerY)\2), ._text, ((cuint(100) shl 16) or (cuint(50) shl 8) or cuint(20) or (cuint(200) shl 24))
 end with
 end sub
end nameSpace

nameSpace USERACTUATOR
 dim shared as fb.IMAGE ptr up_arrow, down_arrow, left_arrow, right_arrow, mouse_bip, mouse_free
 function InitImage() as boolean
 up_arrow => CreditFBDoc.BMPlOAD(exePath() & "\pic\up_arrow.bmp")
 down_arrow => CreditFBDoc.BMPlOAD(exePath() & "\pic\down_arrow.bmp")
 left_arrow => CreditFBDoc.BMPlOAD(exePath() & "\pic\left_arrow.bmp")
 right_arrow => CreditFBDoc.BMPlOAD(exePath() & "\pic\right_arrow.bmp")
 mouse_bip => CreditFBDoc.BMPlOAD(exePath() & "\pic\mouse_bip.bmp")
 mouse_free => CreditFBDoc.BMPlOAD(exePath() & "\pic\mouse_free.bmp")
 return TRUE
 end function
 function ShowActuator(byval Img as fb.IMAGE ptr, byval OffsetX as integer) as any ptr
 if Img=0 then
 return Img
 end if
 dim as integer imgW, imgH
 imageInfo Img
 put (2 + OffsetX, 3), Img, PSET
 return Img
 end function
end nameSpace

type SCENE
 enum _STATE
 _gameStart = 0
 _summary = 1
 _laboratory = 2
 _travelRoom = 3
 _groundScenery = 4
 _endOfGame = 5
 _gameExit = 6
 end enum
 as integer dummy
 static as _STATE state
end type
dim as SCENE._STATE SCENE.state => SCENE._STATE._gameStart

type BUG
 declare constructor()
 declare sub InitBug()
 declare function TestForNodeContent(byval N as integer) as string
 declare sub DrawBugAt(byval X as single, byval Y as single)
 as string _bugName
 as integer _bugImgW
 as integer _bugImgH
 as fb.IMAGE ptr _bugImage
 as TT3.DBUTTON _bugButton
 as string _arrayOfKeywords(any)
end type
constructor BUG
 with THIS
 ._bugName => "TESTBUG"
 ._bugImgW => 100
 ._bugImgH => 70
 ._bugImage => imageCreate (._bugImgW, ._bugImgH, ((cuint(12) shl 16) or (cuint(12) shl 8) or cuint(12) or (cuint(180) shl 24)), 32)
 end with
 THIS.InitBug()
 scope
 dim as integer topLeftCornerPositionX2 => 100
 dim as integer topLeftCornerPositionY2 => 100
 dim as integer btn2Width => THIS._bugImgW
 dim as integer btn2Height => THIS._bugImgH
 dim as string buttonText2 => THIS._bugName
 dim as TT3.DBUTTON._BTNBEHAVIOUR btn2Behav => TT3.DBUTTON._BTNBEHAVIOUR._standard
 dim as double btn2Delay => 2.0
 THIS._bugButton => TT3.DBUTTON( topLeftCornerPositionX2, topLeftCornerPositionY2, btn2Width, btn2Height, buttonText2, btn2Behav, btn2Delay )
 end scope
end constructor
sub BUG.InitBug()
 for i as integer = 1 to 4 + rnd()*4
 dim as integer x => rnd()*(THIS._bugImgW\2 - 20)
 dim as integer y => rnd()*(THIS._bugImgH - 20)
 dim as integer c => 108*rnd()
 line THIS._bugImage, (x, y)-step(16, 16), ((cuint(180) shl 16) or (cuint(c) shl 8) or cuint(78) or (cuint(177) shl 24)), bf
 line THIS._bugImage, (THIS._bugImgW - x - 20, y)-step(16, 16), ((cuint(180) shl 16) or (cuint(c) shl 8) or cuint(78) or (cuint(177) shl 24)), bf
 next i
 draw string THIS._bugImage, (8, 8), THIS._bugName, ((cuint(100) shl 16) or (cuint(100) shl 8) or cuint(30) or (cuint(80) shl 24))
 dim as integer keywordAmount = rnd()*28 + 1
 redim THIS._arrayOfKeywords(49)
 dim as integer depletionCounter => keywordAmount
 for index as integer = 0 to 49
 if THIS._arrayOfKeywords(index) = "" then
 if (rnd()*keywordAmount)<(.28*keywordAmount) then
 THIS._arrayOfKeywords(index) = "SCREENUNLOCK"
 depletionCounter -= 1
 elseIf (rnd()*keywordAmount)<(.42*keywordAmount) then
 THIS._arrayOfKeywords(index) = "SCREENLOCK"
 depletionCounter -= 1
 elseIf (rnd()*keywordAmount)<(.55*keywordAmount) then
 THIS._arrayOfKeywords(index) = "PRINT"
 depletionCounter -= 1
 elseIf (rnd()*keywordAmount)<(.65*keywordAmount) then
 THIS._arrayOfKeywords(index) = "END"
 depletionCounter -= 1
 else
 THIS._arrayOfKeywords(index) = ""
 end if
 end if

 if depletionCounter=0 then exit for
 next index
end sub
function BUG.TestForNodeContent(byval N as integer) as string
 dim as string kw => "NULL"
 if N<=uBound(THIS._arrayOfKeywords) then
 return iif(THIS._arrayOfKeywords(N)<>"", THIS._arrayOfKeywords(N), "NULL")
 else
 return "OUTOFBOUNDS"
 end if
 return kw
end function
sub BUG.DrawBugAt(byval X as single, byval Y as single)
 if THIS._bugButton._behaviour=TT3.DBUTTON._BTNBEHAVIOUR._standard then
 scope
 dim as integer topLeftCornerPositionX2 => X
 dim as integer topLeftCornerPositionY2 => Y
 dim as integer btn2Width => THIS._bugImgW
 dim as integer btn2Height => THIS._bugImgH
 dim as string buttonText2 => THIS._bugName
 dim as TT3.DBUTTON._BTNBEHAVIOUR btn2Behav => TT3.DBUTTON._BTNBEHAVIOUR._useDelay
 dim as double btn2Delay => 2.0
 THIS._bugButton => TT3.DBUTTON( topLeftCornerPositionX2, topLeftCornerPositionY2, btn2Width, btn2Height, buttonText2, btn2Behav, btn2Delay )
 end scope
 end if
 THIS._bugButton.DrawButton()
 put (X, Y), THIS._bugImage, TRANS
end sub



dim as single adnMakeUpParam
dim as single adnMakesUpStartTime => -1
dim as boolean adnMakesUp => FALSE
dim as boolean adnShowUp => FALSE

dim as boolean searchStarted => FALSE
dim as single speed => 1
dim as long tileW => 138
dim as long tileH => 138
dim as long actorW => 64
dim as long actorH => 70
dim as boolean showCoordinate => FALSE
dim as double startDelay => TIMER
dim as single xx
dim as single yy
dim as single dx
dim as single dy
dim as single xi
dim as single yi
dim as single x0
dim as single y0
dim as single nTilesX
dim as single nTilesY
dim as single tileTrueWidth
dim as single tileTrueHeight
tileTrueWidth => tileW
tileTrueHeight => tileH
var geneZoneXmin => 100
var geneZoneXmax => 200
var geneZoneYmin => 100
var geneZoneYmax => 200
dim as string pickedKeyword => "NULL"
dim as TT3.DBUTTON showPickupButtonPick
dim as TT3.DBUTTON showPickupButtonCancel
dim as boolean isShowPickupDialogUp => FALSE
dim as TT3.DBUTTON finalDialogButton
scope
 dim as integer dskW, dskH
 screenControl fb.GET_DESKTOP_SIZE, dskW, dskH
 dim as integer topLeftCornerPositionX2 => (dskW + 350)/2
 dim as integer topLeftCornerPositionY2 => 332
 dim as integer btn2Width => 135
 dim as integer btn2Height => 20
 dim as string buttonText2 => ""
 dim as TT3.DBUTTON._BTNBEHAVIOUR btn2Behav => TT3.DBUTTON._BTNBEHAVIOUR._standard
 dim as double btn2Delay => 2.0
 finalDialogButton => TT3.DBUTTON( topLeftCornerPositionX2, topLeftCornerPositionY2, btn2Width, btn2Height, buttonText2, btn2Behav, btn2Delay )
 finalDialogButton._text = "GO TO HANGAR"
end scope
dim as boolean screenUnlockPickedUp => FALSE
dim as boolean isBugSampleLoaded => FALSE
var timeAtBugSampleButtonClicked => TIMER



dim as TT3.DBUTTON doorSceneDialogButton
scope
 dim as integer dskW, dskH
 screenControl fb.GET_DESKTOP_SIZE, dskW, dskH
 dim as integer topLeftCornerPositionX2 => (dskW + 350)/2
 dim as integer topLeftCornerPositionY2 => 332
 dim as integer btn2Width => 135
 dim as integer btn2Height => 20
 dim as string buttonText2 => ""
 dim as TT3.DBUTTON._BTNBEHAVIOUR btn2Behav => TT3.DBUTTON._BTNBEHAVIOUR._standard
 dim as double btn2Delay => 2.0
 doorSceneDialogButton => TT3.DBUTTON( topLeftCornerPositionX2, topLeftCornerPositionY2, btn2Width, btn2Height, buttonText2, btn2Behav, btn2Delay )
 doorSceneDialogButton._text = "GO TO LABORATORY"
end scope
dim as boolean isShowDoorSceneDialogUp => FALSE
dim as boolean facingFrontDoorScene => FALSE
dim as integer facingFrontDoorSceneCounter => 0
dim as integer facingFrontDoorSceneInitTime => TIMER

randomize TIMER
 width 140, 64
 dim as integer dskW, dskH
 screenControl fb.GET_DESKTOP_SIZE, dskW, dskH
 screenRes dskW, dskH, 32, 2, fb.GFX_NO_FRAME + fb.GFX_SHAPED_WINDOW + fb.GFX_ALPHA_PRIMITIVES
 dodifont._Createfont starter , 1.5 , ((cuint(100) shl 16) or (cuint(210) shl 8) or cuint(180) or &hFF000000) , 20
 dodifont._Createfont starter2 , 4 , ((cuint(230) shl 16) or (cuint(180) shl 8) or cuint(110) or &hFF000000) , 10
 dodifont._Createfont starter3 , 1.9 , ((cuint(190) shl 16) or (cuint(100) shl 8) or cuint(180) or &hFF000000) , 2
 dodifont._Createfont starter4 , 5 , ((cuint(100) shl 16) or (cuint(220) shl 8) or cuint(80) or &hFF000000) , 14
 width dskW\8, dskH\16
 USERACTUATOR.InitImage()
 titlepic => CreditFBDoc.BMPlOAD(exePath() & "\pic\title.bmp")
 biohazardpic => CreditFBDoc.BMPlOAD(exePath() & "\pic\biohazard.bmp")
 hangarPic => CreditFBDoc.BMPlOAD(exePath() & "\pic\hangar.bmp")
 quitPic => CreditFBDoc.BMPlOAD(exePath() & "\pic\quitStrange.bmp")
 bioPic => CreditFBDoc.BMPlOAD(exePath() & "\pic\biologist.bmp")
 biolitpic => CreditFBDoc.BMPlOAD(exePath() & "\pic\biologist_lit.bmp")
 biodarkpic => CreditFBDoc.BMPlOAD(exePath() & "\pic\biologist_lit_dark.bmp")
 pilotpic => CreditFBDoc.BMPlOAD(exePath() & "\pic\pilot.bmp")
 labcrewpic => CreditFBDoc.BMPlOAD(exePath() & "\pic\labcrew_lit.bmp")
 lockedpanpic => CreditFBDoc.BMPlOAD(exePath() & "\pic\locked_panel.bmp")
 modulepic => CreditFBDoc.BMPlOAD(exePath() & "\pic\module.bmp")
 lockeddoorpic => CreditFBDoc.BMPlOAD(exePath() & "\pic\lockeddoor.bmp")
 fxm => CreditFBDoc.BMPlOAD(exePath() & "\pic\fxm.bmp")
 pickerpic => CreditFBDoc.BMPlOAD(exePath() & "\pic\picker.bmp")
 pickerbackpic => CreditFBDoc.BMPlOAD(exePath() & "\pic\pickerback.bmp")
 labsceneImg => imageCreate (400, 320, ((cuint(5) shl 16) or (cuint(0) shl 8) or cuint(55) or (cuint(55) shl 24)), 32)
 dim as BUG bugTest
 dim as ttDrgDrpBtn.DRAGDROPBUTTON ptr draggableButtonPtrArray(any)

 dim as ttDrgDrpBtn.DRAGDROPBUTTON ddb1
 ddb1._btnShape =ttDrgDrpBtn.DGDPBTN._DGDPBTNSHAPE._naked
 redim preserve draggableButtonPtrArray(uBound(draggableButtonPtrArray) + 1)
 draggableButtonPtrArray(uBound(draggableButtonPtrArray)) =@ddb1

 dim as ttDrgDrpBtn.DRAGDROPBUTTON ddb1b
 ddb1._btnShape =ttDrgDrpBtn.DGDPBTN._DGDPBTNSHAPE._naked
 redim preserve draggableButtonPtrArray(uBound(draggableButtonPtrArray) + 1)
 draggableButtonPtrArray(uBound(draggableButtonPtrArray)) =@ddb1b

 dim as ttDrgDrpBtn.DRAGDROPBUTTON ddb2
 ddb2._topLeftCorner._y =800
 ddb2._btnShape =ttDrgDrpBtn.DGDPBTN._DGDPBTNSHAPE._squared
 redim preserve draggableButtonPtrArray(uBound(draggableButtonPtrArray) + 1)
 draggableButtonPtrArray(uBound(draggableButtonPtrArray)) =@ddb2

 dim as ttDrgDrpBtn.DRAGDROPBUTTON ddb3

 ddb3._btnTxt ="for"
 ddb3._widHei._wid =8*len(ddb3._btnTxt) + 4
 ddb3._topLeftCorner._y =100
 ddb3._btnShape =ttDrgDrpBtn.DGDPBTN._DGDPBTNSHAPE._rounded
 redim preserve draggableButtonPtrArray(uBound(draggableButtonPtrArray) + 1)
 draggableButtonPtrArray(uBound(draggableButtonPtrArray)) =@ddb3

 dim as ttDrgDrpBtn.DROPZONE dz
 dz._dzShape =ttDrgDrpBtn.DZ._DROPZONESHAPE._maximumEllipse

 dim as ttDrgDrpBtn.DROPZONE dz2
 dz2._dzShape =ttDrgDrpBtn.DZ._DROPZONESHAPE._maximumEllipse
 dz2._topLeftCorner._x =1000

 ddb1.AddDropZoneToArrayOfPtr(@dz)
 ddb2.AddDropZoneToArrayOfPtr(@dz)
 ddb2.AddDropZoneToArrayOfPtr(@dz2)
 ddb3.AddDropZoneToArrayOfPtr(@dz)


 dim as integer summaryStartTime, labStartTime
 dim as ttBtn.DBUTTON summary_LabBtn => ttBtn.DBUTTON((dskW -14*18)/2, 100, 14*18, 32, "GO TO GENETICS LAB", ttBtn.DBUTTON._BTNBEHAVIOUR._useDelay, .5)
 with summary_LabBtn
 ._btnColor => ((cuint(100) shl 16) or (cuint(200) shl 8) or cuint(0) or (cuint(200) shl 24))
 ._btnMouseOverColor => ((cuint(0) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(200) shl 24))
 ._btnMouseClickColor => ((cuint(0) shl 16) or (cuint(100) shl 8) or cuint(0) or (cuint(100) shl 24))
 end with

 dim as ttBtn.DBUTTON summary_VesselBtn => ttBtn.DBUTTON((dskW -14*18)/2, 144, 14*18, 32, "GET TO CREW HANGAR", ttBtn.DBUTTON._BTNBEHAVIOUR._useDelay, .5)
 with summary_VesselBtn
 ._btnColor => ((cuint(100) shl 16) or (cuint(200) shl 8) or cuint(0) or (cuint(200) shl 24))
 ._btnMouseOverColor => ((cuint(0) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(200) shl 24))
 ._btnMouseClickColor => ((cuint(0) shl 16) or (cuint(100) shl 8) or cuint(0) or (cuint(100) shl 24))
 end with

 dim as ttBtn.DBUTTON summary_QuitBtn => ttBtn.DBUTTON((dskW -14*18)/2, 188, 14*18, 32, "   QUIT THE GAME", ttBtn.DBUTTON._BTNBEHAVIOUR._useDelay, .5)
 with summary_QuitBtn
 ._btnColor => ((cuint(200) shl 16) or (cuint(100) shl 8) or cuint(0) or (cuint(200) shl 24))


 end with
 dim as double rE => 400.0
 dim as double aE => 1.4*.275* ( 4*atn(1) )

 dim as double rA => 100.0
 dim as double aA => 225* ( 4*atn(1) )/180
 dim as single ptr xForwardPtr => new single



 dim as TT2.DBUTTON playAdnButton
 dim as TT2.DBUTTON stopAdnButton
 scope
 dim as integer imgW, imgH
 imageInfo biolitpic, imgW, imgH
 dim as integer topLeftCornerPositionX => imgW
 dim as integer topLeftCornerPositionY => dskH -imgH
 dim as integer btnWidth => 42
 dim as integer btnHeight => 8
 dim as string buttonText => "PLAY"
 dim as TT2.DBUTTON._BTNBEHAVIOUR btnBehav => TT2.DBUTTON._BTNBEHAVIOUR._useDelay
 dim as double btnDelay => .8
 playAdnButton = TT2.DBUTTON( topLeftCornerPositionX, topLeftCornerPositionY, btnWidth, btnHeight, buttonText, btnBehav, btnDelay )
 end scope
 scope
 dim as integer imgW, imgH
 imageInfo biolitpic, imgW, imgH
 dim as integer topLeftCornerPositionX => imgW
 dim as integer topLeftCornerPositionY => dskH -imgH + 32
 dim as integer btnWidth => 42
 dim as integer btnHeight => 8
 dim as string buttonText => " STOP"
 dim as TT2.DBUTTON._BTNBEHAVIOUR btnBehav => TT2.DBUTTON._BTNBEHAVIOUR._useDelay
 dim as double btnDelay => .8
 stopAdnButton = TT2.DBUTTON( topLeftCornerPositionX, topLeftCornerPositionY, btnWidth, btnHeight, buttonText, btnBehav, btnDelay )
 end scope

 dim as TT2.SORTABLEP3D sp3D
 sp3D._x => -.14*dskW
 sp3D._y => -.12*dskH
 sp3D._z => 1200
 dim as TT2.SORTABLEP3D absolute3DPosition(TT2._maxDots)
 dim as TT2.SORTABLEP3D relative3DPosition(TT2._maxDots)
 dim as TT2.GENETICUNIT geneticUnitInstance(TT2._maxDots)
 dim as double radius => 150, angle1, angle2
 dim as double angle, x, y, z, rx, ry, rz, px, py, cosAngle, sinAngle, aRot
 scope
 dim as integer index
 for angle1 =160 to 259 step 4
 for angle2 =0 to 159 step 80
 absolute3DPosition(index)._x =radius*sin(angle1*TT2._dToR)*cos(angle2*TT2._dToR)
 absolute3DPosition(index)._y =radius*sin(angle1*TT2._dToR)*sin(angle2*TT2._dToR)
 absolute3DPosition(index)._z =radius*cos(angle1*TT2._dToR)
 absolute3DPosition(index)._c = ((cuint(angle2\2) shl 16) or (cuint(int(rnd(1)*256)) shl 8) or cuint(angle1\2) or &hFF000000)
 absolute3DPosition(index)._id =index

 geneticUnitInstance(index)._sp3DPtr =@absolute3DPosition(index)
 geneticUnitInstance(index)._id =index
 geneticUnitInstance(index)._text =""
 geneticUnitInstance(index)._isQuiet =TRUE
 if index<TT2._maxDots then
 index +=1
 end if
 next angle2
 next angle1
 end scope

 dim as TT2.SORTABLEP3D sp3D_2
 sp3D_2._x => .14*dskW
 sp3D_2._y => -.12*dskH
 sp3D_2._z => 1200
 dim as TT2.SORTABLEP3D absolute3DPosition_2(TT2._maxDots)
 dim as TT2.SORTABLEP3D relative3DPosition_2(TT2._maxDots)
 dim as TT2.GENETICUNIT geneticUnitInstance_2(TT2._maxDots)
 dim as double radius_2 => 150, angle1_2, angle2_2
 dim as double angle_2, x_2, y_2, z_2, rx_2, ry_2, rz_2, px_2, py_2, cosAngle_2, sinAngle_2, aRot_2
 scope
 dim as integer index
 for angle1_2 =160 to 259 step 4
 for angle2_2 =0 to 159 step 80
 absolute3DPosition_2(index)._x =radius_2*sin(angle1_2*TT2._dToR)*cos(angle2_2*TT2._dToR)
 absolute3DPosition_2(index)._y =radius_2*sin(angle1_2*TT2._dToR)*sin(angle2_2*TT2._dToR)
 absolute3DPosition_2(index)._z =radius_2*cos(angle1_2*TT2._dToR)
 absolute3DPosition_2(index)._c =absolute3DPosition(index)._c
 absolute3DPosition_2(index)._id =index

 geneticUnitInstance_2(index)._sp3DPtr =@absolute3DPosition_2(index)
 geneticUnitInstance_2(index)._id =index
 geneticUnitInstance_2(index)._text =""
 geneticUnitInstance_2(index)._isQuiet =TRUE
 if index<TT2._maxDots then
 index +=1
 end if
 next angle2_2
 next angle1_2
 end scope

 dim as integer activeAdnNodeIndex => -1
 dim as boolean isAdnNodeClicked => FALSE
 dim as boolean isPlayAdnButtonClicked => TRUE
 dim as boolean isStopAdnButtonClicked => FALSE
 dim as double w



 dim as TT2.DBUTTON searchButton
 scope
 dim as integer topLeftCornerPositionX => dskW\2
 dim as integer topLeftCornerPositionY => dskH\2
 dim as integer btnWidth => 42
 dim as integer btnHeight => 8
 dim as string buttonText => "GENE"
 dim as TT2.DBUTTON._BTNBEHAVIOUR btnBehav => TT2.DBUTTON._BTNBEHAVIOUR._useDelay
 dim as double btnDelay => .8
 searchButton = TT2.DBUTTON( topLeftCornerPositionX, topLeftCornerPositionY, btnWidth, btnHeight, buttonText, btnBehav, btnDelay )
 with searchButton
 ._btnBorderColor = ((cuint(0) shl 16) or (cuint(100) shl 8) or cuint(100) or (cuint(200) shl 24))
 ._btnBorderMouseOverColor = ((cuint(100) shl 16) or (cuint(0) shl 8) or cuint(100) or (cuint(200) shl 24))
 ._btnBorderMouseClickColor = ((cuint(100) shl 16) or (cuint(100) shl 8) or cuint(0) or (cuint(200) shl 24))
 ._btnColor = ((cuint(0) shl 16) or (cuint(0) shl 8) or cuint(100) or (cuint(100) shl 24))
 ._btnMouseOverColor = ((cuint(0) shl 16) or (cuint(100) shl 8) or cuint(0) or (cuint(100) shl 24))
 ._btnMouseClickColor = ((cuint(0) shl 16) or (cuint(100) shl 8) or cuint(200) or (cuint(100) shl 24))
 end with
 end scope


 scope
 dim as integer topLeftCornerPositionX2 => (dskW -390)/2 + 100
 dim as integer topLeftCornerPositionY2 => 250
 dim as integer btn2Width => 50
 dim as integer btn2Height => 20
 dim as string buttonText2 => ""
 dim as TT3.DBUTTON._BTNBEHAVIOUR btn2Behav => TT3.DBUTTON._BTNBEHAVIOUR._standard
 dim as double btn2Delay => 2.0

 buttonText2 ="PICK"
 showPickupButtonPick => TT3.DBUTTON( topLeftCornerPositionX2, topLeftCornerPositionY2, btn2Width, btn2Height, buttonText2, btn2Behav, btn2Delay )
 showPickupButtonPick._text ="PICK"
 buttonText2 ="LEAVE"
 showPickupButtonCancel => TT3.DBUTTON( topLeftCornerPositionX2 + 150, topLeftCornerPositionY2, btn2Width, btn2Height, buttonText2, btn2Behav, btn2Delay )
 showPickupButtonCancel._text ="LEAVE"
 end scope

screenSet 0, 1
color , ((cuint(255) shl 16) or (cuint(0) shl 8) or cuint(255) or (cuint(255) shl 24))
cls
do
 ttRedundo.SCREENTEST.TestScreen()
 if dskW<>ttRedundo.SCREENTEST.scrW orElse dskH<>ttRedundo.SCREENTEST.scrH then
 dskW = ttRedundo.SCREENTEST.scrW
 dskH = ttRedundo.SCREENTEST.scrH
 screenRes dskW, dskH, 32, 2, fb.GFX_NO_FRAME + fb.GFX_SHAPED_WINDOW
 screenSet 0, 1
 end if
 ttredundo.INTERACTIONTEST.TestKeyboard()
 ttredundo.INTERACTIONTEST.TestMouse()

 select case SCENE.state
 case SCENE._STATE._gameStart
 screenSet 0, 1
 scope



 djRedundo.fbs_Play_Wave(testWave,1)
 djRedundo.fbs_Play_Wave(testWav2,1)


 dim as integer imgW, imgH
 imageInfo titlepic, imgW, imgH

 imageDestroy titlepic

 titlepic =CreditFBDoc.BMPlOAD(exePath() & "\pic\title_" & trim(str(4)) & ".bmp")
 put ((dskW -imgW)\2, (dskH -imgH)\2), titlepic, TRANS
 put ((dskW -imgW -340)\2, (dskH -imgH -60)\2), bioPic, TRANS
 flip

 sleep 3600

 for r as integer =1 to 20
 circle ((dskW)\2 + 60*cos(2*r), (dskH)\2 + 60*sin(2*r)), 8, ((cuint(100 + 5*r) shl 16) or (cuint(100) shl 8) or cuint(220) or (cuint(128 -r/4) shl 24)), , , , f
 sleep 20

 flip
 next r
 end scope

 summaryStartTime =TIMER
 SCENE.state =SCENE._STATE._summary
 case SCENE._STATE._summary
 screenSet 0, 1
 cls

 for i as integer =0 to 15
 line (0, 0 + i*dskH\15)-step(dskW -1, dskH -1), ((cuint(0) shl 16) or (cuint(50 + i*4) shl 8) or cuint(85) or (cuint(220) shl 24)), bf
 next i
 line (0, 0)-step(dskW -1, 40), ((cuint(20) shl 16) or (cuint(30) shl 8) or cuint(65) or (cuint(120) shl 24)), bf
 line ((dskW -390)/2, 280)-step(400,400), ((cuint(50) shl 16) or (cuint(250) shl 8) or cuint(255) or (cuint(20) shl 24)), bf
 for i as integer =0 to 5
 line ((dskW -390)/2, 280 + i * 24)-step(400,400 -i*24), ((cuint(50) shl 16) or (cuint(250 -i*4) shl 8) or cuint(55) or (cuint(20) shl 24)), bf
 next i


 summary_LabBtn.DrawButton()
 summary_VesselBtn.DrawButton()
 summary_QuitBtn.DrawButton()


 if summary_LabBtn._mouseOver then
 scope
 dim as integer imgW, imgH
 imageInfo biolitpic, imgW, imgH
 put (40, dskH -imgH*.88), biolitpic, TRANS
 end scope
 put ((dskW -360)/2,300), biohazardpic, trans
 line (2,dskH -75)-(dskW -2, dskH -2), ((cuint(20) shl 16) or (cuint(20) shl 8) or cuint(20) or (cuint(220) shl 24)), bf
 draw string (10, dskH -64), "GENETICS FACILITY", 0, starter2
 elseIf summary_VesselBtn._mouseOver then
 scope
 dim as integer imgW, imgH
 imageInfo biolitpic, imgW, imgH
 put (40, dskH -imgH*.88), biolitpic, TRANS
 end scope
 put ((dskW -360)/2,300), hangarPic, trans
 line (2,dskH -75)-(dskW -2, dskH -2), ((cuint(20) shl 16) or (cuint(20) shl 8) or cuint(20) or (cuint(220) shl 24)), bf
 draw string (10, dskH -64), "CREW HANGARS", 0, starter2
 elseIf summary_QuitBtn._mouseOver then
 scope
 dim as integer imgW, imgH
 imageInfo biolitpic, imgW, imgH
 put (40, dskH -imgH*.88), biolitpic, TRANS
 end scope
 put ((dskW -360)/2,300), quitPic, trans
 line (2,dskH -75)-(dskW -2, dskH -2), ((cuint(20) shl 16) or (cuint(20) shl 8) or cuint(20) or (cuint(220) shl 24)), bf
 draw string (10, dskH -64), "QUIT", 0, starter2
 else
 if (TIMER -summaryStartTime)>=1 then
 scope
 dim as integer imgW, imgH
 imageInfo biodarkpic, imgW, imgH
 put (40, dskH -imgH*.88), biodarkpic, TRANS
 end scope
 line (2,dskH -75)-(dskW -2, dskH -2), ((cuint(20) shl 16) or (cuint(20) shl 8) or cuint(20) or (cuint(120) shl 24)), bf
 end if
 end if


 if summary_LabBtn._mouseClick then
 put ((dskW -360)/2,300), biohazardpic, pset
 line (2,dskH -75)-(dskW -2, dskH -2), ((cuint(20) shl 16) or (cuint(20) shl 8) or cuint(20) or (cuint(220) shl 24)), bf
 draw string (10, dskH -64), "GENETICS FACILITY", 0, starter3
 screenCopy 0, 1

 SCENE.state =SCENE._STATE._laboratory
 djRedundo.fbs_Play_Wave(testWav2,1)
 for i as integer =0 to 18

 circle (100 + 40*cos(2* ( 4*atn(1) )\(i + 1) + ( 4*atn(1) )), dskH -220 -40*sin(2* ( 4*atn(1) )\(i + 1)) + ( 4*atn(1) )), 4, ((cuint(80 + 5*i) shl 16) or (cuint(100) shl 8) or cuint(220) or (cuint(128) shl 24)), , , , f
 flip
 sleep 40
 next i
 sleep 600


 adnMakeUpParam =0
 adnMakesUpStartTime =-1
 adnMakesUp =FALSE
 adnShowUp =FALSE
 labStartTime =TIMER

 end if
 if summary_VesselBtn._mouseClick then
 put ((dskW -360)/2,300), hangarPic, pset
 line (2,dskH -75)-(dskW -2, dskH -2), ((cuint(20) shl 16) or (cuint(20) shl 8) or cuint(20) or (cuint(220) shl 24)), bf
 draw string (10, dskH -64), "CREW HANGARS", 0, starter3
 screenCopy 0, 1
 sleep 800

 facingFrontDoorScene =TRUE
 SCENE.state =SCENE._STATE._travelRoom
 djRedundo.fbs_Play_Wave(testWav2,1)
 for i as integer =0 to 18

 circle (100 + 40*cos(2* ( 4*atn(1) )\(i + 1) + ( 4*atn(1) )), dskH -220 -40*sin(2* ( 4*atn(1) )\(i + 1)) + ( 4*atn(1) )), 4, ((cuint(80 + 5*i) shl 16) or (cuint(100) shl 8) or cuint(220) or (cuint(128) shl 24)), , , , f
 flip
 sleep 40
 next i
 sleep 600
 end if
 if summary_QuitBtn._mouseClick then
 put ((dskW -360)/2,300), quitPic, pset
 line (2,dskH -75)-(dskW -2, dskH -2), ((cuint(20) shl 16) or (cuint(20) shl 8) or cuint(20) or (cuint(220) shl 24)), bf
 draw string (10, dskH -64), "QUIT", 0, starter3
 screenCopy 0, 1
 sleep 800

 SCENE.state =SCENE._STATE._gameExit
 djRedundo.fbs_Play_Wave(testWav2,1)
 for i as integer =0 to 18

 circle (100 + 40*cos(2* ( 4*atn(1) )\(i + 1) + ( 4*atn(1) )), dskH -220 -40*sin(2* ( 4*atn(1) )\(i + 1)) + ( 4*atn(1) )), 4, ((cuint(180 + 2*i) shl 16) or (cuint(100) shl 8) or cuint(120) or (cuint(228) shl 24)), , , , f
 flip
 sleep 40
 next i
 sleep 600
 end if

 if (TIMER -summaryStartTime)<1 then

 scope
 dim as integer imgW, imgH
 imageInfo titlepic, imgW, imgH







 for r as integer =21 to 50
 circle ((dskW)\2 + 60*cos(4*r), (dskH)\2 + 60*sin(4*r)), 8, ((cuint(100 + 5*r) shl 16) or (cuint(200) shl 8) or cuint(220) or (cuint(128 -r/4) shl 24)), , , , f
 sleep 20

 flip
 next r
 end scope



 end if
 screenCopy 0, 1
 case SCENE._STATE._laboratory
 if playAdnButton._mouseClick then
 if not isPlayAdnButtonClicked then isPlayAdnButtonClicked =TRUE
 if isStopAdnButtonClicked then isStopAdnButtonClicked =FALSE
 end if
 if stopAdnButton._mouseClick then
 if not isStopAdnButtonClicked then isStopAdnButtonClicked =TRUE
 if isStopAdnButtonClicked then isPlayAdnButtonClicked =FALSE
 end if

 if isPlayAdnButtonClicked then
 aRot =aRot + 1.9
 aRot_2 =aRot_2 -1
 end if
 if aRot>=360 then aRot =0
 if aRot_2<=0 then aRot_2 =360
 angle =aRot*TT2._dToR
 angle_2 =aRot_2*TT2._dToR
 cosAngle =cos(angle)
 sinAngle =sin(angle)
 cosAngle_2 =cos(angle_2)
 sinAngle_2 =sin(angle_2)


 for i as integer =0 to (TT2._maxDots -1)
 x =absolute3DPosition(i)._x
 y =absolute3DPosition(i)._y
 z =absolute3DPosition(i)._z

 relative3DPosition(i)._x =(cosAngle*x) -(sinAngle*z)
 relative3DPosition(i)._y =y
 relative3DPosition(i)._z =(sinAngle*x) + (cosAngle*z)
 relative3DPosition(i)._x =relative3DPosition(i)._x -sp3D._x
 relative3DPosition(i)._y =relative3DPosition(i)._y -sp3D._y
 relative3DPosition(i)._z =relative3DPosition(i)._z -sp3D._z
 relative3DPosition(i)._c =absolute3DPosition(i)._c
 relative3DPosition(i)._id =absolute3DPosition(i)._id

 geneticUnitInstance(absolute3DPosition(i)._id)._sp3DPtr =@relative3DPosition(i)
 geneticUnitInstance(absolute3DPosition(i)._id)._id =relative3DPosition(i)._id
 if activeAdnNodeIndex=absolute3DPosition(i)._id then
 geneticUnitInstance(absolute3DPosition(i)._id)._text = str(activeAdnNodeIndex)
 else
 geneticUnitInstance(absolute3DPosition(i)._id)._text =""
 end if
 geneticUnitInstance(absolute3DPosition(i)._id)._isQuiet =TRUE
 next i

 for i as integer =0 to (TT2._maxDots -1)
 x_2 =absolute3DPosition_2(i)._x
 y_2 =absolute3DPosition_2(i)._y
 z_2 =absolute3DPosition_2(i)._z

 relative3DPosition_2(i)._x =y_2
 relative3DPosition_2(i)._y =(cosAngle_2*x_2) -(sinAngle_2*z_2)
 relative3DPosition_2(i)._z =(sinAngle_2*x_2) + (cosAngle_2*z_2)
 relative3DPosition_2(i)._x =relative3DPosition_2(i)._x -sp3D_2._x
 relative3DPosition_2(i)._y =relative3DPosition_2(i)._y -sp3D_2._y
 relative3DPosition_2(i)._z =relative3DPosition_2(i)._z -sp3D_2._z
 relative3DPosition_2(i)._c =absolute3DPosition_2(i)._c
 relative3DPosition_2(i)._id =absolute3DPosition_2(i)._id

 geneticUnitInstance_2(absolute3DPosition_2(i)._id)._sp3DPtr =@relative3DPosition_2(i)
 geneticUnitInstance_2(absolute3DPosition_2(i)._id)._id =relative3DPosition_2(i)._id
 if activeAdnNodeIndex=absolute3DPosition_2(i)._id then
 geneticUnitInstance_2(absolute3DPosition_2(i)._id)._text = str(activeAdnNodeIndex)
 else
 geneticUnitInstance_2(absolute3DPosition_2(i)._id)._text =""
 end if
 geneticUnitInstance_2(absolute3DPosition_2(i)._id)._isQuiet =TRUE
 next i


 TT2.Qsort_z( relative3DPosition(), lBound(relative3DPosition ), uBound(relative3DPosition) )
 TT2.Qsort_z( relative3DPosition_2(), lBound(relative3DPosition_2), uBound(relative3DPosition_2) )

 color 0, 0


 screenSet 0, 1
 line (0,40)-(1919,1079), ((cuint(0) shl 16) or (cuint(85) shl 8) or cuint(155) or (cuint(105) shl 24)), bf

 line ((dskW -390)/2, 280)-step(400,400), ((cuint(50) shl 16) or (cuint(250) shl 8) or cuint(255) or (cuint(12) shl 24)), bf
 for i as integer =0 to 5
 line ((dskW -390)/2, 280 + i * 24)-step(400,400 -i*24), ((cuint(50) shl 16) or (cuint(55) shl 8) or cuint(250 -i*4) or (cuint(12) shl 24)), bf
 next i

 if (TIMER -labStartTime)<2 then

 scope
 dim as integer imgW, imgH
 imageInfo lockedpanpic, imgW, imgH
 put ((TIMER -labStartTime)*90\2, 90), lockedpanpic, PSET
 end scope
 else
 scope
 dim as integer imgW, imgH
 imageInfo lockedpanpic, imgW, imgH
 put (90, 90), lockedpanpic, PSET
 end scope
 end if

 scope
 dim as integer imgW, imgH
 imageInfo labcrewpic, imgW, imgH
 put (40, dskH -imgH*.88), labcrewpic, TRANS
 end scope

 scope
 dim as integer imgW, imgH
 imageInfo modulepic, imgW, imgH
 put (220, 80), modulepic, TRANS
 put (220 + imgW, 80), modulepic, TRANS
 put (220 + 2*imgW, 80), modulepic, TRANS
 end scope

 rE +=10/TIMER


 playAdnButton.DrawButton()
 stopAdnButton.DrawButton()
 if adnShowUp then

 for i as integer =0 to TT2._maxDots -1
 if adnMakesUp then
 if (TIMER -adnMakesUpStartTime)<2 then
 adnMakeUpParam =-8000*rnd()
 else
 adnMakeUpParam =0
 adnMakesUp =FALSE
 end if
 end if

 w =1 + (relative3DPosition(i)._z/sp3D._z)
 relative3DPosition(i)._x =(relative3DPosition(i)._x -sp3D._x)/w + sp3D._x
 relative3DPosition(i)._y =(relative3DPosition(i)._y -sp3D._y)/w + sp3D._y
 relative3DPosition(i)._z =(relative3DPosition(i)._z -sp3D._z)/w + sp3D._z + adnMakeUpParam\((TIMER -adnMakesUpStartTime) + 1)


 px =(relative3DPosition(i)._x/relative3DPosition(i)._z) * 2000
 py =(relative3DPosition(i)._y/relative3DPosition(i)._z) * 2000
 circle (px + dskW/2, py + dskH/2), 8 + 2*rnd(), relative3DPosition(i)._c and ((cuint(100) shl 16) or (cuint(50) shl 8) or cuint(20 + adnMakeUpParam\((TIMER -adnMakesUpStartTime) + 1)) or (cuint(100) shl 24)), , , , f
 circle (px + dskW/2, py + dskH/2), 6, relative3DPosition(i)._c and ((cuint(100) shl 16) or (cuint(150) shl 8) or cuint(50) or (cuint(220) shl 24)), , , , f


 geneticUnitInstance(relative3DPosition(i)._id)._topLeftCornerX =px + dskW/2 -2
 geneticUnitInstance(relative3DPosition(i)._id)._topLeftCornerY =py + dskH/2 -2
 geneticUnitInstance(relative3DPosition(i)._id)._bottomRightCornerX =px + dskW/2 + 4
 geneticUnitInstance(relative3DPosition(i)._id)._bottomRightCornerY =py + dskH/2 + 4

 geneticUnitInstance(relative3DPosition(i)._id).DrawButton()


 if geneticUnitInstance(relative3DPosition(i)._id)._mouseClick then
 if not isAdnNodeClicked then isAdnNodeClicked =TRUE
 activeAdnNodeIndex =relative3DPosition(i)._id
 geneZoneXmax =300*rnd() -200*rnd() + 80
 geneZoneXmin =geneZoneXmax -100
 geneZoneYmax =300*rnd() -200*rnd() + 80
 geneZoneYmin =geneZoneYmax -100
 end if
 next i
 TT2.ShowActiveAdnNodeBox(activeAdnNodeIndex, geneticUnitInstance(), dskW, dskH)

 for i as integer =0 to TT2._maxDots -1
 if adnMakesUp then
 if (TIMER -adnMakesUpStartTime)<2 then
 adnMakeUpParam =-10000 *rnd()
 else
 adnMakeUpParam =0
 adnMakesUp =FALSE
 end if
 end if

 w =1 + (relative3DPosition_2(i)._z/sp3D_2._z)
 relative3DPosition_2(i)._x =(relative3DPosition_2(i)._x -sp3D_2._x)/w + sp3D_2._x
 relative3DPosition_2(i)._y =(relative3DPosition_2(i)._y -sp3D_2._y)/w + sp3D_2._y
 relative3DPosition_2(i)._z =(relative3DPosition_2(i)._z -sp3D_2._z)/w + sp3D_2._z + adnMakeUpParam\((TIMER -adnMakesUpStartTime) + 1)

 px_2 =(relative3DPosition_2(i)._x/relative3DPosition_2(i)._z) * 2000 -dskW\2
 py_2 =(relative3DPosition_2(i)._y/relative3DPosition_2(i)._z) * 2000 + dskH\4
 circle (px_2 + dskW/2, py_2 + dskH/2), 8 + 2*rnd(), relative3DPosition_2(i)._c and ((cuint(100) shl 16) or (cuint(50) shl 8) or cuint(50+ adnMakeUpParam\((TIMER -adnMakesUpStartTime) + 1)) or (cuint(100) shl 24)), , , , f
 circle (px_2 + dskW/2, py_2 + dskH/2), 6, relative3DPosition_2(i)._c and ((cuint(100) shl 16) or (cuint(150) shl 8) or cuint(50) or (cuint(220) shl 24)), , , , f


 geneticUnitInstance_2(relative3DPosition_2(i)._id)._topLeftCornerX =px_2 + dskW/2 -2
 geneticUnitInstance_2(relative3DPosition_2(i)._id)._topLeftCornerY =py_2 + dskH/2 -2
 geneticUnitInstance_2(relative3DPosition_2(i)._id)._bottomRightCornerX =px_2 + dskW/2 + 4
 geneticUnitInstance_2(relative3DPosition_2(i)._id)._bottomRightCornerY =py_2 + dskH/2 + 4

 geneticUnitInstance_2(relative3DPosition_2(i)._id).DrawButton()


 if geneticUnitInstance_2(relative3DPosition_2(i)._id)._mouseClick then
 if not isAdnNodeClicked then isAdnNodeClicked =TRUE
 activeAdnNodeIndex =relative3DPosition_2(i)._id
 geneZoneXmax =300*rnd() -200*rnd() + 80
 geneZoneXmin =geneZoneXmax -100
 geneZoneYmax =300*rnd() -200*rnd() + 80
 geneZoneYmin =geneZoneYmax -100
 end if
 next i
 TT2.ShowActiveAdnNodeBox(activeAdnNodeIndex, geneticUnitInstance_2(), dskW, dskH)
 end if


 line (0,dskH -24)-(dskW -1,dskH -1), ((cuint(0) shl 16) or (cuint(0) shl 8) or cuint(0) or &hFF000000), bf

 draw string (4, dskH -24 + 12), "node n_" & str(activeAdnNodeIndex) & " selected", point(4, dskH -24 + 12) or ((cuint(0) shl 16) or (cuint(90) shl 8) or cuint(90) or &hFF000000)


 searchStarted =TRUE
 if searchStarted then
 draw string (400, 108), "active key", ((cuint(100) shl 16) or (cuint(200) shl 8) or cuint(100) or (cuint(190) shl 24))
 draw string (400, 124), "" & left(pickedKeyword, 12), ((cuint(100) shl 16) or (cuint(200) shl 8) or cuint(100) or (cuint(190) shl 24))
 if adnShowUp andAlso activeAdnNodeIndex>-1 then
 draw string ((dskW -390)/2, 280), ">Node=" & trim(str(activeAdnNodeIndex)), 0, starter
 scope
 if (xx>=0) then
 x0 =xx -(xx\tileTrueWidth)*tileTrueWidth
 else
 x0 =xx + ((-xx\tileTrueWidth) + 1)*tileTrueWidth
 end if

 if (yy>=0) then
 y0 =yy -(yy\tileTrueHeight)*tileTrueHeight
 else
 y0 =yy + ((-yy\tileTrueHeight) + 1)*tileTrueHeight
 end if


 nTilesX =(400 -x0)\tileTrueWidth
 nTilesY =(320 -y0)\tileTrueHeight


 for xi =-2 to (nTilesX) + 1
 for yi =-2 to (nTilesY) + 1
 put labsceneImg, (x0 + xi*tileTrueWidth, y0 + yi*tileTrueHeight), pickerbackpic, TRANS
 next yi
 next xi

 if showCoordinate then
 scope
 var x0 =0
 var y0 =0

 if (xx>=0) then
 x0 =xx -(xx\tileW)*tileW
 else
 x0 =xx + ((-xx\tileW) + 1)*tileW
 end if

 if (yy>=0) then
 y0 =yy -(yy\tileH)*tileH
 else
 y0 =yy + ((-yy\tileH) + 1)*tileH
 end if


 var nTilesX =(400 -x0)\tileW
 var nTilesY =(320 -y0)\tileW


 for xi as long =-1 to (nTilesX) + 0
 for yi as long =-1 to (nTilesY) + 0
 line labsceneImg, (x0 + xi*tileW, y0 + yi*tileH)-step(tileW,tileH), ((cuint(100) shl 16) or (cuint(100) shl 8) or cuint(200) or &hFF000000), b
 draw string labsceneImg, (x0 + xi*tileW, 20), str(int(x0) + xi*tileW -xx), 0
 draw string labsceneImg, (20, y0 + yi*tileH), str(int(y0) + yi*tileH -yy), 0
 next yi
 next xi
 end scope
 end if

 scope
 dim as long imgW, imgH
 imageInfo pickerpic, imgW, imgH
 put labsceneImg, (400\2 -imgW\2, 320\2 -imgH\2), pickerpic, OR
 end scope

 draw string labsceneImg, (6, 6), str(xx) & ";" & str(yy), ((cuint(195) shl 16) or (cuint(205) shl 8) or cuint(0) or (cuint(100) shl 24))

 line labsceneImg, (200 + xx -geneZoneXmin, 160 + yy -geneZoneYmin)- (200 + xx -geneZoneXmax, 160 + yy -geneZoneYmax), ((cuint(100) shl 16) or (cuint(0) shl 8) or cuint(0) or (cuint(80) shl 24)), bf
 if xx>geneZoneXmin andAlso xx<geneZoneXmax andAlso yy>geneZoneYmin andAlso yy<geneZoneYmax then
 line labsceneImg, (200 + xx -geneZoneXmin, 160 + yy -geneZoneYmin)- (200 + xx -geneZoneXmax, 160 + yy -geneZoneYmax), ((cuint(0) shl 16) or (cuint(220) shl 8) or cuint(100) or (cuint(40) shl 24)), bf
 end if
 put ((dskW -390)\2, (dskH -380)\2), labsceneImg, PSET

 if xx>geneZoneXmin andAlso xx<geneZoneXmax andAlso yy>geneZoneYmin andAlso yy<geneZoneYmax then
 searchButton._topLeftCornerX =dskW\2
 searchButton._topLeftCornerY =dskH\2
 searchButton._bottomRightCornerX =searchButton._topLeftCornerX + 42
 searchButton._bottomRightCornerY =searchButton._topLeftCornerY + 18
 searchButton.DrawButton()
 end if



 if multikey(fb.SC_SPACE) and TIMER>(startDelay + .2) then
 showCoordinate =not showCoordinate
 startDelay =TIMER
 end if
 if multikey(&H1E) or multikey(&H4B) then dx +=+.1
 if multikey(&H20) or multikey(&H4D) then dx +=-.1
 if multikey(&H11) or multikey(&H48) then dy +=+.1
 if multikey(&H1F) or multikey(&H50) then dy +=-.1
 while inkey<>"": wend

 if abs(dx)>1.28 then dx =.98*sgn(dx)
 if abs(dy)>1.28 then dy =.98*sgn(dy)

 xx +=speed*dx
 yy +=speed*dy
 end scope
 end if
 end if


 bugTest.DrawBugAt(247, 110)
 if (TIMER -timeAtBugSampleButtonClicked)>.8 then
 if bugTest._bugButton._mouseClick then
 if not isBugSampleLoaded then
 timeAtBugSampleButtonClicked =TIMER
 isBugSampleLoaded =TRUE
 else
 timeAtBugSampleButtonClicked =TIMER
 isBugSampleLoaded =FALSE
 end if
 end if
 end if


 if bugTest._bugButton._mouseClick andAlso isBugSampleLoaded then
 adnMakesUpStartTime =TIMER
 adnMakesUp =TRUE
 adnShowUp =TRUE
 djRedundo.fbs_Play_Wave(testWav4,1)
 elseIf not isBugSampleLoaded then
 adnShowUp =FALSE
 end if

 if searchButton._mouseClick then
 djRedundo.fbs_Play_Wave(testWav4,1)
 draw string ((dskW -390)/2, 308), ">keyword=" & bugTest.TestForNodeContent(activeAdnNodeIndex), 0, starter





 isShowPickupDialogUp =TRUE
 end if
 if isShowPickupDialogUp then
 line ((dskW -390)/2, 180)-step(400,140), ((cuint(50) shl 16) or (cuint(200) shl 8) or cuint(195) or (cuint(120) shl 24)), bf
 line ((dskW -390)/2, 180)-step(400,200), ((cuint(150) shl 16) or (cuint(125) shl 8) or cuint(25) or (cuint(20) shl 24)), b
 line ((dskW -390)/2, 280)-step(400,0), ((cuint(150) shl 16) or (cuint(125) shl 8) or cuint(25) or (cuint(120) shl 24))
 line ((dskW -390)/2, 284)-step(400,0), ((cuint(150) shl 16) or (cuint(125) shl 8) or cuint(25) or (cuint(120) shl 24))
 draw string ((dskW -380)/2, 184), bugTest.TestForNodeContent(activeAdnNodeIndex), 0, starter2
 showPickupButtonPick.DrawButton()
 showPickupButtonCancel.DrawButton()
 if showPickupButtonPick._mouseClick then

 pickedKeyword =bugTest.TestForNodeContent(activeAdnNodeIndex)
 isShowPickupDialogUp =FALSE
 elseIf showPickupButtonCancel._mouseClick then

 isShowPickupDialogUp =FALSE
 end if
 end if

 if pickedKeyword="SCREENUNLOCK" then
 line ((dskW -590)/2, 220)-step(600,140), ((cuint(160) shl 16) or (cuint(150) shl 8) or cuint(155) or (cuint(255) shl 24)), bf
 line ((dskW -590)/2, 220)-step(600,140), ((cuint(160) shl 16) or (cuint(125) shl 8) or cuint(125) or (cuint(200) shl 24)), b
 line ((dskW -590)/2 + 2, 220 + 2)-step(600 -4,140 -4), ((cuint(60) shl 16) or (cuint(105) shl 8) or cuint(25) or (cuint(160) shl 24)), b
 line ((dskW -590)/2, 300)-step(600,0), ((cuint(150) shl 16) or (cuint(125) shl 8) or cuint(25) or (cuint(120) shl 24))
 line ((dskW -590)/2, 314)-step(600,0), ((cuint(150) shl 16) or (cuint(125) shl 8) or cuint(25) or (cuint(120) shl 24))

 draw string ((dskW -390)/2 -8, 230), "FXM: This door is locked!!!", ((cuint(0) shl 16) or (cuint(0) shl 8) or cuint(0) or &hFF000000)
 draw string ((dskW -390)/2 -8, 258), "     Go to the laboratory, and extract a SCREENLOCK from a bug", ((cuint(0) shl 16) or (cuint(0) shl 8) or cuint(0) or &hFF000000)
 draw string ((dskW -390)/2 -8, 274), "     Then bring it back, I'll be able to free our crew members!", ((cuint(0) shl 16) or (cuint(0) shl 8) or cuint(0) or &hFF000000)
 draw string ((dskW -390)/2 -8, 314), "     Hurry up, they don't have much oxygen left!", ((cuint(0) shl 16) or (cuint(0) shl 8) or cuint(0) or &hFF000000)
 scope
 put ((dskW -790)/2, 200), fxm, TRANS
 end scope

 finalDialogButton.DrawButton()
 flip

 if finalDialogButton._mouseClick then
 screenUnlockPickedUp =TRUE
 end if
 end if


 screenCopy 0, 1
 case SCENE._STATE._travelRoom
 if facingFrontDoorScene then
 facingFrontDoorSceneInitTime =TIMER
 facingFrontDoorSceneCounter +=1
 if facingFrontDoorSceneCounter=1 then
 djRedundo.fbs_Play_Wave(testWav3,2)
 else
 djRedundo.fbs_Play_Wave(testWav3,1)
 end if
 if facingFrontDoorSceneCounter>3 then
 facingFrontDoorScene =FALSE
 facingFrontDoorSceneCounter =0
 end if
 end if

 screenSet 0, 1
 line (0,40)-(1919,1079), ((cuint(190) shl 16) or (cuint(160) shl 8) or cuint(135) or (cuint(12) shl 24)), bf

 line ((dskW -390)/2, 280)-step(400,400), ((cuint(150) shl 16) or (cuint(150) shl 8) or cuint(105) or (cuint(12) shl 24)), bf
 for i as integer =0 to 5
 line ((dskW -390)/2, 280 + i * 24)-step(400,400 -i*24), ((cuint(150) shl 16) or (cuint(155) shl 8) or cuint(150 -i*4) or (cuint(42) shl 24)), bf
 next i

 if (TIMER -labStartTime)<2 then

 scope
 dim as integer imgW, imgH
 imageInfo lockedpanpic, imgW, imgH
 put ((TIMER -labStartTime)*90\2, 90), lockedpanpic, PSET
 end scope
 else
 scope
 dim as integer imgW, imgH
 imageInfo lockedpanpic, imgW, imgH
 put (90, 90), lockedpanpic, PSET
 end scope
 end if

 scope
 dim as integer imgW, imgH
 imageInfo biolitpic, imgW, imgH
 put (40, dskH -imgH*.88), biolitpic, TRANS
 end scope

 scope
 dim as integer imgW, imgH
 imageInfo modulepic, imgW, imgH
 put (220, 80), modulepic, TRANS
 put (220 + imgW, 80), modulepic, TRANS
 put (220 + 2*imgW, 80), modulepic, TRANS
 end scope

 scope
 dim as integer imgW, imgH
 imageInfo lockeddoorpic, imgW, imgH
 put ((dskW -imgW)/2, (dskH -imgH)\2 + 40), lockeddoorpic, TRANS
 end scope

 if (TIMER -facingFrontDoorSceneInitTime)>2 then
 isShowPickupDialogUp =TRUE
 end if
 if isShowPickupDialogUp then
 line ((dskW -590)/2, 220)-step(600,140), ((cuint(160) shl 16) or (cuint(150) shl 8) or cuint(155) or (cuint(255) shl 24)), bf
 line ((dskW -590)/2, 220)-step(600,140), ((cuint(160) shl 16) or (cuint(125) shl 8) or cuint(125) or (cuint(200) shl 24)), b
 line ((dskW -590)/2 + 2, 220 + 2)-step(600 -4,140 -4), ((cuint(60) shl 16) or (cuint(105) shl 8) or cuint(25) or (cuint(160) shl 24)), b
 line ((dskW -590)/2, 300)-step(600,0), ((cuint(150) shl 16) or (cuint(125) shl 8) or cuint(25) or (cuint(120) shl 24))
 line ((dskW -590)/2, 314)-step(600,0), ((cuint(150) shl 16) or (cuint(125) shl 8) or cuint(25) or (cuint(120) shl 24))

 draw string ((dskW -390)/2 -8, 230), "FXM: This door is locked!!!", ((cuint(0) shl 16) or (cuint(0) shl 8) or cuint(0) or &hFF000000)
 draw string ((dskW -390)/2 -8, 258), "     Go to the laboratory, and extract a SCREENLOCK from a bug", ((cuint(0) shl 16) or (cuint(0) shl 8) or cuint(0) or &hFF000000)
 draw string ((dskW -390)/2 -8, 274), "     Then bring it back, I'll be able to free our crew members!", ((cuint(0) shl 16) or (cuint(0) shl 8) or cuint(0) or &hFF000000)
 draw string ((dskW -390)/2 -8, 314), "     Hurry up, they don't have much oxygen left!", ((cuint(0) shl 16) or (cuint(0) shl 8) or cuint(0) or &hFF000000)
 scope
 put ((dskW -790)/2, 200), fxm, TRANS
 end scope

 doorSceneDialogButton.DrawButton()
 flip

 if doorSceneDialogButton._mouseClick then
 put ((dskW -360)/2,300), biohazardpic, pset
 line (2,dskH -75)-(dskW -2, dskH -2), ((cuint(20) shl 16) or (cuint(20) shl 8) or cuint(20) or (cuint(220) shl 24)), bf
 draw string (10, dskH -64), "GENETICS FACILITY", 0, starter3


 SCENE.state =SCENE._STATE._laboratory
 djRedundo.fbs_Play_Wave(testWav2,1)
 for i as integer =0 to 18

 circle (100 + 40*cos(2* ( 4*atn(1) )\(i + 1) + ( 4*atn(1) )), dskH -220 -40*sin(2* ( 4*atn(1) )\(i + 1)) + ( 4*atn(1) )), 4, ((cuint(80 + 5*i) shl 16) or (cuint(100) shl 8) or cuint(220) or (cuint(128) shl 24)), , , , f
 flip
 sleep 40
 next i
 sleep 600


 adnMakeUpParam =0
 adnMakesUpStartTime =-1
 adnMakesUp =FALSE
 adnShowUp =FALSE
 labStartTime =TIMER
 end if
 end if
 flip
 case SCENE._STATE._groundScenery

 case SCENE._STATE._endOfGame

 case SCENE._STATE._gameExit
 screenSet 0, 1
 draw string (10, dskH - 38), "GAME ENDED", 0, starter3
 screenCopy 0, 1
 exit do
 circle (dskW - 32, +18), 10, ((cuint(200) shl 16) or (cuint(0) shl 8) or cuint(0) or (cuint(120) shl 24)), , , , f
 screenCopy 0, 1
 end select

 screenSet 0, 1
 if (ttredundo.INTERACTIONTEST.gmBtn=1) andAlso sqr((ttRedundo.INTERACTIONTEST.gmx - (dskW - 32))^2 + (ttRedundo.INTERACTIONTEST.gmy - (+ 20))^2)<10 then
 line (2,dskH - 75)-(dskW - 2, dskH - 2), ((cuint(20) shl 16) or (cuint(20) shl 8) or cuint(20) or (cuint(220) shl 24)), bf
 draw string (10, dskH - 64), "GAME ENDED", 0, starter2
 circle (dskW - 32, +18), 10, ((cuint(200) shl 16) or (cuint(0) shl 8) or cuint(200) or (cuint(120) shl 24)), , , , f
 screenCopy 0, 1
 exit do
 end if
 circle (dskW - 32, +18), 10, ((cuint(200) shl 16) or (cuint(0) shl 8) or cuint(0) or (cuint(120) shl 24)), , , , f
 screenCopy 0, 1
 if SCENE.state<>SCENE._STATE._gameStart then
 if (TIMER - summaryStartTime)>1 then
 USERACTUATOR.ShowActuator(USERACTUATOR.mouse_free, 40)
 USERACTUATOR.ShowActuator(USERACTUATOR.mouse_free, 80)
 if ttredundo.INTERACTIONTEST.gmBtn>0 then USERACTUATOR.ShowActuator(USERACTUATOR.mouse_bip, 40)
 if ttredundo.INTERACTIONTEST.scanCode = fb.SC_UP then USERACTUATOR.ShowActuator(USERACTUATOR.up_arrow, 80)
 if ttredundo.INTERACTIONTEST.scanCode = fb.SC_DOWN then USERACTUATOR.ShowActuator(USERACTUATOR.down_arrow, 80)
 if ttredundo.INTERACTIONTEST.scanCode = fb.SC_LEFT then USERACTUATOR.ShowActuator(USERACTUATOR.left_arrow, 80)
 if ttredundo.INTERACTIONTEST.scanCode = fb.SC_RIGHT then USERACTUATOR.ShowActuator(USERACTUATOR.right_arrow, 80)
 flip
 end if
 end if
 sleep 15
 TimeBeginPeriod
 sleep 1
 TimeEndPeriod
loop until inkey()=chr(27)



getKey()


